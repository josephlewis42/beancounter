// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  assert(TOTAL_MEMORY <= Math.pow(2, 30)); // 2^30==1GB is a practical maximum - 2^31 is already close to possible negative numbers etc.

  var start = Date.now();

  if (ArrayBuffer.transfer) {
    buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
  } else {
    var oldHEAP8 = HEAP8;
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }
  var success = _emscripten_replace_memory(buffer);
  assert(success);

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 799392;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([96,234,0,0,0,0,0,0,14,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,92,91,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,155,43,161,134,155,132,246,60,130,118,73,104,194,37,44,61,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([83,101,99,117,114,101,32,0,109,52,32,0,0,0,0,0,77,97,116,104,111,109,97,116,105,99,32,118,101,114,115,105,111,110,32,37,115,10,0,0,49,54,46,48,46,53,0,0,67,111,112,121,114,105,103,104,116,32,38,99,111,112,121,59,32,49,57,56,55,45,50,48,49,50,32,71,101,111,114,103,101,32,71,101,115,115,108,101,105,110,32,73,73,46,10,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,56,55,45,50,48,49,50,32,71,101,111,114,103,101,32,71,101,115,115,108,101,105,110,32,73,73,46,10,0,0,0,0,37,100,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,97,118,97,105,108,97,98,108,101,32,105,110,32,82,65,77,59,32,37,108,100,32,109,101,103,97,98,121,116,101,115,32,112,101,114,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,46,10,0,37,100,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,97,118,97,105,108,97,98,108,101,32,105,110,32,82,65,77,59,32,37,108,100,32,107,105,108,111,98,121,116,101,115,32,112,101,114,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,46,10,0,37,115,10,0,0,0,0,0,80,108,101,97,115,101,32,114,101,112,111,114,116,32,116,104,105,115,32,98,117,103,32,116,111,32,116,104,101,32,109,97,105,110,116,97,105,110,101,114,115,44,10,0,0,0,0,0,97,108,111,110,103,32,119,105,116,104,32,116,104,101,32,101,110,116,114,121,32,115,101,113,117,101,110,99,101,32,116,104,97,116,32,99,97,117,115,101,100,32,105,116,46,10,0,0,68,111,109,97,105,110,32,101,114,114,111,114,32,105,110,32,99,111,110,115,116,97,110,116,46,0,0,0,0,0,0,0,70,108,111,97,116,105,110,103,32,112,111,105,110,116,32,99,111,110,115,116,97,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,40,99,97,110,39,116,32,109,97,108,108,111,99,40,51,41,41,46,0,0,0,0,0,0,0,0,77,101,109,111,114,121,32,105,115,32,101,120,104,97,117,115,116,101,100,46,0,0,0,0,97,110,115,119,101,114,0,0,79,117,116,32,111,102,32,102,114,101,101,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,46,0,0,0,0,83,117,98,115,116,105,116,117,116,105,110,103,32,105,110,116,101,103,101,114,32,118,97,114,105,97,98,108,101,32,119,105,116,104,32,110,111,110,45,105,110,116,101,103,101,114,32,101,120,112,114,101,115,115,105,111,110,46,0,0,0,0,0,0,73,110,118,97,108,105,100,32,101,120,112,114,101,115,115,105,111,110,32,108,101,110,103,116,104,32,105,110,32,99,97,108,108,32,116,111,32,109,105,110,95,108,101,118,101,108,40,41,46,0,0,0,0,0,0,0,35,37,43,100,0,0,0,0,69,110,116,101,114,32,118,97,114,105,97,98,108,101,58,32,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,101,113,117,97,116,105,111,110,32,110,117,109,98,101,114,46,0,0,0,0,0,0,0,0,67,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,32,105,115,32,101,109,112,116,121,46,0,0,0,0,0,0,0,0,69,113,117,97,116,105,111,110,32,115,112,97,99,101,32,105,115,32,101,109,112,116,121,46,0,0,0,0,0,0,0,0,67,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,110,117,109,98,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,59,32,114,101,115,101,116,32,116,111,32,49,46,0,0,0,0,0,0,0,78,111,32,99,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,46,0,0,0,0,0,0,76,105,98,114,97,114,121,32,117,115,97,103,101,32,101,114,114,111,114,46,32,73,110,112,117,116,32,114,101,113,117,101,115,116,101,100,44,32,112,111,115,115,105,98,108,121,32,100,117,101,32,116,111,32,109,105,115,115,105,110,103,32,99,111,109,109,97,110,100,45,108,105,110,101,32,97,114,103,117,109,101,110,116,46,0,0,0,0,97,108,108,0,0,0,0,0,73,110,118,97,108,105,100,32,101,113,117,97,116,105,111,110,32,110,117,109,98,101,114,32,40,111,117,116,32,111,102,32,114,97,110,103,101,41,46,0,78,111,32,101,120,112,114,101,115,115,105,111,110,115,32,100,101,102,105,110,101,100,32,105,110,32,115,112,101,99,105,102,105,101,100,32,114,97,110,103,101,46,0,0,0,0,0,0,10,69,114,114,111,114,58,32,34,37,115,34,32,110,111,116,32,114,101,113,117,105,114,101,100,32,111,110,32,105,110,112,117,116,32,108,105,110,101,46,10,0,0,0,0,0,0,0,69,120,116,114,97,32,99,104,97,114,97,99,116,101,114,115,32,111,114,32,117,110,114,101,99,111,103,110,105,122,101,100,32,97,114,103,117,109,101,110,116,46,0,0,0,0,0,0,68,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,46,0,0,0,0,0,0,0,72,79,77,69,0,0,0,0,37,115,47,37,115,0,0,0,46,109,97,116,104,111,109,97,116,105,99,114,99,0,0,0,114,0,0,0,0,0,0,0,76,111,97,100,105,110,103,32,115,116,97,114,116,117,112,32,115,101,116,32,111,112,116,105,111,110,115,32,102,114,111,109,32,34,37,115,34,46,10,0,37,115,0,0,0,0,0,0,83,111,108,118,105,110,103,32,114,101,113,117,105,114,101,115,32,97,110,32,101,113,117,97,116,105,111,110,46,0,0,0,83,111,108,118,101,32,102,97,105,108,101,100,32,102,111,114,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,32,35,37,100,46,10,0,0,0,69,120,112,114,101,115,115,105,111,110,32,116,111,111,32,108,97,114,103,101,46,0,0,0,67,97,110,32,111,110,108,121,32,115,111,108,118,101,32,102,111,114,32,97,32,115,105,110,103,108,101,32,118,97,114,105,97,98,108,101,32,111,114,32,102,111,114,32,48,44,32,112,111,115,115,105,98,108,121,32,114,97,105,115,101,100,32,116,111,32,97,32,112,111,119,101,114,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,115,111,108,97,116,101,32,114,111,111,116,46,0,83,111,108,118,101,32,118,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,46,0,0,0,0,0,0,0,84,104,105,115,32,101,113,117,97,116,105,111,110,32,105,115,32,97,110,32,105,100,101,110,116,105,116,121,46,0,0,0,84,104,105,115,32,101,113,117,97,116,105,111,110,32,105,115,32,105,110,100,101,112,101,110,100,101,110,116,32,111,102,32,116,104,101,32,115,111,108,118,101,32,118,97,114,105,97,98,108,101,46,0,0,0,0,0,84,104,101,114,101,32,97,114,101,32,110,111,32,112,111,115,115,105,98,108,101,32,118,97,108,117,101,115,32,102,111,114,32,116,104,101,32,115,111,108,118,101,32,118,97,114,105,97,98,108,101,46,0,0,0,0,103,95,111,102,95,102,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,111,112,101,114,97,110,100,112,46,0,0,84,104,101,114,101,32,97,114,101,32,110,111,32,112,111,115,115,105,98,108,101,32,115,111,108,117,116,105,111,110,115,46,0,0,0,0,0,0,0,0,37,115,95,97,110,121,37,46,48,100,0,0,0,0,0,0,105,110,116,101,103,101,114,0,0,0,0,0,0,0,0,0,32,32,32,32,77,97,116,104,111,109,97,116,105,99,32,99,111,109,112,117,116,101,114,32,97,108,103,101,98,114,97,32,115,121,115,116,101,109,10,32,32,32,32,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,56,55,45,50,48,49,50,32,71,101,111,114,103,101,32,71,101,115,115,108,101,105,110,32,73,73,10,10,84,104,105,115,32,108,105,98,114,97,114,121,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,59,32,121,111,117,32,99,97,110,32,114,101,100,105,115,116,114,105,98,117,116,101,32,105,116,32,97,110,100,47,111,114,10,109,111,100,105,102,121,32,105,116,32,117,110,100,101,114,32,116,104,101,32,116,101,114,109,115,32,111,102,32,116,104,101,32,71,78,85,32,76,101,115,115,101,114,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,10,76,105,99,101,110,115,101,32,97,115,32,112,117,98,108,105,115,104,101,100,32,98,121,32,116,104,101,32,70,114,101,101,32,83,111,102,116,119,97,114,101,32,70,111,117,110,100,97,116,105,111,110,59,32,101,105,116,104,101,114,10,118,101,114,115,105,111,110,32,50,46,49,32,111,102,32,116,104,101,32,76,105,99,101,110,115,101,44,32,111,114,32,40,97,116,32,121,111,117,114,32,111,112,116,105,111,110,41,32,97,110,121,32,108,97,116,101,114,32,118,101,114,115,105,111,110,46,10,10,84,104,105,115,32,108,105,98,114,97,114,121,32,105,115,32,100,105,115,116,114,105,98,117,116,101,100,32,105,110,32,116,104,101,32,104,111,112,101,32,116,104,97,116,32,105,116,32,119,105,108,108,32,98,101,32,117,115,101,102,117,108,44,10,98,117,116,32,87,73,84,72,79,85,84,32,65,78,89,32,87,65,82,82,65,78,84,89,59,32,119,105,116,104,111,117,116,32,101,118,101,110,32,116,104,101,32,105,109,112,108,105,101,100,32,119,97,114,114,97,110,116,121,32,111,102,10,77,69,82,67,72,65,78,84,65,66,73,76,73,84,89,32,111,114,32,70,73,84,78,69,83,83,32,70,79,82,32,65,32,80,65,82,84,73,67,85,76,65,82,32,80,85,82,80,79,83,69,46,32,32,83,101,101,32,116,104,101,32,71,78,85,10,76,101,115,115,101,114,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,32,102,111,114,32,109,111,114,101,32,100,101,116,97,105,108,115,46,10,10,89,111,117,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,99,101,105,118,101,100,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,71,78,85,32,76,101,115,115,101,114,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,10,76,105,99,101,110,115,101,32,97,108,111,110,103,32,119,105,116,104,32,116,104,105,115,32,108,105,98,114,97,114,121,59,32,105,102,32,110,111,116,44,32,119,114,105,116,101,32,116,111,32,116,104,101,32,70,114,101,101,32,83,111,102,116,119,97,114,101,10,70,111,117,110,100,97,116,105,111,110,44,32,73,110,99,46,44,32,53,49,32,70,114,97,110,107,108,105,110,32,83,116,114,101,101,116,44,32,70,105,102,116,104,32,70,108,111,111,114,44,32,66,111,115,116,111,110,44,32,77,65,32,32,48,50,49,49,48,45,49,51,48,49,32,32,85,83,65,10,10,84,104,101,32,102,117,108,108,32,116,101,120,116,32,111,102,32,116,104,105,115,32,108,105,99,101,110,115,101,32,119,105,116,104,32,100,101,116,97,105,108,115,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,116,104,101,32,102,105,108,101,32,34,67,79,80,89,73,78,71,34,10,105,110,32,116,104,101,32,77,97,116,104,111,109,97,116,105,99,32,115,111,117,114,99,101,32,100,105,115,116,114,105,98,117,116,105,111,110,44,32,111,98,116,97,105,110,97,98,108,101,32,102,114,111,109,32,34,119,119,119,46,109,97,116,104,111,109,97,116,105,99,46,111,114,103,34,59,10,65,108,108,32,77,97,116,104,111,109,97,116,105,99,32,115,111,102,116,119,97,114,101,32,97,110,100,32,97,115,115,111,99,105,97,116,101,100,32,102,105,108,101,115,32,40,101,120,99,101,112,116,32,102,111,114,32,116,104,101,32,100,111,99,117,109,101,110,116,97,116,105,111,110,41,10,97,114,101,32,112,117,98,108,105,115,104,101,100,32,117,110,100,101,114,32,116,104,105,115,32,108,105,99,101,110,115,101,46,32,32,84,104,101,32,77,97,116,104,111,109,97,116,105,99,32,100,111,99,117,109,101,110,116,97,116,105,111,110,32,105,115,32,108,105,99,101,110,115,101,100,10,117,110,100,101,114,32,116,104,101,32,71,78,85,32,70,114,101,101,32,68,111,99,117,109,101,110,116,97,116,105,111,110,32,76,105,99,101,110,115,101,32,40,71,70,68,76,41,32,118,101,114,115,105,111,110,32,49,46,51,44,10,119,105,116,104,32,110,111,32,73,110,118,97,114,105,97,110,116,32,83,101,99,116,105,111,110,115,44,32,110,111,32,70,114,111,110,116,45,67,111,118,101,114,32,84,101,120,116,115,44,32,97,110,100,32,110,111,32,66,97,99,107,45,67,111,118,101,114,32,84,101,120,116,115,44,10,115,111,32,105,116,32,99,97,110,32,98,101,32,101,97,115,105,108,121,32,112,117,98,108,105,115,104,101,100,44,32,99,111,114,114,101,99,116,101,100,44,32,97,110,100,32,116,114,97,110,115,108,97,116,101,100,32,98,121,32,97,110,121,111,110,101,46,10,10,67,104,105,101,102,32,97,117,116,104,111,114,32,97,110,100,32,99,111,112,121,114,105,103,104,116,32,104,111,108,100,101,114,32,99,111,110,116,97,99,116,32,105,110,102,111,114,109,97,116,105,111,110,58,10,10,32,32,101,109,97,105,108,58,10,32,32,32,32,103,101,115,115,108,101,105,110,64,109,97,116,104,111,109,97,116,105,99,46,111,114,103,32,111,114,10,32,32,32,32,103,101,111,114,103,101,103,101,115,115,108,101,105,110,64,103,109,97,105,108,46,99,111,109,10,10,32,32,112,111,115,116,97,108,32,97,100,100,114,101,115,115,58,10,32,32,32,32,71,101,111,114,103,101,32,71,101,115,115,108,101,105,110,32,73,73,10,32,32,32,32,80,46,79,46,32,66,111,120,32,50,50,52,10,32,32,32,32,76,97,110,115,105,110,103,44,32,78,101,119,32,89,111,114,107,32,32,49,52,56,56,50,45,48,50,50,52,10,32,32,32,32,85,83,65,10,10,77,111,115,116,32,111,116,104,101,114,115,32,119,104,111,32,104,97,118,101,32,107,105,110,100,108,121,32,99,111,110,116,114,105,98,117,116,101,100,32,119,111,114,107,105,110,103,32,99,111,100,101,32,111,114,32,103,111,111,100,32,105,100,101,97,115,32,116,111,10,77,97,116,104,111,109,97,116,105,99,32,97,114,101,32,108,105,115,116,101,100,32,105,110,32,116,104,101,32,102,105,108,101,115,32,34,65,85,84,72,79,82,83,34,32,97,110,100,32,34,99,104,97,110,103,101,115,46,116,120,116,34,46,10,71,114,101,97,116,32,109,101,114,105,116,32,105,115,32,103,105,118,101,110,32,116,111,32,112,101,111,112,108,101,32,116,104,97,116,32,114,101,112,111,114,116,32,98,117,103,115,44,32,105,110,32,116,104,101,32,102,105,108,101,32,34,99,104,97,110,103,101,115,46,116,120,116,34,46,10,84,104,105,115,32,109,101,97,110,115,32,121,111,117,32,119,105,108,108,32,97,108,115,111,32,115,104,111,119,32,117,112,32,105,110,32,116,104,101,32,102,105,108,101,32,34,78,69,87,83,34,46,10,84,111,32,114,101,112,111,114,116,32,97,32,98,117,103,44,32,115,105,109,112,108,121,32,101,109,97,105,108,32,116,104,101,32,97,117,116,104,111,114,44,32,111,114,32,117,115,101,32,116,104,101,32,98,117,103,32,114,101,112,111,114,116,105,110,103,32,102,97,99,105,108,105,116,121,10,115,104,111,119,110,32,119,105,116,104,32,34,104,101,108,112,32,98,117,103,115,34,46,10,0,0,8,169,0,0,0,0,0,0,59,32,69,120,97,109,112,108,101,32,49,58,10,0,0,0,59,32,72,101,114,101,32,116,104,101,32,100,101,114,105,118,97,116,105,118,101,32,111,102,32,116,104,101,32,97,98,115,111,108,117,116,101,32,118,97,108,117,101,32,102,117,110,99,116,105,111,110,32,105,115,32,99,111,109,112,117,116,101,100,46,10,0,0,0,0,0,0,59,32,69,120,112,114,101,115,115,105,111,110,115,32,97,114,101,32,101,110,116,101,114,101,100,32,98,121,32,106,117,115,116,32,116,121,112,105,110,103,32,116,104,101,109,32,105,110,58,10,0,0,0,0,0,0,124,120,124,32,59,32,84,104,101,32,97,98,115,111,108,117,116,101,32,118,97,108,117,101,32,111,102,32,120,10,0,0,100,101,114,105,118,97,116,105,118,101,32,59,32,84,104,101,32,114,101,115,117,108,116,32,103,105,118,101,115,32,116,104,101,32,115,105,103,110,32,111,102,32,120,58,10,0,0,0,112,97,117,115,101,10,0,0,114,101,112,101,97,116,32,101,99,104,111,32,45,10,0,0,59,32,69,120,97,109,112,108,101,32,50,58,10,0,0,0,59,32,69,120,112,97,110,100,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,116,111,32,112,111,108,121,110,111,109,105,97,108,32,102,111,114,109,44,32,116,104,101,110,32,114,101,102,97,99,116,111,114,32,97,110,100,32,100,105,102,102,101,114,101,110,116,105,97,116,101,58,10,0,0,0,0,40,120,43,121,43,122,41,94,51,10,0,0,0,0,0,0,101,120,112,97,110,100,32,99,111,117,110,116,32,59,32,69,120,112,97,110,100,32,97,110,100,32,99,111,117,110,116,32,116,104,101,32,114,101,115,117,108,116,105,110,103,32,110,117,109,98,101,114,32,111,102,32,116,101,114,109,115,58,10,0,115,105,109,112,108,105,102,121,32,59,32,114,101,102,97,99,116,111,114,58,10,0,0,0,100,101,114,105,118,97,116,105,118,101,32,120,32,59,32,104,101,114,101,32,105,115,32,116,104,101,32,100,101,114,105,118,97,116,105,118,101,44,32,119,105,116,104,32,114,101,115,112,101,99,116,32,116,111,32,120,58,10,0,0,0,0,0,0,101,120,112,97,110,100,32,99,111,117,110,116,32,59,32,97,110,100,32,105,116,115,32,116,101,114,109,32,99,111,117,110,116,44,32,119,104,101,110,32,101,120,112,97,110,100,101,100,58,10,0,0,0,0,0,0,120,176,0,0,136,176,0,0,208,176,0,0,8,177,0,0,40,177,0,0,88,177,0,0,96,177,0,0,112,177,0,0,128,177,0,0,208,177,0,0,224,177,0,0,88,177,0,0,32,178,0,0,56,178,0,0,120,178,0,0,0,0,0,0,59,32,84,114,105,97,110,103,108,101,32,97,114,101,97,44,32,34,98,34,32,105,115,32,116,104,101,32,34,98,97,115,101,34,32,115,105,100,101,58,10,0,0,0,0,0,0,0,116,114,105,97,110,103,108,101,95,97,114,101,97,32,61,32,98,42,104,101,105,103,104,116,47,50,10,0,0,0,0,0,59,32,72,101,114,101,32,105,115,32,72,101,114,111,110,39,115,32,102,111,114,109,117,108,97,32,102,111,114,32,116,104,101,32,97,114,101,97,32,111,102,32,97,110,121,32,116,114,105,97,110,103,108,101,10,0,59,32,103,105,118,101,110,32,97,108,108,32,116,104,114,101,101,32,115,105,100,101,32,108,101,110,103,116,104,115,32,40,34,97,34,44,32,34,98,34,44,32,97,110,100,32,34,99,34,41,58,10,0,0,0,0,116,114,105,97,110,103,108,101,95,97,114,101,97,32,61,32,40,40,40,97,32,43,32,98,32,43,32,99,41,42,40,97,32,45,32,98,32,43,32,99,41,42,40,97,32,43,32,98,32,45,32,99,41,42,40,98,32,45,32,97,32,43,32,99,41,41,94,40,49,47,50,41,41,47,52,10,0,0,0,0,10,0,0,0,0,0,0,0,59,32,82,101,99,116,97,110,103,108,101,32,111,102,32,108,101,110,103,116,104,32,34,108,34,32,97,110,100,32,119,105,100,116,104,32,34,119,34,58,10,0,0,0,0,0,0,0,114,101,99,116,97,110,103,108,101,95,97,114,101,97,32,61,32,108,42,119,10,0,0,0,114,101,99,116,97,110,103,108,101,95,112,101,114,105,109,101,116,101,114,32,61,32,50,42,108,32,43,32,50,42,119,10,0,0,0,0,0,0,0,0,59,32,84,114,97,112,101,122,111,105,100,32,111,102,32,112,97,114,97,108,108,101,108,32,115,105,100,101,115,32,34,97,34,32,97,110,100,32,34,98,34,44,10,0,0,0,0,0,59,32,97,110,100,32,116,104,101,32,34,100,105,115,116,97,110,99,101,34,32,98,101,116,119,101,101,110,32,116,104,101,109,58,10,0,0,0,0,0,116,114,97,112,101,122,111,105,100,95,97,114,101,97,32,61,32,100,105,115,116,97,110,99,101,42,40,97,32,43,32,98,41,47,50,10,0,0,0,0,59,32,67,105,114,99,108,101,32,111,102,32,114,97,100,105,117,115,32,34,114,34,58,10,0,0,0,0,0,0,0,0,99,105,114,99,108,101,95,97,114,101,97,32,61,32,112,105,42,114,94,50,10,0,0,0,99,105,114,99,108,101,95,112,101,114,105,109,101,116,101,114,32,61,32,50,42,112,105,42,114,10,0,0,0,0,0,0,59,32,51,68,32,114,101,99,116,97,110,103,117,108,97,114,32,115,111,108,105,100,32,111,102,32,108,101,110,103,116,104,32,34,108,34,44,32,119,105,100,116,104,32,34,119,34,44,32,97,110,100,32,104,101,105,103,104,116,32,34,104,34,58,10,0,0,0,0,0,0,0,98,114,105,99,107,95,118,111,108,117,109,101,32,61,32,108,42,119,42,104,10,0,0,0,98,114,105,99,107,95,115,117,114,102,97,99,101,95,97,114,101,97,32,61,32,50,42,108,42,119,32,43,32,50,42,108,42,104,32,43,32,50,42,119,42,104,10,0,0,0,0,0,59,32,51,68,32,115,112,104,101,114,101,32,111,102,32,114,97,100,105,117,115,32,34,114,34,58,10,0,0,0,0,0,115,112,104,101,114,101,95,118,111,108,117,109,101,32,61,32,52,47,51,42,112,105,42,114,94,51,10,0,0,0,0,0,115,112,104,101,114,101,95,115,117,114,102,97,99,101,95,97,114,101,97,32,61,32,52,42,112,105,42,114,94,50,10,0,59,32,67,111,110,118,101,120,32,50,68,32,112,111,108,121,103,111,110,32,119,105,116,104,32,115,116,114,97,105,103,104,116,32,115,105,100,101,115,44,10,0,0,0,0,0,0,0,59,32,115,117,109,32,111,102,32,97,108,108,32,105,110,116,101,114,105,111,114,32,97,110,103,108,101,115,32,102,111,114,109,117,108,97,32,105,110,32,100,101,103,114,101,101,44,32,114,97,100,105,97,110,44,32,97,110,100,32,103,114,97,100,105,97,110,32,117,110,105,116,115,58,10,0,0,0,0,0,115,117,109,95,100,101,103,114,101,101,115,32,61,32,40,115,105,100,101,115,32,45,32,50,41,42,49,56,48,10,0,0,115,117,109,95,114,97,100,105,97,110,115,32,61,32,40,115,105,100,101,115,32,45,32,50,41,42,112,105,10,0,0,0,115,117,109,95,103,114,97,100,115,32,61,32,40,115,105,100,101,115,32,45,32,50,41,42,49,56,48,42,49,48,47,57,32,59,32,82,97,114,101,108,121,32,117,115,101,100,32,103,114,97,100,105,97,110,32,102,111,114,109,117,108,97,46,10,0,0,0,0,0,0,0,0,59,32,34,115,105,100,101,115,34,32,105,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,115,105,100,101,115,32,111,102,32,97,110,121,32,99,111,110,118,101,120,32,50,68,32,112,111,108,121,103,111,110,46,10,0,0,0,0,0,59,32,67,111,110,118,101,120,32,109,101,97,110,115,32,116,104,97,116,32,97,108,108,32,105,110,116,101,114,105,111,114,32,97,110,103,108,101,115,32,97,114,101,32,108,101,115,115,32,116,104,97,110,32,49,56,48,32,100,101,103,114,101,101,115,46,10,0,0,0,0,0,59,32,84,121,112,101,32,34,101,108,105,109,32,115,105,100,101,115,34,32,116,111,32,103,101,116,32,116,104,101,32,114,97,100,105,97,110,115,47,100,101,103,114,101,101,115,47,103,114,97,100,115,32,99,111,110,118,101,114,115,105,111,110,32,102,111,114,109,117,108,97,115,46,10,0,0,0,0,0,0,240,178,0,0,32,179,0,0,64,179,0,0,120,179,0,0,176,179,0,0,0,180,0,0,8,180,0,0,56,180,0,0,80,180,0,0,0,180,0,0,120,180,0,0,168,180,0,0,208,180,0,0,0,180,0,0,248,180,0,0,24,181,0,0,48,181,0,0,0,180,0,0,80,181,0,0,152,181,0,0,176,181,0,0,0,180,0,0,224,181,0,0,0,182,0,0,32,182,0,0,0,180,0,0,64,182,0,0,112,182,0,0,192,182,0,0,224,182,0,0,0,183,0,0,72,183,0,0,136,183,0,0,208,183,0,0,0,0,0,0,0,0,0,0,59,32,84,101,109,112,101,114,97,116,117,114,101,10,0,0,102,97,104,114,101,110,104,101,105,116,32,61,32,40,57,42,99,101,108,115,105,117,115,47,53,41,32,43,32,51,50,10,0,0,0,0,0,0,0,0,107,101,108,118,105,110,32,61,32,99,101,108,115,105,117,115,32,43,32,50,55,51,46,49,53,10,0,0,0,0,0,0,59,32,68,105,115,116,97,110,99,101,10,0,0,0,0,0,105,110,99,104,101,115,32,61,32,99,101,110,116,105,109,101,116,101,114,115,47,50,46,53,52,10,0,0,0,0,0,0,109,105,108,101,115,32,61,32,107,105,108,111,109,101,116,101,114,115,47,49,46,54,48,57,51,52,52,10,0,0,0,0,59,32,87,101,105,103,104,116,10,0,0,0,0,0,0,0,112,111,117,110,100,115,32,61,32,107,105,108,111,103,114,97,109,115,47,48,46,52,53,51,53,57,50,51,55,10,0,0,176,184,0,0,192,184,0,0,232,184,0,0,8,185,0,0,24,185,0,0,56,185,0,0,88,185,0,0,104,185,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,78,111,32,99,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,116,111,32,109,97,110,105,112,117,108,97,116,101,46,0,0,0,0,0,0,83,121,110,116,97,120,32,101,114,114,111,114,46,0,0,0,61,0,0,0,0,0,0,0,97,110,115,119,101,114,0,0,0,0,0,0,0,0,0,0,86,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,32,105,110,32,97,110,121,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,46,0,0,0,0,0,0,0,69,113,117,97,116,105,111,110,32,110,117,109,98,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,0,0,114,101,112,101,97,116,0,0,88,216,0,0,0,0,0,0,1,0,0,0,104,216,0,0,136,216,0,0,192,216,0,0,248,216,0,0,0,0,0,0,2,0,0,0,104,216,0,0,0,217,0,0,72,217,0,0,128,217,0,0,0,0,0,0,3,0,0,0,136,217,0,0,208,217,0,0,16,218,0,0,72,218,0,0,0,0,0,0,4,0,0,0,80,218,0,0,144,218,0,0,208,218,0,0,16,219,0,0,0,0,0,0,5,0,0,0,24,219,0,0,64,219,0,0,128,219,0,0,192,219,0,0,208,219,0,0,6,0,0,0,224,219,0,0,16,220,0,0,0,0,0,0,72,220,0,0,0,0,0,0,7,0,0,0,80,220,0,0,144,220,0,0,0,0,0,0,208,220,0,0,0,0,0,0,8,0,0,0,216,220,0,0,0,221,0,0,64,221,0,0,120,221,0,0,0,0,0,0,9,0,0,0,128,221,0,0,136,221,0,0,184,221,0,0,232,221,0,0,0,0,0,0,10,0,0,0,248,221,0,0,40,222,0,0,184,221,0,0,104,222,0,0,0,0,0,0,11,0,0,0,112,222,0,0,136,222,0,0,200,222,0,0,248,222,0,0,0,223,0,0,12,0,0,0,8,223,0,0,80,223,0,0,0,0,0,0,152,223,0,0,0,0,0,0,13,0,0,0,160,223,0,0,192,223,0,0,8,224,0,0,56,224,0,0,0,0,0,0,14,0,0,0,72,224,0,0,128,224,0,0,184,221,0,0,192,224,0,0,200,224,0,0,15,0,0,0,208,224,0,0,240,224,0,0,0,0,0,0,24,225,0,0,0,0,0,0,16,0,0,0,40,225,0,0,56,225,0,0,128,225,0,0,152,225,0,0,168,225,0,0,17,0,0,0,184,225,0,0,0,226,0,0,0,0,0,0,64,226,0,0,0,0,0,0,18,0,0,0,72,226,0,0,96,226,0,0,168,226,0,0,216,226,0,0,0,0,0,0,19,0,0,0,224,226,0,0,248,226,0,0,40,227,0,0,80,227,0,0,0,0,0,0,20,0,0,0,88,227,0,0,160,227,0,0,232,227,0,0,32,228,0,0,0,0,0,0,21,0,0,0,48,228,0,0,112,228,0,0,168,228,0,0,224,228,0,0,0,0,0,0,22,0,0,0,240,228,0,0,8,229,0,0,0,0,0,0,72,229,0,0,0,0,0,0,23,0,0,0,128,221,0,0,80,229,0,0,0,0,0,0,152,229,0,0,0,0,0,0,24,0,0,0,160,223,0,0,160,229,0,0,216,229,0,0,240,229,0,0,0,0,0,0,25,0,0,0,248,229,0,0,24,230,0,0,96,230,0,0,160,230,0,0,0,0,0,0,26,0,0,0,40,225,0,0,168,230,0,0,232,230,0,0,8,231,0,0,0,0,0,0,27,0,0,0,16,231,0,0,48,231,0,0,184,221,0,0,112,231,0,0,0,0,0,0,28,0,0,0,120,231,0,0,152,231,0,0,200,231,0,0,0,232,0,0,0,0,0,0,29,0,0,0,8,232,0,0,24,232,0,0,72,232,0,0,96,232,0,0,0,0,0,0,30,0,0,0,104,232,0,0,136,232,0,0,192,232,0,0,248,232,0,0,0,0,0,0,31,0,0,0,8,233,0,0,80,233,0,0,208,218,0,0,120,233,0,0,0,0,0,0,32,0,0,0,128,233,0,0,200,233,0,0,8,234,0,0,80,234,0,0,0,0,0,0,33,0,0,0,160,223,0,0,88,234,0,0,152,234,0,0,184,234,0,0,0,0,0,0,34,0,0,0,192,234,0,0,232,234,0,0,0,0,0,0,40,235,0,0,56,235,0,0,35,0,0,0,64,235,0,0,128,235,0,0,0,0,0,0,184,235,0,0,0,0,0,0,36,0,0,0,200,235,0,0,0,236,0,0,64,236,0,0,88,236,0,0,0,0,0,0,37,0,0,0,96,236,0,0,112,236,0,0,0,0,0,0,67,111,109,109,97,110,100,45,108,105,110,101,32,116,111,111,32,108,111,110,103,46,0,0,97,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,67,97,110,39,116,32,111,112,101,110,32,114,101,100,105,114,101,99,116,101,100,32,111,117,116,112,117,116,32,102,105,108,101,32,102,111,114,32,119,114,105,116,105,110,103,46,0,0,70,111,108,108,111,119,32,34,114,101,112,101,97,116,34,32,119,105,116,104,32,97,32,99,111,109,109,97,110,100,32,116,111,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,114,101,112,101,97,116,46,0,37,100,37,115,0,0,0,0,38,109,105,110,117,115,59,38,103,116,59,32,0,0,0,0,60,98,62,37,115,60,47,98,62,0,0,0,0,0,0,0,45,62,32,0,0,0,0,0,37,115,0,0,0,0,0,0,32,37,115,10,0,0,0,0,37,115,32,45,32,37,115,10,0,0,0,0,0,0,0,0,85,115,97,103,101,58,32,0,65,108,116,101,114,110,97,116,101,32,110,97,109,101,32,102,111,114,32,116,104,105,115,32,99,111,109,109,97,110,100,58,32,37,115,10,0,0,0,0,37,115,10,0,0,0,0,0,114,101,112,101,97,116,32,45,32,65,117,116,111,109,97,116,105,99,97,108,108,121,32,114,101,112,101,97,116,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,99,111,109,109,97,110,100,32,111,118,101,114,32,97,110,100,32,111,118,101,114,46,0,0,0,0,0,0,32,99,111,109,109,97,110,100,32,97,114,103,117,109,101,110,116,115,10,0,0,0,0,0,78,111,116,32,97,108,108,32,99,111,109,109,97,110,100,115,32,97,114,101,32,114,101,112,101,97,116,97,98,108,101,46,10,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,77,97,116,104,111,109,97,116,105,99,32,105,115,32,97,32,67,111,109,112,117,116,101,114,32,65,108,103,101,98,114,97,32,83,121,115,116,101,109,32,40,67,65,83,41,32,97,110,100,32,99,97,108,99,117,108,97,116,111,114,32,112,114,111,103,114,97,109,46,0,0,0,70,111,114,32,104,101,108,112,102,117,108,32,105,110,116,101,114,97,99,116,105,118,101,32,101,120,97,109,112,108,101,115,44,32,34,104,101,108,112,32,101,120,97,109,112,108,101,115,34,46,32,70,111,114,32,110,101,119,115,44,32,34,104,101,108,112,32,110,101,119,115,34,46,0,0,0,0,0,0,0,84,121,112,101,32,34,104,101,108,112,32,101,113,117,97,116,105,111,110,115,34,32,102,111,114,32,104,101,108,112,32,119,105,116,104,32,101,110,116,101,114,105,110,103,32,101,120,112,114,101,115,115,105,111,110,115,32,97,110,100,32,101,113,117,97,116,105,111,110,115,46,0,84,121,112,101,32,34,104,101,108,112,32,97,108,108,34,32,102,111,114,32,97,32,115,117,109,109,97,114,121,32,111,102,32,97,108,108,32,99,111,109,109,97,110,100,115,32,111,114,32,34,104,101,108,112,32,117,115,97,103,101,34,32,106,117,115,116,32,102,111,114,32,115,121,110,116,97,120,46,0,0,79,116,104,101,114,32,104,101,108,112,32,116,111,112,105,99,115,58,32,99,111,110,115,116,97,110,116,115,44,32,99,111,108,111,114,44,32,108,105,99,101,110,115,101,44,32,98,117,103,115,44,32,103,101,111,109,101,116,114,121,44,32,111,114,32,99,111,110,118,101,114,115,105,111,110,115,46,0,0,0,34,104,101,108,112,34,32,111,114,32,34,63,34,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,99,111,109,109,97,110,100,32,110,97,109,101,32,119,105,108,108,32,103,105,118,101,32,105,110,102,111,32,111,110,32,116,104,97,116,32,99,111,109,109,97,110,100,46,0,0,0,0,0,0,0,0,84,104,101,115,101,32,97,114,101,32,116,104,101,32,37,100,32,99,111,109,109,97,110,100,115,32,102,111,114,32,116,104,105,115,32,118,101,114,115,105,111,110,32,111,102,32,77,97,116,104,111,109,97,116,105,99,58,10,0,0,0,0,0,0,32,0,0,0,0,0,0,0,10,10,84,111,32,115,101,101,32,119,104,97,116,32,105,115,32,97,108,108,111,119,101,100,32,97,116,32,116,104,101,32,109,97,105,110,32,112,114,111,109,112,116,44,32,116,121,112,101,32,34,104,101,108,112,32,109,97,105,110,34,46,0,0,70,111,114,32,109,111,114,101,32,104,101,108,112,44,32,103,111,32,116,111,32,116,104,101,32,111,102,102,105,99,105,97,108,32,119,101,98,115,105,116,101,58,32,119,119,119,46,109,97,116,104,111,109,97,116,105,99,46,111,114,103,0,0,0,116,97,98,108,101,0,0,0,77,97,116,104,111,109,97,116,105,99,32,118,101,114,115,105,111,110,32,37,115,32,81,117,105,99,107,32,82,101,102,101,114,101,110,99,101,32,67,97,114,100,10,0,0,0,0,0,49,54,46,48,46,53,0,0,67,111,109,109,97,110,100,9,85,115,97,103,101,9,78,111,116,101,115,10,0,0,0,0,9,37,115,32,37,115,0,0,9,65,108,116,101,114,110,97,116,101,32,110,97,109,101,32,102,111,114,32,116,104,105,115,32,99,111,109,109,97,110,100,58,32,37,115,0,0,0,0,9,37,115,0,0,0,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,115,116,97,114,116,117,112,0,72,101,108,112,32,115,116,97,114,116,117,112,58,0,0,0,101,120,97,109,112,108,101,115,0,0,0,0,0,0,0,0,103,101,111,109,101,116,114,121,0,0,0,0,0,0,0,0,72,101,108,112,32,103,101,111,109,101,116,114,121,58,0,0,67,111,109,109,111,110,108,121,32,117,115,101,100,32,115,116,97,110,100,97,114,100,32,40,69,117,99,108,105,100,101,97,110,41,32,103,101,111,109,101,116,114,105,99,32,102,111,114,109,117,108,97,115,0,0,0,99,111,110,118,101,114,115,105,111,110,115,0,0,0,0,0,72,101,108,112,32,99,111,110,118,101,114,115,105,111,110,115,58,0,0,0,0,0,0,0,67,111,109,109,111,110,108,121,32,117,115,101,100,32,109,101,116,114,105,99,47,69,110,103,108,105,115,104,32,99,111,110,118,101,114,115,105,111,110,115,46,0,0,0,0,0,0,0,83,101,108,101,99,116,32,116,104,101,32,101,113,117,97,116,105,111,110,32,121,111,117,32,119,97,110,116,32,40,102,111,114,32,101,120,97,109,112,108,101,44,32,119,105,116,104,32,34,49,34,32,111,114,32,34,47,99,101,108,115,105,117,115,34,41,0,0,0,0,0,0,97,110,100,32,116,121,112,101,32,116,104,101,32,117,110,105,116,32,110,97,109,101,32,121,111,117,32,119,97,110,116,44,32,116,111,32,115,111,108,118,101,32,102,111,114,32,105,116,32,40,108,105,107,101,32,34,99,101,108,115,105,117,115,34,41,46,0,0,0,0,0,0,84,104,101,110,32,116,121,112,101,32,34,114,101,112,101,97,116,32,99,97,108,99,117,108,97,116,101,34,32,102,111,114,32,117,110,105,116,115,32,99,111,110,118,101,114,115,105,111,110,32,97,110,100,32,116,114,121,105,110,103,32,100,105,102,102,101,114,101,110,116,32,118,97,108,117,101,115,46,0,0,84,104,101,115,101,32,118,97,108,117,101,115,32,97,114,101,32,99,111,114,114,101,99,116,32,102,111,114,32,116,104,101,32,85,83,32,97,110,100,32,85,75,46,0,0,0,0,0,109,97,105,110,0,0,0,0,112,114,111,109,112,116,0,0,72,101,108,112,32,109,97,105,110,32,111,114,32,112,114,111,109,112,116,58,0,0,0,0,65,116,32,116,104,101,32,77,97,116,104,111,109,97,116,105,99,32,109,97,105,110,32,112,114,111,109,112,116,44,32,121,111,117,32,109,97,121,32,101,110,116,101,114,58,10,0,0,32,32,42,32,97,32,110,117,109,101,114,105,99,97,108,32,101,120,112,114,101,115,115,105,111,110,44,32,119,104,105,99,104,32,105,115,32,105,110,115,116,97,110,116,108,121,32,101,118,97,108,117,97,116,101,100,32,97,110,100,32,100,105,115,112,108,97,121,101,100,32,119,105,116,104,0,0,0,0,0,32,32,32,32,116,104,101,32,99,97,108,99,117,108,97,116,101,32,99,111,109,109,97,110,100,32,40,97,117,116,111,99,97,108,99,41,32,40,115,101,101,32,34,104,101,108,112,32,99,111,110,115,116,97,110,116,115,34,32,97,110,100,32,97,117,116,111,100,101,108,101,116,101,41,44,0,0,0,0,0,32,32,42,32,97,110,32,97,108,103,101,98,114,97,105,99,32,101,120,112,114,101,115,115,105,111,110,32,111,114,32,101,113,117,97,116,105,111,110,44,32,119,104,105,99,104,32,105,115,32,115,116,111,114,101,100,32,97,110,100,32,109,97,100,101,32,116,104,101,32,99,117,114,114,101,110,116,0,0,0,32,32,32,32,101,113,117,97,116,105,111,110,32,40,115,101,101,32,34,104,101,108,112,32,101,120,112,114,101,115,115,105,111,110,115,34,41,44,0,0,32,32,42,32,97,32,118,97,114,105,97,98,108,101,32,116,111,32,115,111,108,118,101,32,116,104,101,32,99,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,102,111,114,32,40,97,117,116,111,115,111,108,118,101,41,44,0,0,0,32,32,42,32,97,110,32,101,113,117,97,116,105,111,110,32,110,117,109,98,101,114,32,116,111,32,115,101,108,101,99,116,32,97,115,32,116,104,101,32,99,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,40,97,117,116,111,115,101,108,101,99,116,41,44,0,0,32,32,42,32,97,32,115,108,97,115,104,32,40,47,41,32,111,114,32,112,111,117,110,100,32,115,105,103,110,32,40,35,41,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,118,97,114,105,97,98,108,101,32,110,97,109,101,32,116,111,32,115,101,97,114,99,104,32,97,108,108,0,0,0,0,0,32,32,32,32,101,113,117,97,116,105,111,110,115,32,115,112,97,99,101,115,32,102,111,114,119,97,114,100,32,111,114,32,98,97,99,107,119,97,114,100,32,102,111,114,44,32,114,101,115,112,101,99,116,105,118,101,108,121,44,0,0,0,0,0,32,32,42,32,97,32,77,97,116,104,111,109,97,116,105,99,32,99,111,109,109,97,110,100,32,40,115,101,101,32,34,104,101,108,112,32,97,108,108,34,41,44,0,0,0,0,0,0,32,32,42,32,97,32,113,117,101,115,116,105,111,110,32,109,97,114,107,32,40,63,41,32,102,111,114,32,113,117,105,99,107,44,32,115,104,111,114,116,32,104,101,108,112,32,40,115,97,109,101,32,97,115,32,116,104,101,32,104,101,108,112,32,99,111,109,109,97,110,100,41,44,0,0,0,0,0,0,0,32,32,42,32,97,32,115,101,109,105,99,111,108,111,110,32,40,59,41,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,108,105,110,101,32,99,111,109,109,101,110,116,32,40,101,118,101,114,121,116,104,105,110,103,32,111,110,32,97,32,108,105,110,101,32,97,102,116,101,114,32,97,0,0,0,0,32,32,32,32,115,101,109,105,99,111,108,111,110,32,105,115,32,105,103,110,111,114,101,100,41,44,0,0,0,0,0,0,32,32,42,32,115,104,101,108,108,105,110,103,32,111,117,116,32,40,33,41,32,105,115,32,100,105,115,97,98,108,101,100,32,98,121,32,115,101,99,117,114,105,116,121,32,108,101,118,101,108,32,111,114,32,115,121,115,116,101,109,32,116,121,112,101,46,0,0,0,0,0,0,32,32,32,32,84,104,101,32,102,97,99,116,111,114,105,97,108,32,111,112,101,114,97,116,111,114,32,34,33,34,32,115,116,105,108,108,32,119,111,114,107,115,46,10,0,0,0,0,73,102,32,97,32,99,111,108,111,110,32,40,58,41,32,115,116,97,114,116,115,32,116,104,101,32,108,105,110,101,44,32,112,114,101,99,101,100,105,110,103,32,97,110,121,32,111,102,32,116,104,101,32,97,98,111,118,101,32,105,110,112,117,116,32,116,111,32,116,104,101,32,109,97,105,110,0,0,0,0,112,114,111,109,112,116,44,32,105,116,32,119,105,108,108,32,97,108,119,97,121,115,32,114,101,116,117,114,110,32,119,105,116,104,32,115,117,99,99,101,115,115,102,117,108,32,115,116,97,116,117,115,44,32,112,114,101,118,101,110,116,105,110,103,32,97,110,121,32,99,117,114,114,101,110,116,0,0,0,0,114,101,97,100,32,99,111,109,109,97,110,100,32,111,112,101,114,97,116,105,111,110,32,102,114,111,109,32,97,98,111,114,116,105,110,103,32,100,117,101,32,116,111,32,97,110,32,101,114,114,111,114,32,114,101,116,117,114,110,32,115,116,97,116,117,115,46,0,0,0,0,0,99,111,112,121,114,105,103,104,116,115,0,0,0,0,0,0,108,105,99,101,110,115,101,115,0,0,0,0,0,0,0,0,108,105,99,101,110,99,101,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+41440);
/* memory initializer */ allocate([67,111,112,121,114,105,103,104,116,32,97,110,100,32,76,105,99,101,110,115,101,32,102,111,114,32,77,97,116,104,111,109,97,116,105,99,0,0,0,0,98,117,103,115,0,0,0,0,72,101,108,112,32,98,117,103,115,58,0,0,0,0,0,0,80,108,101,97,115,101,32,114,101,112,111,114,116,32,98,117,103,115,32,111,110,32,116,104,101,32,77,97,116,104,111,109,97,116,105,99,32,112,114,111,106,101,99,116,32,115,105,116,101,32,111,110,32,76,97,117,110,99,104,112,97,100,46,110,101,116,58,0,0,0,0,0,104,116,116,112,115,58,47,47,108,97,117,110,99,104,112,97,100,46,110,101,116,47,109,97,116,104,111,109,97,116,105,99,0,0,0,0,0,0,0,0,76,97,117,110,99,104,112,97,100,32,102,101,97,116,117,114,101,115,32,97,32,99,111,109,112,108,101,116,101,32,98,117,103,32,109,97,110,97,103,101,109,101,110,116,32,115,121,115,116,101,109,46,0,0,0,0,10,80,108,101,97,115,101,32,105,110,99,108,117,100,101,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,32,119,104,101,110,32,114,101,112,111,114,116,105,110,103,32,98,117,103,115,44,0,0,102,114,111,109,32,116,104,101,32,34,118,101,114,115,105,111,110,32,115,116,97,116,117,115,34,32,99,111,109,109,97,110,100,58,10,0,0,0,0,0,117,115,97,103,101,0,0,0,115,121,110,116,97,120,0,0,77,97,116,104,111,109,97,116,105,99,32,67,111,109,109,97,110,100,32,85,115,97,103,101,32,83,121,110,116,97,120,0,65,32,99,111,109,109,97,110,100,32,112,114,101,99,101,100,101,100,32,98,121,32,97,110,32,101,120,99,108,97,109,97,116,105,111,110,32,112,111,105,110,116,32,40,115,117,99,104,32,97,115,32,34,33,108,115,34,41,32,105,115,32,116,97,107,101,110,32,116,111,0,0,98,101,32,97,32,115,104,101,108,108,32,99,111,109,109,97,110,100,32,97,110,100,32,105,115,32,112,97,115,115,101,100,32,117,110,99,104,97,110,103,101,100,32,116,111,32,116,104,101,32,115,104,101,108,108,32,40,47,98,105,110,47,115,104,41,32,119,104,101,110,0,0,77,97,116,104,111,109,97,116,105,99,32,105,115,32,110,111,116,32,105,110,32,115,101,99,117,114,101,32,109,111,100,101,46,32,32,34,33,34,32,98,121,32,105,116,115,101,108,102,32,105,110,118,111,107,101,115,32,116,104,101,32,100,101,102,97,117,108,116,32,115,104,101,108,108,44,0,0,0,0,0,119,104,105,99,104,32,105,115,32,115,112,101,99,105,102,105,101,100,32,105,110,32,116,104,101,32,83,72,69,76,76,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,46,10,0,0,34,33,34,32,105,115,32,97,108,115,111,32,116,104,101,32,102,97,99,116,111,114,105,97,108,32,111,112,101,114,97,116,111,114,46,0,0,0,0,0,111,112,101,114,97,116,111,114,115,0,0,0,0,0,0,0,101,120,112,114,101,115,115,105,111,110,115,0,0,0,0,0,101,113,117,97,116,105,111,110,115,0,0,0,0,0,0,0,72,101,108,112,32,101,113,117,97,116,105,111,110,115,58,0,84,111,32,101,110,116,101,114,32,97,110,32,101,120,112,114,101,115,115,105,111,110,32,111,114,32,101,113,117,97,116,105,111,110,44,32,116,121,112,101,32,111,114,32,99,111,112,121,47,112,97,115,116,101,32,105,116,32,105,110,32,97,116,32,116,104,101,32,112,114,111,109,112,116,46,0,0,0,0,0,79,112,101,114,97,116,111,114,115,32,104,97,118,101,32,112,114,101,99,101,100,101,110,99,101,32,100,101,99,114,101,97,115,105,110,103,32,97,115,32,105,110,100,105,99,97,116,101,100,58,10,0,0,0,0,0,32,32,32,32,33,32,102,97,99,116,111,114,105,97,108,32,32,32,40,115,97,109,101,32,97,115,32,103,97,109,109,97,40,120,43,49,41,32,102,117,110,99,116,105,111,110,59,32,104,105,103,104,101,115,116,32,112,114,101,99,101,100,101,110,99,101,41,0,0,0,0,0,32,32,32,32,42,42,32,111,114,32,94,32,112,111,119,101,114,32,40,101,120,112,111,110,101,110,116,105,97,116,105,111,110,59,32,104,105,103,104,32,112,114,101,99,101,100,101,110,99,101,41,0,0,0,0,0,32,32,32,32,42,32,109,117,108,116,105,112,108,121,32,32,32,32,32,32,47,32,100,105,118,105,100,101,32,32,32,32,32,32,32,32,37,32,109,111,100,117,108,117,115,32,32,32,32,32,32,32,47,47,32,105,110,116,101,103,114,97,108,32,100,105,118,105,100,101,0,0,32,32,32,32,43,32,97,100,100,32,32,32,32,32,32,32,32,32,32,32,45,32,115,117,98,116,114,97,99,116,32,111,114,32,110,101,103,97,116,101,0,0,0,0,0,0,0,0,32,32,32,32,61,32,101,113,117,97,116,101,32,32,32,32,32,32,40,100,101,110,111,116,101,115,32,101,113,117,105,118,97,108,101,110,99,101,59,32,108,111,119,101,115,116,32,112,114,101,99,101,100,101,110,99,101,41,10,0,0,0,0,0,77,117,108,116,105,112,108,101,32,111,112,101,114,97,116,111,114,115,32,111,102,32,116,104,101,32,115,97,109,101,32,112,114,101,99,101,100,101,110,99,101,32,108,101,118,101,108,32,97,114,101,32,103,114,111,117,112,101,100,32,108,101,102,116,32,116,111,32,114,105,103,104,116,46,0,0,0,0,0,0,80,97,114,101,110,116,104,101,115,101,115,32,97,114,101,32,117,115,101,100,32,116,111,32,111,118,101,114,114,105,100,101,32,111,112,101,114,97,116,111,114,32,112,114,101,99,101,100,101,110,99,101,32,97,110,100,32,103,114,111,117,112,32,116,104,105,110,103,115,32,116,111,103,101,116,104,101,114,46,0,86,97,108,105,100,32,112,97,114,101,110,116,104,101,115,101,115,32,99,104,97,114,97,99,116,101,114,115,32,97,114,101,32,40,41,32,97,110,100,32,123,125,46,32,32,91,93,32,97,114,101,32,114,101,115,101,114,118,101,100,32,102,111,114,32,97,114,114,97,121,115,46,10,0,0,0,0,0,0,0,86,97,114,105,97,98,108,101,115,32,99,111,110,115,105,115,116,32,111,102,32,97,110,121,32,99,111,109,98,105,110,97,116,105,111,110,32,111,102,32,108,101,116,116,101,114,115,44,32,100,105,103,105,116,115,44,32,97,110,100,32,117,110,100,101,114,115,99,111,114,101,115,32,40,95,41,44,0,0,0,97,110,100,32,34,115,101,116,32,115,112,101,99,105,97,108,95,118,97,114,105,97,98,108,101,95,99,104,97,114,97,99,116,101,114,115,34,46,32,32,86,97,114,105,97,98,108,101,115,32,110,101,118,101,114,32,115,116,97,114,116,32,119,105,116,104,32,97,32,100,105,103,105,116,46,0,0,0,0,0,80,114,101,100,101,102,105,110,101,100,32,118,97,114,105,97,98,108,101,115,32,102,111,108,108,111,119,32,40,34,104,101,108,112,32,99,111,110,115,116,97,110,116,115,34,32,115,104,111,119,115,32,112,114,101,100,101,102,105,110,101,100,32,99,111,110,115,116,97,110,116,115,41,58,10,0,0,0,0,0,32,32,32,32,115,105,103,110,44,32,115,105,103,110,49,44,32,115,105,103,110,50,44,32,38,104,101,108,108,105,112,59,32,45,32,109,97,121,32,111,110,108,121,32,98,101,32,38,112,108,117,115,109,110,59,49,0,0,0,0,0,0,0,0,32,32,32,32,105,110,116,101,103,101,114,44,32,105,110,116,101,103,101,114,49,44,32,38,104,101,108,108,105,112,59,32,45,32,109,97,121,32,98,101,32,97,110,121,32,105,110,116,101,103,101,114,32,118,97,108,117,101,10,0,0,0,0,0,32,32,32,32,115,105,103,110,44,32,115,105,103,110,49,44,32,115,105,103,110,50,44,32,46,46,46,32,45,32,109,97,121,32,111,110,108,121,32,98,101,32,43,49,32,111,114,32,45,49,0,0,0,0,0,0,32,32,32,32,105,110,116,101,103,101,114,44,32,105,110,116,101,103,101,114,49,44,32,46,46,46,32,45,32,109,97,121,32,98,101,32,97,110,121,32,105,110,116,101,103,101,114,32,118,97,108,117,101,10,0,0,65,98,115,111,108,117,116,101,32,118,97,108,117,101,32,110,111,116,97,116,105,111,110,32,34,124,120,124,34,32,97,110,100,32,100,117,97,108,32,112,111,108,97,114,105,116,121,32,34,43,47,45,120,34,32,97,114,101,32,117,110,100,101,114,115,116,111,111,100,46,0,0,99,111,110,115,116,97,110,116,115,0,0,0,0,0,0,0,100,101,99,105,109,97,108,0,102,108,111,97,116,115,0,0,100,111,117,98,108,101,115,0,104,101,120,97,100,101,99,105,109,97,108,0,0,0,0,0,72,101,108,112,32,99,111,110,115,116,97,110,116,115,58,0,67,111,110,115,116,97,110,116,115,32,97,114,101,32,100,105,115,112,108,97,121,101,100,32,97,115,32,100,101,99,105,109,97,108,44,32,100,111,117,98,108,101,32,112,114,101,99,105,115,105,111,110,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,118,97,108,117,101,115,44,0,0,0,0,0,114,111,117,110,100,101,100,32,116,111,32,49,52,32,100,101,99,105,109,97,108,32,100,105,103,105,116,115,46,32,32,84,104,101,121,32,97,114,101,32,100,105,115,112,108,97,121,101,100,32,105,110,32,115,116,97,110,100,97,114,100,32,111,114,32,115,99,105,101,110,116,105,102,105,99,0,0,0,0,0,110,111,116,97,116,105,111,110,44,32,119,104,105,99,104,101,118,101,114,32,105,115,32,115,104,111,114,116,101,115,116,46,32,32,84,104,101,121,32,99,97,110,32,98,101,32,101,110,116,101,114,101,100,32,105,110,32,115,116,97,110,100,97,114,100,44,32,115,99,105,101,110,116,105,102,105,99,44,0,0,111,114,32,104,101,120,97,100,101,99,105,109,97,108,32,110,111,116,97,116,105,111,110,46,32,32,65,110,121,32,99,111,110,115,116,97,110,116,32,99,97,110,32,98,101,32,101,110,116,101,114,101,100,32,105,110,32,104,101,120,97,100,101,99,105,109,97,108,32,40,98,97,115,101,32,49,54,41,0,0,98,121,32,115,116,97,114,116,105,110,103,32,105,116,32,119,105,116,104,32,34,48,120,34,46,32,32,69,120,99,101,112,116,105,110,103,32,110,97,109,101,100,32,99,111,110,115,116,97,110,116,115,44,32,99,111,110,115,116,97,110,116,115,32,97,108,119,97,121,115,32,115,116,97,114,116,0,0,0,0,119,105,116,104,32,97,32,100,101,99,105,109,97,108,32,100,105,103,105,116,32,40,48,46,46,57,41,44,32,97,32,112,101,114,105,111,100,44,32,111,114,32,97,32,100,97,115,104,32,40,45,41,46,10,0,0,78,97,109,101,100,32,99,111,110,115,116,97,110,116,115,32,102,111,108,108,111,119,58,10,0,0,0,0,0,0,0,0,32,32,32,32,101,44,32,38,101,99,105,114,99,59,44,32,111,114,32,101,35,32,45,32,116,104,101,32,117,110,105,118,101,114,115,97,108,32,99,111,110,115,116,97,110,116,32,101,32,40,50,46,55,49,56,50,56,49,56,50,56,38,104,101,108,108,105,112,59,41,0,0,32,32,32,32,112,105,32,111,114,32,112,105,35,32,45,32,116,104,101,32,117,110,105,118,101,114,115,97,108,32,99,111,110,115,116,97,110,116,32,112,105,32,40,51,46,49,52,49,53,57,50,54,38,104,101,108,108,105,112,59,41,0,0,0,32,32,32,32,105,44,32,38,105,99,105,114,99,59,44,32,111,114,32,105,35,32,45,32,116,104,101,32,105,109,97,103,105,110,97,114,121,32,117,110,105,116,32,40,38,114,97,100,105,99,59,40,45,49,41,41,0,0,0,0,0,0,0,0,32,32,32,32,101,32,111,114,32,101,35,32,45,32,116,104,101,32,117,110,105,118,101,114,115,97,108,32,99,111,110,115,116,97,110,116,32,101,32,40,50,46,55,49,56,50,56,49,56,50,56,46,46,46,41,0,32,32,32,32,112,105,32,111,114,32,112,105,35,32,45,32,116,104,101,32,117,110,105,118,101,114,115,97,108,32,99,111,110,115,116,97,110,116,32,112,105,32,40,51,46,49,52,49,53,57,50,54,46,46,46,41,0,0,0,0,0,0,0,0,32,32,32,32,105,32,111,114,32,105,35,32,45,32,116,104,101,32,105,109,97,103,105,110,97,114,121,32,117,110,105,116,32,40,115,113,117,97,114,101,32,114,111,111,116,32,111,102,32,45,49,41,0,0,0,0,84,104,101,32,97,98,111,118,101,32,99,111,110,115,116,97,110,116,115,32,109,97,121,32,97,108,115,111,32,98,101,32,117,115,101,100,32,97,110,121,119,104,101,114,101,32,118,97,114,105,97,98,108,101,115,32,97,114,101,32,114,101,113,117,105,114,101,100,46,0,0,0,32,32,32,32,105,110,102,32,45,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,105,110,102,105,110,105,116,121,32,99,111,110,115,116,97,110,116,0,0,0,0,0,0,32,32,32,32,78,97,78,32,45,32,105,110,118,97,108,105,100,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,114,101,115,117,108,116,10,0,0,0,0,0,0,0,0,68,111,117,98,108,101,32,112,114,101,99,105,115,105,111,110,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,108,105,109,105,116,115,58,0,84,104,101,32,108,97,114,103,101,115,116,32,118,97,108,105,100,32,99,111,110,115,116,97,110,116,32,105,115,32,43,47,45,37,46,55,103,32,40,115,108,105,103,104,116,108,121,32,108,101,115,115,32,116,104,97,110,32,50,94,49,48,50,52,41,46,10,0,0,0,0,0,84,104,101,32,115,109,97,108,108,101,115,116,32,118,97,108,105,100,32,99,111,110,115,116,97,110,116,32,105,115,32,43,47,45,37,46,55,103,32,111,114,32,48,46,10,0,0,0,105,110,116,114,111,100,117,99,116,105,111,110,0,0,0,0,99,111,108,111,114,115,0,0,99,111,108,111,117,114,115,0,72,101,108,112,32,99,111,108,111,114,115,58,0,0,0,0,65,108,116,101,114,110,97,116,105,118,101,32,0,0,0,0,67,111,108,111,114,32,109,111,100,101,32,105,115,32,99,117,114,114,101,110,116,108,121,32,111,110,44,32,98,111,108,100,32,109,111,100,101,32,105,115,32,99,117,114,114,101,110,116,108,121,32,37,115,46,10,0,111,110,0,0,0,0,0,0,111,102,102,0,0,0,0,0,72,84,77,76,32,109,111,100,101,32,105,115,32,99,117,114,114,101,110,116,108,121,32,111,110,44,32,115,111,32,99,111,108,111,114,32,109,111,100,101,32,105,115,32,72,84,77,76,46,0,0,0,0,0,0,0,85,115,105,110,103,32,65,78,83,73,32,99,111,108,111,114,32,109,111,100,101,46,0,0,32,97,114,101,32,116,104,101,32,97,118,97,105,108,97,98,108,101,32,99,111,108,111,114,115,46,10,0,0,0,0,0,67,111,108,111,114,32,109,111,100,101,32,105,115,32,99,117,114,114,101,110,116,108,121,32,116,117,114,110,101,100,32,111,102,102,46,0,0,0,0,0,77,97,116,104,111,109,97,116,105,99,32,86,101,114,115,105,111,110,32,37,115,32,67,111,109,109,97,110,100,32,83,117,109,109,97,114,121,10,0,0,69,110,100,32,111,102,32,99,111,109,109,97,110,100,32,108,105,115,116,46,32,32,84,111,116,97,108,32,111,102,32,37,100,32,100,105,102,102,101,114,101,110,116,32,99,111,109,109,97,110,100,115,46,10,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,104,101,108,112,32,116,111,112,105,99,32,111,114,32,99,111,109,109,97,110,100,46,0,0,0,0,0,97,112,112,114,111,120,105,109,97,116,101,0,0,0,0,0,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,115,93,0,0,0,0,0,0,0,0,65,112,112,114,111,120,105,109,97,116,101,32,97,108,108,32,110,117,109,101,114,105,99,97,108,32,118,97,108,117,101,115,32,105,110,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,46,0,0,0,0,34,114,101,112,101,97,116,32,97,112,112,114,111,120,105,109,97,116,101,34,32,97,112,112,114,111,120,105,109,97,116,101,115,32,109,111,114,101,44,32,108,105,107,101,32,99,97,108,99,117,108,97,116,101,46,0,99,108,101,97,114,0,0,0,68,101,108,101,116,101,32,101,120,112,114,101,115,115,105,111,110,115,32,115,116,111,114,101,100,32,105,110,32,109,101,109,111,114,121,32,115,111,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,99,97,110,32,98,101,32,114,101,117,115,101,100,46,0,0,0,84,105,112,58,32,85,115,101,32,34,99,108,101,97,114,32,97,108,108,34,32,116,111,32,113,117,105,99,107,108,121,32,114,101,115,116,97,114,116,32,77,97,116,104,111,109,97,116,105,99,46,0,0,0,0,0,99,111,100,101,0,0,0,0,91,34,99,34,32,111,114,32,34,106,97,118,97,34,32,111,114,32,34,112,121,116,104,111,110,34,32,111,114,32,34,105,110,116,101,103,101,114,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,115,93,0,0,0,0,0,0,0,79,117,116,112,117,116,32,67,44,32,74,97,118,97,44,32,111,114,32,80,121,116,104,111,110,32,99,111,100,101,32,102,111,114,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,113,117,97,116,105,111,110,115,46,0,0,0,0,0,82,101,108,97,116,101,100,32,99,111,109,109,97,110,100,115,58,32,115,105,109,112,108,105,102,121,44,32,111,112,116,105,109,105,122,101,44,32,97,110,100,32,118,97,114,105,97,98,108,101,115,0,0,0,0,0,99,111,109,112,97,114,101,0,91,34,115,121,109,98,111,108,105,99,34,32,34,97,112,112,114,111,120,34,93,32,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,32,91,34,119,105,116,104,34,32,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,93,0,0,67,111,109,112,97,114,101,32,116,119,111,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,102,111,114,32,109,97,116,104,101,109,97,116,105,99,97,108,32,101,113,117,105,118,97,108,101,110,99,101,46,0,0,0,0,0,0,0,84,104,105,115,32,99,111,109,109,97,110,100,32,109,97,121,32,98,101,32,112,114,101,99,101,100,101,100,32,119,105,116,104,32,34,114,101,112,101,97,116,34,32,102,111,114,32,102,117,108,108,32,115,105,109,112,108,105,102,121,46,0,0,0,99,111,112,121,0,0,0,0,91,34,115,101,108,101,99,116,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,115,93,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,46,0,0,0,0,0,0,0,0,87,105,116,104,32,115,101,108,101,99,116,44,32,116,104,101,32,102,105,114,115,116,32,99,111,112,121,32,105,115,32,109,97,100,101,32,116,104,101,32,99,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,46,0,0,0,0,0,0,0,100,101,114,105,118,97,116,105,118,101,0,0,0,0,0,0,100,105,102,102,101,114,101,110,116,105,97,116,101,0,0,0,91,34,110,111,115,105,109,112,108,105,102,121,34,93,32,118,97,114,105,97,98,108,101,32,111,114,32,34,97,108,108,34,32,91,111,114,100,101,114,93,0,0,0,0,0,0,0,0,83,121,109,98,111,108,105,99,97,108,108,121,32,100,105,102,102,101,114,101,110,116,105,97,116,101,32,97,110,100,32,115,105,109,112,108,105,102,121,44,32,111,114,100,101,114,32,116,105,109,101,115,46,0,0,0,100,105,115,112,108,97,121,0,91,34,102,97,99,116,111,114,34,93,32,91,34,115,105,109,112,108,101,34,32,111,114,32,34,109,105,120,101,100,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,115,93,0,0,0,0,0,0,0,68,105,115,112,108,97,121,32,101,120,112,114,101,115,115,105,111,110,115,32,105,110,32,112,114,101,116,116,121,44,32,50,68,32,109,117,108,116,105,45,108,105,110,101,32,102,114,97,99,116,105,111,110,32,102,111,114,109,97,116,46,0,0,0,100,105,118,105,100,101,0,0,91,98,97,115,101,45,118,97,114,105,97,98,108,101,93,32,91,100,105,118,105,100,101,110,100,32,100,105,118,105,115,111,114,93,0,0,0,0,0,0,68,105,118,105,100,101,32,50,32,110,117,109,98,101,114,115,32,111,114,32,112,111,108,121,110,111,109,105,97,108,115,46,32,71,105,118,101,32,100,101,116,97,105,108,101,100,32,114,101,115,117,108,116,32,97,110,100,32,71,67,68,46,0,0,34,114,101,112,101,97,116,32,100,105,118,105,100,101,34,32,114,101,112,101,97,116,101,100,108,121,32,112,114,111,109,112,116,115,32,102,111,114,32,97,110,121,32,105,110,112,117,116,46,0,0,0,0,0,0,0,101,99,104,111,0,0,0,0,91,116,101,120,116,93,0,0,79,117,116,112,117,116,32,97,32,108,105,110,101,32,111,102,32,116,101,120,116,44,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,110,101,119,108,105,110,101,46,0,0,0,84,104,105,115,32,99,111,109,109,97,110,100,32,109,97,121,32,98,101,32,112,114,101,99,101,100,101,100,32,119,105,116,104,32,34,114,101,112,101,97,116,34,46,0,0,0,0,0,101,108,105,109,105,110,97,116,101,0,0,0,0,0,0,0,118,97,114,105,97,98,108,101,115,32,111,114,32,34,97,108,108,34,32,91,34,117,115,105,110,103,34,32,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,93,0,0,0,0,83,117,98,115,116,105,116,117,116,101,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,118,97,114,105,97,98,108,101,115,32,119,105,116,104,32,115,111,108,118,101,100,32,101,113,117,97,116,105,111,110,115,46,0,0,0,0,0,0,0,101,120,116,114,101,109,97,0,91,118,97,114,105,97,98,108,101,93,32,91,111,114,100,101,114,93,0,0,0,0,0,0,83,104,111,119,32,119,104,101,114,101,32,116,104,101,32,115,108,111,112,101,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,101,113,117,97,108,115,32,122,101,114,111,46,0,0,0,0,0,0,0,72,101,108,112,115,32,119,105,116,104,32,102,105,110,100,105,110,103,32,116,104,101,32,109,105,110,105,109,117,109,115,32,97,110,100,32,109,97,120,105,109,117,109,115,46,0,0,0,102,97,99,116,111,114,0,0,99,111,108,108,101,99,116,0,91,34,110,117,109,98,101,114,34,32,91,105,110,116,101,103,101,114,115,93,93,32,111,114,32,91,34,112,111,119,101,114,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,93,32,91,118,97,114,105,97,98,108,101,115,93,0,0,70,97,99,116,111,114,32,118,97,114,105,97,98,108,101,115,32,105,110,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,111,114,32,102,97,99,116,111,114,105,122,101,32,103,105,118,101,110,32,105,110,116,101,103,101,114,115,46,0,0,0,0,0,0,0,0,102,111,114,0,0,0,0,0,118,97,114,105,97,98,108,101,32,115,116,97,114,116,32,101,110,100,32,91,115,116,101,112,45,115,105,122,101,93,0,0,69,118,97,108,117,97,116,101,32,97,110,100,32,100,105,115,112,108,97,121,32,116,104,101,32,99,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,32,102,111,114,32,101,97,99,104,32,118,97,108,117,101,32,111,102,32,118,97,114,105,97,98,108,101,46,0,83,97,109,101,32,115,121,110,116,97,120,32,97,115,32,116,104,101,32,115,117,109,32,97,110,100,32,112,114,111,100,117,99,116,32,99,111,109,109,97,110,100,115,46,0,0,0,0,102,114,97,99,116,105,111,110,0,0,0,0,0,0,0,0,91,34,110,117,109,101,114,97,116,111,114,34,32,34,100,101,110,111,109,105,110,97,116,111,114,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,93,0,0,0,0,0,67,111,110,118,101,114,116,32,101,120,112,114,101,115,115,105,111,110,32,116,111,32,97,32,115,105,110,103,108,101,32,115,105,109,112,108,101,32,97,108,103,101,98,114,97,105,99,32,102,114,97,99,116,105,111,110,46,0,0,0,0,0,0,0,104,101,108,112,0,0,0,0,63,0,0,0,0,0,0,0,91,116,111,112,105,99,115,32,111,114,32,99,111,109,109,97,110,100,45,110,97,109,101,115,93,0,0,0,0,0,0,0,83,104,111,114,116,44,32,98,117,105,108,116,45,105,110,32,104,101,108,112,32,97,110,100,32,114,101,102,101,114,101,110,99,101,46,0,0,0,0,0,105,109,97,103,105,110,97,114,121,0,0,0,0,0,0,0,91,118,97,114,105,97,98,108,101,93,0,0,0,0,0,0,70,117,108,108,121,32,101,120,112,97,110,100,32,97,110,100,32,99,111,112,121,32,116,104,101,32,105,109,97,103,105,110,97,114,121,32,112,97,114,116,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,46,0,0,0,0,0,82,101,108,97,116,101,100,32,99,111,109,109,97,110,100,58,32,114,101,97,108,0,0,0,105,110,116,101,103,114,97,116,101,0,0,0,0,0,0,0,105,110,116,101,103,114,97,108,0,0,0,0,0,0,0,0,91,34,99,111,110,115,116,97,110,116,34,32,111,114,32,34,100,101,102,105,110,105,116,101,34,93,32,118,97,114,105,97,98,108,101,32,91,111,114,100,101,114,32,91,108,111,119,101,114,32,97,110,100,32,117,112,112,101,114,45,98,111,117,110,100,115,93,93,0,0,0,0,83,121,109,98,111,108,105,99,97,108,108,121,32,105,110,116,101,103,114,97,116,101,32,112,111,108,121,110,111,109,105,97,108,115,32,111,114,100,101,114,32,116,105,109,101,115,44,32,116,104,101,110,32,115,105,109,112,108,105,102,121,46,0,0,108,97,112,108,97,99,101,0,91,34,105,110,118,101,114,115,101,34,93,32,118,97,114,105,97,98,108,101,0,0,0,0,67,111,109,112,117,116,101,32,116,104,101,32,76,97,112,108,97,99,101,32,111,114,32,105,110,118,101,114,115,101,32,76,97,112,108,97,99,101,32,116,114,97,110,115,102,111,114,109,32,111,102,32,112,111,108,121,110,111,109,105,97,108,115,46,0,0,0,0,0,0,0,0,84,104,105,115,32,99,111,109,109,97,110,100,32,111,110,108,121,32,119,111,114,107,115,32,119,105,116,104,32,112,111,108,121,110,111,109,105,97,108,115,46,0,0,0,0,0,0,0,108,105,109,105,116,0,0,0,118,97,114,105,97,98,108,101,32,101,120,112,114,101,115,115,105,111,110,0,0,0,0,0,84,97,107,101,32,116,104,101,32,108,105,109,105,116,32,97,115,32,118,97,114,105,97,98,108,101,32,103,111,101,115,32,116,111,32,101,120,112,114,101,115,115,105,111,110,46,0,0,84,104,105,115,32,108,105,109,105,116,32,99,111,109,109,97,110,100,32,105,115,32,101,120,112,101,114,105,109,101,110,116,97,108,46,0,0,0,0,0,108,105,115,116,0,0,0,0,91,34,101,120,112,111,114,116,34,32,111,114,32,34,109,97,120,105,109,97,34,32,111,114,32,34,103,110,117,112,108,111,116,34,32,111,114,32,34,104,101,120,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,115,93,0,0,0,68,105,115,112,108,97,121,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,40,111,110,101,45,100,105,109,101,110,115,105,111,110,97,108,41,32,102,111,114,109,97,116,46,0,0,0,0,0,0,0,0,79,112,116,105,111,110,115,32,116,111,32,101,120,112,111,114,116,32,101,120,112,114,101,115,115,105,111,110,115,32,116,111,32,111,116,104,101,114,32,109,97,116,104,32,112,114,111,103,114,97,109,115,46,0,0,0,110,105,110,116,101,103,114,97,116,101,0,0,0,0,0,0,91,34,116,114,97,112,101,122,111,105,100,34,93,32,118,97,114,105,97,98,108,101,32,91,112,97,114,116,105,116,105,111,110,115,32,91,108,111,119,101,114,32,97,110,100,32,117,112,112,101,114,45,98,111,117,110,100,115,93,93,0,0,0,0,68,111,32,110,117,109,101,114,105,99,97,108,32,100,101,102,105,110,105,116,101,32,105,110,116,101,103,114,97,116,105,111,110,32,117,115,105,110,103,32,83,105,109,112,115,111,110,39,115,32,114,117,108,101,46,0,84,104,105,115,32,99,111,109,109,97,110,100,32,99,97,110,110,111,116,32,105,110,116,101,103,114,97,116,101,32,111,118,101,114,32,115,105,110,103,117,108,97,114,105,116,105,101,115,46,0,0,0,0,0,0,0,111,112,116,105,109,105,122,101,0,0,0,0,0,0,0,0,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,93,0,83,112,108,105,116,32,117,112,32,101,113,117,97,116,105,111,110,115,32,105,110,116,111,32,115,109,97,108,108,101,114,44,32,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,101,113,117,97,116,105,111,110,115,46,0,0,0,0,0,0,112,97,117,115,101,0,0,0,68,105,115,112,108,97,121,32,97,32,108,105,110,101,32,111,102,32,116,101,120,116,32,97,110,100,32,119,97,105,116,32,102,111,114,32,117,115,101,114,32,116,111,32,112,114,101,115,115,32,116,104,101,32,69,110,116,101,114,32,107,101,121,46,0,0,0,0,0,0,0,0,112,114,111,100,117,99,116,0,67,111,109,112,117,116,101,32,116,104,101,32,112,114,111,100,117,99,116,32,97,115,32,118,97,114,105,97,98,108,101,32,103,111,101,115,32,102,114,111,109,32,115,116,97,114,116,32,116,111,32,101,110,100,46,0,82,101,108,97,116,101,100,32,99,111,109,109,97,110,100,58,32,115,117,109,0,0,0,0,114,101,97,100,0,0,0,0,91,102,105,108,101,45,110,97,109,101,32,111,114,32,100,105,114,101,99,116,111,114,121,93,0,0,0,0,0,0,0,0,68,105,115,112,108,97,121,47,99,104,97,110,103,101,32,100,105,114,101,99,116,111,114,121,44,32,111,114,32,114,101,97,100,32,105,110,32,97,32,116,101,120,116,32,102,105,108,101,32,97,115,32,105,102,32,105,116,32,119,97,115,32,116,121,112,101,100,32,105,110,46,0,34,114,101,112,101,97,116,32,114,101,97,100,34,32,119,105,108,108,32,114,101,97,100,32,105,110,32,97,32,102,105,108,101,32,114,101,112,101,97,116,101,100,108,121,32,117,110,116,105,108,32,102,97,105,108,117,114,101,46,0,0,0,0,0,114,101,97,108,0,0,0,0,70,117,108,108,121,32,101,120,112,97,110,100,32,97,110,100,32,99,111,112,121,32,116,104,101,32,114,101,97,108,32,112,97,114,116,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,46,0,0,82,101,108,97,116,101,100,32,99,111,109,109,97,110,100,58,32,105,109,97,103,105,110,97,114,121,0,0,0,0,0,0,114,101,112,108,97,99,101,0,91,118,97,114,105,97,98,108,101,115,32,91,34,119,105,116,104,34,32,101,120,112,114,101,115,115,105,111,110,93,93,0,83,117,98,115,116,105,116,117,116,101,32,118,97,114,105,97,98,108,101,115,32,105,110,32,116,104,101,32,99,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,119,105,116,104,32,101,120,112,114,101,115,115,105,111,110,115,46,0,0,114,111,111,116,115,0,0,0,114,111,111,116,32,114,101,97,108,45,112,97,114,116,32,105,109,97,103,105,110,97,114,121,45,112,97,114,116,0,0,0,68,105,115,112,108,97,121,32,97,108,108,32,116,104,101,32,114,111,111,116,115,32,111,102,32,97,32,99,111,109,112,108,101,120,32,110,117,109,98,101,114,46,0,0,0,0,0,0,34,114,101,112,101,97,116,32,114,111,111,116,115,34,32,114,101,112,101,97,116,101,100,108,121,32,112,114,111,109,112,116,115,32,102,111,114,32,97,110,121,32,105,110,112,117,116,46,0,0,0,0,0,0,0,0,115,97,118,101,0,0,0,0,102,105,108,101,45,110,97,109,101,0,0,0,0,0,0,0,83,97,118,101,32,97,108,108,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,105,110,32,97,32,116,101,120,116,32,102,105,108,101,46,0,0,0,0,0,0,0,0,82,101,108,97,116,101,100,32,99,111,109,109,97,110,100,58,32,114,101,97,100,0,0,0,115,101,116,0,0,0,0,0,91,91,34,110,111,34,93,32,111,112,116,105,111,110,32,91,118,97,108,117,101,93,93,32,46,46,46,0,0,0,0,0,68,105,115,112,108,97,121,44,32,115,101,116,44,32,111,114,32,34,115,97,118,101,34,32,99,117,114,114,101,110,116,32,115,101,115,115,105,111,110,32,111,112,116,105,111,110,115,46,0,0,0,0,0,0,0,0,34,115,101,116,34,32,98,121,32,105,116,115,101,108,102,32,119,105,108,108,32,115,104,111,119,32,97,108,108,32,99,117,114,114,101,110,116,32,111,112,116,105,111,110,32,115,101,116,116,105,110,103,115,46,0,0,115,105,109,112,108,105,102,121,0,0,0,0,0,0,0,0,91,34,115,105,103,110,34,32,34,115,121,109,98,111,108,105,99,34,32,34,113,117,105,99,107,91,101,115,116,93,34,32,34,102,114,97,99,116,105,111,110,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,115,93,0,0,0,0,67,111,109,112,108,101,116,101,108,121,32,115,105,109,112,108,105,102,121,32,101,120,112,114,101,115,115,105,111,110,115,46,0,0,0,0,0,0,0,0,115,111,108,118,101,0,0,0,91,34,118,101,114,105,102,121,34,32,111,114,32,34,118,101,114,105,102,105,97,98,108,101,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,93,32,91,34,102,111,114,34,93,32,101,120,112,114,101,115,115,105,111,110,0,0,0,83,111,108,118,101,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,113,117,97,116,105,111,110,115,32,102,111,114,32,97,32,118,97,114,105,97,98,108,101,32,111,114,32,102,111,114,32,122,101,114,111,46,0,0,0,0,0,0,0,84,104,101,32,118,101,114,105,102,121,32,111,112,116,105,111,110,115,32,99,104,101,99,107,32,97,108,108,32,114,101,116,117,114,110,101,100,32,115,111,108,117,116,105,111,110,115,32,102,111,114,32,99,111,114,114,101,99,116,110,101,115,115,46,0,0,0,0,0,0,0,0,115,117,109,0,0,0,0,0,67,111,109,112,117,116,101,32,116,104,101,32,115,117,109,109,97,116,105,111,110,32,97,115,32,118,97,114,105,97,98,108,101,32,103,111,101,115,32,102,114,111,109,32,115,116,97,114,116,32,116,111,32,101,110,100,46,0,0,0,0,0,0,0,82,101,108,97,116,101,100,32,99,111,109,109,97,110,100,58,32,112,114,111,100,117,99,116,0,0,0,0,0,0,0,0,116,97,121,108,111,114,0,0,91,34,110,111,115,105,109,112,108,105,102,121,34,93,32,118,97,114,105,97,98,108,101,32,111,114,100,101,114,32,112,111,105,110,116,0,0,0,0,0,67,111,109,112,117,116,101,32,116,104,101,32,84,97,121,108,111,114,32,115,101,114,105,101,115,32,101,120,112,97,110,115,105,111,110,32,111,102,32,116,104,101,32,99,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,46,0,0,117,110,102,97,99,116,111,114,0,0,0,0,0,0,0,0,101,120,112,97,110,100,0,0,91,34,99,111,117,110,116,34,32,34,102,114,97,99,116,105,111,110,34,32,34,113,117,105,99,107,34,32,34,112,111,119,101,114,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,93,0,0,0,0,65,108,103,101,98,114,97,105,99,97,108,108,121,32,101,120,112,97,110,100,32,40,109,117,108,116,105,112,108,121,32,111,117,116,41,32,101,120,112,114,101,115,115,105,111,110,115,46,0,0,0,0,0,0,0,0,118,97,114,105,97,98,108,101,115,0,0,0,0,0,0,0,91,34,99,34,32,34,106,97,118,97,34,32,34,105,110,116,101,103,101,114,34,32,34,99,111,117,110,116,34,93,32,91,101,113,117,97,116,105,111,110,45,110,117,109,98,101,114,45,114,97,110,103,101,115,93,0,83,104,111,119,32,97,108,108,32,118,97,114,105,97,98,108,101,32,110,97,109,101,115,32,117,115,101,100,32,119,105,116,104,105,110,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,120,112,114,101,115,115,105,111,110,115,46,0,0,82,101,108,97,116,101,100,32,99,111,109,109,97,110,100,58,32,99,111,100,101,0,0,0,118,101,114,115,105,111,110,0,91,34,115,116,97,116,117,115,34,93,0,0,0,0,0,0,68,105,115,112,108,97,121,32,77,97,116,104,111,109,97,116,105,99,32,118,101,114,115,105,111,110,44,32,115,116,97,116,117,115,44,32,97,110,100,32,99,111,109,112,105,108,101,114,32,105,110,102,111,114,109,97,116,105,111,110,46,0,0,0,85,110,109,97,116,99,104,101,100,32,112,97,114,101,110,116,104,101,115,105,115,58,32,116,111,111,32,109,97,110,121,32,41,0,0,0,0,0,0,0,67,117,114,115,111,114,32,111,114,32,102,117,110,99,116,105,111,110,32,107,101,121,32,115,116,114,105,110,103,32,101,110,99,111,117,110,116,101,114,101,100,44,32,117,110,97,98,108,101,32,116,111,32,105,110,116,101,114,112,114,101,116,46,0,84,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,97,98,115,111,108,117,116,101,32,118,97,108,117,101,115,46,0,0,0,0,0,0,0,0,77,117,108,116,105,102,97,99,116,111,114,105,97,108,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,44,32,117,115,105,110,103,32,120,33,33,32,61,32,40,120,33,41,33,0,0,0,0,0,0,0,43,47,45,0,0,0,0,0,67,111,110,115,116,97,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,0,69,114,114,111,114,32,112,97,114,115,105,110,103,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,32,110,117,109,98,101,114,32,97,102,116,101,114,32,35,46,0,0,0,0,78,111,32,101,120,112,114,101,115,115,105,111,110,32,97,118,97,105,108,97,98,108,101,32,105,110,32,35,32,115,112,101,99,105,102,105,101,100,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,46,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,99,104,97,114,97,99,116,101,114,46,0,105,110,102,0,0,0,0,0,85,110,107,110,111,119,110,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,85,110,109,97,116,99,104,101,100,32,112,97,114,101,110,116,104,101,115,105,115,58,32,109,105,115,115,105,110,103,32,41,0,0,0,0,0,0,0,0,83,121,110,116,97,120,32,101,114,114,111,114,46,0,0,0,73,110,118,97,108,105,100,32,118,97,114,105,97,98,108,101,46,0,0,0,0,0,0,0,86,97,114,105,97,98,108,101,32,110,97,109,101,32,116,111,111,32,108,111,110,103,46,0,110,97,110,0,0,0,0,0,65,116,116,101,109,112,116,32,116,111,32,101,110,116,101,114,32,78,97,78,32,40,78,111,116,32,97,32,78,117,109,98,101,114,41,59,32,67,111,110,118,101,114,116,101,100,32,116,111,32,118,97,114,105,97,98,108,101,46,0,0,0,0,0,73,110,102,105,110,105,116,121,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,97,115,32,97,32,118,97,114,105,97,98,108,101,46,0,0,115,105,103,110,0,0,0,0,105,35,0,0,0,0,0,0,101,35,0,0,0,0,0,0,112,105,35,0,0,0,0,0,69,109,112,116,121,32,118,97,114,105,97,98,108,101,32,110,97,109,101,32,112,97,114,115,101,100,33,0,0,0,0,0,105,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,112,105,0,0,0,0,0,0,34,97,108,108,34,32,105,115,32,97,32,114,101,115,101,114,118,101,100,32,119,111,114,100,32,97,110,100,32,109,97,121,32,110,111,116,32,98,101,32,117,115,101,100,32,97,115,32,97,32,118,97,114,105,97,98,108,101,32,110,97,109,101,46,0,0,0,0,0,0,0,0,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,118,97,114,105,97,98,108,101,32,110,97,109,101,115,32,114,101,97,99,104,101,100,46,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,40,99,97,110,39,116,32,109,97,108,108,111,99,40,51,41,32,118,97,114,105,97,98,108,101,32,110,97,109,101,41,46,0,0,77,97,120,105,109,117,109,32,115,117,98,115,99,114,105,112,116,32,101,120,99,101,101,100,101,100,32,105,110,32,115,112,101,99,105,97,108,32,118,97,114,105,97,98,108,101,32,110,97,109,101,46,0,0,0,0,59,10,13,26,0,0,0,0,115,116,97,116,117,115,0,0,49,54,46,48,46,53,0,0,37,115,10,0,0,0,0,0,10,70,111,114,32,97,108,108,32,110,101,119,32,115,116,117,102,102,44,32,118,105,115,105,116,32,116,104,101,32,77,97,116,104,111,109,97,116,105,99,32,119,101,98,115,105,116,101,58,32,119,119,119,46,109,97,116,104,111,109,97,116,105,99,46,111,114,103,0,0,0,0,77,97,116,104,111,109,97,116,105,99,32,118,101,114,115,105,111,110,32,37,115,10,0,0,84,104,101,32,108,97,115,116,32,109,97,105,110,32,112,114,111,109,112,116,32,114,101,116,117,114,110,32,118,97,108,117,101,32,105,115,32,37,100,32,40,109,101,97,110,105,110,103,32,0,0,0,0,0,0,0,102,97,105,108,117,114,101,41,46,10,0,0,0,0,0,0,115,117,99,99,101,115,115,41,46,10,0,0,0,0,0,0,10,67,111,109,112,105,108,101,45,116,105,109,101,32,100,101,102,105,110,101,115,32,117,115,101,100,58,32,0,0,0,0,83,73,76,69,78,84,32,0,76,73,66,82,65,82,89,32,0,0,0,0,0,0,0,0,10,115,105,122,101,111,102,40,105,110,116,41,32,61,32,37,117,32,98,121,116,101,115,44,32,115,105,122,101,111,102,40,108,111,110,103,41,32,61,32,37,117,32,98,121,116,101,115,46,10,0,0,0,0,0,0,115,105,122,101,111,102,40,100,111,117,98,108,101,41,32,61,32,37,117,32,98,121,116,101,115,44,32,109,97,120,105,109,117,109,32,100,111,117,98,108,101,32,112,114,101,99,105,115,105,111,110,32,61,32,37,100,32,100,101,99,105,109,97,108,32,100,105,103,105,116,115,46,10,0,0,0,0,0,0,0,71,78,85,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51680);
/* memory initializer */ allocate([67,32,67,111,109,112,105,108,101,114,32,118,101,114,115,105,111,110,58,32,37,115,10,0,52,46,50,46,49,32,67,111,109,112,97,116,105,98,108,101,32,67,108,97,110,103,32,51,46,51,32,0,0,0,0,0,10,37,100,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,99,117,114,114,101,110,116,108,121,32,97,108,108,111,99,97,116,101,100,46,10,0,0,0,0,0,0,0,84,104,101,32,99,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,32,97,114,114,97,121,32,115,105,122,101,32,105,115,32,37,100,32,116,111,107,101,110,115,44,10,0,0,0,0,0,0,0,0,109,97,107,105,110,103,32,116,104,101,32,109,97,120,105,109,117,109,32,109,101,109,111,114,121,32,117,115,97,103,101,32,97,112,112,114,111,120,105,109,97,116,101,108,121,32,37,108,100,32,109,101,103,97,98,121,116,101,115,46,10,0,0,0,109,97,107,105,110,103,32,116,104,101,32,109,97,120,105,109,117,109,32,109,101,109,111,114,121,32,117,115,97,103,101,32,97,112,112,114,111,120,105,109,97,116,101,108,121,32,37,108,100,32,107,105,108,111,98,121,116,101,115,46,10,0,0,0,84,104,101,32,99,117,114,114,101,110,116,32,115,101,99,117,114,105,116,121,32,108,101,118,101,108,32,105,115,32,37,100,0,0,0,0,0,0,0,0,44,32,109,101,97,110,105,110,103,32,121,111,117,32,97,114,101,32,114,117,110,110,105,110,103,32,109,52,32,77,97,116,104,111,109,97,116,105,99,46,10,0,0,0,0,0,0,0,44,32,110,111,32,115,101,99,117,114,105,116,121,44,32,109,101,97,110,105,110,103,32,117,115,101,114,115,32,97,114,101,32,117,110,114,101,115,116,114,105,99,116,101,100,46,10,0,44,32,115,111,109,101,32,115,101,99,117,114,105,116,121,46,10,0,0,0,0,0,0,0,44,32,104,105,103,104,32,115,101,99,117,114,105,116,121,46,10,0,0,0,0,0,0,0,44,32,109,97,120,105,109,117,109,32,115,101,99,117,114,105,116,121,46,10,0,0,0,0,44,32,117,110,107,110,111,119,110,32,109,101,97,110,105,110,103,46,10,0,0,0,0,0,118,101,114,105,102,121,0,0,118,101,114,105,102,105,97,98,108,101,0,0,0,0,0,0,78,111,32,101,113,117,97,116,105,111,110,115,32,116,111,32,115,111,108,118,101,46,0,0,102,111,114,0,0,0,0,0,69,110,116,101,114,32,118,97,114,105,97,98,108,101,32,116,111,32,115,111,108,118,101,32,102,111,114,58,32,0,0,0,67,97,110,32,111,110,108,121,32,118,101,114,105,102,121,32,102,111,114,32,97,32,115,105,110,103,108,101,32,115,111,108,118,101,32,118,97,114,105,97,98,108,101,32,111,114,32,105,100,101,110,116,105,116,105,101,115,32,97,102,116,101,114,32,115,111,108,118,105,110,103,32,102,111,114,32,48,46,0,0,83,111,108,118,105,110,103,32,101,113,117,97,116,105,111,110,32,35,37,100,32,102,111,114,32,0,0,0,0,0,0,0,32,119,105,116,104,32,114,101,113,117,105,114,101,100,32,0,32,119,105,116,104,32,0,0,118,101,114,105,102,105,99,97,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,0,105,100,101,110,116,105,116,121,32,118,101,114,105,102,105,99,97,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,82,101,115,117,108,116,32,110,111,116,32,97,32,112,114,111,112,101,114,108,121,32,115,111,108,118,101,100,32,101,113,117,97,116,105,111,110,44,32,115,111,32,99,97,110,110,111,116,32,118,101,114,105,102,121,46,0,0,0,0,0,0,0,0,69,113,117,97,116,105,111,110,32,119,97,115,32,97,108,114,101,97,100,121,32,115,111,108,118,101,100,44,32,115,111,32,110,111,32,110,101,101,100,32,116,111,32,118,101,114,105,102,121,32,115,111,108,117,116,105,111,110,115,46,0,0,0,0,84,104,105,115,32,101,113,117,97,116,105,111,110,32,105,115,32,97,110,32,105,100,101,110,116,105,116,121,46,10,0,0,65,108,108,32,115,111,108,117,116,105,111,110,115,32,118,101,114,105,102,105,101,100,46,10,0,0,0,0,0,0,0,0,83,111,108,117,116,105,111,110,32,118,101,114,105,102,105,101,100,46,10,0,0,0,0,0,83,111,108,117,116,105,111,110,32,109,105,103,104,116,32,98,101,32,105,110,99,111,114,114,101,99,116,32,98,101,99,97,117,115,101,32,105,116,32,99,111,110,116,97,105,110,115,32,105,110,102,105,110,105,116,121,32,111,114,32,78,97,78,46,0,0,0,0,0,0,0,0,84,104,105,115,32,101,113,117,97,116,105,111,110,32,105,115,32,78,79,84,32,97,110,32,105,100,101,110,116,105,116,121,46,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,118,101,114,105,102,121,32,97,108,108,32,115,111,108,117,116,105,111,110,115,46,0,85,110,97,98,108,101,32,116,111,32,118,101,114,105,102,121,32,115,111,108,117,116,105,111,110,46,0,0,0,0,0,0,83,111,108,118,101,32,102,97,105,108,101,100,32,102,111,114,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,32,35,37,100,46,10,0,0,0,78,111,32,119,111,114,107,32,100,111,110,101,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,97,110,121,32,114,101,112,101,97,116,101,100,32,101,120,112,114,101,115,115,105,111,110,115,46,0,0,0,0,0,0,0,0,100,105,114,101,99,116,111,114,121,32,37,115,10,0,0,0,112,114,101,99,105,115,105,111,110,32,61,32,37,100,32,100,105,103,105,116,115,10,0,0,110,111,32,0,0,0,0,0,97,117,116,111,115,111,108,118,101,10,0,0,0,0,0,0,97,117,116,111,99,97,108,99,10,0,0,0,0,0,0,0,97,117,116,111,100,101,108,101,116,101,10,0,0,0,0,0,97,117,116,111,115,101,108,101,99,116,10,0,0,0,0,0,99,97,115,101,95,115,101,110,115,105,116,105,118,101,10,0,97,108,108,32,104,116,109,108,32,0,0,0,0,0,0,0,104,116,109,108,32,0,0,0,97,108,116,101,114,110,97,116,105,118,101,32,0,0,0,0,98,111,108,100,32,99,111,108,111,114,0,0,0,0,0,0,110,111,32,99,111,108,111,114,0,0,0,0,0,0,0,0,110,111,32,98,111,108,100,32,99,111,108,111,114,0,0,0,32,37,100,0,0,0,0,0,10,0,0,0,0,0,0,0,100,105,115,112,108,97,121,50,100,10,0,0,0,0,0,0,99,111,108,117,109,110,115,32,61,32,37,100,44,32,0,0,114,111,119,115,32,61,32,37,100,10,0,0,0,0,0,0,102,114,97,99,116,105,111,110,115,95,100,105,115,112,108,97,121,95,109,111,100,101,32,61,32,0,0,0,0,0,0,0,110,111,110,101,10,0,0,0,109,105,120,101,100,10,0,0,115,105,109,112,108,101,10,0,112,114,111,109,112,116,10,0,114,97,116,105,111,110,97,108,105,122,101,95,100,101,110,111,109,105,110,97,116,111,114,115,10,0,0,0,0,0,0,0,109,111,100,117,108,117,115,95,109,111,100,101,32,61,32,0,67,10,0,0,0,0,0,0,80,121,116,104,111,110,10,0,110,111,114,109,97,108,10,0,117,110,107,110,111,119,110,10,0,0,0,0,0,0,0,0,110,111,32,102,105,120,101,100,95,112,111,105,110,116,10,0,102,105,120,101,100,95,112,111,105,110,116,32,61,32,37,100,10,0,0,0,0,0,0,0,102,97,99,116,111,114,95,105,110,116,101,103,101,114,115,10,0,0,0,0,0,0,0,0,114,105,103,104,116,95,97,115,115,111,99,105,97,116,105,118,101,95,112,111,119,101,114,10,0,0,0,0,0,0,0,0,115,112,101,99,105,97,108,95,118,97,114,105,97,98,108,101,95,99,104,97,114,97,99,116,101,114,115,32,61,32,37,115,10,0,0,0,0,0,0,0,110,111,0,0,0,0,0,0,110,111,116,0,0,0,0,0,111,102,102,0,0,0,0,0,102,97,108,115,101,0,0,0,121,101,115,0,0,0,0,0,111,110,0,0,0,0,0,0,116,114,117,101,0,0,0,0,83,101,116,32,111,112,116,105,111,110,115,32,115,116,97,114,116,117,112,32,102,105,108,101,32,110,97,109,101,32,110,111,116,32,115,101,116,59,32,99,111,110,116,97,99,116,32,116,104,101,32,100,101,118,101,108,111,112,101,114,46,0,0,0,119,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,119,114,105,116,101,32,116,111,32,115,101,116,32,111,112,116,105,111,110,115,32,115,116,97,114,116,117,112,32,102,105,108,101,46,0,0,0,0,59,32,77,97,116,104,111,109,97,116,105,99,32,115,101,116,32,111,112,116,105,111,110,115,32,108,111,97,100,101,100,32,97,116,32,115,116,97,114,116,117,112,44,10,0,0,0,0,59,32,99,114,101,97,116,101,100,32,98,121,32,116,104,101,32,34,115,101,116,32,115,97,118,101,34,32,99,111,109,109,97,110,100,46,10,0,0,0,59,32,84,104,105,115,32,102,105,108,101,32,99,97,110,32,98,101,32,101,100,105,116,101,100,32,111,114,32,100,101,108,101,116,101,100,46,10,10,0,83,116,97,114,116,117,112,32,102,105,108,101,32,34,37,115,34,32,111,118,101,114,119,114,105,116,116,101,110,32,119,105,116,104,32,115,101,116,32,111,112,116,105,111,110,115,46,10,0,0,0,0,0,0,0,0,83,101,116,32,111,112,116,105,111,110,115,32,115,97,118,101,100,32,105,110,32,115,116,97,114,116,117,112,32,102,105,108,101,32,34,37,115,34,46,10,0,0,0,0,0,0,0,0,69,114,114,111,114,32,115,97,118,105,110,103,32,115,101,116,32,111,112,116,105,111,110,115,46,0,0,0,0,0,0,0,100,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,72,79,77,69,0,0,0,0,72,79,77,69,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,110,111,116,32,115,101,116,46,0,0,0,0,0,0,69,114,114,111,114,32,99,104,97,110,103,105,110,103,32,100,105,114,101,99,116,111,114,121,46,0,0,0,0,0,0,0,67,117,114,114,101,110,116,32,119,111,114,107,105,110,103,32,100,105,114,101,99,116,111,114,121,32,99,104,97,110,103,101,100,32,116,111,32,0,0,0,79,112,116,105,111,110,32,100,105,115,97,98,108,101,100,32,98,121,32,115,101,99,117,114,105,116,121,32,108,101,118,101,108,46,0,0,0,0,0,0,115,112,101,99,105,97,108,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,105,110,32,108,105,115,116,44,32,99,104,97,114,97,99,116,101,114,32,105,115,32,97,32,77,97,116,104,111,109,97,116,105,99,32,111,112,101,114,97,116,111,114,46,0,0,114,111,119,115,0,0,0,0,67,117,114,114,101,110,116,32,115,99,114,101,101,110,32,114,111,119,115,32,105,115,32,37,100,46,10,0,0,0,0,0,80,108,101,97,115,101,32,115,112,101,99,105,102,121,32,104,111,119,32,116,97,108,108,32,116,104,101,32,115,99,114,101,101,110,32,105,115,59,32,48,32,61,32,110,111,32,112,97,103,105,110,97,116,105,111,110,46,0,0,0,0,0,0,0,99,111,108,117,109,110,115,0,79,83,32,102,97,105,108,101,100,32,116,111,32,114,101,116,117,114,110,32,115,99,114,101,101,110,32,115,105,122,101,46,0,0,0,0,0,0,0,0,80,108,101,97,115,101,32,115,112,101,99,105,102,121,32,104,111,119,32,119,105,100,101,32,116,104,101,32,115,99,114,101,101,110,32,105,115,59,32,48,32,61,32,110,111,32,108,105,109,105,116,46,0,0,0,0,119,105,100,101,0,0,0,0,112,114,101,99,105,115,105,111,110,0,0,0,0,0,0,0,80,108,101,97,115,101,32,115,112,101,99,105,102,121,32,97,32,100,105,115,112,108,97,121,32,112,114,101,99,105,115,105,111,110,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,49,53,32,100,105,103,105,116,115,46,0,0,0,0,0,97,117,116,111,0,0,0,0,97,117,116,111,115,111,108,118,101,0,0,0,0,0,0,0,97,117,116,111,99,97,108,99,0,0,0,0,0,0,0,0,97,117,116,111,100,101,108,101,116,101,0,0,0,0,0,0,97,117,116,111,115,101,108,101,99,116,0,0,0,0,0,0,99,97,115,101,0,0,0,0,100,105,115,112,108,97,121,50,100,0,0,0,0,0,0,0,102,114,97,99,116,105,111,110,115,0,0,0,0,0,0,0,110,111,110,101,0,0,0,0,115,105,109,112,108,101,0,0,109,105,120,101,100,0,0,0,80,108,101,97,115,101,32,115,112,101,99,105,102,121,32,116,104,101,32,102,114,97,99,116,105,111,110,115,32,100,105,115,112,108,97,121,32,109,111,100,101,32,110,117,109,98,101,114,32,40,48,44,32,49,44,32,111,114,32,50,41,46,0,0,48,32,109,101,97,110,115,32,100,111,32,110,111,116,32,100,105,115,112,108,97,121,32,97,110,121,32,99,111,110,115,116,97,110,116,115,32,97,115,32,102,114,97,99,116,105,111,110,115,44,10,0,0,0,0,0,49,32,109,101,97,110,115,32,100,105,115,112,108,97,121,32,115,111,109,101,32,99,111,110,115,116,97,110,116,115,32,97,115,32,34,115,105,109,112,108,101,34,32,102,114,97,99,116,105,111,110,115,44,10,0,0,50,32,109,101,97,110,115,32,100,105,115,112,108,97,121,32,115,111,109,101,32,99,111,110,115,116,97,110,116,115,32,97,115,32,34,109,105,120,101,100,34,32,111,114,32,115,105,109,112,108,101,32,102,114,97,99,116,105,111,110,115,46,10,0,67,117,114,114,101,110,116,32,118,97,108,117,101,32,105,115,32,37,100,46,10,0,0,0,112,114,111,109,112,116,0,0,100,101,109,111,0,0,0,0,104,116,109,108,0,0,0,0,112,114,101,115,101,114,118,101,95,115,117,114,100,115,0,0,114,97,116,105,111,110,97,108,105,122,101,0,0,0,0,0,109,111,100,117,108,117,115,95,109,111,100,101,0,0,0,0,77,111,100,117,108,117,115,32,109,111,100,101,32,99,97,110,110,111,116,32,98,101,32,116,117,114,110,101,100,32,111,102,102,46,0,0,0,0,0,0,67,0,0,0,0,0,0,0,106,97,118,97,0,0,0,0,112,121,116,104,111,110,0,0,112,111,115,105,116,105,118,101,0,0,0,0,0,0,0,0,110,111,114,109,97,108,0,0,80,108,101,97,115,101,32,115,112,101,99,105,102,121,32,116,104,101,32,109,111,100,117,108,117,115,32,109,111,100,101,32,110,117,109,98,101,114,32,40,48,44,32,49,44,32,111,114,32,50,41,46,0,0,0,0,42,32,34,67,34,32,97,110,100,32,34,74,97,118,97,34,32,112,114,111,103,114,97,109,109,105,110,103,32,108,97,110,103,117,97,103,101,32,109,111,100,101,32,48,58,10,0,0,32,32,48,32,109,101,97,110,115,32,109,111,100,117,108,117,115,32,111,112,101,114,97,116,111,114,32,40,100,105,118,105,100,101,110,100,32,37,37,32,100,105,118,105,115,111,114,41,32,114,101,115,117,108,116,32,104,97,115,32,115,97,109,101,32,115,105,103,110,32,97,115,32,100,105,118,105,100,101,110,100,59,10,0,0,0,0,0,42,32,34,80,121,116,104,111,110,34,32,112,114,111,103,114,97,109,109,105,110,103,32,108,97,110,103,117,97,103,101,32,109,111,100,101,32,49,58,10,0,0,0,0,0,0,0,0,32,32,49,32,109,101,97,110,115,32,99,111,109,112,117,116,101,100,32,114,101,115,117,108,116,32,97,108,119,97,121,115,32,104,97,115,32,115,97,109,101,32,115,105,103,110,32,97,115,32,116,104,101,32,100,105,118,105,115,111,114,59,10,0,42,32,77,97,116,104,101,109,97,116,105,99,97,108,108,121,32,99,111,114,114,101,99,116,32,109,111,100,101,32,50,32,102,111,114,32,112,101,114,102,101,99,116,32,115,105,109,112,108,105,102,105,99,97,116,105,111,110,58,10,0,0,0,0,32,32,50,32,109,101,97,110,115,32,116,104,101,32,114,101,115,117,108,116,32,105,115,32,97,108,119,97,121,115,32,34,112,111,115,105,116,105,118,101,34,32,111,114,32,122,101,114,111,32,40,34,110,111,114,109,97,108,34,32,109,111,100,101,41,46,10,10,0,0,0,0,84,104,101,32,99,117,114,114,101,110,116,32,118,97,108,117,101,32,105,115,32,37,100,32,40,0,0,0,0,0,0,0,80,121,116,104,111,110,0,0,117,110,107,110,111,119,110,0,32,109,111,100,101,41,46,10,0,0,0,0,0,0,0,0,99,111,108,111,114,0,0,0,97,108,116,101,114,110,97,116,105,118,101,0,0,0,0,0,98,111,108,100,0,0,0,0,102,105,120,101,100,0,0,0,80,108,101,97,115,101,32,115,112,101,99,105,102,121,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,100,105,103,105,116,115,32,116,111,32,100,105,115,112,108,97,121,32,97,102,116,101,114,32,116,104,101,32,100,101,99,105,109,97,108,32,112,111,105,110,116,46,0,82,97,110,103,101,32,105,115,32,45,49,32,116,111,32,49,48,48,59,32,83,101,116,115,32,114,111,117,110,100,101,100,32,100,105,115,112,108,97,121,32,119,105,116,104,32,102,105,120,101,100,32,110,117,109,98,101,114,32,111,102,32,116,114,97,105,108,105,110,103,32,100,105,103,105,116,115,46,0,0,83,101,116,116,105,110,103,32,114,111,117,110,100,101,100,44,32,105,110,116,101,103,101,114,45,111,110,108,121,32,100,105,115,112,108,97,121,46,0,0,102,97,99,116,111,114,95,105,110,116,101,103,101,114,115,0,114,105,103,104,116,95,97,115,115,111,99,105,97,116,105,118,101,95,112,111,119,101,114,0,108,111,97,100,0,0,0,0,68,111,105,110,103,32,110,111,116,104,105,110,103,46,10,0,73,103,110,111,114,105,110,103,32,114,101,99,117,114,115,105,118,101,32,34,115,101,116,32,108,111,97,100,34,46,10,0,10,69,110,100,32,111,102,32,102,105,108,101,46,10,0,0,69,114,114,111,114,32,108,111,97,100,105,110,103,32,115,116,97,114,116,117,112,32,115,101,116,32,111,112,116,105,111,110,115,46,0,0,0,0,0,0,115,97,118,101,0,0,0,0,71,111,116,32,34,115,101,116,32,115,97,118,101,34,32,119,104,105,108,101,32,108,111,97,100,105,110,103,32,115,116,97,114,116,117,112,32,111,112,116,105,111,110,115,44,32,113,117,105,116,116,105,110,103,46,10,0,0,0,0,0,0,0,0,83,101,116,32,111,112,116,105,111,110,115,32,115,116,97,114,116,117,112,32,102,105,108,101,32,34,37,115,34,32,114,101,109,111,118,101,100,46,10,0,70,97,99,116,111,114,121,32,100,101,102,97,117,108,116,32,111,112,116,105,111,110,115,32,119,105,108,108,32,98,101,32,117,115,101,100,32,111,110,32,110,101,120,116,32,115,116,97,114,116,117,112,32,111,102,32,77,97,116,104,111,109,97,116,105,99,46,10,0,0,0,0,83,101,116,32,111,112,116,105,111,110,115,32,115,116,97,114,116,117,112,32,102,105,108,101,32,99,97,110,110,111,116,32,98,101,32,114,101,109,111,118,101,100,46,0,0,0,0,0,10,78,101,119,32,115,116,97,114,116,117,112,32,115,101,116,32,111,112,116,105,111,110,115,32,108,111,97,100,101,100,46,10,0,0,0,0,0,0,0,69,114,114,111,114,32,108,111,97,100,105,110,103,32,110,101,119,32,115,116,97,114,116,117,112,32,115,101,116,32,111,112,116,105,111,110,115,46,0,0,67,111,114,114,101,99,116,32,111,114,32,116,121,112,101,32,34,115,101,116,32,110,111,32,115,97,118,101,34,32,116,111,32,114,101,109,111,118,101,46,10,0,0,0,0,0,0,0,115,101,116,0,0,0,0,0,10,67,97,110,110,111,116,32,112,114,111,99,101,115,115,32,115,101,116,32,115,116,114,105,110,103,32,34,37,115,34,46,10,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,115,101,116,32,111,112,116,105,111,110,46,0,0,0,0,0,79,112,116,105,111,110,115,32,97,114,101,32,115,101,116,32,97,115,32,102,111,108,108,111,119,115,58,10,10,0,0,0,37,115,0,0,0,0,0,0,115,101,108,101,99,116,0,0,73,110,118,97,108,105,100,32,101,113,117,97,116,105,111,110,32,110,117,109,98,101,114,32,114,97,110,103,101,46,0,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,46,32,32,69,120,112,101,99,116,105,110,103,32,101,113,117,97,116,105,111,110,32,110,117,109,98,101,114,32,111,114,32,114,97,110,103,101,46,0,0,115,121,109,98,111,108,105,99,0,0,0,0,0,0,0,0,97,112,112,114,111,120,105,109,97,116,101,0,0,0,0,0,119,105,116,104,0,0,0,0,67,97,110,110,111,116,32,99,111,109,112,97,114,101,32,97,110,32,101,120,112,114,101,115,115,105,111,110,32,119,105,116,104,32,105,116,115,101,108,102,46,0,0,0,0,0,0,0,67,111,109,112,97,114,105,110,103,32,35,37,100,32,119,105,116,104,32,35,37,100,46,46,46,10,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,115,32,97,114,101,32,105,100,101,110,116,105,99,97,108,46,10,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,115,32,100,105,102,102,101,114,32,111,110,108,121,32,105,110,32,115,105,103,110,32,40,116,105,109,101,115,32,45,49,41,46,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,115,32,100,105,102,102,101,114,46,10,0,0,0,0,67,97,110,110,111,116,32,99,111,109,112,97,114,101,32,97,110,32,101,113,117,97,116,105,111,110,32,119,105,116,104,32,97,32,110,111,110,45,101,113,117,97,116,105,111,110,46,0,69,113,117,97,116,105,111,110,115,32,97,114,101,32,105,100,101,110,116,105,99,97,108,46,10,0,0,0,0,0,0,0,69,113,117,97,116,105,111,110,115,32,100,105,102,102,101,114,46,10,0,0,0,0,0,0,86,97,114,105,97,98,108,101,32,0,0,0,0,0,0,0,32,105,110,32,116,104,101,32,102,105,114,115,116,32,101,113,117,97,116,105,111,110,10,105,115,32,101,113,117,97,108,32,116,111,32,0,0,0,0,0,45,0,0,0,0,0,0,0,32,105,110,32,116,104,101,32,115,101,99,111,110,100,32,101,113,117,97,116,105,111,110,46,10,0,0,0,0,0,0,0,82,72,83,32,97,112,112,101,97,114,115,32,110,101,103,97,116,101,100,46,0,0,0,0,68,105,102,102,101,114,101,110,116,32,76,72,83,32,118,97,114,105,97,98,108,101,32,110,97,109,101,44,32,111,116,104,101,114,119,105,115,101,32,116,104,101,32,115,97,109,101,46,0,0,0,0,0,0,0,0,37,46,42,103,0,0,0,0,32,61,32,37,46,42,103,47,37,46,42,103,0,0,0,0,89,111,117,32,104,97,118,101,32,101,110,116,101,114,101,100,32,97,32,98,97,115,101,32,118,97,114,105,97,98,108,101,46,0,0,0,0,0,0,0,80,111,108,121,110,111,109,105,97,108,32,100,105,118,105,115,105,111,110,32,119,105,108,108,32,98,101,32,98,97,115,101,100,32,111,110,32,116,104,105,115,32,118,97,114,105,97,98,108,101,46,0,0,0,0,0,69,110,116,101,114,32,100,105,118,105,100,101,110,100,58,32,0,0,0,0,0,0,0,0,69,110,116,101,114,32,100,105,118,105,115,111,114,58,32,0,82,101,115,117,108,116,32,111,102,32,110,117,109,101,114,105,99,97,108,32,100,105,118,105,115,105,111,110,58,10,0,0,37,46,42,103,47,37,46,42,103,32,61,32,37,46,42,103,0,0,0,0,0,0,0,0,32,61,32,45,37,46,42,103,47,37,46,42,103,0,0,0,32,61,32,45,40,37,46,42,103,32,43,32,40,37,46,42,103,47,37,46,42,103,41,41,0,0,0,0,0,0,0,0,32,61,32,37,46,42,103,32,43,32,40,37,46,42,103,47,37,46,42,103,41,0,0,0,10,81,117,111,116,105,101,110,116,58,32,37,46,42,103,44,32,82,101,109,97,105,110,100,101,114,58,32,37,46,42,103,10,0,0,0,0,0,0,0,78,111,32,71,67,68,32,102,111,117,110,100,46,10,0,0,71,67,68,32,61,32,0,0,76,67,77,32,61,32,0,0,82,101,115,117,108,116,32,111,102,32,99,111,109,112,108,101,120,32,110,117,109,98,101,114,32,100,105,118,105,115,105,111,110,58,10,0,0,0,0,0,37,46,42,103,32,37,43,46,42,103,42,105,10,10,0,0,80,111,108,121,110,111,109,105,97,108,32,100,105,118,105,115,105,111,110,32,115,117,99,99,101,115,115,102,117,108,32,117,115,105,110,103,32,98,97,115,101,32,118,97,114,105,97,98,108,101,32,37,115,46,10,0,84,104,101,32,113,117,111,116,105,101,110,116,32,105,115,58,10,0,0,0,0,0,0,0,10,10,84,104,101,32,114,101,109,97,105,110,100,101,114,32,105,115,58,10,0,0,0,0,80,111,108,121,110,111,109,105,97,108,32,100,105,118,105,115,105,111,110,32,102,97,105,108,101,100,44,0,0,0,0,0,98,101,99,97,117,115,101,32,116,104,101,32,103,105,118,101,110,32,112,111,108,121,110,111,109,105,97,108,115,32,99,97,110,110,111,116,32,98,101,32,100,105,118,105,100,101,100,32,105,110,32,116,104,101,32,103,105,118,101,110,32,111,114,100,101,114,44,0,0,0,0,0,97,99,99,111,114,100,105,110,103,32,116,111,32,116,104,101,32,114,117,108,101,115,32,111,102,32,112,111,108,121,110,111,109,105,97,108,32,100,105,118,105,115,105,111,110,46,0,0,80,111,108,121,110,111,109,105,97,108,32,71,67,68,32,40,97,102,116,101,114,32,37,100,32,69,117,99,108,105,100,101,97,110,32,97,108,103,111,114,105,116,104,109,32,105,116,101,114,97,116,105,111,110,115,41,58,10,0,0,0,0,0,0,80,111,108,121,110,111,109,105,97,108,32,71,67,68,32,40,97,102,116,101,114,32,113,117,105,99,107,32,112,111,108,121,110,111,109,105,97,108,32,102,97,99,116,111,114,105,110,103,41,58,10,0,0,0,0,0,78,111,32,97,100,100,105,116,105,118,101,32,117,110,105,118,97,114,105,97,116,101,32,112,111,108,121,110,111,109,105,97,108,32,71,67,68,32,102,111,117,110,100,46,0,0,0,0,84,104,105,115,32,100,111,101,115,32,110,111,116,32,109,101,97,110,32,116,104,101,114,101,32,105,115,32,110,111,32,71,67,68,59,32,105,116,32,99,111,117,108,100,32,98,101,32,109,117,108,116,105,118,97,114,105,97,116,101,44,0,0,0,111,114,32,99,111,110,116,97,105,110,32,116,111,111,32,109,117,99,104,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,114,111,117,110,100,45,111,102,102,32,101,114,114,111,114,46,0,0,0,0,0,69,110,116,101,114,32,118,97,114,105,97,98,108,101,115,32,116,111,32,101,108,105,109,105,110,97,116,101,58,32,0,0,78,111,32,115,117,98,115,116,105,116,117,116,105,111,110,115,32,109,97,100,101,46,0,0,117,115,105,110,103,0,0,0,102,97,99,116,111,114,0,0,83,107,105,112,112,105,110,103,32,101,113,117,97,116,105,111,110,32,110,117,109,98,101,114,32,37,100,46,10,0,0,0,103,110,117,112,108,111,116,0,101,120,112,111,114,116,0,0,109,97,120,105,109,97,0,0,104,101,120,97,100,101,99,105,109,97,108,0,0,0,0,0,99,0,0,0,0,0,0,0,99,43,43,0,0,0,0,0,105,110,116,101,103,101,114,0,67,97,110,39,116,32,109,97,107,101,32,97,115,115,105,103,110,109,101,110,116,32,115,116,97,116,101,109,101,110,116,32,98,101,99,97,117,115,101,32,116,104,105,115,32,105,115,32,110,111,116,32,97,110,32,101,113,117,97,116,105,111,110,46,0,0,0,0,0,0,0,0,69,113,117,97,116,105,111,110,32,105,115,32,110,111,116,32,115,111,108,118,101,100,32,102,111,114,32,97,32,110,111,114,109,97,108,32,118,97,114,105,97,98,108,101,46,0,0,0,78,111,116,32,97,110,32,105,110,116,101,103,101,114,32,101,120,112,114,101,115,115,105,111,110,44,32,98,117,116,32,116,104,105,115,32,114,111,117,110,100,101,100,32,99,111,100,101,32,109,97,121,32,112,111,115,115,105,98,108,121,32,119,111,114,107,58,0,0,0,0,0,84,104,105,115,32,105,110,116,101,103,101,114,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,110,111,110,45,105,110,116,101,103,101,114,32,100,105,118,105,100,101,115,58,0,0,0,99,111,117,110,116,115,0,0,84,111,111,32,109,97,110,121,32,118,97,114,105,97,98,108,101,115,32,116,111,32,108,105,115,116,46,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,32,105,115,32,110,117,109,101,114,105,99,46,32,32,78,111,32,110,111,114,109,97,108,32,118,97,114,105,97,98,108,101,115,32,102,111,117,110,100,46,0,0,0,0,0,0,91,93,40,41,0,0,0,0,95,67,111,109,112,108,101,120,32,0,0,0,0,0,0,0,105,110,116,37,115,37,115,59,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,100,111,117,98,108,101,37,115,37,115,59,0,0,0,0,0,9,47,42,32,99,111,117,110,116,32,61,32,37,100,32,42,47,10,0,0,0,0,0,0,83,111,109,101,32,118,97,114,105,97,98,108,101,115,32,109,105,103,104,116,32,110,101,101,100,32,116,111,32,98,101,32,111,102,32,116,104,101,32,99,111,109,112,108,101,120,32,110,117,109,98,101,114,32,116,121,112,101,46,0,0,0,0,0,77,97,110,117,97,108,32,97,100,106,117,115,116,109,101,110,116,115,32,109,97,121,32,98,101,32,110,101,99,101,115,115,97,114,121,10,0,0,0,0,98,101,99,97,117,115,101,32,111,102,32,116,104,101,32,97,112,112,101,97,114,97,110,99,101,32,111,102,32,116,104,101,32,105,109,97,103,105,110,97,114,121,32,117,110,105,116,32,40,105,41,46,10,0,0,0,69,120,112,114,101,115,115,105,111,110,115,32,97,114,101,32,97,108,108,32,110,117,109,101,114,105,99,46,32,32,78,111,32,118,97,114,105,97,98,108,101,115,32,102,111,117,110,100,46,0,0,0,0,0,0,0,83,111,109,101,32,100,101,102,105,110,101,100,32,118,97,114,105,97,98,108,101,115,32,119,101,114,101,32,97,114,114,97,121,32,101,108,101,109,101,110,116,115,32,111,114,32,102,117,110,99,116,105,111,110,115,44,32,114,101,113,117,105,114,105,110,103,32,109,97,110,117,97,108,32,100,101,102,105,110,105,116,105,111,110,46,0,0,0,84,111,111,32,109,97,110,121,32,118,97,114,105,97,98,108,101,115,32,115,112,101,99,105,102,105,101,100,46,0,0,0,86,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,46,0,0,0,0,0,69,110,116,101,114,32,37,115,58,32,0,0,0,0,0,0,84,104,101,32,114,101,115,117,108,116,32,105,115,32,97,110,32,105,100,101,110,116,105,116,121,58,10,0,0,0,0,0,82,101,112,101,97,116,105,110,103,58,10,0,0,0,0,0,115,105,103,110,0,0,0,0,113,117,105,99,107,101,115,116,0,0,0,0,0,0,0,0,113,117,105,99,107,0,0,0,102,114,97,99,116,105,111,110,0,0,0,0,0,0,0,0,84,104,101,114,101,32,97,114,101,32,37,108,100,32,112,111,115,115,105,98,108,101,32,115,111,108,117,116,105,111,110,115,46,10,0,0,0,0,0,0,44,32,0,0,0,0,0,0,83,111,108,117,116,105,111,110,32,110,117,109,98,101,114,32,37,108,100,32,119,105,116,104,32,0,0,0,0,0,0,0,37,115,32,61,32,0,0,0,45,49,0,0,0,0,0,0,49,0,0,0,0,0,0,0,58,10,0,0,0,0,0,0,105,115,32,105,100,101,110,116,105,99,97,108,32,116,111,32,115,111,108,117,116,105,111,110,32,110,117,109,98,101,114,32,37,108,100,46,10,0,0,0,37,100,32,117,110,105,113,117,101,32,115,111,108,117,116,105,111,110,115,32,115,116,111,114,101,100,32,105,110,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,32,102,111,114,32,116,104,105,115,32,101,120,112,114,101,115,115,105,111,110,32,40,35,37,100,41,46,10,0,0,0,0,0,0,0,110,117,109,98,101,114,0,0,110,117,109,98,101,114,115,0,112,111,119,101,114,0,0,0,73,110,116,101,103,101,114,32,101,120,112,101,99,116,101,100,46,0,0,0,0,0,0,0,48,32,99,97,110,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,100,101,100,32,98,121,32,97,110,121,32,110,117,109,98,101,114,46,10,0,78,117,109,98,101,114,32,116,111,111,32,108,97,114,103,101,32,116,111,32,102,97,99,116,111,114,32,111,114,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,46,0,0,0,83,112,101,99,105,102,105,101,100,32,118,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,46,0,0,0,35,37,100,58,32,76,72,83,32,99,111,110,115,105,115,116,115,32,111,102,32,37,100,32,116,101,114,109,37,115,59,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,82,72,83,32,99,111,110,115,105,115,116,115,32,111,102,32,37,100,32,116,101,114,109,37,115,46,10,0,0,0,0,0,35,37,100,58,32,0,0,0,69,120,112,114,101,115,115,105,111,110,32,99,111,110,115,105,115,116,115,32,111,102,32,97,32,116,111,116,97,108,32,111,102,32,37,100,32,116,101,114,109,37,115,46,10,0,0,0,102,117,108,108,121,0,0,0,99,111,117,110,116,0,0,0,69,120,112,114,101,115,115,105,111,110,32,110,111,116,32,103,114,111,117,112,101,100,46,0,110,117,109,101,114,97,116,111,114,0,0,0,0,0,0,0,100,101,110,111,109,105,110,97,116,111,114,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,97,110,32,97,108,103,101,98,114,97,105,99,32,102,114,97,99,116,105,111,110,46,0,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,101,120,116,114,97,99,116,32,100,101,110,111,109,105,110,97,116,111,114,46,0,0,67,111,109,109,97,110,100,32,100,105,115,97,98,108,101,100,32,98,121,32,115,101,99,117,114,105,116,121,32,108,101,118,101,108,46,0,0,0,0,0,78,111,32,102,105,108,101,32,110,97,109,101,32,115,112,101,99,105,102,105,101,100,46,0,37,115,46,105,110,0,0,0,70,105,108,101,32,110,97,109,101,32,116,111,111,32,108,111,110,103,46,0,0,0,0,0,114,0,0,0,0,0,0,0,67,97,110,39,116,32,111,112,101,110,32,114,101,113,117,101,115,116,101,100,32,102,105,108,101,32,116,111,32,114,101,97,100,32,111,114,32,99,104,97,110,103,101,32,100,105,114,101,99,116,111,114,121,32,116,111,46,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,32,116,111,111,32,108,97,114,103,101,46,0,0,0,69,109,112,116,121,32,102,105,108,101,32,40,110,111,32,115,99,114,105,112,116,32,116,111,32,114,101,97,100,41,46,0,67,117,114,114,101,110,116,32,100,105,114,101,99,116,111,114,121,32,99,104,97,110,103,101,100,32,116,111,32,0,0,0,78,111,32,102,105,108,101,32,110,97,109,101,32,115,112,101,99,105,102,105,101,100,59,32,110,111,116,104,105,110,103,32,119,97,115,32,115,97,118,101,100,46,0,0,0,0,0,0,67,97,110,110,111,116,32,99,114,101,97,116,101,32,115,112,101,99,105,102,105,101,100,32,115,97,118,101,32,102,105,108,101,59,32,110,111,116,104,105,110,103,32,119,97,115,32,115,97,118,101,100,46,0,0,0,97,108,108,0,0,0,0,0,69,114,114,111,114,32,101,110,99,111,117,110,116,101,114,101,100,32,119,104,105,108,101,32,115,97,118,105,110,103,32,101,120,112,114,101,115,115,105,111,110,115,46,0,0,0,0,0,69,114,114,111,114,58,32,115,111,117,114,99,101,32,97,110,100,32,100,101,115,116,105,110,97,116,105,111,110,32,97,114,101,32,116,104,101,32,115,97,109,101,46,0,0,0,0,0,83,111,108,118,101,32,102,97,105,108,101,100,46,0,0,0,84,111,111,32,109,97,110,121,32,116,101,114,109,115,32,116,111,32,99,111,109,112,97,114,101,46,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,32,119,97,115,32,110,111,116,32,97,32,109,105,120,46,0,0,0,0,0,0,0,95,105,109,97,103,0,0,0,95,114,101,97,108,0,0,0,116,101,109,112,37,46,48,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,111,112,116,105,109,105,122,101,100,32,101,113,117,97,116,105,111,110,115,46,0,0,0,67,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,110,111,32,118,97,114,105,97,98,108,101,115,46,0,0,0,0,0,0,0,78,117,109,98,101,114,32,101,120,112,101,99,116,101,100,46,0,0,0,0,0,0,0,0,78,117,109,98,101,114,32,116,111,111,32,108,97,114,103,101,46,0,0,0,0,0,0,0,116,111,0,0,0,0,0,0,84,111,58,32,0,0,0,0,115,116,101,112,0,0,0,0,73,110,118,97,108,105,100,32,115,116,101,112,46,0,0,0,69,110,100,32,118,97,108,117,101,32,110,111,116,32,114,101,97,99,104,101,100,46,0,0,37,115,32,61,32,37,46,42,103,58,32,0,0,0,0,0,66,97,100,32,101,120,112,114,101,115,115,105,111,110,32,115,105,122,101,32,61,32,37,100,46,10,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,111,114,103,97,110,105,122,101,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,98,97,100,32,101,120,112,114,101,115,115,105,111,110,32,115,105,122,101,46,0,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,101,120,112,114,101,115,115,105,111,110,32,97,114,114,97,121,32,111,118,101,114,102,108,111,119,32,100,101,116,101,99,116,101,100,32,105,110,32,111,114,103,97,110,105,122,101,40,41,46,0,0,0,0,0,0,0,77,111,100,117,108,111,32,48,32,101,110,99,111,117,110,116,101,114,101,100,46,0,0,0,48,94,48,32,101,110,99,111,117,110,116,101,114,101,100,44,32,109,105,103,104,116,32,98,101,32,99,111,110,115,105,100,101,114,101,100,32,105,110,100,101,116,101,114,109,105,110,97,116,101,46,0,0,0,0,0,68,105,118,105,100,101,32,98,121,32,122,101,114,111,32,40,48,32,114,97,105,115,101,100,32,116,111,32,110,101,103,97,116,105,118,101,32,112,111,119,101,114,41,46,0,0,0,0,73,110,116,101,114,110,97,108,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,32,111,102,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,99,111,114,114,117,112,116,33,0,0,0,0,0,0,0,80,114,111,103,114,97,109,109,105,110,103,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,99,111,109,112,97,114,101,95,114,101,99,117,114,115,101,40,41,46], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61920);
/* memory initializer */ allocate([105,110,116,101,103,101,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+312032);
/* memory initializer */ allocate([69,120,112,114,101,115,115,105,111,110,32,105,115,32,99,111,114,114,117,112,116,32,105,110,32,112,111,108,121,95,103,99,100,95,115,105,109,112,40,41,46,0,0,0,0,0,0,0,110,111,115,105,109,112,108,105,102,121,0,0,0,0,0,0,78,111,116,32,97,32,115,111,108,118,101,100,32,101,113,117,97,116,105,111,110,46,32,32,79,110,108,121,32,116,104,101,32,82,72,83,32,119,105,108,108,32,98,101,32,100,105,102,102,101,114,101,110,116,105,97,116,101,100,46,0,0,0,0,84,104,101,32,111,114,100,101,114,32,109,117,115,116,32,98,101,32,97,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,46,0,0,0,67,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,110,111,32,118,97,114,105,97,98,108,101,115,59,32,116,104,101,32,100,101,114,105,118,97,116,105,118,101,32,119,105,108,108,32,98,101,32,122,101,114,111,46,0,0,83,112,101,99,105,102,105,101,100,32,118,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,59,32,116,104,101,32,100,101,114,105,118,97,116,105,118,101,32,119,105,108,108,32,98,101,32,122,101,114,111,46,0,0,0,0,0,0,78,111,32,100,105,102,102,101,114,101,110,116,105,97,116,105,111,110,32,118,97,114,105,97,98,108,101,32,115,112,101,99,105,102,105,101,100,46,0,0,48,32,114,101,97,99,104,101,100,32,97,102,116,101,114,32,37,108,100,32,100,101,114,105,118,97,116,105,118,101,115,32,116,97,107,101,110,46,10,0,68,105,102,102,101,114,101,110,116,105,97,116,105,111,110,32,102,97,105,108,101,100,46,0,84,104,101,32,99,117,114,114,101,110,116,32,101,113,117,97,116,105,111,110,32,105,115,32,110,111,116,32,115,111,108,118,101,100,32,102,111,114,32,97,32,118,97,114,105,97,98,108,101,46,0,0,0,0,0,0,67,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,110,111,32,118,97,114,105,97,98,108,101,115,46,0,0,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,118,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,59,32,116,104,101,32,100,101,114,105,118,97,116,105,118,101,32,119,111,117,108,100,32,98,101,32,122,101,114,111,46,0,0,0,0,0,84,104,101,114,101,32,97,114,101,32,110,111,32,115,111,108,117,116,105,111,110,115,46,0,83,111,108,118,101,32,102,97,105,108,101,100,46,0,0,0,79,117,116,32,111,102,32,102,114,101,101,32,101,113,117,97,116,105,111,110,32,115,112,97,99,101,115,46,0,0,0,0,80,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,32,114,101,113,117,105,114,101,100,32,102,111,114,32,111,114,100,101,114,46,0,0,0,0,83,112,101,99,105,102,105,101,100,32,100,105,102,102,101,114,101,110,116,105,97,116,105,111,110,32,118,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,59,32,116,104,101,32,100,101,114,105,118,97,116,105,118,101,32,119,105,108,108,32,98,101,32,48,46,0,69,110,116,101,114,32,112,111,105,110,116,32,40,97,110,32,101,120,112,114,101,115,115,105,111,110,59,32,117,115,117,97,108,108,121,32,48,41,58,32,0,0,0,0,0,0,0,0,69,110,116,101,114,32,111,114,100,101,114,32,40,110,117,109,98,101,114,32,111,102,32,100,101,114,105,118,97,116,105,118,101,115,32,116,111,32,116,97,107,101,41,58,32,0,0,0,82,101,115,117,108,116,32,105,110,118,97,108,105,100,32,98,101,99,97,117,115,101,32,105,116,32,99,111,110,116,97,105,110,115,32,105,110,102,105,110,105,116,121,32,111,114,32,78,97,78,46,0,0,0,0,0,108,105,109,105,116,0,0,0,67,117,114,114,101,110,116,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,110,111,32,118,97,114,105,97,98,108,101,115,59,32,116,104,97,116,32,105,115,32,116,104,101,32,97,110,115,119,101,114,46,0,0,0,76,105,109,105,116,32,118,97,114,105,97,98,108,101,32,110,111,116,32,102,111,117,110,100,59,32,97,110,115,119,101,114,32,105,115,32,111,114,105,103,105,110,97,108,32,101,120,112,114,101,115,115,105,111,110,46,0,0,0,0,0,0,0,0,97,115,32,37,115,32,103,111,101,115,32,116,111,58,32,0,67,97,110,39,116,32,116,97,107,101,32,116,104,101,32,108,105,109,105,116,32,98,101,99,97,117,115,101,32,115,111,108,118,101,32,102,97,105,108,101,100,46,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,116,97,107,101,32,108,105,109,105,116,59,32,114,101,115,117,108,116,32,99,111,110,116,97,105,110,115,32,78,97,78,32,40,78,111,116,32,97,32,78,117,109,98,101,114,41,46,0,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,100,95,114,101,99,117,114,115,101,40,41,58,32,100,105,102,102,101,114,101,110,116,105,97,116,105,110,103,32,119,105,116,104,32,117,110,112,97,114,101,110,116,104,101,115,105,122,101,100,32,111,112,101,114,97,116,111,114,115,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,46,0,0,0,100,101,102,105,110,105,116,101,0,0,0,0,0,0,0,0,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,67,111,110,102,108,105,99,116,105,110,103,32,111,112,116,105,111,110,115,32,103,105,118,101,110,46,0,0,0,0,0,0,78,111,116,32,97,32,115,111,108,118,101,100,32,101,113,117,97,116,105,111,110,46,0,0,84,104,101,32,111,114,100,101,114,32,109,117,115,116,32,98,101,32,97,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,46,0,0,0,73,110,116,101,103,114,97,116,105,111,110,32,102,97,105,108,101,100,44,32,110,111,116,32,97,32,112,111,108,121,110,111,109,105,97,108,46,0,0,0,67,95,37,100,0,0,0,0,1,0,0,0,0,0,0,0,69,110,116,101,114,32,108,111,119,101,114,32,98,111,117,110,100,58,32,0,0,0,0,0,69,110,116,101,114,32,117,112,112,101,114,32,98,111,117,110,100,58,32,0,0,0,0,0,105,110,118,101,114,115,101,0,73,110,118,101,114,115,101,32,76,97,112,108,97,99,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,102,97,105,108,101,100,46,0,0,76,97,112,108,97,99,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,102,97,105,108,101,100,44,32,110,111,116,32,97,32,112,111,108,121,110,111,109,105,97,108,46,0,0,0,0,0,0,0,0,116,114,97,112,0,0,0,0,78,117,109,98,101,114,32,111,102,32,112,97,114,116,105,116,105,111,110,115,32,109,117,115,116,32,98,101,32,97,32,112,111,115,105,116,105,118,101,44,32,101,118,101,110,32,105,110,116,101,103,101,114,46,0,0,83,105,110,103,117,108,97,114,105,116,121,32,100,101,116,101,99,116,101,100,44,32,114,101,115,117,108,116,32,111,102,32,110,117,109,101,114,105,99,97,108,32,105,110,116,101,103,114,97,116,105,111,110,32,109,105,103,104,116,32,98,101,32,119,114,111,110,103,46,0,0,0,78,111,116,32,99,111,109,112,117,116,97,98,108,101,32,98,101,99,97,117,115,101,58,32,76,111,119,101,114,32,98,111,117,110,100,32,99,111,110,116,97,105,110,115,32,105,110,102,105,110,105,116,121,32,111,114,32,78,97,78,46,0,0,0,78,111,116,32,99,111,109,112,117,116,97,98,108,101,32,98,101,99,97,117,115,101,58,32,85,112,112,101,114,32,98,111,117,110,100,32,99,111,110,116,97,105,110,115,32,105,110,102,105,110,105,116,121,32,111,114,32,78,97,78,46,0,0,0,73,110,116,101,103,114,97,116,105,111,110,32,102,97,105,108,101,100,32,98,101,99,97,117,115,101,32,114,101,115,117,108,116,32,99,111,110,116,97,105,110,115,32,105,110,102,105,110,105,116,121,32,111,114,32,78,97,78,32,40,97,32,115,105,110,103,117,108,97,114,105,116,121,41,46,0,0,0,0,0,82,101,115,117,108,116,32,103,114,111,119,105,110,103,44,32,105,110,116,101,103,114,97,116,105,111,110,32,102,97,105,108,101,100,46,0,0,0,0,0,69,110,116,101,114,32,114,111,111,116,32,40,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,41,58,32,0,82,111,111,116,32,105,110,118,97,108,105,100,32,111,114,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,0,0,82,111,111,116,32,109,117,115,116,32,98,101,32,97,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,32,108,101,115,115,32,116,104,97,110,32,111,114,32,101,113,117,97,108,32,116,111,32,37,46,48,102,46,10,0,0,0,0,69,110,116,101,114,32,114,101,97,108,32,112,97,114,116,32,40,88,41,58,32,0,0,0,78,117,109,98,101,114,32,101,120,112,101,99,116,101,100,46,0,0,0,0,0,0,0,0,69,110,116,101,114,32,105,109,97,103,105,110,97,114,121,32,112,97,114,116,32,40,89,41,58,32,0,0,0,0,0,0,10,84,104,101,32,112,111,108,97,114,32,99,111,111,114,100,105,110,97,116,101,115,32,97,114,101,58,10,37,46,42,103,32,97,109,112,108,105,116,117,100,101,32,97,110,100,10,37,46,42,103,32,114,97,100,105,97,110,115,32,40,37,46,42,103,32,100,101,103,114,101,101,115,41,46,10,10,0,0,0,84,104,101,32,37,46,49,50,103,32,114,111,111,116,115,32,111,102,32,40,37,46,49,50,103,41,94,40,49,47,37,46,49,50,103,41,32,97,114,101,58,10,10,0,0,0,0,0,84,104,101,32,37,46,49,50,103,32,114,111,111,116,115,32,111,102,32,40,37,46,49,50,103,37,43,46,49,50,103,42,105,41,94,40,49,47,37,46,49,50,103,41,32,97,114,101,58,10,10,0,0,0,0,0,37,46,49,50,103,32,0,0,37,43,46,49,50,103,42,105,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,60,47,102,111,110,116,62,0,27,91,48,109,0,0,0,0,60,102,111,110,116,32,99,111,108,111,114,61,34,37,115,34,62,0,0,0,0,0,0,0,200,34,12,0,208,34,12,0,216,34,12,0,224,34,12,0,232,34,12,0,240,34,12,0,248,34,12,0,0,0,0,0,144,34,12,0,152,34,12,0,160,34,12,0,168,34,12,0,176,34,12,0,184,34,12,0,192,34,12,0,0,0,0,0,27,91,37,100,59,37,100,109,0,0,0,0,0,0,0,0,32,0,0,0,33,0,0,0,31,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,35,0,0,0,0,0,0,0,35,37,100,58,32,0,0,0,32,61,32,0,0,0,0,0,59,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,115,105,103,110,0,0,0,0,123,48,44,49,125,0,0,0,105,0,0,0,0,0,0,0,105,35,0,0,0,0,0,0,37,105,0,0,0,0,0,0,49,106,0,0,0,0,0,0,49,46,48,105,0,0,0,0,101,120,112,40,49,46,48,41,0,0,0,0,0,0,0,0,37,101,0,0,0,0,0,0,77,95,69,0,0,0,0,0,77,97,116,104,46,69,0,0,109,97,116,104,46,101,0,0,101,35,0,0,0,0,0,0,101,0,0,0,0,0,0,0,37,112,105,0,0,0,0,0,112,105,35,0,0,0,0,0,77,95,80,73,0,0,0,0,77,97,116,104,46,80,73,0,109,97,116,104,46,112,105,0,112,105,0,0,0,0,0,0,97,108,108,0,0,0,0,0,37,115,37,100,0,0,0,0,98,97,100,95,118,97,114,105,97,98,108,101,0,0,0,0,95,91,93,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,40,99,97,110,39,116,32,109,97,108,108,111,99,40,51,41,41,46,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,40,0,0,0,0,0,0,0,37,97,0,0,0,0,0,0,37,35,46,42,103,0,0,0,37,46,42,103,0,0,0,0,37,46,42,102,0,0,0,0,40,37,46,42,103,41,0,0,40,37,115,41,0,0,0,0,40,117,110,107,110,111,119,110,32,111,112,101,114,97,116,111,114,41,0,0,0,0,0,0,32,43,32,0,0,0,0,0,32,45,32,0,0,0,0,0,42,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,47,47,0,0,0,0,0,0,32,37,32,0,0,0,0,0,42,42,0,0,0,0,0,0,94,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,112,111,119,0,0,0,0,0,77,97,116,104,46,112,111,119,0,0,0,0,0,0,0,0,102,97,99,116,111,114,105,97,108,0,0,0,0,0,0,0,37,46,48,102,0,0,0,0,49,105,0,0,0,0,0,0,44,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,38,110,100,97,115,104,59,0,45,0,0,0,0,0,0,0,40,45,38,105,110,102,105,110,59,41,0,0,0,0,0,0,38,105,110,102,105,110,59,0,40,37,46,42,102,41,0,0,38,112,105,59,0,0,0,0,38,101,99,105,114,99,59,0,38,105,99,105,114,99,59,0,32,38,109,105,110,117,115,59,32,0,0,0,0,0,0,0,38,109,105,100,100,111,116,59,0,0,0,0,0,0,0,0,103,114,101,101,110,0,0,0,111,108,105,118,101,0,0,0,114,101,100,0,0,0,0,0,110,97,118,121,0,0,0,0,109,97,114,111,111,110,0,0,112,117,114,112,108,101,0,0,116,101,97,108,0,0,0,0,35,48,48,70,70,48,48,0,35,70,70,70,70,48,48,0,35,70,70,48,48,48,48,0,35,48,48,48,48,70,70,0,35,70,70,57,48,48,48,0,35,70,70,48,48,70,70,0,35,48,48,70,70,70,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,32,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,32,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,0,64,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,102,97,99,116,111,114,105,110,103,32,105,110,116,101,103,101,114,115,32,40,102,105,110,97,108,32,110,110,32,33,61,32,49,46,48,41,46,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,102,97,99,116,111,114,105,110,103,32,105,110,116,101,103,101,114,115,32,40,114,101,115,117,108,116,32,97,114,114,97,121,32,118,97,108,117,101,32,105,115,32,105,110,99,111,114,114,101,99,116,41,46,0,0,0,0,37,46,48,102,32,61,32,0,37,46,48,102,0,0,0,0,94,37,100,0,0,0,0,0,32,42,32,0,0,0,0,0,10,0,0,0,0,0,0,0,69,120,112,114,101,115,115,105,111,110,32,116,111,111,32,108,97,114,103,101,46,0,0,0,80,114,111,99,101,115,115,105,110,103,32,119,97,115,32,105,110,116,101,114,114,117,112,116,101,100,46,0,0,0,0,0,85,110,107,110,111,119,110,32,101,114,114,111,114,46,0,0,115,113,114,116,40,91,94,44,41,93,42,41,0,0,0,0,40,40,36,49,41,42,42,46,53,41,0,0,0,0,0,0,99,98,114,116,40,91,94,44,41,93,42,41,0,0,0,0,40,40,36,49,41,42,42,40,49,47,51,41,41,0,0,0,101,120,112,40,91,94,44,41,93,42,41,0,0,0,0,0,40,101,42,42,40,36,49,41,41,0,0,0,0,0,0,0,112,111,119,40,91,94,44,41,93,42,44,91,94,44,41,93,42,41,0,0,0,0,0,0,40,40,36,49,41,42,42,40,36,50,41,41,0,0,0,0,97,98,115,40,91,94,44,41,93,42,41,0,0,0,0,0,40,124,40,36,49,41,124,41,0,0,0,0,0,0,0,0,115,103,110,40,91,94,44,41,93,42,41,0,0,0,0,0,40,40,36,49,41,47,124,40,36,49,41,124,41,0,0,0,102,97,99,116,111,114,105,97,108,40,91,94,44,41,93,42,41,0,0,0,0,0,0,0,40,40,36,49,41,33,41,0,103,97,109,109,97,40,91,94,44,41,93,42,41,0,0,0,40,40,40,36,49,41,45,49,41,33,41,0,0,0,0,0,112,104,105,0,0,0,0,0,40,40,49,43,53,42,42,46,53,41,47,50,41,0,0,0,111,109,101,103,97,0,0,0,40,48,46,53,54,55,49,52,51,50,57,48,52,48,57,55,56,51,56,55,50,57,57,57,57,54,56,54,54,50,50,41,0,0,0,0,0,0,0,0,101,117,108,101,114,0,0,0,40,48,46,53,55,55,50,49,53,54,54,52,57,48,49,53,51,50,56,54,48,54,48,54,53,49,50,48,57,48,48,56,41,0,0,0,0,0,0,0,102,108,111,111,114,40,91,94,44,41,93,42,41,0,0,0,40,40,36,49,41,45,40,36,49,41,37,49,41,0,0,0,99,101,105,108,40,91,94,44,41,93,42,41,0,0,0,0,40,40,36,49,41,43,40,45,40,36,49,41,41,37,49,41,0,0,0,0,0,0,0,0,105,110,116,40,91,94,44,41,93,42,41,0,0,0,0,0,40,40,36,49,41,47,47,49,41,0,0,0,0,0,0,0,114,111,117,110,100,40,91,94,44,41,93,42,41,0,0,0,40,40,40,36,49,41,43,124,40,36,49,41,124,47,40,36,49,41,47,50,41,47,47,49,41,0,0,0,0,0,0,0,115,105,110,40,91,94,44,41,93,42,41,0,0,0,0,0,40,40,101,42,42,40,105,42,40,36,49,41,41,45,101,42,42,40,45,105,42,40,36,49,41,41,41,47,40,50,105,41,41,0,0,0,0,0,0,0,99,111,115,40,91,94,44,41,93,42,41,0,0,0,0,0,40,40,101,42,42,40,105,42,40,36,49,41,41,43,101,42,42,40,45,105,42,40,36,49,41,41,41,47,50,41,0,0,116,97,110,40,91,94,44,41,93,42,41,0,0,0,0,0,40,40,101,42,42,40,105,42,40,36,49,41,41,45,101,42,42,40,45,105,42,40,36,49,41,41,41,47,40,105,42,40,101,42,42,40,105,42,40,36,49,41,41,43,101,42,42,40,45,105,42,40,36,49,41,41,41,41,41,0,0,0,0,0,99,111,116,40,91,94,44,41,93,42,41,0,0,0,0,0,40,105,42,40,101,42,42,40,105,42,40,36,49,41,41,43,101,42,42,40,45,105,42,40,36,49,41,41,41,47,40,101,42,42,40,105,42,40,36,49,41,41,45,101,42,42,40,45,105,42,40,36,49,41,41,41,41,0,0,0,0,0,0,0,115,101,99,40,91,94,44,41,93,42,41,0,0,0,0,0,40,50,47,40,101,42,42,40,105,42,40,36,49,41,41,43,101,42,42,40,45,105,42,40,36,49,41,41,41,41,0,0,99,115,99,40,91,94,44,41,93,42,41,0,0,0,0,0,40,50,105,47,40,101,42,42,40,105,42,40,36,49,41,41,45,101,42,42,40,45,105,42,40,36,49,41,41,41,41,0,115,105,110,99,40,91,94,44,41,93,42,41,0,0,0,0,40,40,40,101,42,42,40,105,42,112,105,42,40,36,49,41,41,45,101,42,42,40,45,105,42,112,105,42,40,36,49,41,41,41,47,40,50,105,41,41,47,40,112,105,42,40,36,49,41,41,41,0,0,0,0,0,115,105,110,104,40,91,94,44,41,93,42,41,0,0,0,0,40,40,101,42,42,40,36,49,41,45,101,42,42,45,40,36,49,41,41,47,50,41,0,0,99,111,115,104,40,91,94,44,41,93,42,41,0,0,0,0,40,40,101,42,42,40,36,49,41,43,101,42,42,45,40,36,49,41,41,47,50,41,0,0,116,97,110,104,40,91,94,44,41,93,42,41,0,0,0,0,40,40,101,42,42,40,36,49,41,45,101,42,42,45,40,36,49,41,41,47,40,101,42,42,40,36,49,41,43,101,42,42,45,40,36,49,41,41,41,0,99,111,116,104,40,91,94,44,41,93,42,41,0,0,0,0,40,40,101,42,42,40,36,49,41,43,101,42,42,45,40,36,49,41,41,47,40,101,42,42,40,36,49,41,45,101,42,42,45,40,36,49,41,41,41,0,115,101,99,104,40,91,94,44,41,93,42,41,0,0,0,0,40,50,47,40,101,42,42,40,36,49,41,43,101,42,42,45,40,36,49,41,41,41,0,0,99,115,99,104,40,91,94,44,41,93,42,41,0,0,0,0,40,50,47,40,101,42,42,40,36,49,41,45,101,42,42,45,40,36,49,41,41,41,0,0,128,37,12,0,144,37,12,0,1,0,0,0,160,37,12,0,176,37,12,0,1,0,0,0,192,37,12,0,208,37,12,0,1,0,0,0,224,37,12,0,248,37,12,0,2,0,0,0,8,38,12,0,24,38,12,0,1,0,0,0,40,38,12,0,56,38,12,0,1,0,0,0,72,38,12,0,96,38,12,0,1,0,0,0,104,38,12,0,120,38,12,0,1,0,0,0,136,38,12,0,144,38,12,0,0,0,0,0,160,38,12,0,168,38,12,0,0,0,0,0,208,38,12,0,216,38,12,0,0,0,0,0,0,39,12,0,16,39,12,0,1,0,0,0,32,39,12,0,48,39,12,0,1,0,0,0,72,39,12,0,88,39,12,0,1,0,0,0,104,39,12,0,120,39,12,0,1,0,0,0,152,39,12,0,168,39,12,0,1,0,0,0,208,39,12,0,224,39,12,0,1,0,0,0,0,40,12,0,16,40,12,0,1,0,0,0,80,40,12,0,96,40,12,0,1,0,0,0,160,40,12,0,176,40,12,0,1,0,0,0,208,40,12,0,224,40,12,0,1,0,0,0,0,41,12,0,16,41,12,0,1,0,0,0,72,41,12,0,88,41,12,0,1,0,0,0,112,41,12,0,128,41,12,0,1,0,0,0,152,41,12,0,168,41,12,0,1,0,0,0,208,41,12,0,224,41,12,0,1,0,0,0,8,42,12,0,24,42,12,0,1,0,0,0,48,42,12,0,64,42,12,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,101,116,32,109,111,100,117,108,117,115,95,109,111,100,101,61,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,10,37,115,10,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,56,64,0,0,0,0,0,0,94,64,0,0,0,0,0,128,134,64,0,0,0,0,0,176,179,64,0,0,0,0,0,176,227,64,0,0,0,0,0,38,22,65,0,0,0,0,128,175,75,65,0,0,0,0,168,8,131,65,0,0,0,0,252,140,188,65,0,0,0,192,140,50,247,65,0,0,0,40,59,76,52,66,0,0,128,117,119,7,115,66,0,0,128,117,119,7,179,66,0,0,216,236,238,55,244,66,0,0,115,202,236,190,54,67,0,144,104,48,185,2,123,67,0,90,65,190,179,225,192,67,32,198,181,233,59,40,6,68,108,240,89,97,82,119,78,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+792056);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  var _emscripten_prep_setjmp=true;


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  var _emscripten_check_longjmp=true;

  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      if (amode & ~7) {
        // need a valid mode
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
      var perms = '';
      if (amode & 4) perms += 'r';
      if (amode & 2) perms += 'w';
      if (amode & 1) perms += 'x';
      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      }
      return 0;
    }

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;

  var _floor=Math_floor;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  var _sqrt=Math_sqrt;

  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  var _abs=Math_abs;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _sin=Math_sin;

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_strcpy"] = _strcpy;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function _modf(x, intpart) {
      HEAPF64[((intpart)>>3)]=(x < 0) ? Math.ceil(x) : Math.floor(x);
      return x - HEAPF64[((intpart)>>3)];
    }

  var _BDtoILow=true;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  var _BDtoIHigh=true;

  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var cwd = FS.cwd();
      if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        writeAsciiToMemory(cwd, buf);
        return buf;
      }
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  var _labs=Math_abs;

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _emscripten_setjmp=true;

  var _cos=Math_cos;

  function _chdir(path) {
      // int chdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/chdir.html
      // NOTE: The path argument may be a string, to simplify fchdir().
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.chdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _ceil=Math_ceil;

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  var _atan2=Math_atan2;

  
  function ___fpclassify(x) {
      if (isNaN(x)) return 0;
      if (!isFinite(x)) return 1;
      if (x == 0) return 2;
      // FP_SUBNORMAL..?
      return 4;
    }function ___fpclassifyl() {
  return ___fpclassify.apply(null, arguments)
  }


  var _llvm_pow_f64=Math_pow;

  var _exp=Math_exp;

  function _signal(sig, func) {
      Module.printErr('Calling stub instead of signal()');
      return 0;
    }


___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiidiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiidiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiidiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiidiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiid(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiidiii": nullFunc_viiidiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiid": nullFunc_iiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiidiii": invoke_viiidiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_iiiid": invoke_iiiid, "invoke_iiiiii": invoke_iiiiii, "_fabs": _fabs, "_sin": _sin, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_getcwd": _getcwd, "_fread": _fread, "_fmod": _fmod, "_atan2": _atan2, "_open": _open, "_access": _access, "_abs": _abs, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_floor": _floor, "_longjmp": _longjmp, "_fflush": _fflush, "_modf": _modf, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_signal": _signal, "__reallyNegative": __reallyNegative, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_unlink": _unlink, "_perror": _perror, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_ferror": _ferror, "__formatString": __formatString, "_putchar": _putchar, "___buildEnvironment": ___buildEnvironment, "_cos": _cos, "_fputs": _fputs, "_pread": _pread, "_puts": _puts, "_getenv": _getenv, "_fclose": _fclose, "_log": _log, "___fpclassify": ___fpclassify, "_write": _write, "_fsync": _fsync, "___fpclassifyl": ___fpclassifyl, "___errno_location": ___errno_location, "_recv": _recv, "_fgetc": _fgetc, "_copysign": _copysign, "_fputc": _fputc, "_mkport": _mkport, "_read": _read, "_copysignl": _copysignl, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "_ceil": _ceil, "_fgets": _fgets, "_chdir": _chdir, "_sqrt": _sqrt, "_fopen": _fopen, "_printf": _printf, "_close": _close, "_labs": _labs, "_fmodl": _fmodl, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiidiii=env.nullFunc_viiidiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiid=env.nullFunc_iiiid;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiidiii=env.invoke_viiidiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiid=env.invoke_iiiid;
  var invoke_iiiiii=env.invoke_iiiiii;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _getcwd=env._getcwd;
  var _fread=env._fread;
  var _fmod=env._fmod;
  var _atan2=env._atan2;
  var _open=env._open;
  var _access=env._access;
  var _abs=env._abs;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _floor=env._floor;
  var _longjmp=env._longjmp;
  var _fflush=env._fflush;
  var _modf=env._modf;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _signal=env._signal;
  var __reallyNegative=env.__reallyNegative;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _unlink=env._unlink;
  var _perror=env._perror;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _ferror=env._ferror;
  var __formatString=env.__formatString;
  var _putchar=env._putchar;
  var ___buildEnvironment=env.___buildEnvironment;
  var _cos=env._cos;
  var _fputs=env._fputs;
  var _pread=env._pread;
  var _puts=env._puts;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _log=env._log;
  var ___fpclassify=env.___fpclassify;
  var _write=env._write;
  var _fsync=env._fsync;
  var ___fpclassifyl=env.___fpclassifyl;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var _mkport=env._mkport;
  var _read=env._read;
  var _copysignl=env._copysignl;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _ceil=env._ceil;
  var _fgets=env._fgets;
  var _chdir=env._chdir;
  var _sqrt=env._sqrt;
  var _fopen=env._fopen;
  var _printf=env._printf;
  var _close=env._close;
  var _labs=env._labs;
  var _fmodl=env._fmodl;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _factor_divide($equation,$np,$v,$d) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 $d = +$d;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $v;
 $3 = $d;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_fplus_recurse($4,$5,0,1,$6,$7,0,1)|0);
 STACKTOP = sp;return ($8|0);
}
function _fplus_recurse($equation,$np,$loc,$level,$v,$d,$whole_flag,$div_only) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 $v = $v|0;
 $d = +$d;
 $whole_flag = $whole_flag|0;
 $div_only = $div_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $j = 0, $k = 0, $len1 = 0, $len2 = 0, $modified = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $5 = $v;
 $6 = $d;
 $7 = $whole_flag;
 $8 = $div_only;
 $modified = 0;
 $op = 0;
 $9 = $3;
 $10 = (($9) + 1)|0;
 $i = $10;
 while(1) {
  $11 = $i;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)<($13|0);
  if ($14) {
   $15 = $i;
   $16 = $1;
   $17 = (($16) + ($15<<4)|0);
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $4;
   $21 = ($19|0)>=($20|0);
   $177 = $21;
  } else {
   $177 = 0;
  }
  if (!($177)) {
   break;
  }
  $22 = $i;
  $23 = $1;
  $24 = (($23) + ($22<<4)|0);
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $4;
  $28 = ($26|0)==($27|0);
  if ($28) {
   label = 6;
   break;
  }
  $34 = $i;
  $35 = (($34) + 2)|0;
  $i = $35;
 }
 if ((label|0) == 6) {
  $29 = $i;
  $30 = $1;
  $31 = (($30) + ($29<<4)|0);
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $op = $33;
 }
 $36 = $op;
 if ((($36|0) == 2) | (($36|0) == 1)) {
  $37 = $3;
  $i = $37;
  while(1) {
   L16: while(1) {
    $38 = $i;
    $39 = (($38) + 1)|0;
    $k = $39;
    while(1) {
     $40 = $k;
     $41 = $2;
     $42 = HEAP32[$41>>2]|0;
     $43 = ($40|0)>=($42|0);
     if ($43) {
      break;
     }
     $44 = $k;
     $45 = $1;
     $46 = (($45) + ($44<<4)|0);
     $47 = (($46) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $4;
     $50 = ($48|0)<=($49|0);
     if ($50) {
      break;
     }
     $51 = $k;
     $52 = (($51) + 2)|0;
     $k = $52;
    }
    $53 = $k;
    $54 = $i;
    $55 = (($53) - ($54))|0;
    $len1 = $55;
    $56 = $i;
    $57 = $len1;
    $58 = (($56) + ($57))|0;
    $59 = (($58) + 1)|0;
    $j = $59;
    while(1) {
     $60 = $j;
     $61 = $2;
     $62 = HEAP32[$61>>2]|0;
     $63 = ($60|0)>=($62|0);
     if ($63) {
      break L16;
     }
     $64 = $j;
     $65 = (($64) - 1)|0;
     $66 = $1;
     $67 = (($66) + ($65<<4)|0);
     $68 = (($67) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $4;
     $71 = ($69|0)<($70|0);
     if ($71) {
      break L16;
     }
     $72 = $j;
     $73 = (($72) + 1)|0;
     $k = $73;
     while(1) {
      $74 = $k;
      $75 = $2;
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)>=($76|0);
      if ($77) {
       break;
      }
      $78 = $k;
      $79 = $1;
      $80 = (($79) + ($78<<4)|0);
      $81 = (($80) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = $4;
      $84 = ($82|0)<=($83|0);
      if ($84) {
       break;
      }
      $85 = $k;
      $86 = (($85) + 2)|0;
      $k = $86;
     }
     $87 = $k;
     $88 = $j;
     $89 = (($87) - ($88))|0;
     $len2 = $89;
     $90 = $1;
     $91 = $2;
     $92 = $3;
     $93 = $i;
     $94 = $len1;
     $95 = $j;
     $96 = $len2;
     $97 = $4;
     $98 = (($97) + 1)|0;
     $99 = $5;
     $100 = $6;
     $101 = $7;
     $102 = $8;
     $103 = (_fplus_sub($90,$91,$92,$93,$94,$95,$96,$98,$99,$100,$101,$102)|0);
     $104 = ($103|0)!=(0);
     if ($104) {
      break;
     }
     $105 = $len2;
     $106 = (($105) + 1)|0;
     $107 = $j;
     $108 = (($107) + ($106))|0;
     $j = $108;
    }
    $modified = 1;
   }
   $109 = $len1;
   $110 = (($109) + 1)|0;
   $111 = $i;
   $112 = (($111) + ($110))|0;
   $i = $112;
   $113 = $i;
   $114 = $2;
   $115 = HEAP32[$114>>2]|0;
   $116 = ($113|0)>=($115|0);
   if ($116) {
    break;
   }
   $117 = $i;
   $118 = (($117) - 1)|0;
   $119 = $1;
   $120 = (($119) + ($118<<4)|0);
   $121 = (($120) + 4|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $4;
   $124 = ($122|0)<($123|0);
   if ($124) {
    break;
   }
  }
 }
 $125 = $modified;
 $126 = ($125|0)!=(0);
 if ($126) {
  $0 = 1;
  $176 = $0;
  STACKTOP = sp;return ($176|0);
 }
 $127 = $3;
 $i = $127;
 while(1) {
  $128 = $i;
  $129 = $2;
  $130 = HEAP32[$129>>2]|0;
  $131 = ($128|0)<($130|0);
  if ($131) {
   $132 = $i;
   $133 = $1;
   $134 = (($133) + ($132<<4)|0);
   $135 = (($134) + 4|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $4;
   $138 = ($136|0)>=($137|0);
   $178 = $138;
  } else {
   $178 = 0;
  }
  if (!($178)) {
   break;
  }
  $139 = $i;
  $140 = $1;
  $141 = (($140) + ($139<<4)|0);
  $142 = (($141) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $4;
  $145 = ($143|0)>($144|0);
  if (!($145)) {
   $173 = $i;
   $174 = (($173) + 1)|0;
   $i = $174;
   continue;
  }
  $146 = $1;
  $147 = $2;
  $148 = $i;
  $149 = $4;
  $150 = (($149) + 1)|0;
  $151 = $5;
  $152 = $6;
  $153 = $7;
  $154 = $8;
  $155 = (_fplus_recurse($146,$147,$148,$150,$151,$152,$153,$154)|0);
  $156 = $modified;
  $157 = $156 | $155;
  $modified = $157;
  $158 = $i;
  $159 = (($158) + 1)|0;
  $i = $159;
  while(1) {
   $160 = $i;
   $161 = $2;
   $162 = HEAP32[$161>>2]|0;
   $163 = ($160|0)<($162|0);
   if ($163) {
    $164 = $i;
    $165 = $1;
    $166 = (($165) + ($164<<4)|0);
    $167 = (($166) + 4|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $4;
    $170 = ($168|0)>($169|0);
    $179 = $170;
   } else {
    $179 = 0;
   }
   if (!($179)) {
    break;
   }
   $171 = $i;
   $172 = (($171) + 2)|0;
   $i = $172;
  }
 }
 $175 = $modified;
 $0 = $175;
 $176 = $0;
 STACKTOP = sp;return ($176|0);
}
function _subtract_itself($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 $4 = (_fplus_recurse($2,$3,0,1,0,0.0,1,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _factor_plus($equation,$np,$v,$d) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 $d = +$d;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $v;
 $3 = $d;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_fplus_recurse($4,$5,0,1,$6,$7,0,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _factor_times($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 $4 = (_ftimes_recurse($2,$3,0,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _ftimes_recurse($equation,$np,$loc,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $len1 = 0, $len2 = 0, $modified = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $modified = 0;
 $op = 0;
 $5 = $3;
 $6 = (($5) + 1)|0;
 $i = $6;
 while(1) {
  $7 = $i;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if ($10) {
   $11 = $i;
   $12 = $1;
   $13 = (($12) + ($11<<4)|0);
   $14 = (($13) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $4;
   $17 = ($15|0)>=($16|0);
   $165 = $17;
  } else {
   $165 = 0;
  }
  if (!($165)) {
   break;
  }
  $18 = $i;
  $19 = $1;
  $20 = (($19) + ($18<<4)|0);
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = ($22|0)==($23|0);
  if ($24) {
   label = 6;
   break;
  }
  $30 = $i;
  $31 = (($30) + 2)|0;
  $i = $31;
 }
 if ((label|0) == 6) {
  $25 = $i;
  $26 = $1;
  $27 = (($26) + ($25<<4)|0);
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $op = $29;
 }
 $32 = $op;
 if ((($32|0) == 5) | (($32|0) == 4)) {
  $33 = $3;
  $i = $33;
  while(1) {
   L16: while(1) {
    $34 = $i;
    $35 = (($34) + 1)|0;
    $k = $35;
    while(1) {
     $36 = $k;
     $37 = $2;
     $38 = HEAP32[$37>>2]|0;
     $39 = ($36|0)>=($38|0);
     if ($39) {
      break;
     }
     $40 = $k;
     $41 = $1;
     $42 = (($41) + ($40<<4)|0);
     $43 = (($42) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $4;
     $46 = ($44|0)<=($45|0);
     if ($46) {
      break;
     }
     $47 = $k;
     $48 = (($47) + 2)|0;
     $k = $48;
    }
    $49 = $k;
    $50 = $i;
    $51 = (($49) - ($50))|0;
    $len1 = $51;
    $52 = $i;
    $53 = $len1;
    $54 = (($52) + ($53))|0;
    $55 = (($54) + 1)|0;
    $j = $55;
    while(1) {
     $56 = $j;
     $57 = $2;
     $58 = HEAP32[$57>>2]|0;
     $59 = ($56|0)>=($58|0);
     if ($59) {
      break L16;
     }
     $60 = $j;
     $61 = (($60) - 1)|0;
     $62 = $1;
     $63 = (($62) + ($61<<4)|0);
     $64 = (($63) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $4;
     $67 = ($65|0)<($66|0);
     if ($67) {
      break L16;
     }
     $68 = $j;
     $69 = (($68) + 1)|0;
     $k = $69;
     while(1) {
      $70 = $k;
      $71 = $2;
      $72 = HEAP32[$71>>2]|0;
      $73 = ($70|0)>=($72|0);
      if ($73) {
       break;
      }
      $74 = $k;
      $75 = $1;
      $76 = (($75) + ($74<<4)|0);
      $77 = (($76) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $4;
      $80 = ($78|0)<=($79|0);
      if ($80) {
       break;
      }
      $81 = $k;
      $82 = (($81) + 2)|0;
      $k = $82;
     }
     $83 = $k;
     $84 = $j;
     $85 = (($83) - ($84))|0;
     $len2 = $85;
     $86 = $1;
     $87 = $2;
     $88 = $3;
     $89 = $i;
     $90 = $len1;
     $91 = $j;
     $92 = $len2;
     $93 = $4;
     $94 = (($93) + 1)|0;
     $95 = (_ftimes_sub($86,$87,$88,$89,$90,$91,$92,$94)|0);
     $96 = ($95|0)!=(0);
     if ($96) {
      break;
     }
     $97 = $len2;
     $98 = (($97) + 1)|0;
     $99 = $j;
     $100 = (($99) + ($98))|0;
     $j = $100;
    }
    $modified = 1;
   }
   $101 = $len1;
   $102 = (($101) + 1)|0;
   $103 = $i;
   $104 = (($103) + ($102))|0;
   $i = $104;
   $105 = $i;
   $106 = $2;
   $107 = HEAP32[$106>>2]|0;
   $108 = ($105|0)>=($107|0);
   if ($108) {
    break;
   }
   $109 = $i;
   $110 = (($109) - 1)|0;
   $111 = $1;
   $112 = (($111) + ($110<<4)|0);
   $113 = (($112) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $4;
   $116 = ($114|0)<($115|0);
   if ($116) {
    break;
   }
  }
 }
 $117 = $modified;
 $118 = ($117|0)!=(0);
 if ($118) {
  $0 = 1;
  $164 = $0;
  STACKTOP = sp;return ($164|0);
 }
 $119 = $3;
 $i = $119;
 while(1) {
  $120 = $i;
  $121 = $2;
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120|0)<($122|0);
  if ($123) {
   $124 = $i;
   $125 = $1;
   $126 = (($125) + ($124<<4)|0);
   $127 = (($126) + 4|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $4;
   $130 = ($128|0)>=($129|0);
   $166 = $130;
  } else {
   $166 = 0;
  }
  if (!($166)) {
   break;
  }
  $131 = $i;
  $132 = $1;
  $133 = (($132) + ($131<<4)|0);
  $134 = (($133) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $4;
  $137 = ($135|0)>($136|0);
  if (!($137)) {
   $161 = $i;
   $162 = (($161) + 1)|0;
   $i = $162;
   continue;
  }
  $138 = $1;
  $139 = $2;
  $140 = $i;
  $141 = $4;
  $142 = (($141) + 1)|0;
  $143 = (_ftimes_recurse($138,$139,$140,$142)|0);
  $144 = $modified;
  $145 = $144 | $143;
  $modified = $145;
  $146 = $i;
  $147 = (($146) + 1)|0;
  $i = $147;
  while(1) {
   $148 = $i;
   $149 = $2;
   $150 = HEAP32[$149>>2]|0;
   $151 = ($148|0)<($150|0);
   if ($151) {
    $152 = $i;
    $153 = $1;
    $154 = (($153) + ($152<<4)|0);
    $155 = (($154) + 4|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = $4;
    $158 = ($156|0)>($157|0);
    $167 = $158;
   } else {
    $167 = 0;
   }
   if (!($167)) {
    break;
   }
   $159 = $i;
   $160 = (($159) + 2)|0;
   $i = $160;
  }
 }
 $163 = $modified;
 $0 = $163;
 $164 = $0;
 STACKTOP = sp;return ($164|0);
}
function _factor_power($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 $4 = (_fpower_recurse($2,$3,0,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _fpower_recurse($equation,$np,$loc,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $len1 = 0, $len2 = 0, $modified = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $loc;
 $3 = $level;
 $modified = 0;
 $op = 0;
 $4 = $2;
 $5 = (($4) + 1)|0;
 $i = $5;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if ($9) {
   $10 = $i;
   $11 = $0;
   $12 = (($11) + ($10<<4)|0);
   $13 = (($12) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $3;
   $16 = ($14|0)>=($15|0);
   $161 = $16;
  } else {
   $161 = 0;
  }
  if (!($161)) {
   break;
  }
  $17 = $i;
  $18 = $0;
  $19 = (($18) + ($17<<4)|0);
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = ($21|0)==($22|0);
  if ($23) {
   label = 6;
   break;
  }
  $29 = $i;
  $30 = (($29) + 2)|0;
  $i = $30;
 }
 if ((label|0) == 6) {
  $24 = $i;
  $25 = $0;
  $26 = (($25) + ($24<<4)|0);
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $op = $28;
 }
 $31 = $op;
 if ((($31|0) == 5) | (($31|0) == 4)) {
  $32 = $2;
  $i = $32;
  while(1) {
   L16: while(1) {
    $33 = $i;
    $34 = (($33) + 1)|0;
    $k = $34;
    while(1) {
     $35 = $k;
     $36 = $1;
     $37 = HEAP32[$36>>2]|0;
     $38 = ($35|0)>=($37|0);
     if ($38) {
      break;
     }
     $39 = $k;
     $40 = $0;
     $41 = (($40) + ($39<<4)|0);
     $42 = (($41) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $3;
     $45 = ($43|0)<=($44|0);
     if ($45) {
      break;
     }
     $46 = $k;
     $47 = (($46) + 2)|0;
     $k = $47;
    }
    $48 = $k;
    $49 = $i;
    $50 = (($48) - ($49))|0;
    $len1 = $50;
    $51 = $i;
    $52 = $len1;
    $53 = (($51) + ($52))|0;
    $54 = (($53) + 1)|0;
    $j = $54;
    while(1) {
     $55 = $j;
     $56 = $1;
     $57 = HEAP32[$56>>2]|0;
     $58 = ($55|0)>=($57|0);
     if ($58) {
      break L16;
     }
     $59 = $j;
     $60 = (($59) - 1)|0;
     $61 = $0;
     $62 = (($61) + ($60<<4)|0);
     $63 = (($62) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $3;
     $66 = ($64|0)<($65|0);
     if ($66) {
      break L16;
     }
     $67 = $j;
     $68 = (($67) + 1)|0;
     $k = $68;
     while(1) {
      $69 = $k;
      $70 = $1;
      $71 = HEAP32[$70>>2]|0;
      $72 = ($69|0)>=($71|0);
      if ($72) {
       break;
      }
      $73 = $k;
      $74 = $0;
      $75 = (($74) + ($73<<4)|0);
      $76 = (($75) + 4|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = $3;
      $79 = ($77|0)<=($78|0);
      if ($79) {
       break;
      }
      $80 = $k;
      $81 = (($80) + 2)|0;
      $k = $81;
     }
     $82 = $k;
     $83 = $j;
     $84 = (($82) - ($83))|0;
     $len2 = $84;
     $85 = $0;
     $86 = $1;
     $87 = $2;
     $88 = $i;
     $89 = $len1;
     $90 = $j;
     $91 = $len2;
     $92 = $3;
     $93 = (($92) + 1)|0;
     $94 = (_fpower_sub($85,$86,$87,$88,$89,$90,$91,$93)|0);
     $95 = ($94|0)!=(0);
     if ($95) {
      break;
     }
     $96 = $len2;
     $97 = (($96) + 1)|0;
     $98 = $j;
     $99 = (($98) + ($97))|0;
     $j = $99;
    }
    $modified = 1;
   }
   $100 = $len1;
   $101 = (($100) + 1)|0;
   $102 = $i;
   $103 = (($102) + ($101))|0;
   $i = $103;
   $104 = $i;
   $105 = $1;
   $106 = HEAP32[$105>>2]|0;
   $107 = ($104|0)>=($106|0);
   if ($107) {
    break;
   }
   $108 = $i;
   $109 = (($108) - 1)|0;
   $110 = $0;
   $111 = (($110) + ($109<<4)|0);
   $112 = (($111) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $3;
   $115 = ($113|0)<($114|0);
   if ($115) {
    break;
   }
  }
 }
 $116 = $2;
 $i = $116;
 while(1) {
  $117 = $i;
  $118 = $1;
  $119 = HEAP32[$118>>2]|0;
  $120 = ($117|0)<($119|0);
  if ($120) {
   $121 = $i;
   $122 = $0;
   $123 = (($122) + ($121<<4)|0);
   $124 = (($123) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $3;
   $127 = ($125|0)>=($126|0);
   $162 = $127;
  } else {
   $162 = 0;
  }
  if (!($162)) {
   break;
  }
  $128 = $i;
  $129 = $0;
  $130 = (($129) + ($128<<4)|0);
  $131 = (($130) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $3;
  $134 = ($132|0)>($133|0);
  if (!($134)) {
   $158 = $i;
   $159 = (($158) + 1)|0;
   $i = $159;
   continue;
  }
  $135 = $0;
  $136 = $1;
  $137 = $i;
  $138 = $3;
  $139 = (($138) + 1)|0;
  $140 = (_fpower_recurse($135,$136,$137,$139)|0);
  $141 = $modified;
  $142 = $141 | $140;
  $modified = $142;
  $143 = $i;
  $144 = (($143) + 1)|0;
  $i = $144;
  while(1) {
   $145 = $i;
   $146 = $1;
   $147 = HEAP32[$146>>2]|0;
   $148 = ($145|0)<($147|0);
   if ($148) {
    $149 = $i;
    $150 = $0;
    $151 = (($150) + ($149<<4)|0);
    $152 = (($151) + 4|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $3;
    $155 = ($153|0)>($154|0);
    $163 = $155;
   } else {
    $163 = 0;
   }
   if (!($163)) {
    break;
   }
   $156 = $i;
   $157 = (($156) + 2)|0;
   $i = $157;
  }
 }
 $160 = $modified;
 STACKTOP = sp;return ($160|0);
}
function _fpower_sub($equation,$np,$loc,$i1,$n1,$i2,$n2,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $i1 = $i1|0;
 $n1 = $n1|0;
 $i2 = $i2|0;
 $n2 = $n2|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $all_divide = 0, $b1 = 0, $b2 = 0, $diff_sign = 0, $e1 = 0, $e2 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $op1 = 0, $op2 = 0;
 var $pop1 = 0, $start2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff_sign = sp + 4|0;
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $i1;
 $5 = $n1;
 $6 = $i2;
 $7 = $n2;
 $8 = $level;
 $pop1 = 4;
 $9 = $4;
 $10 = $5;
 $11 = (($9) + ($10))|0;
 $e1 = $11;
 $12 = $6;
 $13 = $7;
 $14 = (($12) + ($13))|0;
 $e2 = $14;
 $15 = $6;
 $16 = (($15) - 1)|0;
 $17 = $1;
 $18 = (($17) + ($16<<4)|0);
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $op2 = $20;
 $21 = $4;
 $22 = $3;
 $23 = ($21|0)<=($22|0);
 if ($23) {
  $op1 = 4;
 } else {
  $24 = $4;
  $25 = (($24) - 1)|0;
  $26 = $1;
  $27 = (($26) + ($25<<4)|0);
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $op1 = $29;
 }
 $30 = $4;
 $31 = (($30) + 1)|0;
 $i = $31;
 while(1) {
  $32 = $i;
  $33 = $e1;
  $34 = ($32|0)>=($33|0);
  if ($34) {
   label = 6;
   break;
  }
  $35 = $i;
  $36 = $1;
  $37 = (($36) + ($35<<4)|0);
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $8;
  $41 = ($39|0)==($40|0);
  if ($41) {
   $42 = $i;
   $43 = $1;
   $44 = (($43) + ($42<<4)|0);
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(8);
   if ($47) {
    break;
   }
  }
  $48 = $i;
  $49 = (($48) + 2)|0;
  $i = $49;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $507 = $0;
  STACKTOP = sp;return ($507|0);
 }
 $50 = $6;
 $51 = (($50) + 1)|0;
 $j = $51;
 while(1) {
  $52 = $j;
  $53 = $e2;
  $54 = ($52|0)>=($53|0);
  if ($54) {
   label = 14;
   break;
  }
  $55 = $j;
  $56 = $1;
  $57 = (($56) + ($55<<4)|0);
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $8;
  $61 = ($59|0)==($60|0);
  if ($61) {
   $62 = $j;
   $63 = $1;
   $64 = (($63) + ($62<<4)|0);
   $65 = (($64) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(8);
   if ($67) {
    break;
   }
  }
  $68 = $j;
  $69 = (($68) + 2)|0;
  $j = $69;
 }
 if ((label|0) == 14) {
  $0 = 0;
  $507 = $0;
  STACKTOP = sp;return ($507|0);
 }
 $70 = $j;
 $start2 = $70;
 $71 = $i;
 $72 = (($71) + 1)|0;
 $73 = $1;
 $74 = (($73) + ($72<<4)|0);
 $75 = $e1;
 $76 = $i;
 $77 = (($76) + 1)|0;
 $78 = (($75) - ($77))|0;
 $79 = (_se_compare($74,$78,3752,1,$diff_sign)|0);
 $80 = ($79|0)!=(0);
 if ($80) {
  $0 = 0;
  $507 = $0;
  STACKTOP = sp;return ($507|0);
 }
 $81 = $i;
 $82 = (($81) + 1)|0;
 $83 = $1;
 $84 = (($83) + ($82<<4)|0);
 $85 = $e1;
 $86 = $i;
 $87 = (($86) + 1)|0;
 $88 = (($85) - ($87))|0;
 $89 = $j;
 $90 = (($89) + 1)|0;
 $91 = $1;
 $92 = (($91) + ($90<<4)|0);
 $93 = $e2;
 $94 = $j;
 $95 = (($94) + 1)|0;
 $96 = (($93) - ($95))|0;
 $97 = (_se_compare($84,$88,$92,$96,$diff_sign)|0);
 $98 = ($97|0)!=(0);
 do {
  if ($98) {
   $99 = $i;
   $100 = (($99) + 1)|0;
   $b1 = $100;
   $101 = $j;
   $102 = (($101) + 1)|0;
   $b2 = $102;
   $103 = $e1;
   $i = $103;
   $104 = $e2;
   $j = $104;
  } else {
   L36: while(1) {
    $105 = $i;
    $106 = $1;
    $107 = (($106) + ($105<<4)|0);
    $108 = (($107) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    $pop1 = $109;
    $110 = $pop1;
    $111 = ($110|0)==(8);
    if ($111) {
     $pop1 = 4;
    }
    $112 = $i;
    $113 = (($112) + 1)|0;
    $b1 = $113;
    $114 = $b1;
    $115 = $e1;
    $116 = ($114|0)>=($115|0);
    if ($116) {
     break;
    }
    $117 = $b1;
    $118 = (($117) + 1)|0;
    $i = $118;
    while(1) {
     $119 = $i;
     $120 = $e1;
     $121 = ($119|0)<($120|0);
     if (!($121)) {
      break;
     }
     $122 = $i;
     $123 = $1;
     $124 = (($123) + ($122<<4)|0);
     $125 = (($124) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $8;
     $128 = (($127) + 1)|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = $i;
      $131 = $1;
      $132 = (($131) + ($130<<4)|0);
      $133 = (($132) + 8|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(4);
      if ($135) {
       label = 34;
       break;
      }
      $136 = $i;
      $137 = $1;
      $138 = (($137) + ($136<<4)|0);
      $139 = (($138) + 8|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(5);
      if ($141) {
       label = 34;
       break;
      }
     }
     $142 = $i;
     $143 = (($142) + 2)|0;
     $i = $143;
    }
    if ((label|0) == 34) {
     label = 0;
    }
    $144 = $b1;
    $145 = $1;
    $146 = (($145) + ($144<<4)|0);
    $147 = $i;
    $148 = $b1;
    $149 = (($147) - ($148))|0;
    $150 = (_se_compare($146,$149,3752,1,$diff_sign)|0);
    $151 = ($150|0)!=(0);
    if ($151) {
     continue;
    }
    $152 = $start2;
    $j = $152;
    L56: while(1) {
     $153 = $j;
     $154 = (($153) + 1)|0;
     $b2 = $154;
     $155 = $b2;
     $156 = $e2;
     $157 = ($155|0)>=($156|0);
     if ($157) {
      break;
     }
     $158 = $b2;
     $159 = (($158) + 1)|0;
     $j = $159;
     while(1) {
      $160 = $j;
      $161 = $e2;
      $162 = ($160|0)<($161|0);
      if (!($162)) {
       break;
      }
      $163 = $j;
      $164 = $1;
      $165 = (($164) + ($163<<4)|0);
      $166 = (($165) + 4|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = $8;
      $169 = (($168) + 1)|0;
      $170 = ($167|0)==($169|0);
      if ($170) {
       $171 = $j;
       $172 = $1;
       $173 = (($172) + ($171<<4)|0);
       $174 = (($173) + 8|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(4);
       if ($176) {
        label = 47;
        break;
       }
       $177 = $j;
       $178 = $1;
       $179 = (($178) + ($177<<4)|0);
       $180 = (($179) + 8|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(5);
       if ($182) {
        label = 47;
        break;
       }
      }
      $183 = $j;
      $184 = (($183) + 2)|0;
      $j = $184;
     }
     if ((label|0) == 47) {
      label = 0;
     }
     $185 = $b2;
     $186 = (($185) - 1)|0;
     $187 = $1;
     $188 = (($187) + ($186<<4)|0);
     $189 = (($188) + 8|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ($190|0)==(8);
     do {
      if ($191) {
       $192 = $pop1;
       $193 = ($192|0)!=(4);
       if ($193) {
        continue L56;
       } else {
        break;
       }
      } else {
       $194 = $b2;
       $195 = (($194) - 1)|0;
       $196 = $1;
       $197 = (($196) + ($195<<4)|0);
       $198 = (($197) + 8|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = $pop1;
       $201 = ($199|0)!=($200|0);
       if ($201) {
        continue L56;
       } else {
        break;
       }
      }
     } while(0);
     $202 = $b1;
     $203 = $1;
     $204 = (($203) + ($202<<4)|0);
     $205 = $i;
     $206 = $b1;
     $207 = (($205) - ($206))|0;
     $208 = $b2;
     $209 = $1;
     $210 = (($209) + ($208<<4)|0);
     $211 = $j;
     $212 = $b2;
     $213 = (($211) - ($212))|0;
     $214 = (_se_compare($204,$207,$210,$213,$diff_sign)|0);
     $215 = ($214|0)!=(0);
     if ($215) {
      label = 58;
      break L36;
     }
    }
   }
   if ((label|0) == 58) {
    break;
   }
   $0 = 0;
   $507 = $0;
   STACKTOP = sp;return ($507|0);
  }
 } while(0);
 $216 = $op2;
 $217 = ($216|0)==(5);
 if ($217) {
  $218 = HEAP32[$diff_sign>>2]|0;
  $219 = ($218|0)!=(0);
  $220 = $219 ^ 1;
  $221 = $220&1;
  HEAP32[$diff_sign>>2] = $221;
 }
 $222 = $op1;
 $223 = ($222|0)==(5);
 if ($223) {
  $224 = HEAP32[$diff_sign>>2]|0;
  $225 = ($224|0)!=(0);
  $227 = $225;
 } else {
  $227 = 0;
 }
 $226 = $227&1;
 $all_divide = $226;
 $len = 0;
 $228 = $len;
 $229 = HEAP32[3704>>2]|0;
 $230 = (($229) + ($228<<4)|0);
 $231 = $4;
 $232 = $1;
 $233 = (($232) + ($231<<4)|0);
 $234 = $b1;
 $235 = $4;
 $236 = (($234) - ($235))|0;
 $237 = $236<<4;
 _memmove(($230|0),($233|0),($237|0))|0;
 $238 = $b1;
 $239 = $4;
 $240 = (($238) - ($239))|0;
 $241 = $len;
 $242 = (($241) + ($240))|0;
 $len = $242;
 $243 = $8;
 $244 = (($243) + 1)|0;
 $245 = $len;
 $246 = HEAP32[3704>>2]|0;
 $247 = (($246) + ($245<<4)|0);
 $248 = (($247) + 4|0);
 HEAP32[$248>>2] = $244;
 $249 = $len;
 $250 = HEAP32[3704>>2]|0;
 $251 = (($250) + ($249<<4)|0);
 HEAP32[$251>>2] = 0;
 $252 = $all_divide;
 $253 = ($252|0)!=(0);
 if ($253) {
  label = 66;
 } else {
  $254 = $op1;
  $255 = ($254|0)==(5);
  if ($255) {
   $256 = $len;
   $257 = HEAP32[3704>>2]|0;
   $258 = (($257) + ($256<<4)|0);
   $259 = (($258) + 8|0);
   HEAPF64[$259>>3] = -1.0;
  } else {
   label = 66;
  }
 }
 if ((label|0) == 66) {
  $260 = $len;
  $261 = HEAP32[3704>>2]|0;
  $262 = (($261) + ($260<<4)|0);
  $263 = (($262) + 8|0);
  HEAPF64[$263>>3] = 1.0;
 }
 $264 = $len;
 $265 = (($264) + 1)|0;
 $len = $265;
 $266 = $len;
 $267 = HEAP32[3704>>2]|0;
 $268 = (($267) + ($266<<4)|0);
 $269 = $i;
 $270 = $1;
 $271 = (($270) + ($269<<4)|0);
 $272 = $e1;
 $273 = $i;
 $274 = (($272) - ($273))|0;
 $275 = $274<<4;
 _memmove(($268|0),($271|0),($275|0))|0;
 $276 = $e1;
 $277 = $i;
 $278 = (($276) - ($277))|0;
 $279 = $len;
 $280 = (($279) + ($278))|0;
 $len = $280;
 $k = 0;
 while(1) {
  $281 = $k;
  $282 = $len;
  $283 = ($281|0)<($282|0);
  if (!($283)) {
   break;
  }
  $284 = $k;
  $285 = HEAP32[3704>>2]|0;
  $286 = (($285) + ($284<<4)|0);
  $287 = (($286) + 4|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = (($288) + 2)|0;
  HEAP32[$287>>2] = $289;
  $290 = $k;
  $291 = (($290) + 1)|0;
  $k = $291;
 }
 $292 = $8;
 $293 = (($292) + 1)|0;
 $294 = $len;
 $295 = HEAP32[3704>>2]|0;
 $296 = (($295) + ($294<<4)|0);
 $297 = (($296) + 4|0);
 HEAP32[$297>>2] = $293;
 $298 = $len;
 $299 = HEAP32[3704>>2]|0;
 $300 = (($299) + ($298<<4)|0);
 HEAP32[$300>>2] = 2;
 $301 = $len;
 $302 = HEAP32[3704>>2]|0;
 $303 = (($302) + ($301<<4)|0);
 $304 = (($303) + 8|0);
 HEAP32[$304>>2] = 4;
 $305 = $len;
 $306 = (($305) + 1)|0;
 $len = $306;
 $307 = $len;
 $k = $307;
 $308 = $len;
 $309 = HEAP32[3704>>2]|0;
 $310 = (($309) + ($308<<4)|0);
 $311 = $6;
 $312 = $1;
 $313 = (($312) + ($311<<4)|0);
 $314 = $b2;
 $315 = $6;
 $316 = (($314) - ($315))|0;
 $317 = $316<<4;
 _memmove(($310|0),($313|0),($317|0))|0;
 $318 = $b2;
 $319 = $6;
 $320 = (($318) - ($319))|0;
 $321 = $len;
 $322 = (($321) + ($320))|0;
 $len = $322;
 $323 = $8;
 $324 = (($323) + 1)|0;
 $325 = $len;
 $326 = HEAP32[3704>>2]|0;
 $327 = (($326) + ($325<<4)|0);
 $328 = (($327) + 4|0);
 HEAP32[$328>>2] = $324;
 $329 = $len;
 $330 = HEAP32[3704>>2]|0;
 $331 = (($330) + ($329<<4)|0);
 HEAP32[$331>>2] = 0;
 $332 = $all_divide;
 $333 = ($332|0)!=(0);
 if ($333) {
  label = 74;
 } else {
  $334 = HEAP32[$diff_sign>>2]|0;
  $335 = ($334|0)!=(0);
  if ($335) {
   $336 = $len;
   $337 = HEAP32[3704>>2]|0;
   $338 = (($337) + ($336<<4)|0);
   $339 = (($338) + 8|0);
   HEAPF64[$339>>3] = -1.0;
  } else {
   label = 74;
  }
 }
 if ((label|0) == 74) {
  $340 = $len;
  $341 = HEAP32[3704>>2]|0;
  $342 = (($341) + ($340<<4)|0);
  $343 = (($342) + 8|0);
  HEAPF64[$343>>3] = 1.0;
 }
 $344 = $len;
 $345 = (($344) + 1)|0;
 $len = $345;
 $346 = $len;
 $347 = HEAP32[3704>>2]|0;
 $348 = (($347) + ($346<<4)|0);
 $349 = $j;
 $350 = $1;
 $351 = (($350) + ($349<<4)|0);
 $352 = $e2;
 $353 = $j;
 $354 = (($352) - ($353))|0;
 $355 = $354<<4;
 _memmove(($348|0),($351|0),($355|0))|0;
 $356 = $e2;
 $357 = $j;
 $358 = (($356) - ($357))|0;
 $359 = $len;
 $360 = (($359) + ($358))|0;
 $len = $360;
 while(1) {
  $361 = $k;
  $362 = $len;
  $363 = ($361|0)<($362|0);
  if (!($363)) {
   break;
  }
  $364 = $k;
  $365 = HEAP32[3704>>2]|0;
  $366 = (($365) + ($364<<4)|0);
  $367 = (($366) + 4|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = (($368) + 2)|0;
  HEAP32[$367>>2] = $369;
  $370 = $k;
  $371 = (($370) + 1)|0;
  $k = $371;
 }
 $372 = $8;
 $373 = $len;
 $374 = HEAP32[3704>>2]|0;
 $375 = (($374) + ($373<<4)|0);
 $376 = (($375) + 4|0);
 HEAP32[$376>>2] = $372;
 $377 = $len;
 $378 = HEAP32[3704>>2]|0;
 $379 = (($378) + ($377<<4)|0);
 HEAP32[$379>>2] = 2;
 $380 = $len;
 $381 = HEAP32[3704>>2]|0;
 $382 = (($381) + ($380<<4)|0);
 $383 = (($382) + 8|0);
 HEAP32[$383>>2] = 8;
 $384 = $len;
 $385 = (($384) + 1)|0;
 $len = $385;
 $386 = $pop1;
 $387 = ($386|0)==(5);
 if ($387) {
  $388 = $8;
  $389 = (($388) + 1)|0;
  $390 = $len;
  $391 = HEAP32[3704>>2]|0;
  $392 = (($391) + ($390<<4)|0);
  $393 = (($392) + 4|0);
  HEAP32[$393>>2] = $389;
  $394 = $len;
  $395 = HEAP32[3704>>2]|0;
  $396 = (($395) + ($394<<4)|0);
  HEAP32[$396>>2] = 0;
  $397 = $len;
  $398 = HEAP32[3704>>2]|0;
  $399 = (($398) + ($397<<4)|0);
  $400 = (($399) + 8|0);
  HEAPF64[$400>>3] = 1.0;
  $401 = $len;
  $402 = (($401) + 1)|0;
  $len = $402;
  $403 = $8;
  $404 = (($403) + 1)|0;
  $405 = $len;
  $406 = HEAP32[3704>>2]|0;
  $407 = (($406) + ($405<<4)|0);
  $408 = (($407) + 4|0);
  HEAP32[$408>>2] = $404;
  $409 = $len;
  $410 = HEAP32[3704>>2]|0;
  $411 = (($410) + ($409<<4)|0);
  HEAP32[$411>>2] = 2;
  $412 = $len;
  $413 = HEAP32[3704>>2]|0;
  $414 = (($413) + ($412<<4)|0);
  $415 = (($414) + 8|0);
  HEAP32[$415>>2] = 5;
  $416 = $len;
  $417 = (($416) + 1)|0;
  $len = $417;
 }
 $418 = $len;
 $k = $418;
 $419 = $len;
 $420 = HEAP32[3704>>2]|0;
 $421 = (($420) + ($419<<4)|0);
 $422 = $b1;
 $423 = $1;
 $424 = (($423) + ($422<<4)|0);
 $425 = $i;
 $426 = $b1;
 $427 = (($425) - ($426))|0;
 $428 = $427<<4;
 _memmove(($421|0),($424|0),($428|0))|0;
 $429 = $i;
 $430 = $b1;
 $431 = (($429) - ($430))|0;
 $432 = $len;
 $433 = (($432) + ($431))|0;
 $len = $433;
 while(1) {
  $434 = $k;
  $435 = $len;
  $436 = ($434|0)<($435|0);
  if (!($436)) {
   break;
  }
  $437 = $k;
  $438 = HEAP32[3704>>2]|0;
  $439 = (($438) + ($437<<4)|0);
  $440 = (($439) + 4|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = (($441) + 1)|0;
  HEAP32[$440>>2] = $442;
  $443 = $k;
  $444 = (($443) + 1)|0;
  $k = $444;
 }
 $445 = $2;
 $446 = HEAP32[$445>>2]|0;
 $447 = $len;
 $448 = (($446) + ($447))|0;
 $449 = $5;
 $450 = (($448) - ($449))|0;
 $451 = $7;
 $452 = (($451) + 1)|0;
 $453 = (($450) - ($452))|0;
 $454 = HEAP32[8>>2]|0;
 $455 = ($453|0)>($454|0);
 if ($455) {
  _error_huge();
 }
 $456 = $all_divide;
 $457 = ($456|0)!=(0);
 if (!($457)) {
  $458 = $op1;
  $459 = ($458|0)==(5);
  if ($459) {
   $460 = $4;
   $461 = (($460) - 1)|0;
   $462 = $1;
   $463 = (($462) + ($461<<4)|0);
   $464 = (($463) + 8|0);
   HEAP32[$464>>2] = 4;
  }
 }
 $465 = $6;
 $466 = (($465) - 1)|0;
 $467 = $1;
 $468 = (($467) + ($466<<4)|0);
 $469 = $e2;
 $470 = $1;
 $471 = (($470) + ($469<<4)|0);
 $472 = $2;
 $473 = HEAP32[$472>>2]|0;
 $474 = $e2;
 $475 = (($473) - ($474))|0;
 $476 = $475<<4;
 _memmove(($468|0),($471|0),($476|0))|0;
 $477 = $7;
 $478 = (($477) + 1)|0;
 $479 = $2;
 $480 = HEAP32[$479>>2]|0;
 $481 = (($480) - ($478))|0;
 HEAP32[$479>>2] = $481;
 $482 = $4;
 $483 = $len;
 $484 = (($482) + ($483))|0;
 $485 = $1;
 $486 = (($485) + ($484<<4)|0);
 $487 = $e1;
 $488 = $1;
 $489 = (($488) + ($487<<4)|0);
 $490 = $2;
 $491 = HEAP32[$490>>2]|0;
 $492 = $e1;
 $493 = (($491) - ($492))|0;
 $494 = $493<<4;
 _memmove(($486|0),($489|0),($494|0))|0;
 $495 = $len;
 $496 = $5;
 $497 = (($495) - ($496))|0;
 $498 = $2;
 $499 = HEAP32[$498>>2]|0;
 $500 = (($499) + ($497))|0;
 HEAP32[$498>>2] = $500;
 $501 = $4;
 $502 = $1;
 $503 = (($502) + ($501<<4)|0);
 $504 = HEAP32[3704>>2]|0;
 $505 = $len;
 $506 = $505<<4;
 _memmove(($503|0),($504|0),($506|0))|0;
 $0 = 1;
 $507 = $0;
 STACKTOP = sp;return ($507|0);
}
function _ftimes_sub($equation,$np,$loc,$i1,$n1,$i2,$n2,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $i1 = $i1|0;
 $n1 = $n1|0;
 $i2 = $i2|0;
 $n2 = $n2|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $both_divide = 0, $diff_sign = 0, $e1 = 0, $e2 = 0, $i = 0, $j = 0;
 var $k = 0, $len = 0, $len2 = 0, $op1 = 0, $op2 = 0, $rlen1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff_sign = sp + 4|0;
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $i1;
 $5 = $n1;
 $6 = $i2;
 $7 = $n2;
 $8 = $level;
 $9 = $4;
 $10 = $5;
 $11 = (($9) + ($10))|0;
 $e1 = $11;
 $12 = $6;
 $13 = $7;
 $14 = (($12) + ($13))|0;
 $e2 = $14;
 $15 = $6;
 $16 = (($15) - 1)|0;
 $17 = $1;
 $18 = (($17) + ($16<<4)|0);
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $op2 = $20;
 $21 = $4;
 $22 = $3;
 $23 = ($21|0)<=($22|0);
 if ($23) {
  $op1 = 4;
 } else {
  $24 = $4;
  $25 = (($24) - 1)|0;
  $26 = $1;
  $27 = (($26) + ($25<<4)|0);
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $op1 = $29;
 }
 $30 = $5;
 $31 = ($30|0)==(1);
 if ($31) {
  $32 = $4;
  $33 = $1;
  $34 = (($33) + ($32<<4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0);
  if ($36) {
   $37 = $7;
   $38 = ($37|0)==(1);
   if ($38) {
    $39 = $6;
    $40 = $1;
    $41 = (($40) + ($39<<4)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0);
    if ($43) {
     $0 = 0;
     $493 = $0;
     STACKTOP = sp;return ($493|0);
    }
   }
  }
 }
 $44 = $op1;
 $45 = ($44|0)==(5);
 if ($45) {
  $46 = $op2;
  $47 = ($46|0)==(5);
  $49 = $47;
 } else {
  $49 = 0;
 }
 $48 = $49&1;
 $both_divide = $48;
 $50 = $4;
 $51 = $1;
 $52 = (($51) + ($50<<4)|0);
 $53 = $5;
 $54 = $6;
 $55 = $1;
 $56 = (($55) + ($54<<4)|0);
 $57 = $7;
 $58 = (_se_compare($52,$53,$56,$57,$diff_sign)|0);
 $59 = ($58|0)!=(0);
 L15: do {
  if ($59) {
   $60 = $e1;
   $i = $60;
   $61 = $e2;
   $j = $61;
  } else {
   $62 = $4;
   $63 = (($62) + 1)|0;
   $i = $63;
   while(1) {
    $64 = $i;
    $65 = $e1;
    $66 = ($64|0)<($65|0);
    if (!($66)) {
     break;
    }
    $67 = $i;
    $68 = $1;
    $69 = (($68) + ($67<<4)|0);
    $70 = (($69) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $8;
    $73 = ($71|0)==($72|0);
    if ($73) {
     $74 = $i;
     $75 = $1;
     $76 = (($75) + ($74<<4)|0);
     $77 = (($76) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)==(8);
     if ($79) {
      label = 17;
      break;
     }
    }
    $80 = $i;
    $81 = (($80) + 2)|0;
    $i = $81;
   }
   if ((label|0) == 17) {
   }
   $82 = $6;
   $83 = (($82) + 1)|0;
   $j = $83;
   while(1) {
    $84 = $j;
    $85 = $e2;
    $86 = ($84|0)<($85|0);
    if (!($86)) {
     break;
    }
    $87 = $j;
    $88 = $1;
    $89 = (($88) + ($87<<4)|0);
    $90 = (($89) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $8;
    $93 = ($91|0)==($92|0);
    if ($93) {
     $94 = $j;
     $95 = $1;
     $96 = (($95) + ($94<<4)|0);
     $97 = (($96) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)==(8);
     if ($99) {
      label = 24;
      break;
     }
    }
    $100 = $j;
    $101 = (($100) + 2)|0;
    $j = $101;
   }
   if ((label|0) == 24) {
   }
   $102 = $i;
   $103 = $e1;
   $104 = ($102|0)>=($103|0);
   if ($104) {
    $105 = $j;
    $106 = $e2;
    $107 = ($105|0)>=($106|0);
    if ($107) {
     $0 = 0;
     $493 = $0;
     STACKTOP = sp;return ($493|0);
    }
   }
   $108 = $4;
   $109 = $1;
   $110 = (($109) + ($108<<4)|0);
   $111 = $i;
   $112 = $4;
   $113 = (($111) - ($112))|0;
   $114 = $6;
   $115 = $1;
   $116 = (($115) + ($114<<4)|0);
   $117 = $j;
   $118 = $6;
   $119 = (($117) - ($118))|0;
   $120 = (_se_compare($110,$113,$116,$119,$diff_sign)|0);
   $121 = ($120|0)!=(0);
   if ($121) {
    break;
   }
   $122 = $i;
   $123 = $e1;
   $124 = ($122|0)<($123|0);
   do {
    if ($124) {
     $125 = $j;
     $126 = $e2;
     $127 = ($125|0)<($126|0);
     if ($127) {
      $128 = $4;
      $129 = $1;
      $130 = (($129) + ($128<<4)|0);
      $131 = $5;
      $132 = $6;
      $133 = $1;
      $134 = (($133) + ($132<<4)|0);
      $135 = $j;
      $136 = $6;
      $137 = (($135) - ($136))|0;
      $138 = (_se_compare($130,$131,$134,$137,$diff_sign)|0);
      $139 = ($138|0)!=(0);
      if ($139) {
       $140 = $e1;
       $i = $140;
       break L15;
      }
      $141 = $4;
      $142 = $1;
      $143 = (($142) + ($141<<4)|0);
      $144 = $i;
      $145 = $4;
      $146 = (($144) - ($145))|0;
      $147 = $6;
      $148 = $1;
      $149 = (($148) + ($147<<4)|0);
      $150 = $7;
      $151 = (_se_compare($143,$146,$149,$150,$diff_sign)|0);
      $152 = ($151|0)!=(0);
      if ($152) {
       $153 = $e2;
       $j = $153;
       break L15;
      } else {
       break;
      }
     }
    }
   } while(0);
   $0 = 0;
   $493 = $0;
   STACKTOP = sp;return ($493|0);
  }
 } while(0);
 $154 = $i;
 $155 = $e1;
 $156 = ($154|0)==($155|0);
 if ($156) {
  $161 = 1;
 } else {
  $157 = $e1;
  $158 = $i;
  $159 = (($157) - ($158))|0;
  $160 = (($159) - 1)|0;
  $161 = $160;
 }
 $rlen1 = $161;
 $162 = $i;
 $163 = $4;
 $164 = (($162) - ($163))|0;
 $165 = (($164) + 1)|0;
 $166 = $op1;
 $167 = ($166|0)==(5);
 if ($167) {
  $168 = $both_divide;
  $169 = ($168|0)!=(0);
  $170 = $169 ^ 1;
  $171 = $170;
 } else {
  $171 = 0;
 }
 $172 = $171 ? 2 : 0;
 $173 = (($165) + ($172))|0;
 $174 = $rlen1;
 $175 = (($173) + ($174))|0;
 $176 = (($175) + 1)|0;
 $177 = $j;
 $178 = $e2;
 $179 = ($177|0)==($178|0);
 if ($179) {
  $185 = 1;
 } else {
  $180 = $e2;
  $181 = $j;
  $182 = (($180) - ($181))|0;
  $183 = (($182) - 1)|0;
  $185 = $183;
 }
 $184 = (($176) + ($185))|0;
 $len = $184;
 $186 = $5;
 $187 = $len;
 $188 = (($187) - ($186))|0;
 $len = $188;
 $189 = $j;
 $190 = $6;
 $191 = (($189) - ($190))|0;
 $192 = ($191|0)==(1);
 if ($192) {
  $193 = $6;
  $194 = $1;
  $195 = (($194) + ($193<<4)|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($196|0)==(0);
  if ($197) {
   $198 = $6;
   $199 = $1;
   $200 = (($199) + ($198<<4)|0);
   $201 = (($200) + 8|0);
   $202 = +HEAPF64[$201>>3];
   $203 = $202 == -1.0;
   if ($203) {
    $0 = 0;
    $493 = $0;
    STACKTOP = sp;return ($493|0);
   }
  }
 }
 $204 = HEAP32[$diff_sign>>2]|0;
 $205 = ($204|0)!=(0);
 if ($205) {
  $206 = $j;
  $207 = $6;
  $208 = (($206) - ($207))|0;
  $209 = ($208|0)==(1);
  if ($209) {
   $210 = $6;
   $211 = $1;
   $212 = (($211) + ($210<<4)|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = ($213|0)==(0);
   if ($214) {
    $0 = 0;
    $493 = $0;
    STACKTOP = sp;return ($493|0);
   }
  }
  $215 = $e2;
  $216 = (2 + ($215))|0;
  $217 = $j;
  $218 = (($216) - ($217))|0;
  $len2 = $218;
  $219 = $2;
  $220 = HEAP32[$219>>2]|0;
  $221 = $len2;
  $222 = (($220) + ($221))|0;
  $223 = $len;
  $224 = (($222) + ($223))|0;
  $225 = HEAP32[8>>2]|0;
  $226 = ($224|0)>($225|0);
  if ($226) {
   _error_huge();
  }
  $227 = $e2;
  $228 = $len2;
  $229 = (($227) + ($228))|0;
  $230 = $1;
  $231 = (($230) + ($229<<4)|0);
  $232 = $e2;
  $233 = $1;
  $234 = (($233) + ($232<<4)|0);
  $235 = $2;
  $236 = HEAP32[$235>>2]|0;
  $237 = $e2;
  $238 = (($236) - ($237))|0;
  $239 = $238<<4;
  _memmove(($231|0),($234|0),($239|0))|0;
  $240 = $len2;
  $241 = $2;
  $242 = HEAP32[$241>>2]|0;
  $243 = (($242) + ($240))|0;
  HEAP32[$241>>2] = $243;
  $244 = $8;
  $245 = (($244) - 1)|0;
  $246 = $e2;
  $247 = $1;
  $248 = (($247) + ($246<<4)|0);
  $249 = (($248) + 4|0);
  HEAP32[$249>>2] = $245;
  $250 = $e2;
  $251 = $1;
  $252 = (($251) + ($250<<4)|0);
  HEAP32[$252>>2] = 2;
  $253 = $op2;
  $254 = $e2;
  $255 = $1;
  $256 = (($255) + ($254<<4)|0);
  $257 = (($256) + 8|0);
  HEAP32[$257>>2] = $253;
  $258 = $8;
  $259 = $e2;
  $260 = (($259) + 1)|0;
  $261 = $1;
  $262 = (($261) + ($260<<4)|0);
  $263 = (($262) + 4|0);
  HEAP32[$263>>2] = $258;
  $264 = $e2;
  $265 = (($264) + 1)|0;
  $266 = $1;
  $267 = (($266) + ($265<<4)|0);
  HEAP32[$267>>2] = 0;
  $268 = $e2;
  $269 = (($268) + 1)|0;
  $270 = $1;
  $271 = (($270) + ($269<<4)|0);
  $272 = (($271) + 8|0);
  HEAPF64[$272>>3] = -1.0;
  $273 = $e2;
  $274 = (($273) + 2)|0;
  $275 = $1;
  $276 = (($275) + ($274<<4)|0);
  $277 = $j;
  $278 = $1;
  $279 = (($278) + ($277<<4)|0);
  $280 = $e2;
  $281 = $j;
  $282 = (($280) - ($281))|0;
  $283 = $282<<4;
  _memmove(($276|0),($279|0),($283|0))|0;
 }
 $284 = $2;
 $285 = HEAP32[$284>>2]|0;
 $286 = $len;
 $287 = (($285) + ($286))|0;
 $288 = HEAP32[8>>2]|0;
 $289 = ($287|0)>($288|0);
 if ($289) {
  _error_huge();
 }
 $290 = $e1;
 $291 = $len;
 $292 = (($290) + ($291))|0;
 $293 = $1;
 $294 = (($293) + ($292<<4)|0);
 $295 = $e1;
 $296 = $1;
 $297 = (($296) + ($295<<4)|0);
 $298 = $2;
 $299 = HEAP32[$298>>2]|0;
 $300 = $e1;
 $301 = (($299) - ($300))|0;
 $302 = $301<<4;
 _memmove(($294|0),($297|0),($302|0))|0;
 $303 = $len;
 $304 = $2;
 $305 = HEAP32[$304>>2]|0;
 $306 = (($305) + ($303))|0;
 HEAP32[$304>>2] = $306;
 $307 = $i;
 $308 = $e1;
 $309 = ($307|0)==($308|0);
 if ($309) {
  $310 = $4;
  $k = $310;
  while(1) {
   $311 = $k;
   $312 = $e1;
   $313 = ($311|0)<($312|0);
   if (!($313)) {
    break;
   }
   $314 = $k;
   $315 = $1;
   $316 = (($315) + ($314<<4)|0);
   $317 = (($316) + 4|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = (($318) + 1)|0;
   HEAP32[$317>>2] = $319;
   $320 = $k;
   $321 = (($320) + 1)|0;
   $k = $321;
  }
  $322 = $8;
  $323 = $i;
  $324 = $1;
  $325 = (($324) + ($323<<4)|0);
  $326 = (($325) + 4|0);
  HEAP32[$326>>2] = $322;
  $327 = $i;
  $328 = $1;
  $329 = (($328) + ($327<<4)|0);
  HEAP32[$329>>2] = 2;
  $330 = $i;
  $331 = $1;
  $332 = (($331) + ($330<<4)|0);
  $333 = (($332) + 8|0);
  HEAP32[$333>>2] = 8;
  $334 = $8;
  $335 = $i;
  $336 = (($335) + 1)|0;
  $337 = $1;
  $338 = (($337) + ($336<<4)|0);
  $339 = (($338) + 4|0);
  HEAP32[$339>>2] = $334;
  $340 = $i;
  $341 = (($340) + 1)|0;
  $342 = $1;
  $343 = (($342) + ($341<<4)|0);
  HEAP32[$343>>2] = 0;
  $344 = $i;
  $345 = (($344) + 1)|0;
  $346 = $1;
  $347 = (($346) + ($345<<4)|0);
  $348 = (($347) + 8|0);
  HEAPF64[$348>>3] = 1.0;
 }
 $349 = $op1;
 $350 = ($349|0)==(5);
 if ($350) {
  $351 = $both_divide;
  $352 = ($351|0)!=(0);
  if (!($352)) {
   $353 = $4;
   $354 = (($353) - 1)|0;
   $355 = $1;
   $356 = (($355) + ($354<<4)|0);
   $357 = (($356) + 8|0);
   HEAP32[$357>>2] = 4;
   $358 = $i;
   $359 = (($358) + 3)|0;
   $360 = $1;
   $361 = (($360) + ($359<<4)|0);
   $362 = $i;
   $363 = (($362) + 1)|0;
   $364 = $1;
   $365 = (($364) + ($363<<4)|0);
   $366 = $rlen1;
   $367 = $366<<4;
   _memmove(($361|0),($365|0),($367|0))|0;
   $368 = $i;
   $369 = (($368) + 1)|0;
   $i = $369;
   $370 = $8;
   $371 = $i;
   $372 = $1;
   $373 = (($372) + ($371<<4)|0);
   $374 = (($373) + 4|0);
   HEAP32[$374>>2] = $370;
   $375 = $i;
   $376 = $1;
   $377 = (($376) + ($375<<4)|0);
   HEAP32[$377>>2] = 0;
   $378 = $i;
   $379 = $1;
   $380 = (($379) + ($378<<4)|0);
   $381 = (($380) + 8|0);
   HEAPF64[$381>>3] = -1.0;
   $382 = $i;
   $383 = (($382) + 1)|0;
   $i = $383;
   $384 = $8;
   $385 = $i;
   $386 = $1;
   $387 = (($386) + ($385<<4)|0);
   $388 = (($387) + 4|0);
   HEAP32[$388>>2] = $384;
   $389 = $i;
   $390 = $1;
   $391 = (($390) + ($389<<4)|0);
   HEAP32[$391>>2] = 2;
   $392 = $i;
   $393 = $1;
   $394 = (($393) + ($392<<4)|0);
   $395 = (($394) + 8|0);
   HEAP32[$395>>2] = 4;
   $396 = $1;
   $397 = $i;
   $398 = (($397) + 1)|0;
   $399 = $rlen1;
   $400 = (($398) + ($399))|0;
   $401 = $i;
   _binary_parenthesize($396,$400,$401);
  }
 }
 $402 = $rlen1;
 $403 = (($402) + 1)|0;
 $404 = $i;
 $405 = (($404) + ($403))|0;
 $i = $405;
 $406 = $8;
 $407 = $i;
 $408 = $1;
 $409 = (($408) + ($407<<4)|0);
 $410 = (($409) + 4|0);
 HEAP32[$410>>2] = $406;
 $411 = $i;
 $412 = $1;
 $413 = (($412) + ($411<<4)|0);
 HEAP32[$413>>2] = 2;
 $414 = $op2;
 $415 = ($414|0)==(5);
 if ($415) {
  $416 = $both_divide;
  $417 = ($416|0)!=(0);
  if ($417) {
   label = 73;
  } else {
   $418 = $i;
   $419 = $1;
   $420 = (($419) + ($418<<4)|0);
   $421 = (($420) + 8|0);
   HEAP32[$421>>2] = 2;
  }
 } else {
  label = 73;
 }
 if ((label|0) == 73) {
  $422 = $i;
  $423 = $1;
  $424 = (($423) + ($422<<4)|0);
  $425 = (($424) + 8|0);
  HEAP32[$425>>2] = 1;
 }
 $426 = $j;
 $427 = $e2;
 $428 = ($426|0)==($427|0);
 if ($428) {
  $429 = $8;
  $430 = $i;
  $431 = (($430) + 1)|0;
  $432 = $1;
  $433 = (($432) + ($431<<4)|0);
  $434 = (($433) + 4|0);
  HEAP32[$434>>2] = $429;
  $435 = $i;
  $436 = (($435) + 1)|0;
  $437 = $1;
  $438 = (($437) + ($436<<4)|0);
  HEAP32[$438>>2] = 0;
  $439 = $i;
  $440 = (($439) + 1)|0;
  $441 = $1;
  $442 = (($441) + ($440<<4)|0);
  $443 = (($442) + 8|0);
  HEAPF64[$443>>3] = 1.0;
  $444 = $1;
  $445 = $i;
  $446 = (($445) + 2)|0;
  $447 = $i;
  _binary_parenthesize($444,$446,$447);
 } else {
  $448 = $i;
  $449 = (($448) + 1)|0;
  $450 = $1;
  $451 = (($450) + ($449<<4)|0);
  $452 = $j;
  $453 = $len;
  $454 = (($452) + ($453))|0;
  $455 = (($454) + 1)|0;
  $456 = $1;
  $457 = (($456) + ($455<<4)|0);
  $458 = $e2;
  $459 = $j;
  $460 = (($458) - ($459))|0;
  $461 = (($460) - 1)|0;
  $462 = $461<<4;
  _memmove(($451|0),($457|0),($462|0))|0;
  $463 = $1;
  $464 = $i;
  $465 = $e2;
  $466 = (($464) + ($465))|0;
  $467 = $j;
  $468 = (($466) - ($467))|0;
  $469 = $i;
  _binary_parenthesize($463,$468,$469);
 }
 $470 = $6;
 $471 = $len;
 $472 = (($470) + ($471))|0;
 $473 = (($472) - 1)|0;
 $474 = $1;
 $475 = (($474) + ($473<<4)|0);
 $476 = $e2;
 $477 = $len;
 $478 = (($476) + ($477))|0;
 $479 = $1;
 $480 = (($479) + ($478<<4)|0);
 $481 = $2;
 $482 = HEAP32[$481>>2]|0;
 $483 = $e2;
 $484 = $len;
 $485 = (($483) + ($484))|0;
 $486 = (($482) - ($485))|0;
 $487 = $486<<4;
 _memmove(($475|0),($480|0),($487|0))|0;
 $488 = $7;
 $489 = (($488) + 1)|0;
 $490 = $2;
 $491 = HEAP32[$490>>2]|0;
 $492 = (($491) - ($489))|0;
 HEAP32[$490>>2] = $492;
 $0 = 1;
 $493 = $0;
 STACKTOP = sp;return ($493|0);
}
function _fplus_sub($equation,$np,$loc,$i1,$n1,$i2,$n2,$level,$v,$d,$whole_flag,$div_only) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $i1 = $i1|0;
 $n1 = $n1|0;
 $i2 = $i2|0;
 $n2 = $n2|0;
 $level = $level|0;
 $v = $v|0;
 $d = +$d;
 $whole_flag = $whole_flag|0;
 $div_only = $div_only|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0.0, $1022 = 0.0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0.0, $1043 = 0, $1044 = 0.0, $1045 = 0, $1046 = 0.0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0.0, $1063 = 0, $1064 = 0.0, $1065 = 0, $1066 = 0.0, $1067 = 0, $1068 = 0.0, $1069 = 0.0;
 var $107 = 0, $1070 = 0, $1071 = 0.0, $1072 = 0.0, $1073 = 0.0, $1074 = 0, $1075 = 0.0, $1076 = 0.0, $1077 = 0.0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0.0, $1081 = 0.0, $1082 = 0, $1083 = 0.0, $1084 = 0.0, $1085 = 0, $1086 = 0.0, $1087 = 0.0;
 var $1088 = 0.0, $1089 = 0.0, $109 = 0, $1090 = 0.0, $1091 = 0.0, $1092 = 0, $1093 = 0.0, $1094 = 0, $1095 = 0.0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0.0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0.0, $1104 = 0.0;
 var $1105 = 0.0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0.0;
 var $116 = 0, $1160 = 0.0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0.0, $1214 = 0.0, $1215 = 0.0, $1216 = 0.0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0.0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0.0;
 var $97 = 0, $970 = 0.0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $ai = 0, $aj = 0, $b1 = 0, $b2 = 0, $d1 = 0.0, $d2 = 0.0, $diff_sign = 0;
 var $e1 = 0, $e2 = 0, $flag1 = 0, $flag2 = 0, $i = 0, $j = 0, $k = 0, $l = 0, $len = 0, $m = 0, $op1 = 0, $op2 = 0, $power = 0, $same_flag = 0, $save_d1 = 0.0, $save_d2 = 0.0, $save_k1 = 0.0, $save_k2 = 0.0, $sop1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff_sign = sp + 84|0;
 $power = sp + 16|0;
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $i1;
 $5 = $n1;
 $6 = $i2;
 $7 = $n2;
 $8 = $level;
 $9 = $v;
 $10 = $d;
 $11 = $whole_flag;
 $12 = $div_only;
 $13 = $4;
 $14 = $5;
 $15 = (($13) + ($14))|0;
 $e1 = $15;
 $16 = $6;
 $17 = $7;
 $18 = (($16) + ($17))|0;
 $e2 = $18;
 $19 = $6;
 $20 = (($19) - 1)|0;
 $21 = $1;
 $22 = (($21) + ($20<<4)|0);
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $op2 = $24;
 $25 = $4;
 $26 = $3;
 $27 = ($25|0)<=($26|0);
 if ($27) {
  $op1 = 1;
 } else {
  $28 = $4;
  $29 = (($28) - 1)|0;
  $30 = $1;
  $31 = (($30) + ($29<<4)|0);
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $op1 = $33;
 }
 $34 = $4;
 $35 = (($34) - 1)|0;
 $i = $35;
 L5: while(1) {
  $36 = $i;
  $37 = (($36) + 1)|0;
  $b1 = $37;
  $38 = $b1;
  $39 = $e1;
  $40 = ($38|0)>=($39|0);
  if ($40) {
   label = 6;
   break;
  }
  $41 = $11;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $e1;
   $i = $43;
   $44 = $5;
   $45 = ($44|0)>(1);
   do {
    if ($45) {
     $46 = $b1;
     $47 = $1;
     $48 = (($47) + ($46<<4)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = $b1;
      $52 = (($51) + 1)|0;
      $53 = $1;
      $54 = (($53) + ($52<<4)|0);
      $55 = (($54) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $8;
      $58 = ($56|0)==($57|0);
      if ($58) {
       $59 = $b1;
       $60 = (($59) + 1)|0;
       $61 = $1;
       $62 = (($61) + ($60<<4)|0);
       $63 = (($62) + 8|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)==(4);
       if (!($65)) {
        $66 = $b1;
        $67 = (($66) + 1)|0;
        $68 = $1;
        $69 = (($68) + ($67<<4)|0);
        $70 = (($69) + 8|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ($71|0)==(5);
        if (!($72)) {
         break;
        }
       }
       $73 = $b1;
       $74 = (($73) + 2)|0;
       $b1 = $74;
      }
     }
    }
   } while(0);
  } else {
   $75 = $b1;
   $76 = (($75) + 1)|0;
   $i = $76;
   while(1) {
    $77 = $i;
    $78 = $e1;
    $79 = ($77|0)<($78|0);
    if (!($79)) {
     break;
    }
    $80 = $i;
    $81 = $1;
    $82 = (($81) + ($80<<4)|0);
    $83 = (($82) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $8;
    $86 = ($84|0)==($85|0);
    if ($86) {
     $87 = $i;
     $88 = $1;
     $89 = (($88) + ($87<<4)|0);
     $90 = (($89) + 8|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(4);
     if ($92) {
      label = 20;
      break;
     }
     $93 = $i;
     $94 = $1;
     $95 = (($94) + ($93<<4)|0);
     $96 = (($95) + 8|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)==(5);
     if ($98) {
      label = 20;
      break;
     }
    }
    $99 = $i;
    $100 = (($99) + 2)|0;
    $i = $100;
   }
   if ((label|0) == 20) {
    label = 0;
   }
  }
  $101 = $b1;
  $102 = $4;
  $103 = ($101|0)<=($102|0);
  if ($103) {
   $sop1 = 4;
  } else {
   $104 = $b1;
   $105 = (($104) - 1)|0;
   $106 = $1;
   $107 = (($106) + ($105<<4)|0);
   $108 = (($107) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $sop1 = $109;
  }
  $110 = $12;
  $111 = ($110|0)!=(0);
  if ($111) {
   $112 = $sop1;
   $113 = ($112|0)!=(5);
   if (!($113)) {
    label = 29;
   }
  } else {
   label = 29;
  }
  do {
   if ((label|0) == 29) {
    label = 0;
    $114 = $i;
    $115 = $b1;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)==(1);
    if ($117) {
     $118 = $b1;
     $119 = $1;
     $120 = (($119) + ($118<<4)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = $b1;
      $124 = $1;
      $125 = (($124) + ($123<<4)|0);
      $126 = (($125) + 8|0);
      $127 = +HEAPF64[$126>>3];
      $128 = (+Math_abs((+$127)));
      $129 = $128 == 1.0;
      if ($129) {
       break;
      }
     }
    }
    $130 = $11;
    $131 = ($130|0)!=(0);
    do {
     if ($131) {
      label = 70;
     } else {
      $132 = $9;
      $133 = ($132|0)!=(5);
      if ($133) {
       $134 = $10;
       $135 = $134 == 0.0;
       if (!($135)) {
        $136 = $10;
        $137 = $136 == 1.0;
        if (!($137)) {
         $158 = $b1;
         $159 = (($158) + 1)|0;
         $k = $159;
         L49: while(1) {
          $160 = $k;
          $161 = $i;
          $162 = ($160|0)>=($161|0);
          if ($162) {
           label = 50;
           break;
          }
          $163 = $k;
          $164 = $1;
          $165 = (($164) + ($163<<4)|0);
          $166 = (($165) + 8|0);
          $167 = HEAP32[$166>>2]|0;
          $168 = ($167|0)==(8);
          do {
           if ($168) {
            $169 = $k;
            $170 = $1;
            $171 = (($170) + ($169<<4)|0);
            $172 = (($171) + 4|0);
            $173 = HEAP32[$172>>2]|0;
            $174 = $k;
            $175 = (($174) + 1)|0;
            $176 = $1;
            $177 = (($176) + ($175<<4)|0);
            $178 = (($177) + 4|0);
            $179 = HEAP32[$178>>2]|0;
            $180 = ($173|0)==($179|0);
            if ($180) {
             $181 = $k;
             $182 = (($181) + 1)|0;
             $183 = $1;
             $184 = (($183) + ($182<<4)|0);
             $185 = HEAP32[$184>>2]|0;
             $186 = ($185|0)==(0);
             if ($186) {
              $187 = $k;
              $188 = (($187) + 1)|0;
              $189 = $1;
              $190 = (($189) + ($188<<4)|0);
              $191 = (($190) + 8|0);
              $192 = +HEAPF64[$191>>3];
              $193 = $10;
              $194 = $192 == $193;
              if (!($194)) {
               break;
              }
              $195 = $9;
              $196 = ($195|0)==(0);
              if ($196) {
               label = 56;
               break L49;
              }
              $197 = $k;
              $198 = (($197) - 1)|0;
              $l = $198;
              while(1) {
               $199 = $l;
               $200 = ($199|0)>=(0);
               if (!($200)) {
                break;
               }
               $201 = $l;
               $202 = $1;
               $203 = (($202) + ($201<<4)|0);
               $204 = (($203) + 4|0);
               $205 = HEAP32[$204>>2]|0;
               $206 = $k;
               $207 = $1;
               $208 = (($207) + ($206<<4)|0);
               $209 = (($208) + 4|0);
               $210 = HEAP32[$209>>2]|0;
               $211 = ($205|0)<($210|0);
               if ($211) {
                label = 60;
                break;
               }
               $212 = $l;
               $213 = $1;
               $214 = (($213) + ($212<<4)|0);
               $215 = HEAP32[$214>>2]|0;
               $216 = ($215|0)==(1);
               if ($216) {
                $217 = $l;
                $218 = $1;
                $219 = (($218) + ($217<<4)|0);
                $220 = (($219) + 8|0);
                $221 = HEAP32[$220>>2]|0;
                $222 = $9;
                $223 = ($221|0)==($222|0);
                if ($223) {
                 label = 63;
                 break L49;
                }
               }
               $224 = $l;
               $225 = (($224) + -1)|0;
               $l = $225;
              }
              if ((label|0) == 60) {
               label = 0;
              }
             }
            }
           }
          } while(0);
          $226 = $k;
          $227 = (($226) + 2)|0;
          $k = $227;
         }
         if ((label|0) == 50) {
          label = 0;
          continue L5;
         }
         else if ((label|0) == 56) {
          label = 0;
          break;
         }
         else if ((label|0) == 63) {
          label = 0;
          break;
         }
        }
       }
       $138 = $9;
       $139 = ($138|0)!=(0);
       if ($139) {
        $140 = $b1;
        $k = $140;
        while(1) {
         $141 = $k;
         $142 = $i;
         $143 = ($141|0)>=($142|0);
         if ($143) {
          label = 40;
          break;
         }
         $144 = $k;
         $145 = $1;
         $146 = (($145) + ($144<<4)|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = ($147|0)==(1);
         if ($148) {
          $149 = $k;
          $150 = $1;
          $151 = (($150) + ($149<<4)|0);
          $152 = (($151) + 8|0);
          $153 = HEAP32[$152>>2]|0;
          $154 = $9;
          $155 = ($153|0)==($154|0);
          if ($155) {
           break;
          }
         }
         $156 = $k;
         $157 = (($156) + 2)|0;
         $k = $157;
        }
        if ((label|0) == 40) {
         label = 0;
         continue L5;
        }
       }
       label = 70;
      } else {
       label = 70;
      }
     }
    } while(0);
    if ((label|0) == 70) {
     label = 0;
    }
    $228 = $6;
    $229 = (($228) - 1)|0;
    $j = $229;
    L94: while(1) {
     $230 = $j;
     $231 = (($230) + 1)|0;
     $b2 = $231;
     $232 = $b2;
     $233 = $e2;
     $234 = ($232|0)>=($233|0);
     if ($234) {
      break;
     }
     $235 = $11;
     $236 = ($235|0)!=(0);
     if ($236) {
      $237 = $e2;
      $j = $237;
      $238 = $7;
      $239 = ($238|0)>(1);
      do {
       if ($239) {
        $240 = $b2;
        $241 = $1;
        $242 = (($241) + ($240<<4)|0);
        $243 = HEAP32[$242>>2]|0;
        $244 = ($243|0)==(0);
        if ($244) {
         $245 = $b2;
         $246 = (($245) + 1)|0;
         $247 = $1;
         $248 = (($247) + ($246<<4)|0);
         $249 = (($248) + 4|0);
         $250 = HEAP32[$249>>2]|0;
         $251 = $8;
         $252 = ($250|0)==($251|0);
         if ($252) {
          $253 = $b2;
          $254 = (($253) + 1)|0;
          $255 = $1;
          $256 = (($255) + ($254<<4)|0);
          $257 = (($256) + 8|0);
          $258 = HEAP32[$257>>2]|0;
          $259 = ($258|0)==(4);
          if (!($259)) {
           $260 = $b2;
           $261 = (($260) + 1)|0;
           $262 = $1;
           $263 = (($262) + ($261<<4)|0);
           $264 = (($263) + 8|0);
           $265 = HEAP32[$264>>2]|0;
           $266 = ($265|0)==(5);
           if (!($266)) {
            break;
           }
          }
          $267 = $b2;
          $268 = (($267) + 2)|0;
          $b2 = $268;
         }
        }
       }
      } while(0);
     } else {
      $269 = $b2;
      $270 = (($269) + 1)|0;
      $j = $270;
      while(1) {
       $271 = $j;
       $272 = $e2;
       $273 = ($271|0)<($272|0);
       if (!($273)) {
        break;
       }
       $274 = $j;
       $275 = $1;
       $276 = (($275) + ($274<<4)|0);
       $277 = (($276) + 4|0);
       $278 = HEAP32[$277>>2]|0;
       $279 = $8;
       $280 = ($278|0)==($279|0);
       if ($280) {
        $281 = $j;
        $282 = $1;
        $283 = (($282) + ($281<<4)|0);
        $284 = (($283) + 8|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = ($285|0)==(4);
        if ($286) {
         label = 87;
         break;
        }
        $287 = $j;
        $288 = $1;
        $289 = (($288) + ($287<<4)|0);
        $290 = (($289) + 8|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = ($291|0)==(5);
        if ($292) {
         label = 87;
         break;
        }
       }
       $293 = $j;
       $294 = (($293) + 2)|0;
       $j = $294;
      }
      if ((label|0) == 87) {
       label = 0;
      }
      $295 = $b2;
      $296 = $6;
      $297 = ($295|0)<=($296|0);
      do {
       if ($297) {
        $298 = $sop1;
        $299 = ($298|0)==(5);
        if ($299) {
         continue L94;
        } else {
         break;
        }
       } else {
        $300 = $b2;
        $301 = (($300) - 1)|0;
        $302 = $1;
        $303 = (($302) + ($301<<4)|0);
        $304 = (($303) + 8|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = $sop1;
        $307 = ($305|0)!=($306|0);
        if ($307) {
         continue L94;
        } else {
         break;
        }
       }
      } while(0);
     }
     $308 = $j;
     $309 = $b2;
     $310 = (($308) - ($309))|0;
     $311 = ($310|0)==(1);
     if ($311) {
      $312 = $b2;
      $313 = $1;
      $314 = (($313) + ($312<<4)|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = ($315|0)==(0);
      if ($316) {
       $317 = $b2;
       $318 = $1;
       $319 = (($318) + ($317<<4)|0);
       $320 = (($319) + 8|0);
       $321 = +HEAPF64[$320>>3];
       $322 = (+Math_abs((+$321)));
       $323 = $322 == 1.0;
       if ($323) {
        continue;
       }
      }
     }
     $324 = $i;
     $ai = $324;
     $325 = $j;
     $aj = $325;
     $save_k1 = 0.0;
     $save_k2 = 0.0;
     $326 = $11;
     $327 = ($326|0)!=(0);
     if ($327) {
      $328 = $b1;
      $329 = $4;
      $330 = ($328|0)>($329|0);
      $332 = $330;
     } else {
      $332 = 0;
     }
     $331 = $332&1;
     $flag1 = $331;
     $333 = $flag1;
     $334 = ($333|0)!=(0);
     if ($334) {
      $335 = $4;
      $b1 = $335;
      $336 = $b1;
      $337 = $1;
      $338 = (($337) + ($336<<4)|0);
      $339 = (($338) + 8|0);
      $340 = +HEAPF64[$339>>3];
      $save_k1 = $340;
      $341 = $b1;
      $342 = $1;
      $343 = (($342) + ($341<<4)|0);
      $344 = (($343) + 8|0);
      HEAPF64[$344>>3] = 1.0;
     }
     $345 = $11;
     $346 = ($345|0)!=(0);
     if ($346) {
      $347 = $b2;
      $348 = $6;
      $349 = ($347|0)>($348|0);
      $351 = $349;
     } else {
      $351 = 0;
     }
     $350 = $351&1;
     $flag2 = $350;
     $352 = $flag2;
     $353 = ($352|0)!=(0);
     if ($353) {
      $354 = $6;
      $b2 = $354;
      $355 = $b2;
      $356 = $1;
      $357 = (($356) + ($355<<4)|0);
      $358 = (($357) + 8|0);
      $359 = +HEAPF64[$358>>3];
      $save_k2 = $359;
      $360 = $b2;
      $361 = $1;
      $362 = (($361) + ($360<<4)|0);
      $363 = (($362) + 8|0);
      HEAPF64[$363>>3] = 1.0;
     }
     $364 = $b1;
     $365 = $1;
     $366 = (($365) + ($364<<4)|0);
     $367 = $i;
     $368 = $b1;
     $369 = (($367) - ($368))|0;
     $370 = $b2;
     $371 = $1;
     $372 = (($371) + ($370<<4)|0);
     $373 = $j;
     $374 = $b2;
     $375 = (($373) - ($374))|0;
     $376 = (_se_compare($366,$369,$372,$375,$diff_sign)|0);
     $same_flag = $376;
     $377 = $flag1;
     $378 = ($377|0)!=(0);
     if ($378) {
      $379 = $save_k1;
      $380 = $4;
      $381 = $1;
      $382 = (($381) + ($380<<4)|0);
      $383 = (($382) + 8|0);
      HEAPF64[$383>>3] = $379;
      $384 = $b1;
      $385 = (($384) + 2)|0;
      $b1 = $385;
     }
     $386 = $flag2;
     $387 = ($386|0)!=(0);
     if ($387) {
      $388 = $save_k2;
      $389 = $6;
      $390 = $1;
      $391 = (($390) + ($389<<4)|0);
      $392 = (($391) + 8|0);
      HEAPF64[$392>>3] = $388;
      $393 = $b2;
      $394 = (($393) + 2)|0;
      $b2 = $394;
     }
     $395 = $same_flag;
     $396 = ($395|0)!=(0);
     if ($396) {
      label = 115;
      break L5;
     }
     $917 = $11;
     $918 = ($917|0)!=(0);
     if ($918) {
      label = 183;
      break L5;
     }
     $919 = $9;
     $920 = ($919|0)!=(0);
     do {
      if (!($920)) {
       $921 = $12;
       $922 = ($921|0)!=(0);
       if ($922) {
        break;
       }
       $923 = $b1;
       $924 = $4;
       $925 = ($923|0)==($924|0);
       do {
        if ($925) {
         $926 = $i;
         $927 = $e1;
         $928 = ($926|0)==($927|0);
         if (!($928)) {
          label = 190;
          break;
         }
         $929 = $8;
         $k = $929;
        } else {
         label = 190;
        }
       } while(0);
       if ((label|0) == 190) {
        label = 0;
        $930 = $8;
        $931 = (($930) + 1)|0;
        $k = $931;
       }
       $save_d1 = 1.0;
       $932 = $b1;
       $933 = (($932) + 1)|0;
       $l = $933;
       while(1) {
        $934 = $l;
        $935 = $i;
        $936 = ($934|0)>=($935|0);
        if ($936) {
         label = 193;
         break;
        }
        $937 = $l;
        $938 = $1;
        $939 = (($938) + ($937<<4)|0);
        $940 = (($939) + 4|0);
        $941 = HEAP32[$940>>2]|0;
        $942 = $k;
        $943 = ($941|0)==($942|0);
        if ($943) {
         $944 = $l;
         $945 = $1;
         $946 = (($945) + ($944<<4)|0);
         $947 = (($946) + 8|0);
         $948 = HEAP32[$947>>2]|0;
         $949 = ($948|0)==(8);
         if ($949) {
          label = 196;
          break;
         }
        }
        $973 = $l;
        $974 = (($973) + 2)|0;
        $l = $974;
       }
       if ((label|0) == 193) {
        label = 0;
       }
       else if ((label|0) == 196) {
        label = 0;
        $950 = $l;
        $951 = (($950) + 1)|0;
        $952 = $1;
        $953 = (($952) + ($951<<4)|0);
        $954 = (($953) + 4|0);
        $955 = HEAP32[$954>>2]|0;
        $956 = $k;
        $957 = ($955|0)==($956|0);
        do {
         if ($957) {
          $958 = $l;
          $959 = (($958) + 1)|0;
          $960 = $1;
          $961 = (($960) + ($959<<4)|0);
          $962 = HEAP32[$961>>2]|0;
          $963 = ($962|0)==(0);
          if (!($963)) {
           label = 201;
           break;
          }
          $964 = $l;
          $965 = (($964) + 1)|0;
          $966 = $1;
          $967 = (($966) + ($965<<4)|0);
          $968 = (($967) + 8|0);
          $969 = +HEAPF64[$968>>3];
          $save_d1 = $969;
          $970 = $save_d1;
          $971 = $970 <= 0.0;
          if ($971) {
           continue L94;
          } else {
           break;
          }
         } else {
          label = 201;
         }
        } while(0);
        if ((label|0) == 201) {
         label = 0;
         $save_d1 = -1.0;
        }
        $972 = $l;
        $ai = $972;
       }
       $975 = $b2;
       $976 = $6;
       $977 = ($975|0)==($976|0);
       do {
        if ($977) {
         $978 = $j;
         $979 = $e2;
         $980 = ($978|0)==($979|0);
         if (!($980)) {
          label = 208;
          break;
         }
         $981 = $8;
         $k = $981;
        } else {
         label = 208;
        }
       } while(0);
       if ((label|0) == 208) {
        label = 0;
        $982 = $8;
        $983 = (($982) + 1)|0;
        $k = $983;
       }
       $save_d2 = 1.0;
       $984 = $b2;
       $985 = (($984) + 1)|0;
       $l = $985;
       while(1) {
        $986 = $l;
        $987 = $j;
        $988 = ($986|0)>=($987|0);
        if ($988) {
         label = 211;
         break;
        }
        $989 = $l;
        $990 = $1;
        $991 = (($990) + ($989<<4)|0);
        $992 = (($991) + 4|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = $k;
        $995 = ($993|0)==($994|0);
        if ($995) {
         $996 = $l;
         $997 = $1;
         $998 = (($997) + ($996<<4)|0);
         $999 = (($998) + 8|0);
         $1000 = HEAP32[$999>>2]|0;
         $1001 = ($1000|0)==(8);
         if ($1001) {
          label = 214;
          break;
         }
        }
        $1025 = $l;
        $1026 = (($1025) + 2)|0;
        $l = $1026;
       }
       if ((label|0) == 211) {
        label = 0;
       }
       else if ((label|0) == 214) {
        label = 0;
        $1002 = $l;
        $1003 = (($1002) + 1)|0;
        $1004 = $1;
        $1005 = (($1004) + ($1003<<4)|0);
        $1006 = (($1005) + 4|0);
        $1007 = HEAP32[$1006>>2]|0;
        $1008 = $k;
        $1009 = ($1007|0)==($1008|0);
        do {
         if ($1009) {
          $1010 = $l;
          $1011 = (($1010) + 1)|0;
          $1012 = $1;
          $1013 = (($1012) + ($1011<<4)|0);
          $1014 = HEAP32[$1013>>2]|0;
          $1015 = ($1014|0)==(0);
          if (!($1015)) {
           label = 219;
           break;
          }
          $1016 = $l;
          $1017 = (($1016) + 1)|0;
          $1018 = $1;
          $1019 = (($1018) + ($1017<<4)|0);
          $1020 = (($1019) + 8|0);
          $1021 = +HEAPF64[$1020>>3];
          $save_d2 = $1021;
          $1022 = $save_d2;
          $1023 = $1022 <= 0.0;
          if ($1023) {
           continue L94;
          } else {
           break;
          }
         } else {
          label = 219;
         }
        } while(0);
        if ((label|0) == 219) {
         label = 0;
         $save_d2 = -1.0;
        }
        $1024 = $l;
        $aj = $1024;
       }
       $1027 = $ai;
       $1028 = $i;
       $1029 = ($1027|0)==($1028|0);
       do {
        if ($1029) {
         $1030 = $aj;
         $1031 = $j;
         $1032 = ($1030|0)==($1031|0);
         if (!($1032)) {
          break;
         }
         continue L94;
        }
       } while(0);
       $1033 = $ai;
       $1034 = $b1;
       $1035 = (($1033) - ($1034))|0;
       $1036 = ($1035|0)==(1);
       do {
        if ($1036) {
         $1037 = $b1;
         $1038 = $1;
         $1039 = (($1038) + ($1037<<4)|0);
         $1040 = HEAP32[$1039>>2]|0;
         $1041 = ($1040|0)==(0);
         if (!($1041)) {
          break;
         }
         continue L94;
        }
       } while(0);
       $1042 = $10;
       $1043 = $1042 == 1.0;
       do {
        if ($1043) {
         $1044 = $save_d1;
         $1045 = $1044 < 0.0;
         if (!($1045)) {
          $1046 = $save_d2;
          $1047 = $1046 < 0.0;
          if (!($1047)) {
           break;
          }
         }
         continue L94;
        }
       } while(0);
       $1048 = $b1;
       $1049 = $1;
       $1050 = (($1049) + ($1048<<4)|0);
       $1051 = $ai;
       $1052 = $b1;
       $1053 = (($1051) - ($1052))|0;
       $1054 = $b2;
       $1055 = $1;
       $1056 = (($1055) + ($1054<<4)|0);
       $1057 = $aj;
       $1058 = $b2;
       $1059 = (($1057) - ($1058))|0;
       $1060 = (_se_compare($1050,$1053,$1056,$1059,$diff_sign)|0);
       $1061 = ($1060|0)!=(0);
       if (!($1061)) {
        continue L94;
       }
       $1062 = $save_d1;
       $1063 = $1062 > 0.0;
       if (!($1063)) {
        $1064 = $save_d2;
        $1065 = $1064 > 0.0;
        if (!($1065)) {
         label = 256;
         break L5;
        }
       }
       $1066 = $save_d1;
       $1067 = $1066 < 0.0;
       if ($1067) {
        $1068 = $save_d2;
        HEAPF64[$power>>3] = $1068;
       } else {
        $1069 = $save_d2;
        $1070 = $1069 < 0.0;
        if ($1070) {
         $1071 = $save_d1;
         HEAPF64[$power>>3] = $1071;
        } else {
         $1072 = $save_d1;
         $1073 = $save_d2;
         $1074 = $1072 < $1073;
         if ($1074) {
          $1075 = $save_d1;
          $1077 = $1075;
         } else {
          $1076 = $save_d2;
          $1077 = $1076;
         }
         HEAPF64[$power>>3] = $1077;
         $1078 = HEAP32[$diff_sign>>2]|0;
         $1079 = ($1078|0)!=(0);
         do {
          if (!($1079)) {
           $1080 = +HEAPF64[$power>>3];
           $1081 = (+_fmod((+$1080),1.0));
           $1082 = $1081 != 0.0;
           if (!($1082)) {
            break;
           }
           $1083 = $save_d1;
           $1084 = $save_d2;
           $1085 = $1083 > $1084;
           if ($1085) {
            $1086 = $save_d1;
            $1090 = $1086;
           } else {
            $1087 = $save_d2;
            $1090 = $1087;
           }
           $1088 = +HEAPF64[$power>>3];
           $1089 = $1090 - $1088;
           $1091 = (+_fmod((+$1089),1.0));
           $1092 = $1091 == 0.0;
           if ($1092) {
            label = 249;
            break L5;
           }
          }
         } while(0);
        }
       }
       $1093 = +HEAPF64[$power>>3];
       $1094 = $1093 < 1.0;
       if (!($1094)) {
        label = 255;
        break L5;
       }
       continue L94;
      }
     } while(0);
    }
    continue L5;
   }
  } while(0);
 }
 if ((label|0) == 6) {
  $0 = 0;
  $1252 = $0;
  STACKTOP = sp;return ($1252|0);
 }
 else if ((label|0) == 115) {
  HEAPF64[$power>>3] = 1.0;
  label = 116;
 }
 else if ((label|0) == 183) {
  $0 = 0;
  $1252 = $0;
  STACKTOP = sp;return ($1252|0);
 }
 else if ((label|0) == 249) {
  label = 116;
 }
 else if ((label|0) == 255) {
  $1095 = +HEAPF64[$power>>3];
  (+_modf((+$1095),($power|0)));
  label = 116;
 }
 else if ((label|0) == 256) {
  $1096 = $i;
  $1097 = $ai;
  $1098 = (($1096) - ($1097))|0;
  $1099 = (+($1098|0));
  $d1 = $1099;
  $1100 = $j;
  $1101 = $aj;
  $1102 = (($1100) - ($1101))|0;
  $1103 = (+($1102|0));
  $d2 = $1103;
  $1104 = $d1;
  $1105 = $d2;
  $1106 = $1104 == $1105;
  if ($1106) {
   $d1 = 1.0;
   $d2 = 1.0;
   $1107 = $ai;
   $1108 = (($1107) + 2)|0;
   $1109 = $i;
   $1110 = ($1108|0)<($1109|0);
   if ($1110) {
    $1111 = $ai;
    $1112 = $1;
    $1113 = (($1112) + ($1111<<4)|0);
    $1114 = (($1113) + 4|0);
    $1115 = HEAP32[$1114>>2]|0;
    $k = $1115;
    $1116 = $ai;
    $1117 = (($1116) + 1)|0;
    $1118 = $1;
    $1119 = (($1118) + ($1117<<4)|0);
    $1120 = (($1119) + 4|0);
    $1121 = HEAP32[$1120>>2]|0;
    $1122 = $k;
    $1123 = (($1122) + 1)|0;
    $1124 = ($1121|0)==($1123|0);
    do {
     if ($1124) {
      $1125 = $ai;
      $1126 = (($1125) + 2)|0;
      $1127 = $1;
      $1128 = (($1127) + ($1126<<4)|0);
      $1129 = (($1128) + 4|0);
      $1130 = HEAP32[$1129>>2]|0;
      $1131 = $k;
      $1132 = (($1131) + 1)|0;
      $1133 = ($1130|0)==($1132|0);
      if ($1133) {
       $1134 = $ai;
       $1135 = (($1134) + 1)|0;
       $1136 = $1;
       $1137 = (($1136) + ($1135<<4)|0);
       $1138 = HEAP32[$1137>>2]|0;
       $1139 = ($1138|0)==(0);
       if ($1139) {
        $1140 = $ai;
        $1141 = (($1140) + 2)|0;
        $1142 = $1;
        $1143 = (($1142) + ($1141<<4)|0);
        $1144 = (($1143) + 8|0);
        $1145 = HEAP32[$1144>>2]|0;
        $1146 = ($1145|0)==(4);
        if (!($1146)) {
         $1147 = $ai;
         $1148 = (($1147) + 2)|0;
         $1149 = $1;
         $1150 = (($1149) + ($1148<<4)|0);
         $1151 = (($1150) + 8|0);
         $1152 = HEAP32[$1151>>2]|0;
         $1153 = ($1152|0)==(5);
         if (!($1153)) {
          break;
         }
        }
        $1154 = $ai;
        $1155 = (($1154) + 1)|0;
        $1156 = $1;
        $1157 = (($1156) + ($1155<<4)|0);
        $1158 = (($1157) + 8|0);
        $1159 = +HEAPF64[$1158>>3];
        $1160 = (+Math_abs((+$1159)));
        $d1 = $1160;
       }
      }
     }
    } while(0);
   }
   $1161 = $aj;
   $1162 = (($1161) + 2)|0;
   $1163 = $j;
   $1164 = ($1162|0)<($1163|0);
   if ($1164) {
    $1165 = $aj;
    $1166 = $1;
    $1167 = (($1166) + ($1165<<4)|0);
    $1168 = (($1167) + 4|0);
    $1169 = HEAP32[$1168>>2]|0;
    $k = $1169;
    $1170 = $aj;
    $1171 = (($1170) + 1)|0;
    $1172 = $1;
    $1173 = (($1172) + ($1171<<4)|0);
    $1174 = (($1173) + 4|0);
    $1175 = HEAP32[$1174>>2]|0;
    $1176 = $k;
    $1177 = (($1176) + 1)|0;
    $1178 = ($1175|0)==($1177|0);
    do {
     if ($1178) {
      $1179 = $aj;
      $1180 = (($1179) + 2)|0;
      $1181 = $1;
      $1182 = (($1181) + ($1180<<4)|0);
      $1183 = (($1182) + 4|0);
      $1184 = HEAP32[$1183>>2]|0;
      $1185 = $k;
      $1186 = (($1185) + 1)|0;
      $1187 = ($1184|0)==($1186|0);
      if ($1187) {
       $1188 = $aj;
       $1189 = (($1188) + 1)|0;
       $1190 = $1;
       $1191 = (($1190) + ($1189<<4)|0);
       $1192 = HEAP32[$1191>>2]|0;
       $1193 = ($1192|0)==(0);
       if ($1193) {
        $1194 = $aj;
        $1195 = (($1194) + 2)|0;
        $1196 = $1;
        $1197 = (($1196) + ($1195<<4)|0);
        $1198 = (($1197) + 8|0);
        $1199 = HEAP32[$1198>>2]|0;
        $1200 = ($1199|0)==(4);
        if (!($1200)) {
         $1201 = $aj;
         $1202 = (($1201) + 2)|0;
         $1203 = $1;
         $1204 = (($1203) + ($1202<<4)|0);
         $1205 = (($1204) + 8|0);
         $1206 = HEAP32[$1205>>2]|0;
         $1207 = ($1206|0)==(5);
         if (!($1207)) {
          break;
         }
        }
        $1208 = $aj;
        $1209 = (($1208) + 1)|0;
        $1210 = $1;
        $1211 = (($1210) + ($1209<<4)|0);
        $1212 = (($1211) + 8|0);
        $1213 = +HEAPF64[$1212>>3];
        $1214 = (+Math_abs((+$1213)));
        $d2 = $1214;
       }
      }
     }
    } while(0);
   }
  }
  $1215 = $d1;
  $1216 = $d2;
  $1217 = $1215 <= $1216;
  if ($1217) {
   $1218 = $1;
   $1219 = $8;
   $1220 = HEAP32[$diff_sign>>2]|0;
   $1221 = $sop1;
   $1222 = $op1;
   $1223 = $op2;
   $1224 = $4;
   $1225 = $6;
   $1226 = $b1;
   $1227 = $b2;
   $1228 = $ai;
   $1229 = $aj;
   $1230 = $i;
   $1231 = $j;
   $1232 = $e1;
   $1233 = $e2;
   $1234 = (_big_fplus($1218,$1219,$1220,$1221,$1222,$1223,$1224,$1225,$1226,$1227,$1228,$1229,$1230,$1231,$1232,$1233)|0);
   $len = $1234;
  } else {
   $1235 = $1;
   $1236 = $8;
   $1237 = HEAP32[$diff_sign>>2]|0;
   $1238 = $sop1;
   $1239 = $op2;
   $1240 = $op1;
   $1241 = $6;
   $1242 = $4;
   $1243 = $b2;
   $1244 = $b1;
   $1245 = $aj;
   $1246 = $ai;
   $1247 = $j;
   $1248 = $i;
   $1249 = $e2;
   $1250 = $e1;
   $1251 = (_big_fplus($1235,$1236,$1237,$1238,$1239,$1240,$1241,$1242,$1243,$1244,$1245,$1246,$1247,$1248,$1249,$1250)|0);
   $len = $1251;
  }
 }
 if ((label|0) == 116) {
  $397 = $sop1;
  $398 = ($397|0)==(5);
  if ($398) {
   $399 = $8;
   $400 = HEAP32[3704>>2]|0;
   $401 = (($400) + 4|0);
   HEAP32[$401>>2] = $399;
   $402 = HEAP32[3704>>2]|0;
   HEAP32[$402>>2] = 0;
   $403 = HEAP32[3704>>2]|0;
   $404 = (($403) + 8|0);
   HEAPF64[$404>>3] = 1.0;
   $405 = $8;
   $406 = HEAP32[3704>>2]|0;
   $407 = (($406) + 16|0);
   $408 = (($407) + 4|0);
   HEAP32[$408>>2] = $405;
   $409 = HEAP32[3704>>2]|0;
   $410 = (($409) + 16|0);
   HEAP32[$410>>2] = 2;
   $411 = HEAP32[3704>>2]|0;
   $412 = (($411) + 16|0);
   $413 = (($412) + 8|0);
   HEAP32[$413>>2] = 5;
   $len = 2;
  } else {
   $len = 0;
  }
  $414 = $len;
  $k = $414;
  $415 = $len;
  $416 = HEAP32[3704>>2]|0;
  $417 = (($416) + ($415<<4)|0);
  $418 = $b1;
  $419 = $1;
  $420 = (($419) + ($418<<4)|0);
  $421 = $ai;
  $422 = $b1;
  $423 = (($421) - ($422))|0;
  $424 = $423<<4;
  _memmove(($417|0),($420|0),($424|0))|0;
  $425 = $ai;
  $426 = $b1;
  $427 = (($425) - ($426))|0;
  $428 = $len;
  $429 = (($428) + ($427))|0;
  $len = $429;
  $430 = +HEAPF64[$power>>3];
  $431 = $430 != 1.0;
  if ($431) {
   while(1) {
    $432 = $k;
    $433 = $len;
    $434 = ($432|0)<($433|0);
    if (!($434)) {
     break;
    }
    $435 = $k;
    $436 = HEAP32[3704>>2]|0;
    $437 = (($436) + ($435<<4)|0);
    $438 = (($437) + 4|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = (($439) + 2)|0;
    HEAP32[$438>>2] = $440;
    $441 = $k;
    $442 = (($441) + 1)|0;
    $k = $442;
   }
   $443 = $8;
   $444 = (($443) + 1)|0;
   $445 = $len;
   $446 = HEAP32[3704>>2]|0;
   $447 = (($446) + ($445<<4)|0);
   $448 = (($447) + 4|0);
   HEAP32[$448>>2] = $444;
   $449 = $len;
   $450 = HEAP32[3704>>2]|0;
   $451 = (($450) + ($449<<4)|0);
   HEAP32[$451>>2] = 2;
   $452 = $len;
   $453 = HEAP32[3704>>2]|0;
   $454 = (($453) + ($452<<4)|0);
   $455 = (($454) + 8|0);
   HEAP32[$455>>2] = 8;
   $456 = $len;
   $457 = (($456) + 1)|0;
   $len = $457;
   $458 = $8;
   $459 = (($458) + 1)|0;
   $460 = $len;
   $461 = HEAP32[3704>>2]|0;
   $462 = (($461) + ($460<<4)|0);
   $463 = (($462) + 4|0);
   HEAP32[$463>>2] = $459;
   $464 = $len;
   $465 = HEAP32[3704>>2]|0;
   $466 = (($465) + ($464<<4)|0);
   HEAP32[$466>>2] = 0;
   $467 = +HEAPF64[$power>>3];
   $468 = $len;
   $469 = HEAP32[3704>>2]|0;
   $470 = (($469) + ($468<<4)|0);
   $471 = (($470) + 8|0);
   HEAPF64[$471>>3] = $467;
   $472 = $len;
   $473 = (($472) + 1)|0;
   $len = $473;
   $474 = +HEAPF64[$power>>3];
   $475 = (+_fmod((+$474),2.0));
   $476 = $475 == 0.0;
   if ($476) {
    HEAP32[$diff_sign>>2] = 0;
   }
  } else {
   $477 = $b1;
   $478 = $4;
   $479 = ($477|0)==($478|0);
   if ($479) {
    $480 = $ai;
    $481 = $e1;
    $482 = ($480|0)==($481|0);
    if ($482) {
     while(1) {
      $483 = $k;
      $484 = $len;
      $485 = ($483|0)<($484|0);
      if (!($485)) {
       break;
      }
      $486 = $k;
      $487 = HEAP32[3704>>2]|0;
      $488 = (($487) + ($486<<4)|0);
      $489 = (($488) + 4|0);
      $490 = HEAP32[$489>>2]|0;
      $491 = (($490) + 1)|0;
      HEAP32[$489>>2] = $491;
      $492 = $k;
      $493 = (($492) + 1)|0;
      $k = $493;
     }
    }
   }
  }
  $494 = $8;
  $495 = $len;
  $496 = HEAP32[3704>>2]|0;
  $497 = (($496) + ($495<<4)|0);
  $498 = (($497) + 4|0);
  HEAP32[$498>>2] = $494;
  $499 = $len;
  $500 = HEAP32[3704>>2]|0;
  $501 = (($500) + ($499<<4)|0);
  HEAP32[$501>>2] = 2;
  $502 = $len;
  $503 = HEAP32[3704>>2]|0;
  $504 = (($503) + ($502<<4)|0);
  $505 = (($504) + 8|0);
  HEAP32[$505>>2] = 4;
  $506 = $len;
  $507 = (($506) + 1)|0;
  $len = $507;
  $508 = $len;
  $k = $508;
  $509 = $len;
  $510 = HEAP32[3704>>2]|0;
  $511 = (($510) + ($509<<4)|0);
  $512 = $4;
  $513 = $1;
  $514 = (($513) + ($512<<4)|0);
  $515 = $b1;
  $516 = $4;
  $517 = (($515) - ($516))|0;
  $518 = $517<<4;
  _memmove(($511|0),($514|0),($518|0))|0;
  $519 = $b1;
  $520 = $4;
  $521 = (($519) - ($520))|0;
  $522 = $len;
  $523 = (($522) + ($521))|0;
  $len = $523;
  $524 = $ai;
  $525 = $i;
  $526 = ($524|0)!=($525|0);
  if ($526) {
   $527 = $len;
   $l = $527;
   $528 = $len;
   $529 = $ai;
   $530 = (($528) + ($529))|0;
   $531 = $b1;
   $532 = (($530) - ($531))|0;
   $m = $532;
   $533 = $len;
   $534 = HEAP32[3704>>2]|0;
   $535 = (($534) + ($533<<4)|0);
   $536 = $b1;
   $537 = $1;
   $538 = (($537) + ($536<<4)|0);
   $539 = $i;
   $540 = $b1;
   $541 = (($539) - ($540))|0;
   $542 = $541<<4;
   _memmove(($535|0),($538|0),($542|0))|0;
   $543 = $i;
   $544 = $b1;
   $545 = (($543) - ($544))|0;
   $546 = $len;
   $547 = (($546) + ($545))|0;
   $len = $547;
   $548 = $b1;
   $549 = $4;
   $550 = ($548|0)==($549|0);
   if ($550) {
    $551 = $i;
    $552 = $e1;
    $553 = ($551|0)==($552|0);
    if ($553) {
     while(1) {
      $554 = $l;
      $555 = $len;
      $556 = ($554|0)<($555|0);
      if (!($556)) {
       break;
      }
      $557 = $l;
      $558 = HEAP32[3704>>2]|0;
      $559 = (($558) + ($557<<4)|0);
      $560 = (($559) + 4|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = (($561) + 1)|0;
      HEAP32[$560>>2] = $562;
      $563 = $l;
      $564 = (($563) + 1)|0;
      $l = $564;
     }
    }
   }
   $565 = $m;
   $l = $565;
   $566 = $m;
   $567 = (($566) + 1)|0;
   $m = $567;
   while(1) {
    $568 = $m;
    $569 = $len;
    $570 = ($568|0)<($569|0);
    if (!($570)) {
     break;
    }
    $571 = $m;
    $572 = HEAP32[3704>>2]|0;
    $573 = (($572) + ($571<<4)|0);
    $574 = (($573) + 4|0);
    $575 = HEAP32[$574>>2]|0;
    $576 = (($575) + 1)|0;
    HEAP32[$574>>2] = $576;
    $577 = $m;
    $578 = (($577) + 1)|0;
    $m = $578;
   }
   $579 = $l;
   $580 = HEAP32[3704>>2]|0;
   $581 = (($580) + ($579<<4)|0);
   $582 = (($581) + 4|0);
   $583 = HEAP32[$582>>2]|0;
   $584 = (($583) + 1)|0;
   $585 = $len;
   $586 = HEAP32[3704>>2]|0;
   $587 = (($586) + ($585<<4)|0);
   $588 = (($587) + 4|0);
   HEAP32[$588>>2] = $584;
   $589 = $len;
   $590 = HEAP32[3704>>2]|0;
   $591 = (($590) + ($589<<4)|0);
   HEAP32[$591>>2] = 2;
   $592 = $len;
   $593 = HEAP32[3704>>2]|0;
   $594 = (($593) + ($592<<4)|0);
   $595 = (($594) + 8|0);
   HEAP32[$595>>2] = 2;
   $596 = $len;
   $597 = (($596) + 1)|0;
   $len = $597;
   $598 = $l;
   $599 = HEAP32[3704>>2]|0;
   $600 = (($599) + ($598<<4)|0);
   $601 = (($600) + 4|0);
   $602 = HEAP32[$601>>2]|0;
   $603 = (($602) + 1)|0;
   $604 = $len;
   $605 = HEAP32[3704>>2]|0;
   $606 = (($605) + ($604<<4)|0);
   $607 = (($606) + 4|0);
   HEAP32[$607>>2] = $603;
   $608 = $len;
   $609 = HEAP32[3704>>2]|0;
   $610 = (($609) + ($608<<4)|0);
   HEAP32[$610>>2] = 0;
   $611 = +HEAPF64[$power>>3];
   $612 = $len;
   $613 = HEAP32[3704>>2]|0;
   $614 = (($613) + ($612<<4)|0);
   $615 = (($614) + 8|0);
   HEAPF64[$615>>3] = $611;
   $616 = $len;
   $617 = (($616) + 1)|0;
   $len = $617;
   $618 = $8;
   $619 = $len;
   $620 = HEAP32[3704>>2]|0;
   $621 = (($620) + ($619<<4)|0);
   $622 = (($621) + 4|0);
   HEAP32[$622>>2] = $618;
   $623 = $len;
   $624 = HEAP32[3704>>2]|0;
   $625 = (($624) + ($623<<4)|0);
   HEAP32[$625>>2] = 2;
   $626 = $len;
   $627 = HEAP32[3704>>2]|0;
   $628 = (($627) + ($626<<4)|0);
   $629 = (($628) + 8|0);
   HEAP32[$629>>2] = 4;
   $630 = $len;
   $631 = (($630) + 1)|0;
   $len = $631;
  }
  $632 = $8;
  $633 = $len;
  $634 = HEAP32[3704>>2]|0;
  $635 = (($634) + ($633<<4)|0);
  $636 = (($635) + 4|0);
  HEAP32[$636>>2] = $632;
  $637 = $len;
  $638 = HEAP32[3704>>2]|0;
  $639 = (($638) + ($637<<4)|0);
  HEAP32[$639>>2] = 0;
  $640 = $op1;
  $641 = ($640|0)==(2);
  if ($641) {
   $642 = $len;
   $643 = HEAP32[3704>>2]|0;
   $644 = (($643) + ($642<<4)|0);
   $645 = (($644) + 8|0);
   HEAPF64[$645>>3] = -1.0;
  } else {
   $646 = $len;
   $647 = HEAP32[3704>>2]|0;
   $648 = (($647) + ($646<<4)|0);
   $649 = (($648) + 8|0);
   HEAPF64[$649>>3] = 1.0;
  }
  $650 = $len;
  $651 = (($650) + 1)|0;
  $len = $651;
  $652 = $len;
  $653 = HEAP32[3704>>2]|0;
  $654 = (($653) + ($652<<4)|0);
  $655 = $i;
  $656 = $1;
  $657 = (($656) + ($655<<4)|0);
  $658 = $e1;
  $659 = $i;
  $660 = (($658) - ($659))|0;
  $661 = $660<<4;
  _memmove(($654|0),($657|0),($661|0))|0;
  $662 = $e1;
  $663 = $i;
  $664 = (($662) - ($663))|0;
  $665 = $len;
  $666 = (($665) + ($664))|0;
  $len = $666;
  while(1) {
   $667 = $k;
   $668 = $len;
   $669 = ($667|0)<($668|0);
   if (!($669)) {
    break;
   }
   $670 = $k;
   $671 = HEAP32[3704>>2]|0;
   $672 = (($671) + ($670<<4)|0);
   $673 = (($672) + 4|0);
   $674 = HEAP32[$673>>2]|0;
   $675 = (($674) + 2)|0;
   HEAP32[$673>>2] = $675;
   $676 = $k;
   $677 = (($676) + 1)|0;
   $k = $677;
  }
  $678 = $8;
  $679 = (($678) + 1)|0;
  $680 = $len;
  $681 = HEAP32[3704>>2]|0;
  $682 = (($681) + ($680<<4)|0);
  $683 = (($682) + 4|0);
  HEAP32[$683>>2] = $679;
  $684 = $len;
  $685 = HEAP32[3704>>2]|0;
  $686 = (($685) + ($684<<4)|0);
  HEAP32[$686>>2] = 2;
  $687 = $op2;
  $688 = ($687|0)==(2);
  $689 = $688&1;
  $690 = HEAP32[$diff_sign>>2]|0;
  $691 = $690 ^ $689;
  HEAP32[$diff_sign>>2] = $691;
  $692 = HEAP32[$diff_sign>>2]|0;
  $693 = ($692|0)!=(0);
  if ($693) {
   $694 = $len;
   $695 = HEAP32[3704>>2]|0;
   $696 = (($695) + ($694<<4)|0);
   $697 = (($696) + 8|0);
   HEAP32[$697>>2] = 2;
  } else {
   $698 = $len;
   $699 = HEAP32[3704>>2]|0;
   $700 = (($699) + ($698<<4)|0);
   $701 = (($700) + 8|0);
   HEAP32[$701>>2] = 1;
  }
  $702 = $len;
  $703 = (($702) + 1)|0;
  $len = $703;
  $704 = $len;
  $k = $704;
  $705 = $aj;
  $706 = $j;
  $707 = ($705|0)!=($706|0);
  if ($707) {
   $708 = $len;
   $709 = $7;
   $710 = (($708) + ($709))|0;
   $711 = (($710) + 2)|0;
   $712 = HEAP32[8>>2]|0;
   $713 = ($711|0)>($712|0);
   if ($713) {
    _error_huge();
   }
  } else {
   $714 = $len;
   $715 = $b2;
   $716 = $6;
   $717 = (($715) - ($716))|0;
   $718 = (($714) + ($717))|0;
   $719 = $e2;
   $720 = $j;
   $721 = (($719) - ($720))|0;
   $722 = (($718) + ($721))|0;
   $723 = (($722) + 1)|0;
   $724 = HEAP32[8>>2]|0;
   $725 = ($723|0)>($724|0);
   if ($725) {
    _error_huge();
   }
  }
  $726 = $len;
  $727 = HEAP32[3704>>2]|0;
  $728 = (($727) + ($726<<4)|0);
  $729 = $6;
  $730 = $1;
  $731 = (($730) + ($729<<4)|0);
  $732 = $b2;
  $733 = $6;
  $734 = (($732) - ($733))|0;
  $735 = $734<<4;
  _memmove(($728|0),($731|0),($735|0))|0;
  $736 = $b2;
  $737 = $6;
  $738 = (($736) - ($737))|0;
  $739 = $len;
  $740 = (($739) + ($738))|0;
  $len = $740;
  $741 = $aj;
  $742 = $j;
  $743 = ($741|0)!=($742|0);
  if ($743) {
   $744 = $len;
   $745 = $aj;
   $746 = (($744) + ($745))|0;
   $747 = $b2;
   $748 = (($746) - ($747))|0;
   $m = $748;
   $749 = $len;
   $750 = HEAP32[3704>>2]|0;
   $751 = (($750) + ($749<<4)|0);
   $752 = $b2;
   $753 = $1;
   $754 = (($753) + ($752<<4)|0);
   $755 = $j;
   $756 = $b2;
   $757 = (($755) - ($756))|0;
   $758 = $757<<4;
   _memmove(($751|0),($754|0),($758|0))|0;
   $759 = $j;
   $760 = $b2;
   $761 = (($759) - ($760))|0;
   $762 = $len;
   $763 = (($762) + ($761))|0;
   $len = $763;
   $764 = $m;
   $l = $764;
   $765 = $m;
   $766 = (($765) + 1)|0;
   $m = $766;
   while(1) {
    $767 = $m;
    $768 = $len;
    $769 = ($767|0)<($768|0);
    if (!($769)) {
     break;
    }
    $770 = $m;
    $771 = HEAP32[3704>>2]|0;
    $772 = (($771) + ($770<<4)|0);
    $773 = (($772) + 4|0);
    $774 = HEAP32[$773>>2]|0;
    $775 = (($774) + 1)|0;
    HEAP32[$773>>2] = $775;
    $776 = $m;
    $777 = (($776) + 1)|0;
    $m = $777;
   }
   $778 = $l;
   $779 = HEAP32[3704>>2]|0;
   $780 = (($779) + ($778<<4)|0);
   $781 = (($780) + 4|0);
   $782 = HEAP32[$781>>2]|0;
   $783 = (($782) + 1)|0;
   $784 = $len;
   $785 = HEAP32[3704>>2]|0;
   $786 = (($785) + ($784<<4)|0);
   $787 = (($786) + 4|0);
   HEAP32[$787>>2] = $783;
   $788 = $len;
   $789 = HEAP32[3704>>2]|0;
   $790 = (($789) + ($788<<4)|0);
   HEAP32[$790>>2] = 2;
   $791 = $len;
   $792 = HEAP32[3704>>2]|0;
   $793 = (($792) + ($791<<4)|0);
   $794 = (($793) + 8|0);
   HEAP32[$794>>2] = 2;
   $795 = $len;
   $796 = (($795) + 1)|0;
   $len = $796;
   $797 = $l;
   $798 = HEAP32[3704>>2]|0;
   $799 = (($798) + ($797<<4)|0);
   $800 = (($799) + 4|0);
   $801 = HEAP32[$800>>2]|0;
   $802 = (($801) + 1)|0;
   $803 = $len;
   $804 = HEAP32[3704>>2]|0;
   $805 = (($804) + ($803<<4)|0);
   $806 = (($805) + 4|0);
   HEAP32[$806>>2] = $802;
   $807 = $len;
   $808 = HEAP32[3704>>2]|0;
   $809 = (($808) + ($807<<4)|0);
   HEAP32[$809>>2] = 0;
   $810 = +HEAPF64[$power>>3];
   $811 = $len;
   $812 = HEAP32[3704>>2]|0;
   $813 = (($812) + ($811<<4)|0);
   $814 = (($813) + 8|0);
   HEAPF64[$814>>3] = $810;
   $815 = $len;
   $816 = (($815) + 1)|0;
   $len = $816;
  } else {
   $817 = $8;
   $818 = $len;
   $819 = HEAP32[3704>>2]|0;
   $820 = (($819) + ($818<<4)|0);
   $821 = (($820) + 4|0);
   HEAP32[$821>>2] = $817;
   $822 = $len;
   $823 = HEAP32[3704>>2]|0;
   $824 = (($823) + ($822<<4)|0);
   HEAP32[$824>>2] = 0;
   $825 = $len;
   $826 = HEAP32[3704>>2]|0;
   $827 = (($826) + ($825<<4)|0);
   $828 = (($827) + 8|0);
   HEAPF64[$828>>3] = 1.0;
   $829 = $len;
   $830 = (($829) + 1)|0;
   $len = $830;
  }
  $831 = $len;
  $832 = HEAP32[3704>>2]|0;
  $833 = (($832) + ($831<<4)|0);
  $834 = $j;
  $835 = $1;
  $836 = (($835) + ($834<<4)|0);
  $837 = $e2;
  $838 = $j;
  $839 = (($837) - ($838))|0;
  $840 = $839<<4;
  _memmove(($833|0),($836|0),($840|0))|0;
  $841 = $e2;
  $842 = $j;
  $843 = (($841) - ($842))|0;
  $844 = $len;
  $845 = (($844) + ($843))|0;
  $len = $845;
  while(1) {
   $846 = $k;
   $847 = $len;
   $848 = ($846|0)<($847|0);
   if (!($848)) {
    break;
   }
   $849 = $k;
   $850 = HEAP32[3704>>2]|0;
   $851 = (($850) + ($849<<4)|0);
   $852 = (($851) + 4|0);
   $853 = HEAP32[$852>>2]|0;
   $854 = (($853) + 2)|0;
   HEAP32[$852>>2] = $854;
   $855 = $k;
   $856 = (($855) + 1)|0;
   $k = $856;
  }
 }
 $857 = $2;
 $858 = HEAP32[$857>>2]|0;
 $859 = $len;
 $860 = (($858) + ($859))|0;
 $861 = $5;
 $862 = (($860) - ($861))|0;
 $863 = $7;
 $864 = (($863) + 1)|0;
 $865 = (($862) - ($864))|0;
 $866 = HEAP32[8>>2]|0;
 $867 = ($865|0)>($866|0);
 if ($867) {
  _error_huge();
 }
 $868 = $op1;
 $869 = ($868|0)==(2);
 if ($869) {
  $870 = $4;
  $871 = (($870) - 1)|0;
  $872 = $1;
  $873 = (($872) + ($871<<4)|0);
  $874 = (($873) + 8|0);
  HEAP32[$874>>2] = 1;
 }
 $875 = $6;
 $876 = (($875) - 1)|0;
 $877 = $1;
 $878 = (($877) + ($876<<4)|0);
 $879 = $e2;
 $880 = $1;
 $881 = (($880) + ($879<<4)|0);
 $882 = $2;
 $883 = HEAP32[$882>>2]|0;
 $884 = $e2;
 $885 = (($883) - ($884))|0;
 $886 = $885<<4;
 _memmove(($878|0),($881|0),($886|0))|0;
 $887 = $7;
 $888 = (($887) + 1)|0;
 $889 = $2;
 $890 = HEAP32[$889>>2]|0;
 $891 = (($890) - ($888))|0;
 HEAP32[$889>>2] = $891;
 $892 = $4;
 $893 = $len;
 $894 = (($892) + ($893))|0;
 $895 = $1;
 $896 = (($895) + ($894<<4)|0);
 $897 = $e1;
 $898 = $1;
 $899 = (($898) + ($897<<4)|0);
 $900 = $2;
 $901 = HEAP32[$900>>2]|0;
 $902 = $e1;
 $903 = (($901) - ($902))|0;
 $904 = $903<<4;
 _memmove(($896|0),($899|0),($904|0))|0;
 $905 = $len;
 $906 = $5;
 $907 = (($905) - ($906))|0;
 $908 = $2;
 $909 = HEAP32[$908>>2]|0;
 $910 = (($909) + ($907))|0;
 HEAP32[$908>>2] = $910;
 $911 = $4;
 $912 = $1;
 $913 = (($912) + ($911<<4)|0);
 $914 = HEAP32[3704>>2]|0;
 $915 = $len;
 $916 = $915<<4;
 _memmove(($913|0),($914|0),($916|0))|0;
 $0 = 1;
 $1252 = $0;
 STACKTOP = sp;return ($1252|0);
}
function _big_fplus($equation,$level,$diff_sign,$sop1,$op1,$op2,$i1,$i2,$b1,$b2,$ai,$aj,$i,$j,$e1,$e2) {
 $equation = $equation|0;
 $level = $level|0;
 $diff_sign = $diff_sign|0;
 $sop1 = $sop1|0;
 $op1 = $op1|0;
 $op2 = $op2|0;
 $i1 = $i1|0;
 $i2 = $i2|0;
 $b1 = $b1|0;
 $b2 = $b2|0;
 $ai = $ai|0;
 $aj = $aj|0;
 $i = $i|0;
 $j = $j|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k = 0, $l = 0, $len = 0, $m = 0, $n = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $level;
 $2 = $diff_sign;
 $3 = $sop1;
 $4 = $op1;
 $5 = $op2;
 $6 = $i1;
 $7 = $i2;
 $8 = $b1;
 $9 = $b2;
 $10 = $ai;
 $11 = $aj;
 $12 = $i;
 $13 = $j;
 $14 = $e1;
 $15 = $e2;
 $16 = $3;
 $17 = ($16|0)==(5);
 if ($17) {
  $18 = $1;
  $19 = HEAP32[3704>>2]|0;
  $20 = (($19) + 4|0);
  HEAP32[$20>>2] = $18;
  $21 = HEAP32[3704>>2]|0;
  HEAP32[$21>>2] = 0;
  $22 = HEAP32[3704>>2]|0;
  $23 = (($22) + 8|0);
  HEAPF64[$23>>3] = 1.0;
  $24 = $1;
  $25 = HEAP32[3704>>2]|0;
  $26 = (($25) + 16|0);
  $27 = (($26) + 4|0);
  HEAP32[$27>>2] = $24;
  $28 = HEAP32[3704>>2]|0;
  $29 = (($28) + 16|0);
  HEAP32[$29>>2] = 2;
  $30 = HEAP32[3704>>2]|0;
  $31 = (($30) + 16|0);
  $32 = (($31) + 8|0);
  HEAP32[$32>>2] = 5;
  $len = 2;
 } else {
  $len = 0;
 }
 $33 = $len;
 $k = $33;
 $34 = $len;
 $35 = $10;
 $36 = (($34) + ($35))|0;
 $37 = $8;
 $38 = (($36) - ($37))|0;
 $o = $38;
 $39 = $len;
 $40 = HEAP32[3704>>2]|0;
 $41 = (($40) + ($39<<4)|0);
 $42 = $8;
 $43 = $0;
 $44 = (($43) + ($42<<4)|0);
 $45 = $12;
 $46 = $8;
 $47 = (($45) - ($46))|0;
 $48 = $47<<4;
 _memmove(($41|0),($44|0),($48|0))|0;
 $49 = $12;
 $50 = $8;
 $51 = (($49) - ($50))|0;
 $52 = $len;
 $53 = (($52) + ($51))|0;
 $len = $53;
 $54 = $8;
 $55 = $6;
 $56 = ($54|0)==($55|0);
 if ($56) {
  $57 = $12;
  $58 = $14;
  $59 = ($57|0)==($58|0);
  if ($59) {
   while(1) {
    $60 = $k;
    $61 = $len;
    $62 = ($60|0)<($61|0);
    if (!($62)) {
     break;
    }
    $63 = $k;
    $64 = HEAP32[3704>>2]|0;
    $65 = (($64) + ($63<<4)|0);
    $66 = (($65) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + 1)|0;
    HEAP32[$66>>2] = $68;
    $69 = $k;
    $70 = (($69) + 1)|0;
    $k = $70;
   }
  }
 }
 $71 = $1;
 $72 = $len;
 $73 = HEAP32[3704>>2]|0;
 $74 = (($73) + ($72<<4)|0);
 $75 = (($74) + 4|0);
 HEAP32[$75>>2] = $71;
 $76 = $len;
 $77 = HEAP32[3704>>2]|0;
 $78 = (($77) + ($76<<4)|0);
 HEAP32[$78>>2] = 2;
 $79 = $len;
 $80 = HEAP32[3704>>2]|0;
 $81 = (($80) + ($79<<4)|0);
 $82 = (($81) + 8|0);
 HEAP32[$82>>2] = 4;
 $83 = $len;
 $84 = (($83) + 1)|0;
 $len = $84;
 $85 = $len;
 $k = $85;
 $86 = $len;
 $87 = HEAP32[3704>>2]|0;
 $88 = (($87) + ($86<<4)|0);
 $89 = $6;
 $90 = $0;
 $91 = (($90) + ($89<<4)|0);
 $92 = $8;
 $93 = $6;
 $94 = (($92) - ($93))|0;
 $95 = $94<<4;
 _memmove(($88|0),($91|0),($95|0))|0;
 $96 = $8;
 $97 = $6;
 $98 = (($96) - ($97))|0;
 $99 = $len;
 $100 = (($99) + ($98))|0;
 $len = $100;
 $101 = $1;
 $102 = $len;
 $103 = HEAP32[3704>>2]|0;
 $104 = (($103) + ($102<<4)|0);
 $105 = (($104) + 4|0);
 HEAP32[$105>>2] = $101;
 $106 = $len;
 $107 = HEAP32[3704>>2]|0;
 $108 = (($107) + ($106<<4)|0);
 HEAP32[$108>>2] = 0;
 $109 = $4;
 $110 = ($109|0)==(2);
 if ($110) {
  $111 = $len;
  $112 = HEAP32[3704>>2]|0;
  $113 = (($112) + ($111<<4)|0);
  $114 = (($113) + 8|0);
  HEAPF64[$114>>3] = -1.0;
 } else {
  $115 = $len;
  $116 = HEAP32[3704>>2]|0;
  $117 = (($116) + ($115<<4)|0);
  $118 = (($117) + 8|0);
  HEAPF64[$118>>3] = 1.0;
 }
 $119 = $len;
 $120 = (($119) + 1)|0;
 $len = $120;
 $121 = $len;
 $122 = HEAP32[3704>>2]|0;
 $123 = (($122) + ($121<<4)|0);
 $124 = $12;
 $125 = $0;
 $126 = (($125) + ($124<<4)|0);
 $127 = $14;
 $128 = $12;
 $129 = (($127) - ($128))|0;
 $130 = $129<<4;
 _memmove(($123|0),($126|0),($130|0))|0;
 $131 = $14;
 $132 = $12;
 $133 = (($131) - ($132))|0;
 $134 = $len;
 $135 = (($134) + ($133))|0;
 $len = $135;
 while(1) {
  $136 = $k;
  $137 = $len;
  $138 = ($136|0)<($137|0);
  if (!($138)) {
   break;
  }
  $139 = $k;
  $140 = HEAP32[3704>>2]|0;
  $141 = (($140) + ($139<<4)|0);
  $142 = (($141) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + 2)|0;
  HEAP32[$142>>2] = $144;
  $145 = $k;
  $146 = (($145) + 1)|0;
  $k = $146;
 }
 $147 = $1;
 $148 = (($147) + 1)|0;
 $149 = $len;
 $150 = HEAP32[3704>>2]|0;
 $151 = (($150) + ($149<<4)|0);
 $152 = (($151) + 4|0);
 HEAP32[$152>>2] = $148;
 $153 = $len;
 $154 = HEAP32[3704>>2]|0;
 $155 = (($154) + ($153<<4)|0);
 HEAP32[$155>>2] = 2;
 $156 = $5;
 $157 = $len;
 $158 = HEAP32[3704>>2]|0;
 $159 = (($158) + ($157<<4)|0);
 $160 = (($159) + 8|0);
 HEAP32[$160>>2] = $156;
 $161 = $len;
 $162 = (($161) + 1)|0;
 $len = $162;
 $163 = $len;
 $k = $163;
 $164 = $len;
 $165 = HEAP32[3704>>2]|0;
 $166 = (($165) + ($164<<4)|0);
 $167 = $7;
 $168 = $0;
 $169 = (($168) + ($167<<4)|0);
 $170 = $9;
 $171 = $7;
 $172 = (($170) - ($171))|0;
 $173 = $172<<4;
 _memmove(($166|0),($169|0),($173|0))|0;
 $174 = $9;
 $175 = $7;
 $176 = (($174) - ($175))|0;
 $177 = $len;
 $178 = (($177) + ($176))|0;
 $len = $178;
 $179 = $len;
 $180 = $15;
 $181 = $9;
 $182 = (($180) - ($181))|0;
 $183 = (($179) + ($182))|0;
 $184 = $12;
 $185 = $10;
 $186 = (($184) - ($185))|0;
 $187 = $186<<1;
 $188 = (($183) + ($187))|0;
 $189 = (($188) + 2)|0;
 $190 = HEAP32[8>>2]|0;
 $191 = ($189|0)>($190|0);
 if ($191) {
  _error_huge();
 }
 $192 = $len;
 $n = $192;
 $193 = $len;
 $194 = $11;
 $195 = (($193) + ($194))|0;
 $196 = $9;
 $197 = (($195) - ($196))|0;
 $m = $197;
 $198 = $len;
 $199 = HEAP32[3704>>2]|0;
 $200 = (($199) + ($198<<4)|0);
 $201 = $9;
 $202 = $0;
 $203 = (($202) + ($201<<4)|0);
 $204 = $13;
 $205 = $9;
 $206 = (($204) - ($205))|0;
 $207 = $206<<4;
 _memmove(($200|0),($203|0),($207|0))|0;
 $208 = $13;
 $209 = $9;
 $210 = (($208) - ($209))|0;
 $211 = $len;
 $212 = (($211) + ($210))|0;
 $len = $212;
 $213 = $m;
 $l = $213;
 $214 = $m;
 $215 = (($214) + 1)|0;
 $m = $215;
 while(1) {
  $216 = $m;
  $217 = $len;
  $218 = ($216|0)<($217|0);
  if (!($218)) {
   break;
  }
  $219 = $m;
  $220 = HEAP32[3704>>2]|0;
  $221 = (($220) + ($219<<4)|0);
  $222 = (($221) + 4|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($223) + 1)|0;
  HEAP32[$222>>2] = $224;
  $225 = $m;
  $226 = (($225) + 1)|0;
  $m = $226;
 }
 $227 = $2;
 $228 = ($227|0)!=(0);
 if ($228) {
  $229 = $9;
  $230 = $7;
  $231 = ($229|0)==($230|0);
  if ($231) {
   $232 = $13;
   $233 = $15;
   $234 = ($232|0)==($233|0);
   if ($234) {
    while(1) {
     $235 = $n;
     $236 = $len;
     $237 = ($235|0)<($236|0);
     if (!($237)) {
      break;
     }
     $238 = $n;
     $239 = HEAP32[3704>>2]|0;
     $240 = (($239) + ($238<<4)|0);
     $241 = (($240) + 4|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = (($242) + 1)|0;
     HEAP32[$241>>2] = $243;
     $244 = $n;
     $245 = (($244) + 1)|0;
     $n = $245;
    }
   }
  }
 }
 $246 = $l;
 $247 = HEAP32[3704>>2]|0;
 $248 = (($247) + ($246<<4)|0);
 $249 = (($248) + 4|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($250) + 1)|0;
 $252 = $len;
 $253 = HEAP32[3704>>2]|0;
 $254 = (($253) + ($252<<4)|0);
 $255 = (($254) + 4|0);
 HEAP32[$255>>2] = $251;
 $256 = $len;
 $257 = HEAP32[3704>>2]|0;
 $258 = (($257) + ($256<<4)|0);
 HEAP32[$258>>2] = 2;
 $259 = $len;
 $260 = HEAP32[3704>>2]|0;
 $261 = (($260) + ($259<<4)|0);
 $262 = (($261) + 8|0);
 HEAP32[$262>>2] = 2;
 $263 = $len;
 $264 = (($263) + 1)|0;
 $len = $264;
 $265 = $len;
 $m = $265;
 $266 = $len;
 $267 = HEAP32[3704>>2]|0;
 $268 = (($267) + ($266<<4)|0);
 $269 = $10;
 $270 = (($269) + 1)|0;
 $271 = $0;
 $272 = (($271) + ($270<<4)|0);
 $273 = $12;
 $274 = $10;
 $275 = (($274) + 1)|0;
 $276 = (($273) - ($275))|0;
 $277 = $276<<4;
 _memmove(($268|0),($272|0),($277|0))|0;
 $278 = $12;
 $279 = $10;
 $280 = (($279) + 1)|0;
 $281 = (($278) - ($280))|0;
 $282 = $len;
 $283 = (($282) + ($281))|0;
 $len = $283;
 $284 = $10;
 $285 = (($284) + 1)|0;
 $286 = $0;
 $287 = (($286) + ($285<<4)|0);
 $288 = $12;
 $289 = $10;
 $290 = (($289) + 1)|0;
 $291 = (($288) - ($290))|0;
 $292 = (_min_level($287,$291)|0);
 $n = $292;
 $293 = $l;
 $294 = HEAP32[3704>>2]|0;
 $295 = (($294) + ($293<<4)|0);
 $296 = (($295) + 4|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = (($297) + 2)|0;
 $299 = $n;
 $300 = (($298) - ($299))|0;
 $n = $300;
 while(1) {
  $301 = $m;
  $302 = $len;
  $303 = ($301|0)<($302|0);
  if (!($303)) {
   break;
  }
  $304 = $n;
  $305 = $m;
  $306 = HEAP32[3704>>2]|0;
  $307 = (($306) + ($305<<4)|0);
  $308 = (($307) + 4|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = (($309) + ($304))|0;
  HEAP32[$308>>2] = $310;
  $311 = $m;
  $312 = (($311) + 1)|0;
  $m = $312;
 }
 $313 = $2;
 $314 = ($313|0)!=(0);
 if ($314) {
  $315 = $1;
  $316 = $len;
  $317 = HEAP32[3704>>2]|0;
  $318 = (($317) + ($316<<4)|0);
  $319 = (($318) + 4|0);
  HEAP32[$319>>2] = $315;
  $320 = $len;
  $321 = HEAP32[3704>>2]|0;
  $322 = (($321) + ($320<<4)|0);
  HEAP32[$322>>2] = 2;
  $323 = $3;
  $324 = ($323|0)==(5);
  if ($324) {
   $325 = $len;
   $326 = HEAP32[3704>>2]|0;
   $327 = (($326) + ($325<<4)|0);
   $328 = (($327) + 8|0);
   HEAP32[$328>>2] = 4;
  } else {
   $329 = $len;
   $330 = HEAP32[3704>>2]|0;
   $331 = (($330) + ($329<<4)|0);
   $332 = (($331) + 8|0);
   HEAP32[$332>>2] = 5;
  }
  $333 = $len;
  $334 = (($333) + 1)|0;
  $len = $334;
  $335 = $1;
  $336 = (($335) + 1)|0;
  $337 = $len;
  $338 = HEAP32[3704>>2]|0;
  $339 = (($338) + ($337<<4)|0);
  $340 = (($339) + 4|0);
  HEAP32[$340>>2] = $336;
  $341 = $len;
  $342 = HEAP32[3704>>2]|0;
  $343 = (($342) + ($341<<4)|0);
  HEAP32[$343>>2] = 0;
  $344 = $len;
  $345 = HEAP32[3704>>2]|0;
  $346 = (($345) + ($344<<4)|0);
  $347 = (($346) + 8|0);
  HEAPF64[$347>>3] = -1.0;
  $348 = $len;
  $349 = (($348) + 1)|0;
  $len = $349;
  $350 = $len;
  $351 = HEAP32[3704>>2]|0;
  $352 = (($351) + ($350<<4)|0);
  $353 = $o;
  $354 = HEAP32[3704>>2]|0;
  $355 = (($354) + ($353<<4)|0);
  $356 = $12;
  $357 = $10;
  $358 = (($356) - ($357))|0;
  $359 = $358<<4;
  _memmove(($352|0),($355|0),($359|0))|0;
  $360 = $12;
  $361 = $10;
  $362 = (($360) - ($361))|0;
  $363 = $len;
  $364 = (($363) + ($362))|0;
  $len = $364;
 }
 $365 = $len;
 $366 = HEAP32[3704>>2]|0;
 $367 = (($366) + ($365<<4)|0);
 $368 = $13;
 $369 = $0;
 $370 = (($369) + ($368<<4)|0);
 $371 = $15;
 $372 = $13;
 $373 = (($371) - ($372))|0;
 $374 = $373<<4;
 _memmove(($367|0),($370|0),($374|0))|0;
 $375 = $15;
 $376 = $13;
 $377 = (($375) - ($376))|0;
 $378 = $len;
 $379 = (($378) + ($377))|0;
 $len = $379;
 while(1) {
  $380 = $k;
  $381 = $len;
  $382 = ($380|0)<($381|0);
  if (!($382)) {
   break;
  }
  $383 = $k;
  $384 = HEAP32[3704>>2]|0;
  $385 = (($384) + ($383<<4)|0);
  $386 = (($385) + 4|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = (($387) + 2)|0;
  HEAP32[$386>>2] = $388;
  $389 = $k;
  $390 = (($389) + 1)|0;
  $k = $390;
 }
 $391 = $len;
 STACKTOP = sp;return ($391|0);
}
function _display_startup_message($fp) {
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $es_size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $fp;
 $1 = HEAP32[41288>>2]|0;
 $2 = ($1|0)>=(2);
 if ($2) {
  $3 = $0;
  (_fprintf(($3|0),(41448|0),($vararg_buffer|0))|0);
 } else {
  $4 = HEAP32[41288>>2]|0;
  $5 = ($4|0)==(-1);
  if ($5) {
   $6 = $0;
   (_fprintf(($6|0),(41456|0),($vararg_buffer1|0))|0);
  }
 }
 $7 = $0;
 HEAP32[$vararg_buffer3>>2] = 41488;
 (_fprintf(($7|0),(41464|0),($vararg_buffer3|0))|0);
 $8 = HEAP32[3792>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $0;
  (_fprintf(($10|0),(41496|0),($vararg_buffer5|0))|0);
 } else {
  $11 = $0;
  (_fprintf(($11|0),(41544|0),($vararg_buffer7|0))|0);
 }
 $12 = HEAP32[8>>2]|0;
 $13 = $12<<4;
 $14 = $13<<1;
 $15 = (($14>>>0) / 1000)&-1;
 $es_size = $15;
 $16 = $es_size;
 $17 = ($16|0)>=(1000);
 if ($17) {
  $18 = $0;
  $19 = $es_size;
  $20 = (($19) + 500)|0;
  $21 = (($20|0) / 1000)&-1;
  HEAP32[$vararg_buffer9>>2] = 200;
  $vararg_ptr12 = (($vararg_buffer9) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $21;
  (_fprintf(($18|0),(41592|0),($vararg_buffer9|0))|0);
  STACKTOP = sp;return;
 } else {
  $22 = $0;
  $23 = $es_size;
  HEAP32[$vararg_buffer13>>2] = 200;
  $vararg_ptr16 = (($vararg_buffer13) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $23;
  (_fprintf(($22|0),(41664|0),($vararg_buffer13|0))|0);
  STACKTOP = sp;return;
 }
}
function _error($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 HEAP32[41328>>2] = $1;
 STACKTOP = sp;return;
}
function _reset_error() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[41328>>2] = 0;
 STACKTOP = sp;return;
}
function _warning($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $already_warned = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $already_warned = 0;
 $1 = HEAP32[41336>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[41336>>2]|0;
  $5 = (_strcmp($3,$4)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $already_warned = 1;
  }
 }
 $7 = $0;
 HEAP32[41336>>2] = $7;
 STACKTOP = sp;return;
}
function _error_huge() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _longjmp((41032|0),14);
 // unreachable;
}
function _error_bug($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $str;
 $1 = $0;
 _error($1);
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_printf((41736|0),($vararg_buffer|0))|0);
 (_printf((41744|0),($vararg_buffer1|0))|0);
 (_printf((41792|0),($vararg_buffer3|0))|0);
 _longjmp((41032|0),13);
 // unreachable;
}
function _check_err() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 33)) {
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = 0;
  $3 = HEAP32[41256>>2]|0;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   _error(41840);
   _longjmp((41032|0),2);
   // unreachable;
  }
  HEAP32[41256>>2] = 0;
  STACKTOP = sp;return;
 } else if ((($1|0) == 34)) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 0;
  _error(41872);
  _longjmp((41032|0),2);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _get_screen_size() {
 var $0 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rv = 0;
 HEAP32[72>>2] = 80;
 HEAP32[80>>2] = 24;
 $rv = 1;
 $0 = $rv;
 STACKTOP = sp;return ($0|0);
}
function _malloc_vscreen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[41440>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   label = 5;
  } else {
   $3 = HEAP32[72>>2]|0;
   $4 = ($3|0)>(0);
   if ($4) {
    $5 = HEAP32[41440>>2]|0;
    $6 = HEAP32[72>>2]|0;
    $7 = ($5|0)!=($6|0);
    if ($7) {
     label = 5;
     break;
    } else {
     break;
    }
   } else {
    $8 = HEAP32[41440>>2]|0;
    $9 = ($8|0)!=(80);
    if ($9) {
     label = 5;
     break;
    } else {
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $10 = HEAP32[72>>2]|0;
   $11 = ($10|0)>(0);
   if ($11) {
    $12 = HEAP32[72>>2]|0;
    HEAP32[41440>>2] = $12;
   } else {
    HEAP32[41440>>2] = 80;
   }
   $i = 0;
   while(1) {
    $13 = $i;
    $14 = ($13|0)<(24);
    if (!($14)) {
     label = 16;
     break;
    }
    $15 = $i;
    $16 = (41344 + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = $i;
     $20 = (41344 + ($19<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     _free($21);
    }
    $22 = HEAP32[41440>>2]|0;
    $23 = (($22) + 1)|0;
    $24 = (_malloc($23)|0);
    $25 = $i;
    $26 = (41344 + ($25<<2)|0);
    HEAP32[$26>>2] = $24;
    $27 = $i;
    $28 = (41344 + ($27<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if ($30) {
     break;
    }
    $31 = $i;
    $32 = (($31) + 1)|0;
    $i = $32;
   }
   if ((label|0) == 16) {
    break;
   }
   _error(41912);
   HEAP32[41440>>2] = 0;
   $0 = 0;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 } while(0);
 $0 = 1;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _init_mem() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[8>>2]|0;
 $2 = ($1|0)<=(0);
 if ($2) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $3 = HEAP32[8>>2]|0;
 $4 = ($3*3)|0;
 $5 = (($4|0) / 2)&-1;
 $6 = $5<<4;
 $7 = (_malloc($6)|0);
 HEAP32[3704>>2] = $7;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = HEAP32[8>>2]|0;
  $10 = $9<<4;
  $11 = (_malloc($10)|0);
  HEAP32[3696>>2] = $11;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = HEAP32[8>>2]|0;
   $14 = $13<<4;
   $15 = (_malloc($14)|0);
   HEAP32[3680>>2] = $15;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = HEAP32[8>>2]|0;
    $18 = $17<<4;
    $19 = (_malloc($18)|0);
    HEAP32[3688>>2] = $19;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $21 = (_alloc_next_espace()|0);
     $22 = ($21|0)<(0);
     if ($22) {
      $0 = 0;
      $23 = $0;
      STACKTOP = sp;return ($23|0);
     } else {
      _clear_all();
      $0 = 1;
      $23 = $0;
      STACKTOP = sp;return ($23|0);
     }
    }
   }
  }
 }
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _alloc_next_espace() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[472>>2]|0;
 $n = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)>=(200);
  if ($3) {
   label = 3;
   break;
  }
  $4 = $n;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if ($6) {
   label = 5;
   break;
  }
  $26 = $n;
  $27 = (2080 + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0);
  if ($29) {
   label = 15;
   break;
  }
  $30 = $n;
  $31 = (($30) + 1)|0;
  $32 = (($31|0) % 200)&-1;
  $n = $32;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 if ((label|0) == 3) {
  $0 = -1;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 else if ((label|0) == 5) {
  $7 = HEAP32[464>>2]|0;
  $n = $7;
  $8 = $n;
  $9 = (_alloc_espace($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $23 = HEAP32[464>>2]|0;
   $24 = (($23) + 1)|0;
   HEAP32[464>>2] = $24;
   $25 = $n;
   $0 = $25;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
  _warning(41952);
  $n = 0;
  while(1) {
   $11 = $n;
   $12 = HEAP32[464>>2]|0;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    label = 12;
    break;
   }
   $14 = $n;
   $15 = (2080 + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 9;
    break;
   }
   $21 = $n;
   $22 = (($21) + 1)|0;
   $n = $22;
  }
  if ((label|0) == 9) {
   $18 = $n;
   $19 = (2880 + ($18<<2)|0);
   HEAP32[$19>>2] = 0;
   $20 = $n;
   $0 = $20;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
  else if ((label|0) == 12) {
   $0 = -1;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
 }
 else if ((label|0) == 15) {
  $35 = $n;
  $36 = (2880 + ($35<<2)|0);
  HEAP32[$36>>2] = 0;
  $37 = $n;
  $0 = $37;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 return 0|0;
}
function _clear_all() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[472>>2] = 0;
 _memset((2080|0),0,800)|0;
 _memset((2880|0),0,800)|0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = (3800 + ($0<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (3800 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = $i;
  $8 = (3800 + ($7<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 dest=40936+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _init_gvars();
 STACKTOP = sp;return;
}
function _free_mem() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _clear_all();
 $0 = HEAP32[3704>>2]|0;
 _free($0);
 $1 = HEAP32[3696>>2]|0;
 _free($1);
 $2 = HEAP32[3680>>2]|0;
 _free($2);
 $3 = HEAP32[3688>>2]|0;
 _free($3);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(200);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (480 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $i;
   $11 = (480 + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   _free($12);
   $13 = $i;
   $14 = (480 + ($13<<2)|0);
   HEAP32[$14>>2] = 0;
  }
  $15 = $i;
  $16 = (1280 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $i;
   $20 = (1280 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   _free($21);
   $22 = $i;
   $23 = (1280 + ($22<<2)|0);
   HEAP32[$23>>2] = 0;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 HEAP32[464>>2] = 0;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = ($26|0)<(24);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = (41344 + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = $i;
   $33 = (41344 + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   _free($34);
   $35 = $i;
   $36 = (41344 + ($35<<2)|0);
   HEAP32[$36>>2] = 0;
  }
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 HEAP32[41440>>2] = 0;
 STACKTOP = sp;return;
}
function _init_gvars() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[41256>>2] = 0;
 HEAP32[41232>>2] = 0;
 HEAP32[41216>>2] = 1;
 HEAP32[41224>>2] = 0;
 HEAP32[41248>>2] = 0;
 HEAP32[41264>>2] = 0;
 HEAP32[41296>>2] = 0;
 HEAP32[((3736 + 4|0))>>2] = 1;
 HEAP32[3736>>2] = 0;
 HEAPF64[((3736 + 8|0))>>3] = 0.0;
 HEAP32[((3752 + 4|0))>>2] = 1;
 HEAP32[3752>>2] = 0;
 HEAPF64[((3752 + 8|0))>>3] = 1.0;
 STACKTOP = sp;return;
}
function _clean_up() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _init_gvars();
 $0 = HEAP32[41008>>2]|0;
 $1 = HEAP32[41000>>2]|0;
 $2 = ($0|0)!=($1|0);
 if ($2) {
  $3 = HEAP32[41008>>2]|0;
  $4 = HEAP32[_stdout>>2]|0;
  $5 = ($3|0)!=($4|0);
  if ($5) {
   $6 = HEAP32[41008>>2]|0;
   $7 = HEAP32[_stderr>>2]|0;
   $8 = ($6|0)!=($7|0);
   if ($8) {
    $9 = HEAP32[41008>>2]|0;
    (_fclose(($9|0))|0);
   }
  }
  $10 = HEAP32[41000>>2]|0;
  HEAP32[41008>>2] = $10;
 }
 HEAP32[41016>>2] = 0;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = HEAP32[464>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = (2080 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)<=(0);
  if ($17) {
   $18 = $i;
   $19 = (2080 + ($18<<2)|0);
   HEAP32[$19>>2] = 0;
   $20 = $i;
   $21 = (2880 + ($20<<2)|0);
   HEAP32[$21>>2] = 0;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 STACKTOP = sp;return;
}
function _set_sign_array() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 dest=40936+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[464>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = (2080 + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $j = 0;
   while(1) {
    $7 = $j;
    $8 = $i;
    $9 = (2080 + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($7|0)<($10|0);
    if (!($11)) {
     break;
    }
    $12 = $j;
    $13 = $i;
    $14 = (480 + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + ($12<<4)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = $j;
     $20 = $i;
     $21 = (480 + ($20<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + ($19<<4)|0);
     $24 = (($23) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $25 & 16383;
     $27 = ($26|0)==(4);
     if ($27) {
      $28 = $j;
      $29 = $i;
      $30 = (480 + ($29<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($31) + ($28<<4)|0);
      $33 = (($32) + 8|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = $34 >> 14;
      $36 = $35 & 63;
      $37 = (40936 + ($36)|0);
      HEAP8[$37>>0] = 1;
     }
    }
    $38 = $j;
    $39 = (($38) + 2)|0;
    $j = $39;
   }
   $j = 0;
   while(1) {
    $40 = $j;
    $41 = $i;
    $42 = (2880 + ($41<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($40|0)<($43|0);
    if (!($44)) {
     break;
    }
    $45 = $j;
    $46 = $i;
    $47 = (1280 + ($46<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($45<<4)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(1);
    if ($51) {
     $52 = $j;
     $53 = $i;
     $54 = (1280 + ($53<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + ($52<<4)|0);
     $57 = (($56) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $58 & 16383;
     $60 = ($59|0)==(4);
     if ($60) {
      $61 = $j;
      $62 = $i;
      $63 = (1280 + ($62<<2)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($64) + ($61<<4)|0);
      $66 = (($65) + 8|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = $67 >> 14;
      $69 = $68 & 63;
      $70 = (40936 + ($69)|0);
      HEAP8[$70>>0] = 1;
     }
    }
    $71 = $j;
    $72 = (($71) + 2)|0;
    $j = $72;
   }
  }
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 STACKTOP = sp;return;
}
function _next_sign($vp) {
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $vp;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)>=(64);
  if ($3) {
   label = 3;
   break;
  }
  $5 = $i;
  $6 = (40936 + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   break;
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 if ((label|0) == 3) {
  $4 = $1;
  HEAP32[$4>>2] = 4;
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $9 = $i;
 $10 = $9 << 14;
 $11 = (4 + ($10))|0;
 $12 = $1;
 HEAP32[$12>>2] = $11;
 $13 = $i;
 $14 = (40936 + ($13)|0);
 HEAP8[$14>>0] = 1;
 $0 = 1;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _alloc_espace($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = ($4|0)>=(200);
  if (!($5)) {
   $6 = $1;
   $7 = (2080 + ($6<<2)|0);
   HEAP32[$7>>2] = 0;
   $8 = $1;
   $9 = (2880 + ($8<<2)|0);
   HEAP32[$9>>2] = 0;
   $10 = $1;
   $11 = (480 + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(0|0);
   if ($13) {
    $14 = $1;
    $15 = (1280 + ($14<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if ($17) {
     $0 = 1;
     $49 = $0;
     STACKTOP = sp;return ($49|0);
    }
   }
   $18 = $1;
   $19 = (480 + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0|0);
   if (!($21)) {
    $22 = $1;
    $23 = (1280 + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)!=(0|0);
    if (!($25)) {
     $26 = HEAP32[8>>2]|0;
     $27 = $26<<4;
     $28 = (_malloc($27)|0);
     $29 = $1;
     $30 = (480 + ($29<<2)|0);
     HEAP32[$30>>2] = $28;
     $31 = $1;
     $32 = (480 + ($31<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $0 = 0;
      $49 = $0;
      STACKTOP = sp;return ($49|0);
     }
     $35 = HEAP32[8>>2]|0;
     $36 = $35<<4;
     $37 = (_malloc($36)|0);
     $38 = $1;
     $39 = (1280 + ($38<<2)|0);
     HEAP32[$39>>2] = $37;
     $40 = $1;
     $41 = (1280 + ($40<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      $44 = $1;
      $45 = (480 + ($44<<2)|0);
      $46 = HEAP32[$45>>2]|0;
      _free($46);
      $47 = $1;
      $48 = (480 + ($47<<2)|0);
      HEAP32[$48>>2] = 0;
      $0 = 0;
      $49 = $0;
      STACKTOP = sp;return ($49|0);
     } else {
      $0 = 1;
      $49 = $0;
      STACKTOP = sp;return ($49|0);
     }
    }
   }
   $0 = 0;
   $49 = $0;
   STACKTOP = sp;return ($49|0);
  }
 }
 $0 = 0;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _alloc_to_espace($en) {
 $en = $en|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $en;
 $2 = $1;
 $3 = ($2|0)<(0);
 do {
  if ($3) {
   label = 3;
  } else {
   $4 = $1;
   $5 = ($4|0)>=(200);
   if ($5) {
    label = 3;
   } else {
    while(1) {
     $6 = $1;
     $7 = HEAP32[464>>2]|0;
     $8 = ($6|0)<($7|0);
     if ($8) {
      label = 6;
      break;
     }
     $9 = HEAP32[464>>2]|0;
     $10 = ($9|0)>=(200);
     if ($10) {
      label = 8;
      break;
     }
     $11 = HEAP32[464>>2]|0;
     $12 = (_alloc_espace($11)|0);
     $13 = ($12|0)!=(0);
     if (!($13)) {
      label = 10;
      break;
     }
     $14 = HEAP32[464>>2]|0;
     $15 = (($14) + 1)|0;
     HEAP32[464>>2] = $15;
    }
    if ((label|0) == 6) {
     $0 = 1;
     break;
    }
    else if ((label|0) == 8) {
     $0 = 0;
     break;
    }
    else if ((label|0) == 10) {
     _warning(41952);
     $0 = 0;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $0 = 0;
 }
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _next_espace() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $answer_v = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $answer_v = sp;
 HEAP32[$answer_v>>2] = 0;
 $0 = (_alloc_next_espace()|0);
 $i = $0;
 $1 = $i;
 $2 = ($1|0)<(0);
 if (!($2)) {
  $31 = $i;
  STACKTOP = sp;return ($31|0);
 }
 (_parse_var($answer_v,41976)|0);
 $j = 0;
 while(1) {
  $3 = $j;
  $4 = HEAP32[464>>2]|0;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $j;
  $7 = (2080 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if ($9) {
   $10 = $j;
   $11 = (480 + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(1);
   if ($14) {
    $15 = $j;
    $16 = (480 + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$answer_v>>2]|0;
    $21 = ($19|0)==($20|0);
    if ($21) {
     $22 = $j;
     $23 = (2080 + ($22<<2)|0);
     HEAP32[$23>>2] = 0;
     $24 = $j;
     $25 = (2880 + ($24<<2)|0);
     HEAP32[$25>>2] = 0;
    }
   }
  }
  $26 = $j;
  $27 = (($26) + 1)|0;
  $j = $27;
 }
 $28 = (_alloc_next_espace()|0);
 $i = $28;
 $29 = $i;
 $30 = ($29|0)<(0);
 if ($30) {
  _error(41984);
  _longjmp((41032|0),3);
  // unreachable;
 }
 $31 = $i;
 STACKTOP = sp;return ($31|0);
}
function _copy_espace($src,$dest) {
 $src = $src|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $dest;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 if ($4) {
  STACKTOP = sp;return;
 } else {
  $5 = $1;
  $6 = (480 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $0;
  $9 = (480 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = (2080 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13<<4;
  _memmove(($7|0),($10|0),($14|0))|0;
  $15 = $0;
  $16 = (2080 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = (2080 + ($18<<2)|0);
  HEAP32[$19>>2] = $17;
  $20 = $1;
  $21 = (1280 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = (1280 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = (2880 + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28<<4;
  _memmove(($22|0),($25|0),($29|0))|0;
  $30 = $0;
  $31 = (2880 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = (2880 + ($33<<2)|0);
  HEAP32[$34>>2] = $32;
  STACKTOP = sp;return;
 }
}
function _solved_equation($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $1;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $11 = $1;
    $12 = (2880 + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)<=(0);
    if ($14) {
     $0 = 0;
     $44 = $0;
     STACKTOP = sp;return ($44|0);
    }
    $15 = $1;
    $16 = (2080 + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(1);
    if (!($18)) {
     $19 = $1;
     $20 = (480 + ($19<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)!=(1);
     if (!($23)) {
      $24 = $1;
      $25 = (480 + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 8|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $28 & 16383;
      $30 = ($29|0)<=(4);
      if (!($30)) {
       $31 = $1;
       $32 = (1280 + ($31<<2)|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = $1;
       $35 = (2880 + ($34<<2)|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = $1;
       $38 = (480 + ($37<<2)|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($39) + 8|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = (_found_var($33,$36,$41)|0);
       $43 = ($42|0)!=(0);
       if ($43) {
        $0 = 0;
        $44 = $0;
        STACKTOP = sp;return ($44|0);
       } else {
        $0 = 1;
        $44 = $0;
        STACKTOP = sp;return ($44|0);
       }
      }
     }
    }
    $0 = 0;
    $44 = $0;
    STACKTOP = sp;return ($44|0);
   }
  }
 }
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _found_var($p1,$n,$v) {
 $p1 = $p1|0;
 $n = $n|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $n;
 $2 = $v;
 $count = 0;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $24 = $count;
  STACKTOP = sp;return ($24|0);
 }
 $j = 0;
 while(1) {
  $5 = $j;
  $6 = $1;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $j;
  $9 = $0;
  $10 = (($9) + ($8<<4)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  if ($12) {
   $13 = $j;
   $14 = $0;
   $15 = (($14) + ($13<<4)|0);
   $16 = (($15) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $2;
   $19 = ($17|0)==($18|0);
   if ($19) {
    $20 = $count;
    $21 = (($20) + 1)|0;
    $count = $21;
   }
  }
  $22 = $j;
  $23 = (($22) + 1)|0;
  $j = $23;
 }
 $24 = $count;
 STACKTOP = sp;return ($24|0);
}
function _var_in_equation($i,$v) {
 $i = $i|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $2 = $v;
 $3 = $1;
 $4 = ($3|0)<(0);
 do {
  if ($4) {
   label = 4;
  } else {
   $5 = $1;
   $6 = HEAP32[464>>2]|0;
   $7 = ($5|0)>=($6|0);
   if ($7) {
    label = 4;
   } else {
    $8 = $1;
    $9 = (2080 + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)<=(0);
    if ($11) {
     label = 4;
    } else {
     $12 = $1;
     $13 = (480 + ($12<<2)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = $1;
     $16 = (2080 + ($15<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $2;
     $19 = (_found_var($14,$17,$18)|0);
     $20 = ($19|0)!=(0);
     if ($20) {
      $0 = 1;
      break;
     }
     $21 = $1;
     $22 = (2880 + ($21<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)<=(0);
     if ($24) {
      $0 = 0;
      break;
     }
     $25 = $1;
     $26 = (1280 + ($25<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $1;
     $29 = (2880 + ($28<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $2;
     $32 = (_found_var($27,$30,$31)|0);
     $33 = ($32|0)!=(0);
     if ($33) {
      $0 = 1;
      break;
     } else {
      $0 = 0;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $0 = 0;
 }
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _search_all_for_var($v,$forward_direction) {
 $v = $v|0;
 $forward_direction = $forward_direction|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = $forward_direction;
 $3 = HEAP32[472>>2]|0;
 $i = $3;
 $n = 0;
 while(1) {
  $4 = $n;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   label = 16;
   break;
  }
  $7 = $2;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $i;
   $10 = HEAP32[464>>2]|0;
   $11 = (($10) - 1)|0;
   $12 = ($9|0)>=($11|0);
   if ($12) {
    $i = 0;
   } else {
    $13 = $i;
    $14 = (($13) + 1)|0;
    $i = $14;
   }
  } else {
   $15 = $i;
   $16 = ($15|0)<=(0);
   if ($16) {
    $17 = HEAP32[464>>2]|0;
    $18 = (($17) - 1)|0;
    $i = $18;
   } else {
    $19 = $i;
    $20 = (($19) + -1)|0;
    $i = $20;
   }
  }
  $21 = $i;
  $22 = $1;
  $23 = (_var_in_equation($21,$22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   label = 13;
   break;
  }
  $26 = $n;
  $27 = (($26) + 1)|0;
  $n = $27;
 }
 if ((label|0) == 13) {
  $25 = $i;
  HEAP32[472>>2] = $25;
  $0 = 1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 16) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function _subst_var_with_exp($equation,$np,$expression,$len,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $expression = $expression|0;
 $len = $len|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $j = 0, $k = 0, $level = 0, $substituted = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $expression;
 $4 = $len;
 $5 = $v;
 $substituted = 0;
 $6 = $5;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = $4;
  $9 = ($8|0)<=(0);
  if (!($9)) {
   $10 = $2;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) - 1)|0;
   $j = $12;
   while(1) {
    $13 = $j;
    $14 = ($13|0)>=(0);
    if (!($14)) {
     break;
    }
    $15 = $j;
    $16 = $1;
    $17 = (($16) + ($15<<4)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(1);
    if ($19) {
     $20 = $j;
     $21 = $1;
     $22 = (($21) + ($20<<4)|0);
     $23 = (($22) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $5;
     $26 = ($24|0)==($25|0);
     if ($26) {
      $27 = $j;
      $28 = $1;
      $29 = (($28) + ($27<<4)|0);
      $30 = (($29) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $level = $31;
      $32 = $2;
      $33 = HEAP32[$32>>2]|0;
      $34 = $4;
      $35 = (($33) + ($34))|0;
      $36 = (($35) - 1)|0;
      $37 = HEAP32[8>>2]|0;
      $38 = ($36|0)>($37|0);
      if ($38) {
       _error_huge();
      }
      $39 = $4;
      $40 = ($39|0)>(1);
      if ($40) {
       $41 = $j;
       $42 = $4;
       $43 = (($41) + ($42))|0;
       $44 = $1;
       $45 = (($44) + ($43<<4)|0);
       $46 = $j;
       $47 = (($46) + 1)|0;
       $48 = $1;
       $49 = (($48) + ($47<<4)|0);
       $50 = $2;
       $51 = HEAP32[$50>>2]|0;
       $52 = $j;
       $53 = (($52) + 1)|0;
       $54 = (($51) - ($53))|0;
       $55 = $54<<4;
       _memmove(($45|0),($49|0),($55|0))|0;
       $56 = $4;
       $57 = (($56) - 1)|0;
       $58 = $2;
       $59 = HEAP32[$58>>2]|0;
       $60 = (($59) + ($57))|0;
       HEAP32[$58>>2] = $60;
      }
      $61 = $j;
      $62 = $1;
      $63 = (($62) + ($61<<4)|0);
      $64 = $3;
      $65 = $4;
      $66 = $65<<4;
      _memmove(($63|0),($64|0),($66|0))|0;
      $67 = $j;
      $k = $67;
      while(1) {
       $68 = $k;
       $69 = $j;
       $70 = $4;
       $71 = (($69) + ($70))|0;
       $72 = ($68|0)<($71|0);
       if (!($72)) {
        break;
       }
       $73 = $level;
       $74 = $k;
       $75 = $1;
       $76 = (($75) + ($74<<4)|0);
       $77 = (($76) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = (($78) + ($73))|0;
       HEAP32[$77>>2] = $79;
       $80 = $k;
       $81 = (($80) + 1)|0;
       $k = $81;
      }
      $substituted = 1;
     }
    }
    $82 = $j;
    $83 = (($82) + -1)|0;
    $j = $83;
   }
   $84 = $substituted;
   $85 = ($84|0)!=(0);
   if ($85) {
    $86 = $5;
    $87 = (_is_integer_var($86)|0);
    $88 = ($87|0)!=(0);
    if ($88) {
     $89 = $3;
     $90 = $4;
     $91 = (_is_integer_expr($89,$90)|0);
     $92 = ($91|0)!=(0);
     if (!($92)) {
      _warning(42016);
     }
    }
   }
   $93 = $substituted;
   $0 = $93;
   $94 = $0;
   STACKTOP = sp;return ($94|0);
  }
 }
 $0 = 0;
 $94 = $0;
 STACKTOP = sp;return ($94|0);
}
function _min_level($expression,$n) {
 $expression = $expression|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ep = 0, $min1 = 0, $p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $expression;
 $2 = $n;
 $3 = $2;
 if ((($3|0) == 3)) {
  $7 = $1;
  $8 = (($7) + 16|0);
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 } else if ((($3|0) == 1)) {
  $4 = $1;
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 } else {
  $11 = $2;
  $12 = ($11|0)<=(0);
  if ($12) {
   label = 6;
  } else {
   $13 = $2;
   $14 = $13 & 1;
   $15 = ($14|0)!=(1);
   if ($15) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   _error_bug(42080);
  }
  $16 = $1;
  $17 = (($16) + 16|0);
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $min1 = $19;
  $20 = $2;
  $21 = $1;
  $22 = (($21) + ($20<<4)|0);
  $ep = $22;
  $23 = $1;
  $24 = (($23) + 48|0);
  $p1 = $24;
  while(1) {
   $25 = $p1;
   $26 = $ep;
   $27 = ($25>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = $p1;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $min1;
   $32 = ($30|0)<($31|0);
   if ($32) {
    $33 = $p1;
    $34 = (($33) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $min1 = $35;
   }
   $36 = $p1;
   $37 = (($36) + 32|0);
   $p1 = $37;
  }
  $38 = $min1;
  $0 = $38;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return 0|0;
}
function _get_default_en($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4|0;
 HEAP32[$1>>2] = $cp;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = HEAP32[472>>2]|0;
   $i = $6;
  } else {
   $7 = HEAP32[$1>>2]|0;
   $8 = (_decstrtol($7,$1)|0);
   $9 = (($8) - 1)|0;
   $i = $9;
   $10 = HEAP32[$1>>2]|0;
   $11 = (_extra_characters($10)|0);
   $12 = ($11|0)!=(0);
   if (!($12)) {
    break;
   }
   $0 = -1;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 } while(0);
 $13 = $i;
 $14 = (_not_defined($13)|0);
 $15 = ($14|0)!=(0);
 if ($15) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $16 = $i;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return 0|0;
}
function _decstrtol($cp,$cpp) {
 $cp = $cp|0;
 $cpp = $cpp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $cpp;
 $2 = $0;
 $3 = $1;
 $4 = (_strtol($2,$3,10)|0);
 $l = $4;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $0;
   $11 = $1;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)!=($12|0);
   if ($13) {
    $14 = $1;
    $15 = HEAP32[$14>>2]|0;
    $16 = (_skip_comma_space($15)|0);
    $17 = $1;
    HEAP32[$17>>2] = $16;
   }
  }
 }
 $18 = $l;
 STACKTOP = sp;return ($18|0);
}
function _extra_characters($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $cp;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = $1;
   $5 = (_skip_comma_space($4)|0);
   $1 = $5;
   $6 = $1;
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)!=(0);
   if (!($8)) {
    break;
   }
   $9 = $1;
   HEAP32[$vararg_buffer>>2] = $9;
   (_printf((42552|0),($vararg_buffer|0))|0);
   _error(42600);
   $0 = 1;
   $10 = $0;
   STACKTOP = sp;return ($10|0);
  }
 } while(0);
 $0 = 0;
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _not_defined($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $2 = $1;
 $3 = ($2|0)<(0);
 do {
  if ($3) {
   label = 3;
  } else {
   $4 = $1;
   $5 = HEAP32[464>>2]|0;
   $6 = ($4|0)>=($5|0);
   if ($6) {
    label = 3;
   } else {
    $7 = $1;
    $8 = (2080 + ($7<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)<=(0);
    if (!($10)) {
     $0 = 0;
     break;
    }
    $11 = $1;
    $12 = HEAP32[472>>2]|0;
    $13 = ($11|0)==($12|0);
    if ($13) {
     _error(42200);
    } else {
     _error(42240);
    }
    $0 = 1;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  _error(42168);
  $0 = 1;
 }
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _get_expr($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $cp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 60032|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 24|0;
 $1 = $equation;
 $2 = $np;
 $3 = HEAP32[41280>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 (_snprintf($buf,60000,42136,$vararg_buffer)|0);
 $4 = HEAP32[41280>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[41280>>2] = $5;
 $6 = $1;
 $7 = $2;
 $8 = (_parse_expr($6,$7,$buf,1)|0);
 $cp = $8;
 $9 = $cp;
 $10 = (_extra_characters($9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $12 = $cp;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(0);
  $18 = $16;
 } else {
  $18 = 0;
 }
 $17 = $18&1;
 $0 = $17;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _prompt_var($vp) {
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $vp;
 while(1) {
  (_my_strlcpy(35984,42144,80)|0);
  $2 = (_get_string($buf,4096)|0);
  $cp = $2;
  $3 = ($2|0)==(0|0);
  if ($3) {
   label = 3;
   break;
  }
  $4 = $cp;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 5;
   break;
  }
  $8 = $1;
  $9 = $cp;
  $10 = (_parse_var2($8,$9)|0);
  $cp = $10;
  $11 = $cp;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = $cp;
   $14 = (_extra_characters($13)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    label = 9;
    break;
   }
  }
 }
 if ((label|0) == 3) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 5) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 9) {
  $0 = 1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return 0|0;
}
function _get_string($string,$n) {
 $string = $string|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $n;
 _error(42368);
 STACKTOP = sp;return (0|0);
}
function _current_not_defined() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[472>>2]|0;
 $i = $1;
 $2 = $i;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = $i;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if ($6) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _error(42272);
  HEAP32[472>>2] = 0;
  $i = 0;
 }
 $7 = $i;
 $8 = (2080 + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<=(0);
 if ($10) {
  _error(42328);
  $0 = 1;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _return_result($en) {
 $en = $en|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $en;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $1;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $11 = $1;
    (_make_fractions_and_group($11)|0);
    $12 = HEAP32[3768>>2]|0;
    $13 = ($12|0)!=(0);
    if ($13) {
     $14 = $1;
     (_factor_int_equation($14)|0);
    }
    _free_result_str();
    $15 = HEAP32[32>>2]|0;
    $16 = ($15|0)!=(0);
    if ($16) {
     $17 = $1;
     $18 = (_flist_equation_string($17)|0);
     HEAP32[41320>>2] = $18;
     $19 = HEAP32[41320>>2]|0;
     $20 = ($19|0)==(0|0);
     if ($20) {
      $21 = $1;
      $22 = (_list_equation($21,0)|0);
      HEAP32[41320>>2] = $22;
     }
    } else {
     $23 = $1;
     $24 = (_list_equation($23,0)|0);
     HEAP32[41320>>2] = $24;
    }
    $25 = $1;
    HEAP32[456>>2] = $25;
    $26 = HEAP32[41008>>2]|0;
    $27 = HEAP32[_stdout>>2]|0;
    $28 = ($26|0)==($27|0);
    if ($28) {
     $29 = HEAP32[41320>>2]|0;
     $30 = ($29|0)!=(0|0);
     $31 = $30&1;
     $0 = $31;
     $36 = $0;
     STACKTOP = sp;return ($36|0);
    } else {
     $32 = $1;
     $33 = (_list_sub($32)|0);
     $34 = ($33|0)!=(0);
     $35 = $34&1;
     $0 = $35;
     $36 = $0;
     STACKTOP = sp;return ($36|0);
    }
   }
  }
 }
 $0 = 0;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _free_result_str() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[41320>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[41320>>2]|0;
  _free($2);
  HEAP32[41320>>2] = 0;
 }
 HEAP32[456>>2] = -1;
 STACKTOP = sp;return;
}
function _is_all($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = (_strcmp_tospace($1,42456)|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _strcmp_tospace($cp1,$cp2) {
 $cp1 = $cp1|0;
 $cp2 = $cp2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp1a = 0, $cp2a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp1;
 $1 = $cp2;
 $2 = $0;
 $cp1a = $2;
 while(1) {
  $3 = $cp1a;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $cp1a;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (_isdelimiter($9)|0);
   $11 = ($10|0)!=(0);
   $12 = $11 ^ 1;
   $53 = $12;
  } else {
   $53 = 0;
  }
  if (!($53)) {
   break;
  }
  $13 = $cp1a;
  $14 = (($13) + 1|0);
  $cp1a = $14;
 }
 $15 = $1;
 $cp2a = $15;
 while(1) {
  $16 = $cp2a;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $cp2a;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = (_isdelimiter($22)|0);
   $24 = ($23|0)!=(0);
   $25 = $24 ^ 1;
   $54 = $25;
  } else {
   $54 = 0;
  }
  if (!($54)) {
   break;
  }
  $26 = $cp2a;
  $27 = (($26) + 1|0);
  $cp2a = $27;
 }
 $28 = $0;
 $29 = $1;
 $30 = $cp1a;
 $31 = $0;
 $32 = $30;
 $33 = $31;
 $34 = (($32) - ($33))|0;
 $35 = $cp2a;
 $36 = $1;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = ($34|0)>($39|0);
 if ($40) {
  $41 = $cp1a;
  $42 = $0;
  $43 = $41;
  $44 = $42;
  $45 = (($43) - ($44))|0;
  $51 = $45;
  $52 = (_strncasecmp($28,$29,$51)|0);
  STACKTOP = sp;return ($52|0);
 } else {
  $46 = $cp2a;
  $47 = $1;
  $48 = $46;
  $49 = $47;
  $50 = (($48) - ($49))|0;
  $51 = $50;
  $52 = (_strncasecmp($28,$29,$51)|0);
  STACKTOP = sp;return ($52|0);
 }
 return 0|0;
}
function _get_range($cpp,$ip,$jp) {
 $cpp = $cpp|0;
 $ip = $ip|0;
 $jp = $jp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp = 0, $i = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cp = sp + 4|0;
 $1 = $cpp;
 $2 = $ip;
 $3 = $jp;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_skip_comma_space($5)|0);
 HEAP32[$cp>>2] = $6;
 $7 = HEAP32[$cp>>2]|0;
 $8 = (_is_all($7)|0);
 $9 = ($8|0)!=(0);
 L1: do {
  if ($9) {
   $10 = HEAP32[$cp>>2]|0;
   $11 = (_skip_param($10)|0);
   HEAP32[$cp>>2] = $11;
   $12 = $2;
   HEAP32[$12>>2] = 0;
   $13 = HEAP32[464>>2]|0;
   $14 = (($13) - 1)|0;
   $15 = $3;
   HEAP32[$15>>2] = $14;
   while(1) {
    $16 = $3;
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(0);
    if ($18) {
     $19 = $3;
     $20 = HEAP32[$19>>2]|0;
     $21 = (2080 + ($20<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0);
     $154 = $23;
    } else {
     $154 = 0;
    }
    if (!($154)) {
     break;
    }
    $24 = $3;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + -1)|0;
    HEAP32[$24>>2] = $26;
   }
  } else {
   $27 = HEAP32[$cp>>2]|0;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)==(48);
   do {
    if ($30) {
    } else {
     $31 = HEAP32[$cp>>2]|0;
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = (_isdigit($33)|0);
     $35 = ($34|0)!=(0);
     if ($35) {
      $36 = HEAP32[$cp>>2]|0;
      $37 = (_strtol($36,$cp,10)|0);
      $38 = (($37) - 1)|0;
      $39 = $2;
      HEAP32[$39>>2] = $38;
     } else {
      $40 = HEAP32[472>>2]|0;
      $41 = $2;
      HEAP32[$41>>2] = $40;
     }
     $42 = HEAP32[$cp>>2]|0;
     $43 = HEAP8[$42>>0]|0;
     $44 = $43 << 24 >> 24;
     $45 = ($44|0)!=(45);
     if ($45) {
      $46 = HEAP32[$cp>>2]|0;
      $47 = HEAP8[$46>>0]|0;
      $48 = $47 << 24 >> 24;
      $49 = ($48|0)==(0);
      if (!($49)) {
       $50 = HEAP32[$cp>>2]|0;
       $51 = HEAP8[$50>>0]|0;
       $52 = $51 << 24 >> 24;
       $53 = ($52|0)==(44);
       if (!($53)) {
        $54 = HEAP32[$cp>>2]|0;
        $55 = HEAP8[$54>>0]|0;
        $56 = $55 << 24 >> 24;
        $57 = (_isspace($56)|0);
        $58 = ($57|0)!=(0);
        if (!($58)) {
         break;
        }
       }
      }
      $59 = $2;
      $60 = HEAP32[$59>>2]|0;
      $61 = (_not_defined($60)|0);
      $62 = ($61|0)!=(0);
      if ($62) {
       $0 = 0;
       $153 = $0;
       STACKTOP = sp;return ($153|0);
      } else {
       $63 = $2;
       $64 = HEAP32[$63>>2]|0;
       $65 = $3;
       HEAP32[$65>>2] = $64;
       $66 = HEAP32[$cp>>2]|0;
       $67 = (_skip_comma_space($66)|0);
       $68 = $1;
       HEAP32[$68>>2] = $67;
       $0 = 1;
       $153 = $0;
       STACKTOP = sp;return ($153|0);
      }
     }
     $87 = HEAP32[$cp>>2]|0;
     $88 = (($87) + 1|0);
     HEAP32[$cp>>2] = $88;
     $89 = HEAP32[$cp>>2]|0;
     $90 = HEAP8[$89>>0]|0;
     $91 = $90 << 24 >> 24;
     $92 = ($91|0)==(48);
     if ($92) {
      break;
     }
     $93 = HEAP32[$cp>>2]|0;
     $94 = HEAP8[$93>>0]|0;
     $95 = $94 << 24 >> 24;
     $96 = (_isdigit($95)|0);
     $97 = ($96|0)!=(0);
     if ($97) {
      $98 = HEAP32[$cp>>2]|0;
      $99 = (_strtol($98,$cp,10)|0);
      $100 = (($99) - 1)|0;
      $101 = $3;
      HEAP32[$101>>2] = $100;
     } else {
      $102 = HEAP32[472>>2]|0;
      $103 = $3;
      HEAP32[$103>>2] = $102;
     }
     $104 = HEAP32[$cp>>2]|0;
     $105 = HEAP8[$104>>0]|0;
     $106 = $105 << 24 >> 24;
     $107 = ($106|0)!=(0);
     if ($107) {
      $108 = HEAP32[$cp>>2]|0;
      $109 = HEAP8[$108>>0]|0;
      $110 = $109 << 24 >> 24;
      $111 = (_isspace($110)|0);
      $112 = ($111|0)!=(0);
      if (!($112)) {
       break;
      }
     }
     $113 = $2;
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)<(0);
     if (!($115)) {
      $116 = $2;
      $117 = HEAP32[$116>>2]|0;
      $118 = ($117|0)>=(200);
      if (!($118)) {
       $119 = $3;
       $120 = HEAP32[$119>>2]|0;
       $121 = ($120|0)<(0);
       if (!($121)) {
        $122 = $3;
        $123 = HEAP32[$122>>2]|0;
        $124 = ($123|0)>=(200);
        if (!($124)) {
         $125 = $3;
         $126 = HEAP32[$125>>2]|0;
         $127 = $2;
         $128 = HEAP32[$127>>2]|0;
         $129 = ($126|0)<($128|0);
         if ($129) {
          $130 = $2;
          $131 = HEAP32[$130>>2]|0;
          $i = $131;
          $132 = $3;
          $133 = HEAP32[$132>>2]|0;
          $134 = $2;
          HEAP32[$134>>2] = $133;
          $135 = $i;
          $136 = $3;
          HEAP32[$136>>2] = $135;
         }
         break L1;
        }
       }
      }
     }
     _error(42464);
     $0 = 0;
     $153 = $0;
     STACKTOP = sp;return ($153|0);
    }
   } while(0);
   $69 = HEAP32[472>>2]|0;
   $70 = $2;
   HEAP32[$70>>2] = $69;
   $71 = $3;
   HEAP32[$71>>2] = $69;
   $72 = HEAP32[472>>2]|0;
   $73 = ($72|0)<(0);
   if ($73) {
    $82 = 1;
   } else {
    $74 = HEAP32[472>>2]|0;
    $75 = HEAP32[464>>2]|0;
    $76 = ($74|0)>=($75|0);
    if ($76) {
     $82 = 1;
    } else {
     $77 = HEAP32[472>>2]|0;
     $78 = (2080 + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)<=(0);
     $82 = $80;
    }
   }
   $81 = $82 ^ 1;
   $83 = $81&1;
   $rv = $83;
   $84 = $rv;
   $85 = ($84|0)!=(0);
   if ($85) {
   } else {
   }
   $86 = $rv;
   $0 = $86;
   $153 = $0;
   STACKTOP = sp;return ($153|0);
  }
 } while(0);
 $137 = HEAP32[$cp>>2]|0;
 $138 = (_skip_comma_space($137)|0);
 HEAP32[$cp>>2] = $138;
 $139 = $2;
 $140 = HEAP32[$139>>2]|0;
 $i = $140;
 while(1) {
  $141 = $i;
  $142 = $3;
  $143 = HEAP32[$142>>2]|0;
  $144 = ($141|0)<=($143|0);
  if (!($144)) {
   label = 50;
   break;
  }
  $145 = $i;
  $146 = (2080 + ($145<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147|0)>(0);
  if ($148) {
   label = 47;
   break;
  }
  $151 = $i;
  $152 = (($151) + 1)|0;
  $i = $152;
 }
 if ((label|0) == 47) {
  $149 = HEAP32[$cp>>2]|0;
  $150 = $1;
  HEAP32[$150>>2] = $149;
  $0 = 1;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 50) {
  _error(42504);
  $0 = 0;
  $153 = $0;
  STACKTOP = sp;return ($153|0);
 }
 return 0|0;
}
function _skip_comma_space($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 $3 = $0;
 $4 = (_skip_space($3)|0);
 $0 = $4;
 $5 = $0;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(44);
 if ($8) {
  $9 = $0;
  $10 = (($9) + 1|0);
  $11 = (_skip_space($10)|0);
  $0 = $11;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _skip_param($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 while(1) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (_isascii($9)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = $0;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (_isdelimiter($14)|0);
    $16 = ($15|0)!=(0);
    $17 = $16 ^ 1;
    $36 = $17;
   } else {
    $36 = 1;
   }
   $35 = $36;
  } else {
   $35 = 0;
  }
  if (!($35)) {
   break;
  }
  $18 = $0;
  $19 = (($18) + 1|0);
  $0 = $19;
 }
 $20 = $0;
 $21 = (_skip_space($20)|0);
 $0 = $21;
 $22 = $0;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 << 24 >> 24;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $0;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = (_isdelimiter($28)|0);
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $0;
   $32 = (($31) + 1|0);
   $33 = (_skip_space($32)|0);
   $0 = $33;
  }
 }
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _get_range_eol($cpp,$ip,$jp) {
 $cpp = $cpp|0;
 $ip = $ip|0;
 $jp = $jp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cpp;
 $2 = $ip;
 $3 = $jp;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_get_range($4,$5,$6)|0);
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = $1;
   $10 = HEAP32[$9>>2]|0;
   $11 = (_extra_characters($10)|0);
   $12 = ($11|0)!=(0);
   if ($12) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _skip_space($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 while(1) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (_isspace($9)|0);
   $11 = ($10|0)!=(0);
   $15 = $11;
  } else {
   $15 = 0;
  }
  if (!($15)) {
   break;
  }
  $12 = $0;
  $13 = (($12) + 1|0);
  $0 = $13;
 }
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _isdelimiter($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ch;
 $1 = $0;
 $2 = (_isspace($1)|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $9 = 1;
 } else {
  $4 = $0;
  $5 = ($4|0)==(44);
  if ($5) {
   $9 = 1;
  } else {
   $6 = $0;
   $7 = ($6|0)==(61);
   $9 = $7;
  }
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _level_plus_count($p1,$n1,$level) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $n1;
 $2 = $level;
 $count = 0;
 $i = 1;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ($10|0)==($11|0);
  if ($12) {
   $13 = $i;
   $14 = $0;
   $15 = (($14) + ($13<<4)|0);
   $16 = (($15) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   if ((($17|0) == 2) | (($17|0) == 1)) {
    $18 = $count;
    $19 = (($18) + 1)|0;
    $count = $19;
   }
  }
  $20 = $i;
  $21 = (($20) + 2)|0;
  $i = $21;
 }
 $22 = $count;
 STACKTOP = sp;return ($22|0);
}
function _level1_plus_count($p1,$n1) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $n1;
 $2 = $0;
 $3 = $1;
 $4 = $0;
 $5 = $1;
 $6 = (_min_level($4,$5)|0);
 $7 = (_level_plus_count($2,$3,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _var_count($p1,$n1) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $n1;
 $count = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5<<4)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if ($9) {
   $10 = $count;
   $11 = (($10) + 1)|0;
   $count = $11;
  }
  $12 = $i;
  $13 = (($12) + 2)|0;
  $i = $13;
 }
 $14 = $count;
 STACKTOP = sp;return ($14|0);
}
function _no_vars($source,$n,$vp) {
 $source = $source|0;
 $n = $n|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $found = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $source;
 $2 = $n;
 $3 = $vp;
 $found = 0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = $2;
  $9 = (_var_count($7,$8)|0);
  $10 = ($9|0)==(0);
  $11 = $10&1;
  $0 = $11;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 $j = 0;
 L5: while(1) {
  $12 = $j;
  $13 = $2;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $j;
  $16 = $1;
  $17 = (($16) + ($15<<4)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(1);
  do {
   if ($19) {
    $20 = $j;
    $21 = $1;
    $22 = (($21) + ($20<<4)|0);
    $23 = (($22) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 & 16383;
    $26 = ($25|0)<=(4);
    if ($26) {
     break;
    }
    $27 = $3;
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)!=(0);
    if ($29) {
     $30 = $3;
     $31 = HEAP32[$30>>2]|0;
     $32 = $j;
     $33 = $1;
     $34 = (($33) + ($32<<4)|0);
     $35 = (($34) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($31|0)!=($36|0);
     if ($37) {
      label = 10;
      break L5;
     }
    } else {
     $found = 1;
     $39 = $j;
     $40 = $1;
     $41 = (($40) + ($39<<4)|0);
     $42 = (($41) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $3;
     HEAP32[$44>>2] = $43;
    }
    label = 14;
   } else {
    label = 14;
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
  }
  $45 = $j;
  $46 = (($45) + 2)|0;
  $j = $46;
 }
 if ((label|0) == 10) {
  $38 = $3;
  HEAP32[$38>>2] = 0;
 }
 $47 = $found;
 $48 = ($47|0)!=(0);
 $49 = $48 ^ 1;
 $50 = $49&1;
 $0 = $50;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _exp_contains_infinity($p1,$n1) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n1;
 $i = 0;
 L1: while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 12;
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    if (0) {
     $11 = $i;
     $12 = $1;
     $13 = (($12) + ($11<<4)|0);
     $14 = (($13) + 8|0);
     $15 = +HEAPF64[$14>>3];
     $16 = $15;
     $17 = (___FLOAT_BITS($16)|0);
     $18 = $17 & 2147483647;
     $19 = ($18>>>0)<(2139095040);
     if ($19) {
      break;
     } else {
      label = 9;
      break L1;
     }
    }
    if (1) {
     $20 = $i;
     $21 = $1;
     $22 = (($21) + ($20<<4)|0);
     $23 = (($22) + 8|0);
     $24 = +HEAPF64[$23>>3];
     $25 = (___DOUBLE_BITS($24)|0);
     $26 = tempRet0;
     $27 = $26 & 2147483647;
     $28 = ($27>>>0)<(2146435072);
     $29 = ($27|0)==(2146435072);
     $30 = ($25>>>0)<(0);
     $31 = $29 & $30;
     $32 = $28 | $31;
     if ($32) {
      break;
     } else {
      label = 9;
      break L1;
     }
    } else {
     $33 = $i;
     $34 = $1;
     $35 = (($34) + ($33<<4)|0);
     $36 = (($35) + 8|0);
     $37 = +HEAPF64[$36>>3];
     $38 = (___fpclassifyl((+$37))|0);
     $39 = ($38|0)>(1);
     if ($39) {
      break;
     } else {
      label = 9;
      break L1;
     }
    }
   }
  } while(0);
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 if ((label|0) == 9) {
  $0 = 1;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return 0|0;
}
function ___FLOAT_BITS($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _exp_contains_nan($p1,$n1) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n1;
 $i = 0;
 L1: while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 12;
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    if (0) {
     $11 = $i;
     $12 = $1;
     $13 = (($12) + ($11<<4)|0);
     $14 = (($13) + 8|0);
     $15 = +HEAPF64[$14>>3];
     $16 = $15;
     $17 = (___FLOAT_BITS($16)|0);
     $18 = $17 & 2147483647;
     $19 = ($18>>>0)>(2139095040);
     if ($19) {
      label = 9;
      break L1;
     } else {
      break;
     }
    }
    if (1) {
     $20 = $i;
     $21 = $1;
     $22 = (($21) + ($20<<4)|0);
     $23 = (($22) + 8|0);
     $24 = +HEAPF64[$23>>3];
     $25 = (___DOUBLE_BITS($24)|0);
     $26 = tempRet0;
     $27 = $26 & 2147483647;
     $28 = ($27>>>0)>(2146435072);
     $29 = ($27|0)==(2146435072);
     $30 = ($25>>>0)>(0);
     $31 = $29 & $30;
     $32 = $28 | $31;
     if ($32) {
      label = 9;
      break L1;
     } else {
      break;
     }
    } else {
     $33 = $i;
     $34 = $1;
     $35 = (($34) + ($33<<4)|0);
     $36 = (($35) + 8|0);
     $37 = +HEAPF64[$36>>3];
     $38 = (___fpclassifyl((+$37))|0);
     $39 = ($38|0)==(0);
     if ($39) {
      label = 9;
      break L1;
     } else {
      break;
     }
    }
   }
  } while(0);
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 if ((label|0) == 9) {
  $0 = 1;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return 0|0;
}
function _exp_is_numeric($p1,$n1) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n1;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 8;
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = $i;
   $12 = $1;
   $13 = (($12) + ($11<<4)|0);
   $14 = (($13) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 16383;
   $17 = ($16|0)>(4);
   if ($17) {
    label = 5;
    break;
   }
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 8) {
  $0 = 1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return 0|0;
}
function _exp_is_absolute($p1,$n1) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $i = 0, $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n1;
 $3 = $2;
 $4 = (($3) - 2)|0;
 $i = $4;
 while(1) {
  $5 = $i;
  $6 = ($5|0)>(2);
  if (!($6)) {
   label = 16;
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = (($8) + ($7<<4)|0);
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(8);
  if ($12) {
  } else {
   $13 = $i;
   $14 = $1;
   $15 = (($14) + ($13<<4)|0);
   $16 = (($15) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $level = $17;
   $18 = $i;
   $19 = (($18) + 1)|0;
   $20 = $1;
   $21 = (($20) + ($19<<4)|0);
   $22 = (($21) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $level;
   $25 = ($23|0)==($24|0);
   if ($25) {
    $26 = $i;
    $27 = (($26) + 1)|0;
    $28 = $1;
    $29 = (($28) + ($27<<4)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = $i;
     $33 = (($32) + 1)|0;
     $34 = $1;
     $35 = (($34) + ($33<<4)|0);
     $36 = (($35) + 8|0);
     $37 = +HEAPF64[$36>>3];
     $38 = (+_fmod((+$37),1.0));
     $39 = $38 != 0.0;
     if ($39) {
      $40 = $level;
      $41 = (($40) + 1)|0;
      $level = $41;
      $42 = $i;
      $43 = (($42) - 2)|0;
      $44 = $1;
      $45 = (($44) + ($43<<4)|0);
      $46 = (($45) + 8|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(8);
      if ($48) {
       $49 = $i;
       $50 = (($49) - 2)|0;
       $51 = $1;
       $52 = (($51) + ($50<<4)|0);
       $53 = (($52) + 4|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = $level;
       $56 = ($54|0)==($55|0);
       if ($56) {
        $57 = $i;
        $58 = (($57) - 1)|0;
        $59 = $1;
        $60 = (($59) + ($58<<4)|0);
        $61 = (($60) + 4|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = $level;
        $64 = ($62|0)==($63|0);
        if ($64) {
         $65 = $i;
         $66 = (($65) - 1)|0;
         $67 = $1;
         $68 = (($67) + ($66<<4)|0);
         $69 = HEAP32[$68>>2]|0;
         $70 = ($69|0)==(0);
         if ($70) {
          label = 12;
          break;
         }
        }
       }
      }
     }
    }
   }
  }
  $71 = $i;
  $72 = (($71) - 2)|0;
  $i = $72;
 }
 if ((label|0) == 12) {
  $0 = 1;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 16) {
  $0 = 0;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 }
 return 0|0;
}
function _check_divide_by_zero($denominator) {
 $denominator = +$denominator;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $denominator;
 $2 = $1;
 $3 = $2 == 0.0;
 if ($3) {
  _warning(42648);
  $0 = 1;
 } else {
  $0 = 0;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _load_rc($return_true_if_no_file,$ofp) {
 $return_true_if_no_file = $return_true_if_no_file|0;
 $ofp = $ofp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cp = 0, $fp = 0, $rv = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 48|0;
 $1 = $return_true_if_no_file;
 $2 = $ofp;
 $fp = 0;
 $rv = 1;
 $3 = (_getenv((42672|0))|0);
 $cp = $3;
 $4 = $cp;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $cp;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 42688;
  (_snprintf(36064,4096,42680,$vararg_buffer)|0);
  $7 = (_fopen((36064|0),(42704|0))|0);
  $fp = $7;
 }
 $8 = $fp;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = $1;
  $11 = ($10|0)!=(0);
  if ($11) {
   $0 = 1;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  } else {
   _perror((36064|0));
   $0 = 0;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $12 = HEAP32[41208>>2]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = HEAP32[41192>>2]|0;
  $15 = ($14|0)!=(0);
  if (!($15)) {
   HEAP32[$vararg_buffer2>>2] = 36064;
   (_printf((42712|0),($vararg_buffer2|0))|0);
  }
 }
 while(1) {
  $16 = $fp;
  $17 = (_fgets(($buf|0),4096,($16|0))|0);
  $cp = $17;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $2;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $2;
   $22 = $cp;
   HEAP32[$vararg_buffer5>>2] = $22;
   (_fprintf(($21|0),(42752|0),($vararg_buffer5|0))|0);
  }
  $23 = $cp;
  _set_error_level($23);
  $24 = $cp;
  $25 = (_set_options($24,1)|0);
  $26 = ($25|0)!=(0);
  if (!($26)) {
   $rv = 0;
  }
 }
 $27 = $fp;
 $28 = (_fclose(($27|0))|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $rv = 0;
  _perror((36064|0));
 }
 $30 = $rv;
 $0 = $30;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _solve_espace($want,$have) {
 $want = $want|0;
 $have = $have|0;
 var $$0 = 0, $$reg2mem29$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $rv$0 = 0, $rv$1 = 0, $rv$2 = 0, $save_save = 0, $vararg_buffer = 0, $vararg_buffer31 = 0;
 var _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $save_save = sp + 12|0;
 $0 = ($want|0)==($have|0);
 if ($0) {
  label = 6;
 } else {
  $1 = ($have|0)>=(0);
  if ($1) {
   $2 = HEAP32[464>>2]|0;
   $3 = ($have|0)<($2|0);
   if ($3) {
    $4 = (2080 + ($have<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)>(0);
    if ($6) {
     $7 = (2880 + ($have<<2)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ($8|0)>(0);
     if ($9) {
      _memmove(($save_save|0),(41032|0),156)|0;
      _saveSetjmp(41032,1,_setjmpTable|0)|0;
      __THREW__ = 0;
      $17 = __THREW__; __THREW__ = 0;
      if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = threwValue; } else { $18 = -1; };
      $19 = tempRet0;
      if ((($18|0) == 1)) {
       $$reg2mem29$0 = $19;
      } else {
       $$reg2mem29$0 = 0;
      }
     } else {
      label = 6;
     }
    } else {
     label = 6;
    }
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  __THREW__ = 0;
  invoke_vi(39,(42760|0));
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
  $12 = tempRet0;
  if ((($11|0) == 1)) {
   $$reg2mem29$0 = $12;
  } else {
   $13 = (($have) + 1)|0;
   __THREW__ = 0;
   HEAP32[$vararg_buffer>>2] = $13;
   (invoke_iii(40,(42792|0),($vararg_buffer|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = threwValue; } else { $15 = -1; };
   $16 = tempRet0;
   if ((($15|0) == 1)) {
    $$reg2mem29$0 = $16;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 while(1) {
  $20 = ($$reg2mem29$0|0)!=(0);
  if ($20) {
   __THREW__ = 0;
   invoke_v(41);
   $21 = __THREW__; __THREW__ = 0;
   if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = threwValue; } else { $22 = -1; };
   $23 = tempRet0;
   if ((($22|0) == 1)) {
    $$reg2mem29$0 = $23;
    continue;
   }
   $24 = ($$reg2mem29$0|0)==(14);
   if ($24) {
    __THREW__ = 0;
    invoke_vi(39,(42832|0));
    $25 = __THREW__; __THREW__ = 0;
    if ((($25|0) != 0) & ((threwValue|0) != 0)) { $26 = _testSetjmp(HEAP32[$25>>2]|0, _setjmpTable)|0; if (($26|0) == 0) { _longjmp($25|0, threwValue|0); } tempRet0 = threwValue; } else { $26 = -1; };
    $27 = tempRet0;
    if ((($26|0) == 1)) {
     $$reg2mem29$0 = $27;
     continue;
    }
   }
   $rv$2 = 0;
  } else {
   $28 = (2080 + ($want<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = (2880 + ($want<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)!=(0);
    if ($33) {
     __THREW__ = 0;
     invoke_vi(39,(42856|0));
     $34 = __THREW__; __THREW__ = 0;
     if ((($34|0) != 0) & ((threwValue|0) != 0)) { $35 = _testSetjmp(HEAP32[$34>>2]|0, _setjmpTable)|0; if (($35|0) == 0) { _longjmp($34|0, threwValue|0); } tempRet0 = threwValue; } else { $35 = -1; };
     $36 = tempRet0;
     if ((($35|0) == 1)) {
      $$reg2mem29$0 = $36;
      continue;
     }
     $rv$0 = 0;
    } else {
     $37 = (480 + ($want<<2)|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (2080 + ($want<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (480 + ($have<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (2080 + ($have<<2)|0);
     $44 = (1280 + ($have<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (2880 + ($have<<2)|0);
     __THREW__ = 0;
     $47 = (invoke_iiiiiii(42,($38|0),($40|0),($42|0),($43|0),($45|0),($46|0))|0);
     $48 = __THREW__; __THREW__ = 0;
     if ((($48|0) != 0) & ((threwValue|0) != 0)) { $49 = _testSetjmp(HEAP32[$48>>2]|0, _setjmpTable)|0; if (($49|0) == 0) { _longjmp($48|0, threwValue|0); } tempRet0 = threwValue; } else { $49 = -1; };
     $50 = tempRet0;
     if ((($49|0) == 1)) {
      $$reg2mem29$0 = $50;
      continue;
     }
     $rv$0 = $47;
    }
    $rv$1 = $rv$0;
   } else {
    $51 = (1280 + ($want<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (2880 + ($want<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (1280 + ($have<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (2880 + ($have<<2)|0);
    $58 = (480 + ($have<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (2080 + ($have<<2)|0);
    __THREW__ = 0;
    $61 = (invoke_iiiiiii(42,($52|0),($54|0),($56|0),($57|0),($59|0),($60|0))|0);
    $62 = __THREW__; __THREW__ = 0;
    if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = threwValue; } else { $63 = -1; };
    $64 = tempRet0;
    if ((($63|0) == 1)) {
     $$reg2mem29$0 = $64;
     continue;
    }
    $rv$1 = $61;
   }
   $rv$2 = $rv$1;
  }
  _memmove((41032|0),($save_save|0),156)|0;
  $65 = ($rv$2|0)<=(0);
  if (!($65)) {
   label = 30;
   break;
  }
  $66 = (($have) + 1)|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer31>>2] = $66;
  (invoke_iii(40,(42792|0),($vararg_buffer31|0))|0);
  $67 = __THREW__; __THREW__ = 0;
  if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = threwValue; } else { $68 = -1; };
  $69 = tempRet0;
  if ((($68|0) == 1)) {
   $$reg2mem29$0 = $69;
  } else {
   label = 29;
   break;
  }
 }
 if ((label|0) == 29) {
 }
 else if ((label|0) == 30) {
 }
 $70 = ($rv$2|0)>(0);
 $71 = $70&1;
 $$0 = $71;
 STACKTOP = sp;return ($$0|0);
}
function _solve_sub($wantp,$wantn,$leftp,$leftnp,$rightp,$rightnp) {
 $wantp = $wantp|0;
 $wantn = $wantn|0;
 $leftp = $leftp|0;
 $leftnp = $leftnp|0;
 $rightp = $rightp|0;
 $rightnp = $rightnp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0.0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0.0, $806 = 0.0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0, $815 = 0, $816 = 0.0, $817 = 0.0, $818 = 0;
 var $819 = 0.0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0.0, $853 = 0.0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0.0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1 = 0, $denominator = 0;
 var $diff_sign = 0, $ep = 0, $found = 0, $found_count = 0, $i = 0, $inc_count = 0, $j = 0, $need_flip = 0, $numerator = 0, $op = 0, $op_kind = 0, $p1 = 0, $qtries = 0, $success = 0, $uf_flag = 0, $v = 0, $worked = 0, $zero_solved = 0, $zflag = 0, $zsolve = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff_sign = sp + 72|0;
 $numerator = sp + 8|0;
 $denominator = sp;
 $1 = $wantp;
 $2 = $wantn;
 $3 = $leftp;
 $4 = $leftnp;
 $5 = $rightp;
 $6 = $rightnp;
 $v = 0;
 $uf_flag = 0;
 $qtries = 0;
 $inc_count = 0;
 $zero_solved = 0;
 $success = 1;
 HEAP32[42936>>2] = 0;
 HEAP32[42944>>2] = 0;
 HEAP32[42952>>2] = 0;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<=(0);
 if (!($9)) {
  $10 = $6;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)<=(0);
  if (!($12)) {
   $13 = $2;
   $14 = ($13|0)!=(1);
   if ($14) {
    $15 = $2;
    $16 = ($15|0)==(3);
    if ($16) {
     $17 = $1;
     $18 = (($17) + 16|0);
     $19 = (($18) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(8);
     if ($21) {
      $22 = $1;
      $23 = (($22) + 32|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0);
      if ($25) {
       $26 = $1;
       $27 = (($26) + 32|0);
       $28 = (($27) + 8|0);
       $29 = +HEAPF64[$28>>3];
       $30 = $29 > 0.0;
       if ($30) {
        $31 = $1;
        $32 = (($31) + 32|0);
        $33 = (($32) + 8|0);
        $34 = +HEAPF64[$33>>3];
        $35 = $34 != 1.0;
        if ($35) {
         $36 = $1;
         $37 = HEAP32[$36>>2]|0;
         $38 = ($37|0)==(1);
         if ($38) {
          $39 = $1;
          $40 = (($39) + 8|0);
          $41 = HEAP32[$40>>2]|0;
          $v = $41;
         }
         $42 = $5;
         $43 = $6;
         $44 = $3;
         $45 = $4;
         $46 = (_solve_sub(3736,1,$42,$43,$44,$45)|0);
         $47 = ($46|0)<=(0);
         if ($47) {
          $0 = 0;
          $934 = $0;
          STACKTOP = sp;return ($934|0);
         }
         $48 = $4;
         $49 = HEAP32[$48>>2]|0;
         HEAP32[3712>>2] = $49;
         $50 = HEAP32[3680>>2]|0;
         $51 = $3;
         $52 = HEAP32[3712>>2]|0;
         $53 = $52<<4;
         _memmove(($50|0),($51|0),($53|0))|0;
         $54 = $6;
         $55 = HEAP32[$54>>2]|0;
         HEAP32[3720>>2] = $55;
         $56 = HEAP32[3688>>2]|0;
         $57 = $5;
         $58 = HEAP32[3720>>2]|0;
         $59 = $58<<4;
         _memmove(($56|0),($57|0),($59|0))|0;
         $60 = HEAP32[3680>>2]|0;
         _uf_simp($60,3712);
         $61 = $1;
         $62 = (($61) + 32|0);
         $63 = (($62) + 8|0);
         $64 = +HEAPF64[$63>>3];
         $65 = 1.0 / $64;
         $66 = $v;
         $67 = (_increase($65,$66)|0);
         $68 = ($67|0)!=(1);
         if ($68) {
          _error(42960);
          $0 = 0;
          $934 = $0;
          STACKTOP = sp;return ($934|0);
         } else {
          $69 = HEAP32[3680>>2]|0;
          _mid_simp_side($69,3712);
          $70 = HEAP32[3688>>2]|0;
          (_simp_loop($70,3720)|0);
          $71 = HEAP32[3688>>2]|0;
          _uf_simp($71,3720);
          $72 = $3;
          $73 = HEAP32[3680>>2]|0;
          $74 = HEAP32[3712>>2]|0;
          $75 = $74<<4;
          _memmove(($72|0),($73|0),($75|0))|0;
          $76 = HEAP32[3712>>2]|0;
          $77 = $4;
          HEAP32[$77>>2] = $76;
          $78 = $5;
          $79 = HEAP32[3688>>2]|0;
          $80 = HEAP32[3720>>2]|0;
          $81 = $80<<4;
          _memmove(($78|0),($79|0),($81|0))|0;
          $82 = HEAP32[3720>>2]|0;
          $83 = $6;
          HEAP32[$83>>2] = $82;
          $0 = 1;
          $934 = $0;
          STACKTOP = sp;return ($934|0);
         }
        }
       }
      }
     }
    }
    _error(42856);
    $0 = 0;
    $934 = $0;
    STACKTOP = sp;return ($934|0);
   }
   $84 = $4;
   $85 = HEAP32[$84>>2]|0;
   HEAP32[3712>>2] = $85;
   $86 = HEAP32[3680>>2]|0;
   $87 = $3;
   $88 = HEAP32[3712>>2]|0;
   $89 = $88<<4;
   _memmove(($86|0),($87|0),($89|0))|0;
   $90 = $6;
   $91 = HEAP32[$90>>2]|0;
   HEAP32[3720>>2] = $91;
   $92 = HEAP32[3688>>2]|0;
   $93 = $5;
   $94 = HEAP32[3720>>2]|0;
   $95 = $94<<4;
   _memmove(($92|0),($93|0),($95|0))|0;
   $96 = $1;
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)==(1);
   do {
    if ($98) {
     $99 = $1;
     $100 = (($99) + 8|0);
     $101 = HEAP32[$100>>2]|0;
     $v = $101;
     $102 = HEAP32[3688>>2]|0;
     $103 = HEAP32[3720>>2]|0;
     $104 = $v;
     $105 = (_found_var($102,$103,$104)|0);
     $106 = ($105|0)!=(0);
     if (!($106)) {
      $107 = HEAP32[3680>>2]|0;
      $108 = HEAP32[3712>>2]|0;
      $109 = $v;
      $110 = (_found_var($107,$108,$109)|0);
      $111 = ($110|0)!=(0);
      if (!($111)) {
       _error(42984);
       $0 = 0;
       $934 = $0;
       STACKTOP = sp;return ($934|0);
      }
     }
     $zsolve = 0;
    } else {
     $v = 0;
     $112 = $1;
     $113 = HEAP32[$112>>2]|0;
     $114 = ($113|0)!=(0);
     if (!($114)) {
      $115 = $1;
      $116 = (($115) + 8|0);
      $117 = +HEAPF64[$116>>3];
      $118 = $117 != 0.0;
      if (!($118)) {
       $zsolve = 1;
       break;
      }
     }
     _error(42856);
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
    }
   } while(0);
   $119 = HEAP32[3680>>2]|0;
   (_uf_power($119,3712)|0);
   $120 = HEAP32[3688>>2]|0;
   (_uf_power($120,3720)|0);
   L41: while(1) {
    $121 = HEAP32[3680>>2]|0;
    $122 = $zsolve;
    _simps_side($121,3712,$122);
    $123 = $uf_flag;
    $124 = ($123|0)!=(0);
    if ($124) {
     $125 = HEAP32[3688>>2]|0;
     (_simp_loop($125,3720)|0);
     $126 = HEAP32[3688>>2]|0;
     _uf_simp($126,3720);
     $127 = HEAP32[3688>>2]|0;
     $128 = $v;
     _factorv($127,3720,$128);
    } else {
     $129 = HEAP32[3688>>2]|0;
     $130 = $zsolve;
     _simps_side($129,3720,$130);
    }
    L47: while(1) {
     $op = 0;
     $131 = HEAP32[3720>>2]|0;
     $132 = HEAP32[3688>>2]|0;
     $133 = (($132) + ($131<<4)|0);
     $ep = $133;
     $134 = $zsolve;
     $135 = ($134|0)!=(0);
     if ($135) {
      $136 = HEAP32[3688>>2]|0;
      $p1 = $136;
      $b1 = $136;
      while(1) {
       $137 = $p1;
       $138 = $ep;
       $139 = ($137>>>0)<($138>>>0);
       if (!($139)) {
        break;
       }
       $140 = $p1;
       $141 = (($140) + 4|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(1);
       if ($143) {
        $144 = $p1;
        $145 = HEAP32[$144>>2]|0;
        $146 = ($145|0)==(2);
        if ($146) {
         $147 = $p1;
         $148 = (($147) + 8|0);
         $149 = HEAP32[$148>>2]|0;
         $op = $149;
         $150 = $p1;
         $151 = (($150) + 16|0);
         $b1 = $151;
         $152 = $op;
         $153 = ($152|0)==(5);
         if ($153) {
          label = 38;
          break L47;
         }
        }
       }
       $160 = $p1;
       $161 = (($160) + 16|0);
       $p1 = $161;
      }
     } else {
      $162 = HEAP32[3688>>2]|0;
      $p1 = $162;
      $b1 = $162;
      while(1) {
       $163 = $p1;
       $164 = $ep;
       $165 = ($163>>>0)<($164>>>0);
       if (!($165)) {
        break;
       }
       $166 = $p1;
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==(1);
       if ($168) {
        $169 = $v;
        $170 = $p1;
        $171 = (($170) + 8|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($169|0)==($172|0);
        if ($173) {
         label = 49;
         break L47;
        }
       }
       $214 = $p1;
       $215 = (($214) + 4|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = ($216|0)==(1);
       if ($217) {
        $218 = $p1;
        $219 = HEAP32[$218>>2]|0;
        $220 = ($219|0)==(2);
        if ($220) {
         $221 = $p1;
         $222 = (($221) + 8|0);
         $223 = HEAP32[$222>>2]|0;
         $op = $223;
         $224 = $p1;
         $225 = (($224) + 16|0);
         $b1 = $225;
        }
       }
       $226 = $p1;
       $227 = (($226) + 16|0);
       $p1 = $227;
      }
     }
     $228 = $uf_flag;
     $229 = ($228|0)!=(0);
     if ($229) {
      $230 = HEAP32[3688>>2]|0;
      $231 = $zsolve;
      _simps_side($230,3720,$231);
     }
     L79: while(1) {
      $worked = 1;
      $uf_flag = 0;
      L81: while(1) {
       $232 = HEAP32[3688>>2]|0;
       $233 = HEAP32[3720>>2]|0;
       $234 = $v;
       $235 = (_found_var($232,$233,$234)|0);
       $236 = ($235|0)!=(0);
       if ($236) {
        label = 84;
        break L41;
       }
       $237 = $1;
       $238 = $2;
       $239 = HEAP32[3680>>2]|0;
       $240 = HEAP32[3712>>2]|0;
       $241 = (_se_compare($237,$238,$239,$240,$diff_sign)|0);
       $242 = ($241|0)!=(0);
       if ($242) {
        $243 = HEAP32[$diff_sign>>2]|0;
        $244 = ($243|0)!=(0);
        if (!($244)) {
         break L79;
        }
       }
       $found_count = 0;
       $need_flip = 0;
       $found = 0;
       $op = 0;
       $401 = HEAP32[3712>>2]|0;
       $402 = HEAP32[3680>>2]|0;
       $403 = (($402) + ($401<<4)|0);
       $ep = $403;
       $404 = HEAP32[3680>>2]|0;
       $p1 = $404;
       $b1 = $404;
       L87: while(1) {
        $405 = $p1;
        $406 = $ep;
        $407 = ($405>>>0)>=($406>>>0);
        do {
         if ($407) {
          label = 150;
         } else {
          $408 = $p1;
          $409 = (($408) + 4|0);
          $410 = HEAP32[$409>>2]|0;
          $411 = ($410|0)==(1);
          if ($411) {
           $412 = $p1;
           $413 = HEAP32[$412>>2]|0;
           $414 = ($413|0)==(2);
           if ($414) {
            label = 150;
            break;
           }
          }
          $920 = $p1;
          $921 = HEAP32[$920>>2]|0;
          $922 = ($921|0)==(1);
          if ($922) {
           $923 = $v;
           $924 = $p1;
           $925 = (($924) + 8|0);
           $926 = HEAP32[$925>>2]|0;
           $927 = ($923|0)==($926|0);
           if ($927) {
            $928 = $found_count;
            $929 = (($928) + 1)|0;
            $found_count = $929;
            $930 = $found;
            $931 = (($930) + 1)|0;
            $found = $931;
           }
          }
         }
        } while(0);
        if ((label|0) == 150) {
         label = 0;
         $415 = $found;
         $416 = ($415|0)!=(0);
         L102: do {
          if ($416) {
           $502 = $op;
           $503 = ($502|0)==(5);
           if ($503) {
            $504 = $found;
            $505 = $need_flip;
            $506 = (($505) + ($504))|0;
            $need_flip = $506;
           }
           label = 199;
          } else {
           $417 = $p1;
           $418 = $ep;
           $419 = ($417>>>0)<($418>>>0);
           do {
            if ($419) {
             label = 156;
            } else {
             $420 = $found_count;
             $421 = ($420|0)!=(0);
             if ($421) {
              label = 156;
              break;
             }
             $422 = $zsolve;
             $423 = ($422|0)!=(0);
             if ($423) {
              label = 156;
              break;
             }
             $424 = HEAP32[3712>>2]|0;
             $425 = ($424|0)>(1);
             if ($425) {
              label = 156;
              break;
             }
             $426 = HEAP32[3680>>2]|0;
             $427 = HEAP32[$426>>2]|0;
             $428 = ($427|0)!=(0);
             if ($428) {
              label = 156;
             }
            }
           } while(0);
           L109: do {
            if ((label|0) == 156) {
             label = 0;
             $429 = $p1;
             $430 = $b1;
             $431 = $429;
             $432 = $430;
             $433 = (($431) - ($432))|0;
             $434 = (($433|0) / 16)&-1;
             $435 = ($434|0)!=(1);
             do {
              if (!($435)) {
               $436 = $b1;
               $437 = HEAP32[$436>>2]|0;
               $438 = ($437|0)!=(0);
               if ($438) {
                break;
               }
               $439 = $b1;
               $440 = (($439) + 8|0);
               $441 = +HEAPF64[$440>>3];
               $442 = $441 != 1.0;
               if ($442) {
                break;
               }
               $443 = $p1;
               $444 = $ep;
               $445 = ($443>>>0)>=($444>>>0);
               if ($445) {
                break;
               }
               $446 = $p1;
               $447 = (($446) + 8|0);
               $448 = HEAP32[$447>>2]|0;
               $449 = ($448|0)!=(5);
               if (!($449)) {
                break L109;
               }
              }
             } while(0);
             $450 = $op;
             $451 = ($450|0)==(0);
             if ($451) {
              while(1) {
               $452 = $p1;
               $453 = $ep;
               $454 = ($452>>>0)>=($453>>>0);
               if ($454) {
                label = 164;
                break;
               }
               $455 = $p1;
               $456 = (($455) + 4|0);
               $457 = HEAP32[$456>>2]|0;
               $458 = ($457|0)==(1);
               if ($458) {
                $459 = $p1;
                $460 = HEAP32[$459>>2]|0;
                $461 = ($460|0)==(2);
                if ($461) {
                 label = 167;
                 break;
                }
               }
               $468 = $p1;
               $469 = (($468) + 16|0);
               $p1 = $469;
              }
              if ((label|0) == 164) {
               label = 0;
               $op = 1;
              }
              else if ((label|0) == 167) {
               label = 0;
               $462 = $p1;
               $463 = (($462) + 8|0);
               $464 = HEAP32[$463>>2]|0;
               if ((($464|0) == 5) | (($464|0) == 4)) {
                $op = 4;
               } else if ((($464|0) == 2) | (($464|0) == 1)) {
                $op = 1;
               } else {
                $465 = $p1;
                $466 = (($465) + 8|0);
                $467 = HEAP32[$466>>2]|0;
                $op = $467;
               }
              }
             }
             $470 = $zsolve;
             $471 = ($470|0)!=(0);
             if (!($471)) {
              break L87;
             }
             $472 = $p1;
             $473 = $ep;
             $474 = ($472>>>0)<($473>>>0);
             if (!($474)) {
              label = 181;
              break L87;
             }
             $475 = $op;
             if ((($475|0) == 5) | (($475|0) == 2) | (($475|0) == 1)) {
              label = 178;
              break L87;
             }
             break L102;
            }
           } while(0);
           label = 199;
          }
         } while(0);
         if ((label|0) == 199) {
          label = 0;
          $507 = $p1;
          $508 = $ep;
          $509 = ($507>>>0)>=($508>>>0);
          if ($509) {
           label = 200;
           break;
          }
         }
         $found = 0;
         $915 = $p1;
         $916 = (($915) + 8|0);
         $917 = HEAP32[$916>>2]|0;
         $op = $917;
         $918 = $p1;
         $919 = (($918) + 16|0);
         $b1 = $919;
        }
        $932 = $p1;
        $933 = (($932) + 16|0);
        $p1 = $933;
       }
       if ((label|0) == 178) {
        label = 0;
        label = 188;
       }
       else if ((label|0) == 181) {
        label = 0;
        $476 = $op;
        $477 = ($476|0)!=(5);
        if ($477) {
         $478 = HEAP32[3680>>2]|0;
         $b1 = $478;
         $op = 1;
         $479 = $b1;
         $p1 = $479;
         while(1) {
          $480 = $p1;
          $481 = $ep;
          $482 = ($480>>>0)<($481>>>0);
          if (!($482)) {
           break;
          }
          $483 = $p1;
          $484 = (($483) + 4|0);
          $485 = HEAP32[$484>>2]|0;
          $486 = (($485) + 1)|0;
          HEAP32[$484>>2] = $486;
          $487 = $p1;
          $488 = (($487) + 16|0);
          $p1 = $488;
         }
        }
        label = 188;
       }
       else if ((label|0) == 200) {
        label = 0;
        $510 = $found_count;
        $511 = ($510|0)==(0);
        if ($511) {
         label = 201;
         break L41;
        }
        $561 = HEAP32[3720>>2]|0;
        $562 = ($561|0)==(1);
        if ($562) {
         $563 = HEAP32[3688>>2]|0;
         $564 = HEAP32[$563>>2]|0;
         $565 = ($564|0)==(0);
         if ($565) {
          $566 = HEAP32[3688>>2]|0;
          $567 = (($566) + 8|0);
          $568 = +HEAPF64[$567>>3];
          $569 = $568 == 0.0;
          $571 = $569;
         } else {
          $571 = 0;
         }
        } else {
         $571 = 0;
        }
        $570 = $571&1;
        $zflag = $570;
        $572 = $zflag;
        $573 = ($572|0)!=(0);
        if ($573) {
         $574 = HEAP32[3688>>2]|0;
         $575 = (($574) + 8|0);
         HEAPF64[$575>>3] = 0.0;
        }
        $576 = $need_flip;
        $577 = $found_count;
        $578 = ($576|0)>=($577|0);
        if ($578) {
         label = 230;
         break;
        }
        $587 = $worked;
        $588 = ($587|0)!=(0);
        do {
         if ($588) {
          $589 = $uf_flag;
          $590 = ($589|0)!=(0);
          if ($590) {
           break;
          }
          $worked = 0;
          HEAP32[41216>>2] = 0;
          $591 = HEAP32[3680>>2]|0;
          _uf_simp($591,3712);
          HEAP32[41216>>2] = 1;
          $592 = HEAP32[3680>>2]|0;
          $593 = $v;
          _factorv($592,3712,$593);
          $uf_flag = 1;
          continue L81;
         }
        } while(0);
        $594 = $uf_flag;
        $595 = ($594|0)!=(0);
        if (!($595)) {
         break;
        }
        $596 = HEAP32[3680>>2]|0;
        $597 = $zsolve;
        _simps_side($596,3712,$597);
        $uf_flag = 0;
        continue;
       }
       if ((label|0) == 188) {
        label = 0;
       }
       $489 = $op;
       $490 = $b1;
       $491 = HEAP32[3680>>2]|0;
       $492 = HEAP32[3688>>2]|0;
       $493 = (_g_of_f($489,$490,$491,3712,$492,3720)|0);
       $494 = ($493|0)!=(0);
       if (!($494)) {
        label = 190;
        break L41;
       }
       $495 = $uf_flag;
       $496 = ($495|0)!=(0);
       if ($496) {
        $497 = HEAP32[3680>>2]|0;
        (_simp_loop($497,3712)|0);
       } else {
        $498 = HEAP32[3680>>2]|0;
        $499 = $zsolve;
        _simps_side($498,3712,$499);
       }
       $500 = HEAP32[3688>>2]|0;
       $501 = $zsolve;
       _simps_side($500,3720,$501);
      }
      if ((label|0) == 230) {
       label = 0;
       $579 = HEAP32[3680>>2]|0;
       $580 = HEAP32[3688>>2]|0;
       $581 = (_flip($579,3712,$580,3720)|0);
       $582 = ($581|0)!=(0);
       if (!($582)) {
        label = 231;
        break L41;
       }
       $583 = HEAP32[3680>>2]|0;
       $584 = $zsolve;
       _simps_side($583,3712,$584);
       $585 = HEAP32[3688>>2]|0;
       $586 = $zsolve;
       _simps_side($585,3720,$586);
       continue;
      }
      $op = 0;
      $598 = HEAP32[3680>>2]|0;
      $b1 = $598;
      $i = 1;
      while(1) {
       $599 = $i;
       $600 = HEAP32[3712>>2]|0;
       $601 = ($599|0)<($600|0);
       if (!($601)) {
        break;
       }
       $602 = $i;
       $603 = HEAP32[3680>>2]|0;
       $604 = (($603) + ($602<<4)|0);
       $605 = (($604) + 4|0);
       $606 = HEAP32[$605>>2]|0;
       $607 = ($606|0)==(1);
       if ($607) {
        $608 = $i;
        $609 = HEAP32[3680>>2]|0;
        $610 = (($609) + ($608<<4)|0);
        $611 = (($610) + 8|0);
        $612 = HEAP32[$611>>2]|0;
        $op_kind = $612;
        $613 = $op_kind;
        $614 = ($613|0)==(4);
        if (!($614)) {
         $615 = $op_kind;
         $616 = ($615|0)==(5);
         if (!($616)) {
          label = 246;
          break;
         }
        }
        $617 = $op;
        $618 = ($617|0)==(0);
        if ($618) {
         $op = 4;
        }
        $620 = $zflag;
        $621 = ($620|0)!=(0);
        if ($621) {
         $622 = $op_kind;
         $623 = ($622|0)==(5);
         do {
          if ($623) {
           label = 257;
          } else {
           $624 = $i;
           $625 = (($624) + 1)|0;
           $626 = HEAP32[3680>>2]|0;
           $627 = (($626) + ($625<<4)|0);
           $628 = HEAP32[$627>>2]|0;
           $629 = ($628|0)==(1);
           if (!($629)) {
            break;
           }
           $630 = $i;
           $631 = (($630) + 1)|0;
           $632 = HEAP32[3680>>2]|0;
           $633 = (($632) + ($631<<4)|0);
           $634 = (($633) + 8|0);
           $635 = HEAP32[$634>>2]|0;
           $636 = $v;
           $637 = ($635|0)==($636|0);
           if (!($637)) {
            break;
           }
           $638 = $i;
           $639 = (($638) + 1)|0;
           $640 = HEAP32[3680>>2]|0;
           $641 = (($640) + ($639<<4)|0);
           $642 = (($641) + 4|0);
           $643 = HEAP32[$642>>2]|0;
           $644 = ($643|0)==(1);
           if ($644) {
            label = 257;
            break;
           }
           $645 = $i;
           $646 = (($645) + 1)|0;
           $647 = HEAP32[3680>>2]|0;
           $648 = (($647) + ($646<<4)|0);
           $649 = (($648) + 4|0);
           $650 = HEAP32[$649>>2]|0;
           $651 = ($650|0)==(2);
           if (!($651)) {
            break;
           }
           $652 = $i;
           $653 = (($652) + 2)|0;
           $654 = HEAP32[3680>>2]|0;
           $655 = (($654) + ($653<<4)|0);
           $656 = (($655) + 8|0);
           $657 = HEAP32[$656>>2]|0;
           $658 = ($657|0)==(8);
           if (!($658)) {
            break;
           }
           $659 = $i;
           $660 = (($659) + 3)|0;
           $661 = HEAP32[3680>>2]|0;
           $662 = (($661) + ($660<<4)|0);
           $663 = (($662) + 4|0);
           $664 = HEAP32[$663>>2]|0;
           $665 = ($664|0)==(2);
           if (!($665)) {
            break;
           }
           $666 = $i;
           $667 = (($666) + 3)|0;
           $668 = HEAP32[3680>>2]|0;
           $669 = (($668) + ($667<<4)|0);
           $670 = HEAP32[$669>>2]|0;
           $671 = ($670|0)==(0);
           if (!($671)) {
            break;
           }
           $672 = $i;
           $673 = (($672) + 3)|0;
           $674 = HEAP32[3680>>2]|0;
           $675 = (($674) + ($673<<4)|0);
           $676 = (($675) + 8|0);
           $677 = +HEAPF64[$676>>3];
           $678 = $677 > 0.0;
           if ($678) {
            label = 257;
           }
          }
         } while(0);
         if ((label|0) == 257) {
          label = 0;
          $679 = $op_kind;
          $op = $679;
          $680 = $i;
          $681 = (($680) + 1)|0;
          $682 = HEAP32[3680>>2]|0;
          $683 = (($682) + ($681<<4)|0);
          $b1 = $683;
          $684 = $op_kind;
          $685 = ($684|0)==(5);
          if ($685) {
           label = 258;
           break;
          }
         }
        } else {
         $686 = $op_kind;
         $687 = ($686|0)==(5);
         if ($687) {
          $688 = $i;
          $689 = (($688) + 2)|0;
          $j = $689;
          while(1) {
           $690 = $j;
           $691 = HEAP32[3712>>2]|0;
           $692 = ($690|0)<($691|0);
           if ($692) {
            $693 = $j;
            $694 = HEAP32[3680>>2]|0;
            $695 = (($694) + ($693<<4)|0);
            $696 = (($695) + 4|0);
            $697 = HEAP32[$696>>2]|0;
            $698 = ($697|0)>(1);
            $936 = $698;
           } else {
            $936 = 0;
           }
           if (!($936)) {
            break;
           }
           $699 = $j;
           $700 = HEAP32[3680>>2]|0;
           $701 = (($700) + ($699<<4)|0);
           $702 = (($701) + 4|0);
           $703 = HEAP32[$702>>2]|0;
           $704 = ($703|0)==(2);
           if ($704) {
            label = 267;
            break;
           }
           $718 = $j;
           $719 = (($718) + 2)|0;
           $j = $719;
          }
          if ((label|0) == 267) {
           label = 0;
           $705 = $j;
           $706 = HEAP32[3680>>2]|0;
           $707 = (($706) + ($705<<4)|0);
           $708 = (($707) + 8|0);
           $709 = HEAP32[$708>>2]|0;
           $op_kind = $709;
           $710 = $op_kind;
           $711 = ($710|0)==(1);
           if ($711) {
            label = 269;
           } else {
            $712 = $op_kind;
            $713 = ($712|0)==(2);
            if ($713) {
             label = 269;
            }
           }
           if ((label|0) == 269) {
            label = 0;
            $op = 5;
            $714 = $i;
            $715 = (($714) + 1)|0;
            $716 = HEAP32[3680>>2]|0;
            $717 = (($716) + ($715<<4)|0);
            $b1 = $717;
           }
          }
         }
        }
       }
       $720 = $i;
       $721 = (($720) + 2)|0;
       $i = $721;
      }
      if ((label|0) == 246) {
       label = 0;
       $619 = $op_kind;
       $op = $619;
      }
      else if ((label|0) == 258) {
       label = 0;
      }
      $722 = $zflag;
      $723 = ($722|0)!=(0);
      do {
       if ($723) {
        $724 = $zero_solved;
        $725 = ($724|0)!=(0);
        if ($725) {
         $726 = $op;
         $727 = ($726|0)==(4);
         if ($727) {
          $728 = $b1;
          $729 = HEAP32[$728>>2]|0;
          $730 = ($729|0)==(1);
          if ($730) {
           $731 = $b1;
           $732 = (($731) + 8|0);
           $733 = HEAP32[$732>>2]|0;
           $734 = $v;
           $735 = ($733|0)==($734|0);
           if ($735) {
            $736 = $b1;
            $737 = (($736) + 4|0);
            $738 = HEAP32[$737>>2]|0;
            $739 = ($738|0)==(1);
            if ($739) {
             label = 290;
             break L47;
            }
            $740 = $b1;
            $741 = (($740) + 4|0);
            $742 = HEAP32[$741>>2]|0;
            $743 = ($742|0)==(2);
            if ($743) {
             $744 = $b1;
             $745 = (($744) + 16|0);
             $746 = (($745) + 8|0);
             $747 = HEAP32[$746>>2]|0;
             $748 = ($747|0)==(8);
             if ($748) {
              $749 = $b1;
              $750 = (($749) + 32|0);
              $751 = (($750) + 4|0);
              $752 = HEAP32[$751>>2]|0;
              $753 = ($752|0)==(2);
              if (!($753)) {
               break;
              }
              $754 = $b1;
              $755 = (($754) + 32|0);
              $756 = HEAP32[$755>>2]|0;
              $757 = ($756|0)==(0);
              if (!($757)) {
               break;
              }
              $758 = $b1;
              $759 = (($758) + 32|0);
              $760 = (($759) + 8|0);
              $761 = +HEAPF64[$760>>3];
              $762 = $761 > 0.0;
              if ($762) {
               label = 290;
               break L47;
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      $763 = $op;
      $764 = ($763|0)==(5);
      if ($764) {
       label = 290;
       break L47;
      }
      $b1 = 0;
      $i = 1;
      while(1) {
       $773 = $i;
       $774 = HEAP32[3712>>2]|0;
       $775 = ($773|0)<($774|0);
       if (!($775)) {
        break;
       }
       $776 = $i;
       $777 = HEAP32[3680>>2]|0;
       $778 = (($777) + ($776<<4)|0);
       $779 = (($778) + 8|0);
       $780 = HEAP32[$779>>2]|0;
       $781 = ($780|0)==(8);
       L260: do {
        if ($781) {
         $782 = $i;
         $783 = (($782) + 1)|0;
         $784 = HEAP32[3680>>2]|0;
         $785 = (($784) + ($783<<4)|0);
         $786 = (($785) + 4|0);
         $787 = HEAP32[$786>>2]|0;
         $788 = $i;
         $789 = HEAP32[3680>>2]|0;
         $790 = (($789) + ($788<<4)|0);
         $791 = (($790) + 4|0);
         $792 = HEAP32[$791>>2]|0;
         $793 = ($787|0)==($792|0);
         if ($793) {
          $794 = $i;
          $795 = (($794) + 1)|0;
          $796 = HEAP32[3680>>2]|0;
          $797 = (($796) + ($795<<4)|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ($798|0)==(0);
          if ($799) {
           $800 = $i;
           $801 = (($800) + 1)|0;
           $802 = HEAP32[3680>>2]|0;
           $803 = (($802) + ($801<<4)|0);
           $804 = (($803) + 8|0);
           $805 = +HEAPF64[$804>>3];
           $806 = (+Math_abs((+$805)));
           $807 = $806 < 1.0;
           if ($807) {
            $808 = $i;
            $809 = (($808) + 1)|0;
            $810 = HEAP32[3680>>2]|0;
            $811 = (($810) + ($809<<4)|0);
            $812 = (($811) + 8|0);
            $813 = +HEAPF64[$812>>3];
            $814 = (_f_to_fraction($813,$numerator,$denominator)|0);
            $815 = ($814|0)!=(0);
            do {
             if ($815) {
              $816 = +HEAPF64[$numerator>>3];
              $817 = (+Math_abs((+$816)));
              $818 = $817 != 1.0;
              if ($818) {
               break;
              }
              $819 = +HEAPF64[$denominator>>3];
              $820 = $819 < 2.0;
              if ($820) {
               break;
              }
              $821 = $i;
              $822 = (($821) - 1)|0;
              $j = $822;
              while(1) {
               $823 = $j;
               $824 = ($823|0)>=(0);
               if ($824) {
                $825 = $j;
                $826 = HEAP32[3680>>2]|0;
                $827 = (($826) + ($825<<4)|0);
                $828 = (($827) + 4|0);
                $829 = HEAP32[$828>>2]|0;
                $830 = $i;
                $831 = HEAP32[3680>>2]|0;
                $832 = (($831) + ($830<<4)|0);
                $833 = (($832) + 4|0);
                $834 = HEAP32[$833>>2]|0;
                $835 = ($829|0)>=($834|0);
                $937 = $835;
               } else {
                $937 = 0;
               }
               if (!($937)) {
                break;
               }
               $836 = $j;
               $837 = HEAP32[3680>>2]|0;
               $838 = (($837) + ($836<<4)|0);
               $839 = HEAP32[$838>>2]|0;
               $840 = ($839|0)==(1);
               if ($840) {
                $841 = $j;
                $842 = HEAP32[3680>>2]|0;
                $843 = (($842) + ($841<<4)|0);
                $844 = (($843) + 8|0);
                $845 = HEAP32[$844>>2]|0;
                $846 = $v;
                $847 = ($845|0)==($846|0);
                if ($847) {
                 label = 312;
                 break;
                }
               }
               $870 = $j;
               $871 = (($870) + -1)|0;
               $j = $871;
              }
              if ((label|0) == 312) {
               label = 0;
               $848 = $b1;
               $849 = ($848|0)!=(0|0);
               if ($849) {
                $850 = $b1;
                $851 = (($850) + 8|0);
                $852 = +HEAPF64[$851>>3];
                $853 = (+Math_abs((+$852)));
                $854 = $i;
                $855 = (($854) + 1)|0;
                $856 = HEAP32[3680>>2]|0;
                $857 = (($856) + ($855<<4)|0);
                $858 = (($857) + 8|0);
                $859 = +HEAPF64[$858>>3];
                $860 = (+Math_abs((+$859)));
                $861 = $853 < $860;
                if ($861) {
                 $862 = $i;
                 $863 = (($862) + 1)|0;
                 $864 = HEAP32[3680>>2]|0;
                 $865 = (($864) + ($863<<4)|0);
                 $b1 = $865;
                }
               } else {
                $866 = $i;
                $867 = (($866) + 1)|0;
                $868 = HEAP32[3680>>2]|0;
                $869 = (($868) + ($867<<4)|0);
                $b1 = $869;
               }
              }
              label = 321;
              break L260;
             }
            } while(0);
           } else {
            label = 321;
           }
          } else {
           label = 321;
          }
         } else {
          label = 321;
         }
        } else {
         label = 321;
        }
       } while(0);
       if ((label|0) == 321) {
        label = 0;
       }
       $872 = $i;
       $873 = (($872) + 2)|0;
       $i = $873;
      }
      $874 = $b1;
      $875 = ($874|0)!=(0|0);
      if ($875) {
       $876 = $zero_solved;
       $877 = ($876|0)!=(0);
       if ($877) {
        label = 325;
        break L47;
       }
      }
      $888 = $qtries;
      $889 = ($888|0)!=(0);
      if ($889) {
       label = 331;
       break L41;
      }
      $890 = HEAP32[3712>>2]|0;
      $891 = $4;
      HEAP32[$891>>2] = $890;
      $892 = $3;
      $893 = HEAP32[3680>>2]|0;
      $894 = HEAP32[3712>>2]|0;
      $895 = $894<<4;
      _memmove(($892|0),($893|0),($895|0))|0;
      $896 = HEAP32[3720>>2]|0;
      $897 = $6;
      HEAP32[$897>>2] = $896;
      $898 = $5;
      $899 = HEAP32[3688>>2]|0;
      $900 = HEAP32[3720>>2]|0;
      $901 = $900<<4;
      _memmove(($898|0),($899|0),($901|0))|0;
      $902 = $3;
      $903 = $4;
      $904 = $5;
      $905 = $6;
      $906 = (_solve_sub(3736,1,$902,$903,$904,$905)|0);
      $907 = ($906|0)<=(0);
      if ($907) {
       label = 333;
       break L41;
      }
      $908 = $zero_solved;
      $909 = ($908|0)!=(0);
      if ($909) {
       $910 = $qtries;
       $911 = (($910) + 1)|0;
       $qtries = $911;
      }
      $zero_solved = 1;
      $912 = $v;
      $913 = (_poly_solve($912)|0);
      $914 = ($913|0)!=(0);
      if (!($914)) {
       label = 338;
       break L47;
      }
     }
     $245 = $zsolve;
     $246 = ($245|0)!=(0);
     if (!($246)) {
      label = 144;
      break L41;
     }
     L305: while(1) {
      $247 = HEAP32[3688>>2]|0;
      (_uf_power($247,3720)|0);
      while(1) {
       while(1) {
        $248 = HEAP32[3688>>2]|0;
        _simp_ssub($248,3720,0,0.0,0,1,4);
        $249 = HEAP32[3688>>2]|0;
        $250 = (_uf_power($249,3720)|0);
        $251 = ($250|0)!=(0);
        if (!($251)) {
         break;
        }
       }
       $252 = HEAP32[3688>>2]|0;
       $253 = (_super_factor($252,3720,1)|0);
       $254 = ($253|0)!=(0);
       if (!($254)) {
        break;
       }
      }
      $255 = HEAP32[3720>>2]|0;
      $256 = HEAP32[3688>>2]|0;
      $257 = (($256) + ($255<<4)|0);
      $ep = $257;
      $op = 0;
      $258 = HEAP32[3688>>2]|0;
      $259 = (($258) + 16|0);
      $p1 = $259;
      while(1) {
       $260 = $p1;
       $261 = $ep;
       $262 = ($260>>>0)<($261>>>0);
       if (!($262)) {
        break;
       }
       $263 = $p1;
       $264 = (($263) + 4|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($265|0)==(1);
       if ($266) {
        $267 = $p1;
        $268 = (($267) + 8|0);
        $269 = HEAP32[$268>>2]|0;
        $op = $269;
        $270 = $op;
        $271 = ($270|0)==(5);
        if ($271) {
         break L305;
        }
        $272 = $op;
        $273 = ($272|0)!=(4);
        if ($273) {
         label = 101;
         break;
        }
       }
       $274 = $p1;
       $275 = (($274) + 32|0);
       $p1 = $275;
      }
      if ((label|0) == 101) {
       label = 0;
      }
      $276 = $op;
      if ((($276|0) == 8)) {
       $373 = $p1;
       $374 = (($373) + 16|0);
       $p1 = $374;
       $375 = $p1;
       $376 = (($375) + 4|0);
       $377 = HEAP32[$376>>2]|0;
       $378 = ($377|0)==(1);
       if (!($378)) {
        label = 142;
        break L41;
       }
       $379 = $p1;
       $380 = HEAP32[$379>>2]|0;
       $381 = ($380|0)==(0);
       if (!($381)) {
        label = 142;
        break L41;
       }
       $382 = $p1;
       $383 = (($382) + 8|0);
       $384 = +HEAPF64[$383>>3];
       $385 = $384 > 0.0;
       if (!($385)) {
        label = 142;
        break L41;
       }
       $386 = HEAP32[3720>>2]|0;
       $387 = (($386) - 2)|0;
       HEAP32[3720>>2] = $387;
       continue;
      } else if (!((($276|0) == 4))) {
       label = 143;
       break L41;
      }
      $277 = HEAP32[3688>>2]|0;
      $p1 = $277;
      L333: while(1) {
       $278 = $p1;
       $279 = $ep;
       $280 = ($278>>>0)<($279>>>0);
       if (!($280)) {
        label = 137;
        break L41;
       }
       $281 = $p1;
       $b1 = $281;
       while(1) {
        $282 = $p1;
        $283 = $ep;
        $284 = ($282>>>0)>=($283>>>0);
        if ($284) {
         label = 112;
         break L333;
        }
        $285 = $p1;
        $286 = HEAP32[$285>>2]|0;
        $287 = ($286|0)==(2);
        if ($287) {
         $288 = $p1;
         $289 = (($288) + 4|0);
         $290 = HEAP32[$289>>2]|0;
         $291 = ($290|0)==(1);
         if ($291) {
          label = 112;
          break L333;
         }
        }
        $310 = $p1;
        $311 = HEAP32[$310>>2]|0;
        $312 = ($311|0)!=(0);
        if ($312) {
         $313 = $p1;
         $314 = HEAP32[$313>>2]|0;
         $315 = ($314|0)!=(2);
         if ($315) {
          $316 = $p1;
          $317 = HEAP32[$316>>2]|0;
          $318 = ($317|0)!=(1);
          if ($318) {
           break;
          }
          $319 = $p1;
          $320 = (($319) + 8|0);
          $321 = HEAP32[$320>>2]|0;
          $322 = $321 & 16383;
          $323 = ($322|0)>(4);
          if ($323) {
           break;
          }
         }
        }
        $324 = $p1;
        $325 = (($324) + 16|0);
        $p1 = $325;
       }
       $326 = $b1;
       $p1 = $326;
       $327 = $p1;
       $328 = (($327) + 16|0);
       $p1 = $328;
       while(1) {
        $329 = $p1;
        $330 = $ep;
        $331 = ($329>>>0)<($330>>>0);
        if ($331) {
         $332 = $p1;
         $333 = (($332) + 4|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = ($334|0)>(1);
         $935 = $335;
        } else {
         $935 = 0;
        }
        if (!($935)) {
         break;
        }
        $336 = $p1;
        $337 = (($336) + 32|0);
        $p1 = $337;
       }
       $338 = $p1;
       $339 = (($338) + -32|0);
       $340 = $b1;
       $341 = ($339>>>0)>($340>>>0);
       if ($341) {
        $342 = $p1;
        $343 = (($342) + -32|0);
        $p1 = $343;
        $344 = $p1;
        $345 = (($344) + 8|0);
        $346 = HEAP32[$345>>2]|0;
        $347 = ($346|0)==(8);
        if ($347) {
         $348 = $p1;
         $349 = (($348) + 4|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = ($350|0)==(2);
         if ($351) {
          $352 = $p1;
          $353 = (($352) + 16|0);
          $p1 = $353;
          $354 = $p1;
          $355 = (($354) + 4|0);
          $356 = HEAP32[$355>>2]|0;
          $357 = ($356|0)==(2);
          do {
           if ($357) {
            $358 = $p1;
            $359 = HEAP32[$358>>2]|0;
            $360 = ($359|0)==(0);
            if (!($360)) {
             break;
            }
            $361 = $p1;
            $362 = (($361) + 8|0);
            $363 = +HEAPF64[$362>>3];
            $364 = $363 > 0.0;
            if ($364) {
             label = 132;
             break L333;
            }
           }
          } while(0);
          $367 = $p1;
          $368 = (($367) + 16|0);
          $p1 = $368;
         } else {
          label = 134;
         }
        } else {
         label = 134;
        }
        if ((label|0) == 134) {
         label = 0;
         $369 = $p1;
         $370 = (($369) + 32|0);
         $p1 = $370;
        }
       }
       $371 = $p1;
       $372 = (($371) + 16|0);
       $p1 = $372;
      }
      if ((label|0) == 112) {
       label = 0;
       $292 = $b1;
       $293 = (($292) + 16|0);
       $294 = $p1;
       $295 = $ep;
       $296 = $p1;
       $297 = $295;
       $298 = $296;
       $299 = (($297) - ($298))|0;
       _memmove(($293|0),($294|0),($299|0))|0;
       $300 = $p1;
       $301 = $b1;
       $302 = (($301) + 16|0);
       $303 = $300;
       $304 = $302;
       $305 = (($303) - ($304))|0;
       $306 = (($305|0) / 16)&-1;
       $307 = HEAP32[3720>>2]|0;
       $308 = (($307) - ($306))|0;
       HEAP32[3720>>2] = $308;
       $309 = $b1;
       ;HEAP32[$309+0>>2]=HEAP32[3752+0>>2]|0;HEAP32[$309+4>>2]=HEAP32[3752+4>>2]|0;HEAP32[$309+8>>2]=HEAP32[3752+8>>2]|0;HEAP32[$309+12>>2]=HEAP32[3752+12>>2]|0;
       continue;
      }
      else if ((label|0) == 132) {
       label = 0;
       $365 = $p1;
       $366 = (($365) + 8|0);
       HEAPF64[$366>>3] = 1.0;
       continue;
      }
     }
    }
    if ((label|0) == 38) {
     label = 0;
     $154 = $op;
     $155 = $b1;
     $156 = HEAP32[3688>>2]|0;
     $157 = HEAP32[3680>>2]|0;
     $158 = (_g_of_f($154,$155,$156,3720,$157,3712)|0);
     $159 = ($158|0)!=(0);
     if (!($159)) {
      label = 39;
      break;
     }
     continue;
    }
    else if ((label|0) == 49) {
     label = 0;
     $174 = $op;
     $175 = ($174|0)==(0);
     if ($175) {
      $176 = $p1;
      $177 = (($176) + 16|0);
      $p1 = $177;
      while(1) {
       $178 = $p1;
       $179 = $ep;
       $180 = ($178>>>0)>=($179>>>0);
       if ($180) {
        label = 52;
        break;
       }
       $181 = $p1;
       $182 = (($181) + 4|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = ($183|0)==(1);
       if ($184) {
        $185 = $p1;
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(2);
        if ($187) {
         label = 55;
         break;
        }
       }
       $194 = $p1;
       $195 = (($194) + 16|0);
       $p1 = $195;
      }
      if ((label|0) == 52) {
       label = 0;
       $op = 1;
      }
      else if ((label|0) == 55) {
       label = 0;
       $188 = $p1;
       $189 = (($188) + 8|0);
       $190 = HEAP32[$189>>2]|0;
       if ((($190|0) == 5) | (($190|0) == 4)) {
        $op = 4;
       } else if ((($190|0) == 2) | (($190|0) == 1)) {
        $op = 1;
       } else {
        $191 = $p1;
        $192 = (($191) + 8|0);
        $193 = HEAP32[$192>>2]|0;
        $op = $193;
       }
      }
     }
     $196 = $op;
     if ((($196|0) == 8) | (($196|0) == 5) | (($196|0) == 4)) {
      $197 = HEAP32[3688>>2]|0;
      $b1 = $197;
      $op = 1;
      $198 = $b1;
      $p1 = $198;
      while(1) {
       $199 = $p1;
       $200 = $ep;
       $201 = ($199>>>0)<($200>>>0);
       if (!($201)) {
        break;
       }
       $202 = $p1;
       $203 = (($202) + 4|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = (($204) + 1)|0;
       HEAP32[$203>>2] = $205;
       $206 = $p1;
       $207 = (($206) + 16|0);
       $p1 = $207;
      }
     }
     $208 = $op;
     $209 = $b1;
     $210 = HEAP32[3688>>2]|0;
     $211 = HEAP32[3680>>2]|0;
     $212 = (_g_of_f($208,$209,$210,3720,$211,3712)|0);
     $213 = ($212|0)!=(0);
     if (!($213)) {
      label = 70;
      break;
     }
     continue;
    }
    else if ((label|0) == 290) {
     label = 0;
     $765 = $op;
     $766 = ($765|0)==(4);
     if ($766) {
      $qtries = 0;
      $success = 2;
     } else {
      $uf_flag = 1;
     }
     $767 = $op;
     $768 = $b1;
     $769 = HEAP32[3680>>2]|0;
     $770 = HEAP32[3688>>2]|0;
     $771 = (_g_of_f($767,$768,$769,3712,$770,3720)|0);
     $772 = ($771|0)!=(0);
     if (!($772)) {
      label = 294;
      break;
     }
     continue;
    }
    else if ((label|0) == 325) {
     label = 0;
     $878 = $inc_count;
     $879 = (($878) + 1)|0;
     $inc_count = $879;
     $880 = $inc_count;
     $881 = ($880|0)>(20);
     if ($881) {
      label = 326;
      break;
     }
     $zero_solved = 0;
     $qtries = 0;
     $882 = $b1;
     $883 = (($882) + 8|0);
     $884 = +HEAPF64[$883>>3];
     $885 = $v;
     $886 = (_increase($884,$885)|0);
     $887 = ($886|0)!=(0);
     if (!($887)) {
      label = 328;
      break;
     }
     $uf_flag = 1;
     continue;
    }
    else if ((label|0) == 338) {
     label = 0;
     continue;
    }
   }
   switch (label|0) {
    case 39: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 70: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 84: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 137: {
     label = 143;
     break;
    }
    case 142: {
     label = 143;
     break;
    }
    case 144: {
     break;
    }
    case 190: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 201: {
     $512 = HEAP32[3688>>2]|0;
     $513 = HEAP32[3720>>2]|0;
     $514 = $v;
     $515 = (_found_var($512,$513,$514)|0);
     $516 = ($515|0)!=(0);
     if ($516) {
      $0 = 0;
      $934 = $0;
      STACKTOP = sp;return ($934|0);
     }
     $517 = HEAP32[3680>>2]|0;
     _calc_simp($517,3712);
     $518 = HEAP32[3688>>2]|0;
     _calc_simp($518,3720);
     $519 = HEAP32[3680>>2]|0;
     $520 = HEAP32[3712>>2]|0;
     $521 = HEAP32[3688>>2]|0;
     $522 = HEAP32[3720>>2]|0;
     $523 = (_se_compare($519,$520,$521,$522,$diff_sign)|0);
     $524 = ($523|0)!=(0);
     if ($524) {
      $525 = HEAP32[$diff_sign>>2]|0;
      $526 = ($525|0)!=(0);
      if (!($526)) {
       _error(43016);
       $0 = -1;
       $934 = $0;
       STACKTOP = sp;return ($934|0);
      }
     }
     $found = 0;
     $i = 0;
     while(1) {
      $527 = $i;
      $528 = HEAP32[3712>>2]|0;
      $529 = ($527|0)<($528|0);
      if (!($529)) {
       break;
      }
      $530 = $i;
      $531 = HEAP32[3680>>2]|0;
      $532 = (($531) + ($530<<4)|0);
      $533 = HEAP32[$532>>2]|0;
      $534 = ($533|0)==(1);
      if ($534) {
       $535 = $i;
       $536 = HEAP32[3680>>2]|0;
       $537 = (($536) + ($535<<4)|0);
       $538 = (($537) + 8|0);
       $539 = HEAP32[$538>>2]|0;
       $540 = ($539|0)>(3);
       if ($540) {
        label = 210;
        break;
       }
      }
      $541 = $i;
      $542 = (($541) + 2)|0;
      $i = $542;
     }
     if ((label|0) == 210) {
      $found = 1;
     }
     $i = 0;
     while(1) {
      $543 = $i;
      $544 = HEAP32[3720>>2]|0;
      $545 = ($543|0)<($544|0);
      if (!($545)) {
       break;
      }
      $546 = $i;
      $547 = HEAP32[3688>>2]|0;
      $548 = (($547) + ($546<<4)|0);
      $549 = HEAP32[$548>>2]|0;
      $550 = ($549|0)==(1);
      if ($550) {
       $551 = $i;
       $552 = HEAP32[3688>>2]|0;
       $553 = (($552) + ($551<<4)|0);
       $554 = (($553) + 8|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = ($555|0)>(3);
       if ($556) {
        label = 217;
        break;
       }
      }
      $557 = $i;
      $558 = (($557) + 2)|0;
      $i = $558;
     }
     if ((label|0) == 217) {
      $found = 1;
     }
     $559 = $found;
     $560 = ($559|0)!=(0);
     if ($560) {
      _error(43048);
     } else {
      _error(43104);
     }
     $0 = -2;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 231: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 294: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 326: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 328: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 331: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
    case 333: {
     $0 = 0;
     $934 = $0;
     STACKTOP = sp;return ($934|0);
     break;
    }
   }
   if ((label|0) == 143) {
   }
   $388 = $3;
   $389 = HEAP32[3680>>2]|0;
   $390 = HEAP32[3712>>2]|0;
   $391 = $390<<4;
   _memmove(($388|0),($389|0),($391|0))|0;
   $392 = HEAP32[3712>>2]|0;
   $393 = $4;
   HEAP32[$393>>2] = $392;
   $394 = $5;
   $395 = HEAP32[3688>>2]|0;
   $396 = HEAP32[3720>>2]|0;
   $397 = $396<<4;
   _memmove(($394|0),($395|0),($397|0))|0;
   $398 = HEAP32[3720>>2]|0;
   $399 = $6;
   HEAP32[$399>>2] = $398;
   $400 = $success;
   $0 = $400;
   $934 = $0;
   STACKTOP = sp;return ($934|0);
  }
 }
 _error(42760);
 $0 = 0;
 $934 = $0;
 STACKTOP = sp;return ($934|0);
}
function _increase($d,$v) {
 $d = +$d;
 $v = $v|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1 = 0, $ep = 0, $flag = 0, $found2 = 0, $foundp = 0, $len1 = 0, $len2 = 0, $op = 0, $p1 = 0;
 var $p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $d;
 $2 = $v;
 HEAP32[41216>>2] = 0;
 $3 = HEAP32[3680>>2]|0;
 (_ufactor($3,3712)|0);
 HEAP32[41216>>2] = 1;
 $4 = HEAP32[3680>>2]|0;
 $5 = $2;
 $6 = $1;
 _simp_ssub($4,3712,$5,$6,1,0,2);
 $7 = HEAP32[3680>>2]|0;
 _simp_ssub($7,3712,0,1.0,1,1,2);
 L1: while(1) {
  $8 = HEAP32[3712>>2]|0;
  $9 = HEAP32[3680>>2]|0;
  $10 = (($9) + ($8<<4)|0);
  $ep = $10;
  $len1 = 0;
  $len2 = 0;
  $foundp = 0;
  $11 = HEAP32[3680>>2]|0;
  $12 = (($11) + 16|0);
  $p1 = $12;
  while(1) {
   $13 = $p1;
   $14 = $ep;
   $15 = ($13>>>0)>=($14>>>0);
   if ($15) {
    label = 4;
    break L1;
   }
   $16 = $p1;
   $17 = (($16) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(1);
   if ($19) {
    break;
   }
   $20 = $p1;
   $21 = (($20) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(8);
   if ($23) {
    $24 = $p1;
    $25 = (($24) + 16|0);
    $26 = (($25) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $p1;
    $29 = (($28) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($27|0)==($30|0);
    if ($31) {
     $32 = $p1;
     $33 = (($32) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0);
     if ($35) {
      $36 = $p1;
      $37 = (($36) + 16|0);
      $38 = (($37) + 8|0);
      $39 = +HEAPF64[$38>>3];
      $40 = $1;
      $41 = $39 == $40;
      if ($41) {
       $flag = 0;
       $42 = $p1;
       $43 = (($42) + -16|0);
       $b1 = $43;
       while(1) {
        $44 = $b1;
        $45 = (($44) + 4|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = $p1;
        $48 = (($47) + 4|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ($46|0)<($49|0);
        if ($50) {
         label = 13;
         break;
        }
        $53 = $b1;
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(1);
        if ($55) {
         $56 = $b1;
         $57 = (($56) + 8|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = $2;
         $60 = ($58|0)==($59|0);
         if ($60) {
          $flag = 1;
         }
        }
        $61 = $b1;
        $62 = HEAP32[3680>>2]|0;
        $63 = ($61|0)==($62|0);
        if ($63) {
         label = 18;
         break;
        }
        $64 = $b1;
        $65 = (($64) + -16|0);
        $b1 = $65;
       }
       if ((label|0) == 13) {
        label = 0;
        $51 = $b1;
        $52 = (($51) + 16|0);
        $b1 = $52;
       }
       else if ((label|0) == 18) {
        label = 0;
       }
       $66 = $flag;
       $67 = ($66|0)!=(0);
       if ($67) {
        label = 23;
       } else {
        $68 = $2;
        $69 = ($68|0)==(0);
        if ($69) {
         label = 23;
        }
       }
       if ((label|0) == 23) {
        label = 0;
        $foundp = 1;
        $70 = $len1;
        $71 = $p1;
        $72 = $b1;
        $73 = $71;
        $74 = $72;
        $75 = (($73) - ($74))|0;
        $76 = (($75|0) / 16)&-1;
        $77 = ($70|0)>($76|0);
        if ($77) {
         $78 = $len1;
         $85 = $78;
        } else {
         $79 = $p1;
         $80 = $b1;
         $81 = $79;
         $82 = $80;
         $83 = (($81) - ($82))|0;
         $84 = (($83|0) / 16)&-1;
         $85 = $84;
        }
        $len1 = $85;
       }
      }
     }
    }
   }
   $86 = $p1;
   $87 = (($86) + 32|0);
   $p1 = $87;
  }
  $found2 = 0;
  $88 = $p1;
  $89 = (($88) + 32|0);
  $p2 = $89;
  while(1) {
   $90 = $p2;
   $91 = $ep;
   $92 = ($90>>>0)>=($91>>>0);
   if ($92) {
    break;
   }
   $93 = $p2;
   $94 = (($93) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==(8);
   if ($96) {
    $97 = $p2;
    $98 = (($97) + 16|0);
    $99 = (($98) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $p2;
    $102 = (($101) + 4|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($100|0)==($103|0);
    if ($104) {
     $105 = $p2;
     $106 = (($105) + 16|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==(0);
     if ($108) {
      $109 = $p2;
      $110 = (($109) + 16|0);
      $111 = (($110) + 8|0);
      $112 = +HEAPF64[$111>>3];
      $113 = $1;
      $114 = $112 == $113;
      if ($114) {
       $flag = 0;
       $115 = $p2;
       $116 = (($115) + -16|0);
       $b1 = $116;
       while(1) {
        $117 = $b1;
        $118 = (($117) + 4|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = $p2;
        $121 = (($120) + 4|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = ($119|0)<($122|0);
        if ($123) {
         label = 39;
         break;
        }
        $126 = $b1;
        $127 = HEAP32[$126>>2]|0;
        $128 = ($127|0)==(1);
        if ($128) {
         $129 = $b1;
         $130 = (($129) + 8|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = $2;
         $133 = ($131|0)==($132|0);
         if ($133) {
          $flag = 1;
         }
        }
        $134 = $b1;
        $135 = HEAP32[3680>>2]|0;
        $136 = ($134|0)==($135|0);
        if ($136) {
         label = 44;
         break;
        }
        $137 = $b1;
        $138 = (($137) + -16|0);
        $b1 = $138;
       }
       if ((label|0) == 39) {
        label = 0;
        $124 = $b1;
        $125 = (($124) + 16|0);
        $b1 = $125;
       }
       else if ((label|0) == 44) {
        label = 0;
       }
       $139 = $flag;
       $140 = ($139|0)!=(0);
       if ($140) {
        label = 49;
       } else {
        $141 = $2;
        $142 = ($141|0)==(0);
        if ($142) {
         label = 49;
        }
       }
       if ((label|0) == 49) {
        label = 0;
        $found2 = 1;
        $143 = $len2;
        $144 = $p2;
        $145 = $b1;
        $146 = $144;
        $147 = $145;
        $148 = (($146) - ($147))|0;
        $149 = (($148|0) / 16)&-1;
        $150 = ($143|0)>($149|0);
        if ($150) {
         $151 = $len2;
         $158 = $151;
        } else {
         $152 = $p2;
         $153 = $b1;
         $154 = $152;
         $155 = $153;
         $156 = (($154) - ($155))|0;
         $157 = (($156|0) / 16)&-1;
         $158 = $157;
        }
        $len2 = $158;
       }
      }
     }
    }
   }
   $159 = $p2;
   $160 = (($159) + 32|0);
   $p2 = $160;
  }
  $161 = $foundp;
  $162 = ($161|0)!=(0);
  if ($162) {
   $163 = $found2;
   $164 = ($163|0)!=(0);
   if ($164) {
    $165 = $len2;
    $166 = $len1;
    $167 = ($165|0)>($166|0);
    if ($167) {
     $foundp = 0;
    }
   }
  }
  $168 = $p1;
  $169 = (($168) + 16|0);
  $b1 = $169;
  $170 = $p1;
  $171 = (($170) + 8|0);
  $172 = HEAP32[$171>>2]|0;
  $op = $172;
  $173 = $op;
  $174 = ($173|0)==(8);
  if ($174) {
   $175 = $b1;
   $176 = (($175) + 4|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ($177|0)==(1);
   if ($178) {
    $179 = $b1;
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)==(0);
    if ($181) {
     $182 = $b1;
     $183 = (($182) + 8|0);
     $184 = +HEAPF64[$183>>3];
     $185 = $1;
     $186 = $184 == $185;
     if ($186) {
      label = 65;
      break;
     }
    }
   }
  }
  $191 = $foundp;
  $192 = ($191|0)!=(0);
  do {
   if ($192) {
    label = 79;
   } else {
    $193 = HEAP32[3680>>2]|0;
    $b1 = $193;
    $194 = $p1;
    $195 = $b1;
    $196 = $194;
    $197 = $195;
    $198 = (($196) - ($197))|0;
    $199 = (($198|0) / 16)&-1;
    $200 = ($199|0)==(1);
    if ($200) {
     $201 = $p1;
     $202 = (($201) + 8|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(5);
     if ($204) {
      $205 = $b1;
      $206 = HEAP32[$205>>2]|0;
      $207 = ($206|0)==(0);
      if ($207) {
       $208 = $b1;
       $209 = (($208) + 8|0);
       $210 = +HEAPF64[$209>>3];
       $211 = $210 == 1.0;
       if ($211) {
        $212 = HEAP32[3680>>2]|0;
        $213 = HEAP32[3688>>2]|0;
        $214 = (_flip($212,3712,$213,3720)|0);
        $215 = ($214|0)!=(0);
        if (!($215)) {
         label = 72;
         break L1;
        }
        break;
       }
      }
     }
    }
    $216 = $p1;
    $217 = (($216) + 8|0);
    $218 = HEAP32[$217>>2]|0;
    if ((($218|0) == 5) | (($218|0) == 4)) {
     $op = 4;
    } else if ((($218|0) == 2) | (($218|0) == 1)) {
     $op = 1;
    } else {
     $219 = $p1;
     $220 = (($219) + 8|0);
     $221 = HEAP32[$220>>2]|0;
     $op = $221;
    }
    label = 79;
   }
  } while(0);
  if ((label|0) == 79) {
   label = 0;
   $222 = $op;
   $223 = $b1;
   $224 = HEAP32[3680>>2]|0;
   $225 = HEAP32[3688>>2]|0;
   $226 = (_g_of_f($222,$223,$224,3712,$225,3720)|0);
   $227 = ($226|0)!=(0);
   if (!($227)) {
    label = 80;
    break;
   }
  }
  $228 = HEAP32[3680>>2]|0;
  (_simp_loop($228,3712)|0);
  $229 = HEAP32[3688>>2]|0;
  (_simp_loop($229,3720)|0);
 }
 if ((label|0) == 4) {
  $0 = 2;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 else if ((label|0) == 65) {
  $187 = $b1;
  $188 = HEAP32[3680>>2]|0;
  $189 = HEAP32[3688>>2]|0;
  $190 = (_g_of_f(8,$187,$188,3712,$189,3720)|0);
  $0 = $190;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 else if ((label|0) == 72) {
  $0 = 0;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 else if ((label|0) == 80) {
  $0 = 0;
  $230 = $0;
  STACKTOP = sp;return ($230|0);
 }
 return 0|0;
}
function _g_of_f($op,$operandp,$side1p,$side1np,$side2p,$side2np) {
 $op = $op|0;
 $operandp = $operandp|0;
 $side1p = $side1p|0;
 $side1np = $side1np|0;
 $side2p = $side2p|0;
 $side2np = $side2np|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c1$byval_copy = 0, $c2 = 0, $c2$byval_copy = 0, $d1 = 0, $d2 = 0, $denominator = 0, $ep = 0, $numerator = 0, $oldn = 0, $operandn = 0;
 var $p1 = 0, $p2 = 0, $var_name_buf = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 168|0;
 $$byval_copy = sp + 152|0;
 $c2$byval_copy = sp + 136|0;
 $c1$byval_copy = sp + 120|0;
 $vararg_buffer = sp + 112|0;
 $numerator = sp + 104|0;
 $denominator = sp + 96|0;
 $d1 = sp + 88|0;
 $d2 = sp + 80|0;
 $c1 = sp + 64|0;
 $c2 = sp + 48|0;
 $var_name_buf = sp + 232|0;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $9 = sp;
 $1 = $op;
 $2 = $operandp;
 $3 = $side1p;
 $4 = $side1np;
 $5 = $side2p;
 $6 = $side2np;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $oldn = $11;
 $12 = $oldn;
 $13 = $3;
 $14 = (($13) + ($12<<4)|0);
 $ep = $14;
 $15 = $2;
 $16 = $3;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  label = 3;
 } else {
  $18 = $2;
  $19 = $ep;
  $20 = ($18>>>0)>=($19>>>0);
  if ($20) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _error_bug(43160);
 }
 $21 = $4;
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[42944>>2]|0;
 $24 = ($22|0)==($23|0);
 do {
  if ($24) {
   $25 = $6;
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[42952>>2]|0;
   $28 = ($26|0)==($27|0);
   if ($28) {
    $29 = HEAP32[42936>>2]|0;
    $30 = (($29) + 1)|0;
    HEAP32[42936>>2] = $30;
    $31 = ($30|0)>=(4);
    if (!($31)) {
     break;
    }
    $0 = 0;
    $466 = $0;
    STACKTOP = sp;return ($466|0);
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $32 = $4;
  $33 = HEAP32[$32>>2]|0;
  HEAP32[42944>>2] = $33;
  $34 = $6;
  $35 = HEAP32[$34>>2]|0;
  HEAP32[42952>>2] = $35;
  HEAP32[42936>>2] = 0;
 }
 $36 = $1;
 switch ($36|0) {
 case 6: case 8: case 5: case 4: case 2: case 1:  {
  break;
 }
 default: {
  $0 = 0;
  $466 = $0;
  STACKTOP = sp;return ($466|0);
 }
 }
 $37 = $2;
 $38 = (($37) + 16|0);
 $p1 = $38;
 L21: while(1) {
  $39 = $p1;
  $40 = $ep;
  $41 = ($39>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $p1;
  $43 = (($42) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(1);
  do {
   if ($45) {
    $46 = $p1;
    $47 = (($46) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    if ((($48|0) == 9)) {
     $1 = 1;
     break;
    } else if ((($48|0) == 6)) {
     $49 = $p1;
     $50 = (($49) + 16|0);
     $2 = $50;
     break;
    } else {
     label = 19;
     break L21;
    }
   } else {
   }
  } while(0);
  $51 = $p1;
  $52 = (($51) + 32|0);
  $p1 = $52;
 }
 if ((label|0) == 19) {
 }
 $53 = $p1;
 $54 = $2;
 $55 = $53;
 $56 = $54;
 $57 = (($55) - ($56))|0;
 $58 = (($57|0) / 16)&-1;
 $operandn = $58;
 $59 = $1;
 $60 = ($59|0)==(8);
 if ($60) {
  $61 = $2;
  $62 = $3;
  $63 = ($61|0)==($62|0);
  if ($63) {
   $64 = $5;
   $65 = $6;
   $66 = HEAP32[$65>>2]|0;
   $67 = (_parse_complex($64,$66,$c1)|0);
   $68 = ($67|0)!=(0);
   if (!($68)) {
    $0 = 0;
    $466 = $0;
    STACKTOP = sp;return ($466|0);
   }
   $69 = $2;
   $70 = $operandn;
   $71 = (_parse_complex($69,$70,$c2)|0);
   $72 = ($71|0)!=(0);
   if ($72) {
    $73 = (___errno_location()|0);
    HEAP32[$73>>2] = 0;
    ;HEAP32[$c1$byval_copy+0>>2]=HEAP32[$c1+0>>2]|0;HEAP32[$c1$byval_copy+4>>2]=HEAP32[$c1+4>>2]|0;HEAP32[$c1$byval_copy+8>>2]=HEAP32[$c1+8>>2]|0;HEAP32[$c1$byval_copy+12>>2]=HEAP32[$c1+12>>2]|0;
    _complex_log($7,$c1$byval_copy);
    ;HEAP32[$c2$byval_copy+0>>2]=HEAP32[$c2+0>>2]|0;HEAP32[$c2$byval_copy+4>>2]=HEAP32[$c2+4>>2]|0;HEAP32[$c2$byval_copy+8>>2]=HEAP32[$c2+8>>2]|0;HEAP32[$c2$byval_copy+12>>2]=HEAP32[$c2+12>>2]|0;
    _complex_log($8,$c2$byval_copy);
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$7+12>>2]|0;
    ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$8+12>>2]|0;
    _complex_div($9,$$byval_copy,$$byval_copy2);
    ;HEAP32[$c1+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$c1+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$c1+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$c1+12>>2]=HEAP32[$9+12>>2]|0;
    _check_err();
    $74 = $6;
    HEAP32[$74>>2] = 0;
    $75 = $6;
    $76 = HEAP32[$75>>2]|0;
    $77 = $5;
    $78 = (($77) + ($76<<4)|0);
    $79 = (($78) + 4|0);
    HEAP32[$79>>2] = 1;
    $80 = $6;
    $81 = HEAP32[$80>>2]|0;
    $82 = $5;
    $83 = (($82) + ($81<<4)|0);
    HEAP32[$83>>2] = 0;
    $84 = +HEAPF64[$c1>>3];
    $85 = $6;
    $86 = HEAP32[$85>>2]|0;
    $87 = $5;
    $88 = (($87) + ($86<<4)|0);
    $89 = (($88) + 8|0);
    HEAPF64[$89>>3] = $84;
    $90 = $6;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[$90>>2] = $92;
    $93 = $6;
    $94 = HEAP32[$93>>2]|0;
    $95 = $5;
    $96 = (($95) + ($94<<4)|0);
    $97 = (($96) + 4|0);
    HEAP32[$97>>2] = 1;
    $98 = $6;
    $99 = HEAP32[$98>>2]|0;
    $100 = $5;
    $101 = (($100) + ($99<<4)|0);
    HEAP32[$101>>2] = 2;
    $102 = $6;
    $103 = HEAP32[$102>>2]|0;
    $104 = $5;
    $105 = (($104) + ($103<<4)|0);
    $106 = (($105) + 8|0);
    HEAP32[$106>>2] = 1;
    $107 = $6;
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + 1)|0;
    HEAP32[$107>>2] = $109;
    $110 = $6;
    $111 = HEAP32[$110>>2]|0;
    $112 = $5;
    $113 = (($112) + ($111<<4)|0);
    $114 = (($113) + 4|0);
    HEAP32[$114>>2] = 2;
    $115 = $6;
    $116 = HEAP32[$115>>2]|0;
    $117 = $5;
    $118 = (($117) + ($116<<4)|0);
    HEAP32[$118>>2] = 0;
    $119 = (($c1) + 8|0);
    $120 = +HEAPF64[$119>>3];
    $121 = $6;
    $122 = HEAP32[$121>>2]|0;
    $123 = $5;
    $124 = (($123) + ($122<<4)|0);
    $125 = (($124) + 8|0);
    HEAPF64[$125>>3] = $120;
    $126 = $6;
    $127 = HEAP32[$126>>2]|0;
    $128 = (($127) + 1)|0;
    HEAP32[$126>>2] = $128;
    $129 = $6;
    $130 = HEAP32[$129>>2]|0;
    $131 = $5;
    $132 = (($131) + ($130<<4)|0);
    $133 = (($132) + 4|0);
    HEAP32[$133>>2] = 2;
    $134 = $6;
    $135 = HEAP32[$134>>2]|0;
    $136 = $5;
    $137 = (($136) + ($135<<4)|0);
    HEAP32[$137>>2] = 2;
    $138 = $6;
    $139 = HEAP32[$138>>2]|0;
    $140 = $5;
    $141 = (($140) + ($139<<4)|0);
    $142 = (($141) + 8|0);
    HEAP32[$142>>2] = 4;
    $143 = $6;
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + 1)|0;
    HEAP32[$143>>2] = $145;
    $146 = $6;
    $147 = HEAP32[$146>>2]|0;
    $148 = $5;
    $149 = (($148) + ($147<<4)|0);
    $150 = (($149) + 4|0);
    HEAP32[$150>>2] = 2;
    $151 = $6;
    $152 = HEAP32[$151>>2]|0;
    $153 = $5;
    $154 = (($153) + ($152<<4)|0);
    HEAP32[$154>>2] = 1;
    $155 = $6;
    $156 = HEAP32[$155>>2]|0;
    $157 = $5;
    $158 = (($157) + ($156<<4)|0);
    $159 = (($158) + 8|0);
    HEAP32[$159>>2] = 3;
    $160 = $6;
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) + 1)|0;
    HEAP32[$160>>2] = $162;
    $163 = $3;
    $164 = $p1;
    $165 = (($164) + 16|0);
    $166 = $4;
    $167 = HEAP32[$166>>2]|0;
    $168 = $operandn;
    $169 = (($168) + 1)|0;
    $170 = (($167) - ($169))|0;
    $171 = $170<<4;
    _memmove(($163|0),($165|0),($171|0))|0;
    $172 = $operandn;
    $173 = (($172) + 1)|0;
    $174 = $4;
    $175 = HEAP32[$174>>2]|0;
    $176 = (($175) - ($173))|0;
    HEAP32[$174>>2] = $176;
    $0 = 1;
    $466 = $0;
    STACKTOP = sp;return ($466|0);
   } else {
    $0 = 0;
    $466 = $0;
    STACKTOP = sp;return ($466|0);
   }
  }
 }
 $177 = $1;
 $178 = ($177|0)==(6);
 if ($178) {
  $179 = $5;
  $180 = $6;
  $181 = HEAP32[$180>>2]|0;
  $182 = (_get_constant($179,$181,$d1)|0);
  $183 = ($182|0)!=(0);
  do {
   if ($183) {
    $184 = $2;
    $185 = $operandn;
    $186 = (_get_constant($184,$185,$d2)|0);
    $187 = ($186|0)!=(0);
    if ($187) {
     $188 = +HEAPF64[$d1>>3];
     $189 = (+Math_abs((+$188)));
     $190 = +HEAPF64[$d2>>3];
     $191 = (+Math_abs((+$190)));
     $192 = $189 >= $191;
     if (!($192)) {
      break;
     }
     _error(43200);
     $0 = 0;
     $466 = $0;
     STACKTOP = sp;return ($466|0);
    }
   }
  } while(0);
 }
 $193 = $4;
 $194 = HEAP32[$193>>2]|0;
 $195 = $operandn;
 $196 = (($194) + ($195))|0;
 $197 = (($196) + 3)|0;
 $198 = HEAP32[8>>2]|0;
 $199 = ($197|0)>($198|0);
 if ($199) {
  label = 38;
 } else {
  $200 = $6;
  $201 = HEAP32[$200>>2]|0;
  $202 = $operandn;
  $203 = (($201) + ($202))|0;
  $204 = (($203) + 5)|0;
  $205 = HEAP32[8>>2]|0;
  $206 = ($204|0)>($205|0);
  if ($206) {
   label = 38;
  }
 }
 if ((label|0) == 38) {
  _error_huge();
 }
 $207 = $3;
 $208 = $oldn;
 $209 = (_min_level($207,$208)|0);
 $210 = ($209|0)<=(1);
 if ($210) {
  $211 = $3;
  $p2 = $211;
  while(1) {
   $212 = $p2;
   $213 = $ep;
   $214 = ($212>>>0)<($213>>>0);
   if (!($214)) {
    break;
   }
   $215 = $p2;
   $216 = (($215) + 4|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = (($217) + 1)|0;
   HEAP32[$216>>2] = $218;
   $219 = $p2;
   $220 = (($219) + 16|0);
   $p2 = $220;
  }
 }
 $221 = $6;
 $222 = HEAP32[$221>>2]|0;
 $223 = $5;
 $224 = (($223) + ($222<<4)|0);
 $ep = $224;
 $225 = $5;
 $226 = $6;
 $227 = HEAP32[$226>>2]|0;
 $228 = (_min_level($225,$227)|0);
 $229 = ($228|0)<=(1);
 if ($229) {
  $230 = $5;
  $p2 = $230;
  while(1) {
   $231 = $p2;
   $232 = $ep;
   $233 = ($231>>>0)<($232>>>0);
   if (!($233)) {
    break;
   }
   $234 = $p2;
   $235 = (($234) + 4|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = (($236) + 1)|0;
   HEAP32[$235>>2] = $237;
   $238 = $p2;
   $239 = (($238) + 16|0);
   $p2 = $239;
  }
 }
 $240 = $oldn;
 $241 = $3;
 $242 = (($241) + ($240<<4)|0);
 $p2 = $242;
 $243 = $1;
 switch ($243|0) {
 case 4:  {
  $317 = $p2;
  $318 = (($317) + 4|0);
  HEAP32[$318>>2] = 1;
  $319 = $p2;
  HEAP32[$319>>2] = 2;
  $320 = $p2;
  $321 = (($320) + 8|0);
  HEAP32[$321>>2] = 5;
  $322 = $p2;
  $323 = (($322) + 16|0);
  $p2 = $323;
  $324 = $p2;
  $325 = $2;
  $326 = $p1;
  $327 = $2;
  $328 = $326;
  $329 = $327;
  $330 = (($328) - ($329))|0;
  _memmove(($324|0),($325|0),($330|0))|0;
  $331 = $operandn;
  $332 = (1 + ($331))|0;
  $333 = $4;
  $334 = HEAP32[$333>>2]|0;
  $335 = (($334) + ($332))|0;
  HEAP32[$333>>2] = $335;
  break;
 }
 case 5:  {
  $336 = $p2;
  $337 = (($336) + 4|0);
  HEAP32[$337>>2] = 1;
  $338 = $p2;
  HEAP32[$338>>2] = 2;
  $339 = $p2;
  $340 = (($339) + 8|0);
  HEAP32[$340>>2] = 4;
  $341 = $p2;
  $342 = (($341) + 16|0);
  $p2 = $342;
  $343 = $p2;
  $344 = $2;
  $345 = $p1;
  $346 = $2;
  $347 = $345;
  $348 = $346;
  $349 = (($347) - ($348))|0;
  _memmove(($343|0),($344|0),($349|0))|0;
  $350 = $operandn;
  $351 = (1 + ($350))|0;
  $352 = $4;
  $353 = HEAP32[$352>>2]|0;
  $354 = (($353) + ($351))|0;
  HEAP32[$352>>2] = $354;
  break;
 }
 case 1:  {
  $355 = $p2;
  $356 = (($355) + 4|0);
  HEAP32[$356>>2] = 1;
  $357 = $p2;
  HEAP32[$357>>2] = 2;
  $358 = $p2;
  $359 = (($358) + 8|0);
  HEAP32[$359>>2] = 2;
  $360 = $p2;
  $361 = (($360) + 16|0);
  $p2 = $361;
  $362 = $p2;
  $363 = $2;
  $364 = $p1;
  $365 = $2;
  $366 = $364;
  $367 = $365;
  $368 = (($366) - ($367))|0;
  _memmove(($362|0),($363|0),($368|0))|0;
  $369 = $operandn;
  $370 = (1 + ($369))|0;
  $371 = $4;
  $372 = HEAP32[$371>>2]|0;
  $373 = (($372) + ($370))|0;
  HEAP32[$371>>2] = $373;
  break;
 }
 case 2:  {
  $374 = $p2;
  $375 = (($374) + 4|0);
  HEAP32[$375>>2] = 1;
  $376 = $p2;
  HEAP32[$376>>2] = 2;
  $377 = $p2;
  $378 = (($377) + 8|0);
  HEAP32[$378>>2] = 1;
  $379 = $p2;
  $380 = (($379) + 16|0);
  $p2 = $380;
  $381 = $p2;
  $382 = $2;
  $383 = $p1;
  $384 = $2;
  $385 = $383;
  $386 = $384;
  $387 = (($385) - ($386))|0;
  _memmove(($381|0),($382|0),($387|0))|0;
  $388 = $operandn;
  $389 = (1 + ($388))|0;
  $390 = $4;
  $391 = HEAP32[$390>>2]|0;
  $392 = (($391) + ($389))|0;
  HEAP32[$390>>2] = $392;
  break;
 }
 case 8:  {
  $284 = $p2;
  $285 = (($284) + 4|0);
  HEAP32[$285>>2] = 1;
  $286 = $p2;
  HEAP32[$286>>2] = 2;
  $287 = $p2;
  $288 = (($287) + 8|0);
  HEAP32[$288>>2] = 8;
  $289 = $p2;
  $290 = (($289) + 16|0);
  $p2 = $290;
  $291 = $p2;
  $292 = (($291) + 4|0);
  HEAP32[$292>>2] = 2;
  $293 = $p2;
  HEAP32[$293>>2] = 0;
  $294 = $p2;
  $295 = (($294) + 8|0);
  HEAPF64[$295>>3] = 1.0;
  $296 = $p2;
  $297 = (($296) + 16|0);
  $p2 = $297;
  $298 = $p2;
  $299 = (($298) + 4|0);
  HEAP32[$299>>2] = 2;
  $300 = $p2;
  HEAP32[$300>>2] = 2;
  $301 = $p2;
  $302 = (($301) + 8|0);
  HEAP32[$302>>2] = 5;
  $303 = $p2;
  $304 = (($303) + 16|0);
  $p2 = $304;
  $305 = $p2;
  $306 = $2;
  $307 = $p1;
  $308 = $2;
  $309 = $307;
  $310 = $308;
  $311 = (($309) - ($310))|0;
  _memmove(($305|0),($306|0),($311|0))|0;
  $312 = $operandn;
  $313 = (3 + ($312))|0;
  $314 = $4;
  $315 = HEAP32[$314>>2]|0;
  $316 = (($315) + ($313))|0;
  HEAP32[$314>>2] = $316;
  break;
 }
 case 6:  {
  $244 = $p2;
  $245 = (($244) + 4|0);
  HEAP32[$245>>2] = 1;
  $246 = $p2;
  HEAP32[$246>>2] = 2;
  $247 = $p2;
  $248 = (($247) + 8|0);
  HEAP32[$248>>2] = 1;
  $249 = $p2;
  $250 = (($249) + 16|0);
  $p2 = $250;
  $251 = $p2;
  $252 = (($251) + 4|0);
  HEAP32[$252>>2] = 2;
  $253 = $p2;
  HEAP32[$253>>2] = 1;
  $254 = HEAP32[43264>>2]|0;
  HEAP32[$vararg_buffer>>2] = 43256;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $254;
  (_snprintf($var_name_buf,100,43240,$vararg_buffer)|0);
  $255 = $p2;
  $256 = (($255) + 8|0);
  $257 = (_parse_var($256,$var_name_buf)|0);
  $258 = ($257|0)==(0|0);
  if ($258) {
   $0 = 0;
   $466 = $0;
   STACKTOP = sp;return ($466|0);
  }
  $259 = HEAP32[43264>>2]|0;
  $260 = (($259) + 1)|0;
  HEAP32[43264>>2] = $260;
  $261 = HEAP32[43264>>2]|0;
  $262 = ($261|0)<(0);
  if ($262) {
   HEAP32[43264>>2] = 0;
  }
  $263 = $p2;
  $264 = (($263) + 16|0);
  $p2 = $264;
  $265 = $p2;
  $266 = (($265) + 4|0);
  HEAP32[$266>>2] = 2;
  $267 = $p2;
  HEAP32[$267>>2] = 2;
  $268 = $p2;
  $269 = (($268) + 8|0);
  HEAP32[$269>>2] = 4;
  $270 = $p2;
  $271 = (($270) + 16|0);
  $p2 = $271;
  $272 = $p2;
  $273 = $2;
  $274 = $p1;
  $275 = $2;
  $276 = $274;
  $277 = $275;
  $278 = (($276) - ($277))|0;
  _memmove(($272|0),($273|0),($278|0))|0;
  $279 = $operandn;
  $280 = (3 + ($279))|0;
  $281 = $4;
  $282 = HEAP32[$281>>2]|0;
  $283 = (($282) + ($280))|0;
  HEAP32[$281>>2] = $283;
  break;
 }
 default: {
 }
 }
 $393 = $6;
 $394 = HEAP32[$393>>2]|0;
 $395 = $5;
 $396 = (($395) + ($394<<4)|0);
 $397 = $oldn;
 $398 = $3;
 $399 = (($398) + ($397<<4)|0);
 $400 = $4;
 $401 = HEAP32[$400>>2]|0;
 $402 = $oldn;
 $403 = (($401) - ($402))|0;
 $404 = $403<<4;
 _memmove(($396|0),($399|0),($404|0))|0;
 $405 = $4;
 $406 = HEAP32[$405>>2]|0;
 $407 = $oldn;
 $408 = (($406) - ($407))|0;
 $409 = $6;
 $410 = HEAP32[$409>>2]|0;
 $411 = (($410) + ($408))|0;
 HEAP32[$409>>2] = $411;
 $412 = $1;
 $413 = ($412|0)==(8);
 if ($413) {
  $414 = $operandn;
  $415 = ($414|0)==(1);
  if ($415) {
   $416 = $2;
   $417 = HEAP32[$416>>2]|0;
   $418 = ($417|0)==(0);
   if ($418) {
    $419 = $2;
    $420 = (($419) + 8|0);
    $421 = +HEAPF64[$420>>3];
    (_f_to_fraction($421,$numerator,$denominator)|0);
    $422 = +HEAPF64[$numerator>>3];
    $423 = (+_fmod((+$422),2.0));
    $424 = $423 == 0.0;
    if ($424) {
     $425 = $6;
     $426 = HEAP32[$425>>2]|0;
     $427 = $5;
     $428 = (($427) + ($426<<4)|0);
     $ep = $428;
     $429 = $5;
     $p2 = $429;
     while(1) {
      $430 = $p2;
      $431 = $ep;
      $432 = ($430>>>0)<($431>>>0);
      if (!($432)) {
       break;
      }
      $433 = $p2;
      $434 = (($433) + 4|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = (($435) + 1)|0;
      HEAP32[$434>>2] = $436;
      $437 = $p2;
      $438 = (($437) + 16|0);
      $p2 = $438;
     }
     $439 = $p2;
     $440 = (($439) + 4|0);
     HEAP32[$440>>2] = 1;
     $441 = $p2;
     HEAP32[$441>>2] = 2;
     $442 = $p2;
     $443 = (($442) + 8|0);
     HEAP32[$443>>2] = 4;
     $444 = $p2;
     $445 = (($444) + 16|0);
     $p2 = $445;
     $446 = $p2;
     $447 = (($446) + 4|0);
     HEAP32[$447>>2] = 1;
     $448 = $p2;
     HEAP32[$448>>2] = 1;
     $449 = $p2;
     $450 = (($449) + 8|0);
     (_next_sign($450)|0);
     $451 = $6;
     $452 = HEAP32[$451>>2]|0;
     $453 = (($452) + 2)|0;
     HEAP32[$451>>2] = $453;
    }
   }
  }
 }
 $454 = $1;
 $455 = ($454|0)==(8);
 if ($455) {
  label = 74;
 } else {
  $456 = $1;
  $457 = ($456|0)==(6);
  if ($457) {
   label = 74;
  }
 }
 if ((label|0) == 74) {
  $458 = $2;
  $459 = (($458) + -16|0);
  $460 = $3;
  $461 = $459;
  $462 = $460;
  $463 = (($461) - ($462))|0;
  $464 = (($463|0) / 16)&-1;
  $465 = $4;
  HEAP32[$465>>2] = $464;
 }
 $0 = 1;
 $466 = $0;
 STACKTOP = sp;return ($466|0);
}
function _flip($side1p,$side1np,$side2p,$side2np) {
 $side1p = $side1p|0;
 $side1np = $side1np|0;
 $side2p = $side2p|0;
 $side2np = $side2np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $ep = 0, $p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $side1p;
 $1 = $side1np;
 $2 = $side2p;
 $3 = $side2np;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 2)|0;
 $7 = HEAP32[8>>2]|0;
 $8 = ($6|0)>($7|0);
 if ($8) {
  label = 3;
 } else {
  $9 = $3;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 2)|0;
  $12 = HEAP32[8>>2]|0;
  $13 = ($11|0)>($12|0);
  if ($13) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _error_huge();
 }
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (($16) + ($15<<4)|0);
 $ep = $17;
 $18 = $0;
 $p1 = $18;
 while(1) {
  $19 = $p1;
  $20 = $ep;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $p1;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$23>>2] = $25;
  $26 = $p1;
  $27 = (($26) + 16|0);
  $p1 = $27;
 }
 $28 = $3;
 $29 = HEAP32[$28>>2]|0;
 $30 = $2;
 $31 = (($30) + ($29<<4)|0);
 $ep = $31;
 $32 = $2;
 $p1 = $32;
 while(1) {
  $33 = $p1;
  $34 = $ep;
  $35 = ($33>>>0)<($34>>>0);
  if (!($35)) {
   break;
  }
  $36 = $p1;
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$37>>2] = $39;
  $40 = $p1;
  $41 = (($40) + 16|0);
  $p1 = $41;
 }
 $42 = $0;
 $43 = (($42) + 32|0);
 $44 = $0;
 $45 = $1;
 $46 = HEAP32[$45>>2]|0;
 $47 = $46<<4;
 _memmove(($43|0),($44|0),($47|0))|0;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 2)|0;
 HEAP32[$48>>2] = $50;
 $51 = $2;
 $52 = (($51) + 32|0);
 $53 = $2;
 $54 = $3;
 $55 = HEAP32[$54>>2]|0;
 $56 = $55<<4;
 _memmove(($52|0),($53|0),($56|0))|0;
 $57 = $3;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + 2)|0;
 HEAP32[$57>>2] = $59;
 $60 = $0;
 ;HEAP32[$60+0>>2]=HEAP32[3752+0>>2]|0;HEAP32[$60+4>>2]=HEAP32[3752+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[3752+8>>2]|0;HEAP32[$60+12>>2]=HEAP32[3752+12>>2]|0;
 $61 = $0;
 $62 = (($61) + 16|0);
 $0 = $62;
 $63 = $0;
 $64 = (($63) + 4|0);
 HEAP32[$64>>2] = 1;
 $65 = $0;
 HEAP32[$65>>2] = 2;
 $66 = $0;
 $67 = (($66) + 8|0);
 HEAP32[$67>>2] = 5;
 $68 = $2;
 ;HEAP32[$68+0>>2]=HEAP32[3752+0>>2]|0;HEAP32[$68+4>>2]=HEAP32[3752+4>>2]|0;HEAP32[$68+8>>2]=HEAP32[3752+8>>2]|0;HEAP32[$68+12>>2]=HEAP32[3752+12>>2]|0;
 $69 = $2;
 $70 = (($69) + 16|0);
 $2 = $70;
 $71 = $2;
 $72 = (($71) + 4|0);
 HEAP32[$72>>2] = 1;
 $73 = $2;
 HEAP32[$73>>2] = 2;
 $74 = $2;
 $75 = (($74) + 8|0);
 HEAP32[$75>>2] = 5;
 STACKTOP = sp;return 1;
}
function _poly_solve($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1p = 0;
 var $a1tp = 0, $a2ep = 0, $a2p = 0, $alen = 0, $aloc = 0, $b1p = 0, $b2ep = 0, $b2p = 0, $blen = 0, $diff_sign = 0, $ep = 0, $found = 0, $high_power = 0.0, $i = 0, $j = 0, $k = 0, $len = 0, $nx1 = 0, $op = 0, $op2 = 0;
 var $opx1 = 0, $opx2 = 0, $p1 = 0, $p2 = 0, $x1_storage = 0, $x1p = 0, $x1tp = 0, $x2p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1728|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x1_storage = sp + 8|0;
 $diff_sign = sp + 1628|0;
 $1 = $v;
 $x1p = 0;
 $a1p = 0;
 $a2p = 0;
 $a2ep = 0;
 $high_power = 0.0;
 $2 = HEAP32[3688>>2]|0;
 _uf_simp($2,3720);
 while(1) {
  $3 = HEAP32[3688>>2]|0;
  $4 = $1;
  $5 = (_factor_plus($3,3720,$4,0.0)|0);
  $6 = ($5|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[3688>>2]|0;
  (_simp_loop($7,3720)|0);
 }
 $found = 0;
 $op = 0;
 $8 = HEAP32[3720>>2]|0;
 $9 = HEAP32[3688>>2]|0;
 $10 = (($9) + ($8<<4)|0);
 $ep = $10;
 $11 = HEAP32[3688>>2]|0;
 $p1 = $11;
 $x1tp = $11;
 while(1) {
  $12 = $p1;
  $13 = $ep;
  $14 = ($12>>>0)>=($13>>>0);
  if ($14) {
   label = 8;
  } else {
   $15 = $p1;
   $16 = (($15) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(1);
   if ($18) {
    $19 = $p1;
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(2);
    if ($21) {
     label = 8;
    }
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $22 = $p1;
   $23 = $ep;
   $24 = ($22>>>0)<($23>>>0);
   if ($24) {
    $25 = $p1;
    $26 = (($25) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    if (!((($27|0) == 2) | (($27|0) == 1))) {
     label = 11;
     break;
    }
   }
   $28 = $op;
   $29 = ($28|0)==(4);
   if ($29) {
    label = 15;
   } else {
    $30 = $op;
    $31 = ($30|0)==(5);
    if ($31) {
     label = 15;
    } else {
     $99 = $op;
     $100 = ($99|0)==(8);
     if ($100) {
      $101 = $found;
      $102 = ($101|0)!=(0);
      if ($102) {
       $103 = $p1;
       $104 = (($103) + -16|0);
       $105 = (($104) + 4|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ($106|0)==(2);
       if ($107) {
        $108 = $p1;
        $109 = (($108) + -16|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = ($110|0)==(0);
        if ($111) {
         $112 = $p1;
         $113 = (($112) + -16|0);
         $114 = (($113) + 8|0);
         $115 = +HEAPF64[$114>>3];
         $116 = $high_power;
         $117 = $115 > $116;
         if ($117) {
          $118 = $p1;
          $119 = (($118) + -16|0);
          $120 = (($119) + 8|0);
          $121 = +HEAPF64[$120>>3];
          $high_power = $121;
          $122 = $x1tp;
          $x1p = $122;
          $a1p = $122;
          $123 = $p1;
          $a2p = $123;
          $124 = $a2p;
          $a2ep = $124;
         }
        }
       }
      }
     }
    }
   }
   if ((label|0) == 15) {
    label = 0;
    $found = 0;
    $op2 = 0;
    $32 = $x1tp;
    $p2 = $32;
    $a1tp = $32;
    while(1) {
     $33 = $p2;
     $34 = $p1;
     $35 = ($33>>>0)>=($34>>>0);
     if ($35) {
      break;
     }
     $36 = $p2;
     $37 = (($36) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==(2);
     if ($39) {
      $40 = $p2;
      $41 = HEAP32[$40>>2]|0;
      $42 = ($41|0)==(2);
      if ($42) {
       $43 = $p2;
       $44 = (($43) + 16|0);
       $x1tp = $44;
       $45 = $p2;
       $46 = (($45) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $op2 = $47;
       $found = 0;
      }
     } else {
      $48 = $p2;
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(2);
      if ($50) {
       $51 = $p2;
       $52 = (($51) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)==(3);
       if ($54) {
        $55 = $p2;
        $56 = (($55) + 8|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==(8);
        if ($58) {
         $59 = $found;
         $60 = ($59|0)!=(0);
         do {
          if ($60) {
           $61 = $op2;
           $62 = ($61|0)==(4);
           if (!($62)) {
            $63 = $op2;
            $64 = ($63|0)==(0);
            if (!($64)) {
             break;
            }
           }
           $65 = $p2;
           $66 = (($65) + 16|0);
           $67 = (($66) + 4|0);
           $68 = HEAP32[$67>>2]|0;
           $69 = ($68|0)==(3);
           if ($69) {
            $70 = $p2;
            $71 = (($70) + 16|0);
            $72 = HEAP32[$71>>2]|0;
            $73 = ($72|0)==(0);
            if ($73) {
             $74 = $p2;
             $75 = (($74) + 16|0);
             $76 = (($75) + 8|0);
             $77 = +HEAPF64[$76>>3];
             $78 = $high_power;
             $79 = $77 > $78;
             if (!($79)) {
              break;
             }
             $80 = $p2;
             $81 = (($80) + 16|0);
             $82 = (($81) + 8|0);
             $83 = +HEAPF64[$82>>3];
             $high_power = $83;
             $84 = $x1tp;
             $x1p = $84;
             $85 = $a1tp;
             $a1p = $85;
             $86 = $p2;
             $87 = (($86) + 32|0);
             $a2p = $87;
             $88 = $p1;
             $a2ep = $88;
            }
           }
          }
         } while(0);
        }
       }
      } else {
       $89 = $p2;
       $90 = HEAP32[$89>>2]|0;
       $91 = ($90|0)==(1);
       if ($91) {
        $92 = $p2;
        $93 = (($92) + 8|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = $1;
        $96 = ($94|0)==($95|0);
        if ($96) {
         $found = 1;
        }
       }
      }
     }
     $97 = $p2;
     $98 = (($97) + 16|0);
     $p2 = $98;
    }
   }
   $125 = $p1;
   $126 = $ep;
   $127 = ($125>>>0)>=($126>>>0);
   if ($127) {
    break;
   }
  }
  $128 = $p1;
  $129 = (($128) + 4|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($130|0)==(1);
  if ($131) {
   $132 = $p1;
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)==(2);
   if ($134) {
    $op = 0;
    $135 = $p1;
    $136 = (($135) + 16|0);
    $x1tp = $136;
    $found = 0;
   }
  } else {
   $137 = $p1;
   $138 = HEAP32[$137>>2]|0;
   $139 = ($138|0)==(2);
   if ($139) {
    $140 = $p1;
    $141 = (($140) + 4|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)==(2);
    if ($143) {
     $144 = $p1;
     $145 = (($144) + 8|0);
     $146 = HEAP32[$145>>2]|0;
     $op = $146;
    }
   } else {
    $147 = $op;
    $148 = ($147|0)==(0);
    if ($148) {
     $149 = $p1;
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==(1);
     if ($151) {
      $152 = $p1;
      $153 = (($152) + 8|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = $1;
      $156 = ($154|0)==($155|0);
      if ($156) {
       $found = 1;
      }
     }
    }
   }
  }
  $157 = $p1;
  $158 = (($157) + 16|0);
  $p1 = $158;
 }
 if ((label|0) == 11) {
  $0 = 0;
  $758 = $0;
  STACKTOP = sp;return ($758|0);
 }
 $159 = $high_power;
 $160 = $159 == 0.0;
 if ($160) {
  $0 = 0;
  $758 = $0;
  STACKTOP = sp;return ($758|0);
 }
 $161 = $a1p;
 $162 = HEAP32[3688>>2]|0;
 $163 = ($161>>>0)>($162>>>0);
 if ($163) {
  $164 = $a1p;
  $165 = (($164) + -16|0);
  $166 = (($165) + 8|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)==(2);
  if ($168) {
   $opx1 = 2;
  } else {
   label = 73;
  }
 } else {
  label = 73;
 }
 if ((label|0) == 73) {
  $opx1 = 1;
 }
 $169 = $high_power;
 $170 = $169 == 2.0;
 do {
  if ($170) {
   $171 = $a2p;
   $172 = $x1p;
   $173 = $171;
   $174 = $172;
   $175 = (($173) - ($174))|0;
   $176 = (($175|0) / 16)&-1;
   $177 = (($176) - 2)|0;
   $nx1 = $177;
   $178 = $nx1;
   $179 = ($178|0)>(100);
   if (!($179)) {
    $180 = $x1p;
    $181 = $nx1;
    $182 = $181<<4;
    _memmove(($x1_storage|0),($180|0),($182|0))|0;
    break;
   }
   $0 = 0;
   $758 = $0;
   STACKTOP = sp;return ($758|0);
  } else {
   $183 = $a2p;
   $184 = $x1p;
   $185 = $183;
   $186 = $184;
   $187 = (($185) - ($186))|0;
   $188 = (($187|0) / 16)&-1;
   $nx1 = $188;
   $189 = $nx1;
   $190 = ($189|0)>(100);
   if (!($190)) {
    $191 = $x1p;
    $192 = $nx1;
    $193 = $192<<4;
    _memmove(($x1_storage|0),($191|0),($193|0))|0;
    $194 = $nx1;
    $195 = (($194) - 1)|0;
    $196 = (($x1_storage) + ($195<<4)|0);
    $197 = (($196) + 8|0);
    $198 = +HEAPF64[$197>>3];
    $199 = $198 / 2.0;
    HEAPF64[$197>>3] = $199;
    break;
   }
   $0 = 0;
   $758 = $0;
   STACKTOP = sp;return ($758|0);
  }
 } while(0);
 $opx2 = 0;
 $op = 0;
 $200 = HEAP32[3688>>2]|0;
 $p1 = $200;
 $x2p = $200;
 L113: while(1) {
  $201 = $p1;
  $202 = $ep;
  $203 = ($201>>>0)>=($202>>>0);
  if ($203) {
   label = 85;
  } else {
   $204 = $p1;
   $205 = (($204) + 4|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($206|0)==(1);
   if ($207) {
    $208 = $p1;
    $209 = HEAP32[$208>>2]|0;
    $210 = ($209|0)==(2);
    if ($210) {
     label = 85;
    }
   }
  }
  if ((label|0) == 85) {
   label = 0;
   $211 = $nx1;
   $212 = $x2p;
   $213 = $p1;
   $214 = $x2p;
   $215 = $213;
   $216 = $214;
   $217 = (($215) - ($216))|0;
   $218 = (($217|0) / 16)&-1;
   $219 = (_se_compare($x1_storage,$211,$212,$218,$diff_sign)|0);
   $220 = ($219|0)!=(0);
   if ($220) {
    label = 86;
    break;
   }
   $224 = $op;
   $225 = ($224|0)==(4);
   if ($225) {
    label = 89;
   } else {
    $226 = $op;
    $227 = ($226|0)==(5);
    if ($227) {
     label = 89;
    }
   }
   if ((label|0) == 89) {
    label = 0;
    $op2 = 0;
    $228 = $x2p;
    $p2 = $228;
    $b1p = $228;
    while(1) {
     $229 = $p2;
     $230 = $p1;
     $231 = ($229>>>0)>=($230>>>0);
     if ($231) {
      label = 93;
     } else {
      $232 = $p2;
      $233 = (($232) + 4|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ($234|0)==(2);
      if ($235) {
       $236 = $p2;
       $237 = HEAP32[$236>>2]|0;
       $238 = ($237|0)==(2);
       if ($238) {
        label = 93;
       }
      }
     }
     if ((label|0) == 93) {
      label = 0;
      $239 = $op2;
      $240 = ($239|0)==(0);
      if ($240) {
       label = 95;
      } else {
       $241 = $op2;
       $242 = ($241|0)==(4);
       if ($242) {
        label = 95;
       }
      }
      if ((label|0) == 95) {
       label = 0;
       $243 = $nx1;
       $244 = $x2p;
       $245 = $p2;
       $246 = $x2p;
       $247 = $245;
       $248 = $246;
       $249 = (($247) - ($248))|0;
       $250 = (($249|0) / 16)&-1;
       $251 = (_se_compare($x1_storage,$243,$244,$250,$diff_sign)|0);
       $252 = ($251|0)!=(0);
       if ($252) {
        label = 96;
        break L113;
       }
      }
      $255 = $p2;
      $256 = $p1;
      $257 = ($255>>>0)>=($256>>>0);
      if ($257) {
       break;
      }
     }
     $258 = $p2;
     $259 = (($258) + 4|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = ($260|0)==(2);
     if ($261) {
      $262 = $p2;
      $263 = HEAP32[$262>>2]|0;
      $264 = ($263|0)==(2);
      if ($264) {
       $265 = $p2;
       $266 = (($265) + 16|0);
       $x2p = $266;
       $267 = $p2;
       $268 = (($267) + 8|0);
       $269 = HEAP32[$268>>2]|0;
       $op2 = $269;
      }
     }
     $270 = $p2;
     $271 = (($270) + 16|0);
     $p2 = $271;
    }
   }
   $272 = $p1;
   $273 = $ep;
   $274 = ($272>>>0)>=($273>>>0);
   if ($274) {
    label = 108;
    break;
   }
  }
  $275 = $p1;
  $276 = (($275) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ($277|0)==(1);
  if ($278) {
   $279 = $p1;
   $280 = HEAP32[$279>>2]|0;
   $281 = ($280|0)==(2);
   if ($281) {
    $op = 0;
    $282 = $p1;
    $283 = (($282) + 8|0);
    $284 = HEAP32[$283>>2]|0;
    $opx2 = $284;
    $285 = $p1;
    $286 = (($285) + 16|0);
    $x2p = $286;
   }
  } else {
   $287 = $p1;
   $288 = HEAP32[$287>>2]|0;
   $289 = ($288|0)==(2);
   if ($289) {
    $290 = $p1;
    $291 = (($290) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = ($292|0)==(2);
    if ($293) {
     $294 = $p1;
     $295 = (($294) + 8|0);
     $296 = HEAP32[$295>>2]|0;
     $op = $296;
    }
   }
  }
  $297 = $p1;
  $298 = (($297) + 16|0);
  $p1 = $298;
 }
 if ((label|0) == 86) {
  $221 = $x2p;
  $b1p = $221;
  $222 = $p1;
  $b2p = $222;
  $223 = $b2p;
  $b2ep = $223;
 }
 else if ((label|0) == 96) {
  $253 = $p2;
  $b2p = $253;
  $254 = $p1;
  $b2ep = $254;
 }
 else if ((label|0) == 108) {
  $0 = 0;
  $758 = $0;
  STACKTOP = sp;return ($758|0);
 }
 $299 = $opx2;
 if ((($299|0) == 0)) {
  $opx2 = 1;
  label = 123;
 } else if ((($299|0) == 1)) {
  label = 123;
 } else if ((($299|0) == 2)) {
  $302 = HEAP32[$diff_sign>>2]|0;
  $303 = ($302|0)!=(0);
  if ($303) {
   $opx2 = 1;
  }
 } else {
  $0 = 0;
  $758 = $0;
  STACKTOP = sp;return ($758|0);
 }
 if ((label|0) == 123) {
  $300 = HEAP32[$diff_sign>>2]|0;
  $301 = ($300|0)!=(0);
  if ($301) {
   $opx2 = 2;
  }
 }
 $304 = HEAP32[3704>>2]|0;
 $305 = $b1p;
 $306 = $x2p;
 $307 = $b1p;
 $308 = $306;
 $309 = $307;
 $310 = (($308) - ($309))|0;
 _memmove(($304|0),($305|0),($310|0))|0;
 $311 = $x2p;
 $312 = $b1p;
 $313 = $311;
 $314 = $312;
 $315 = (($313) - ($314))|0;
 $316 = (($315|0) / 16)&-1;
 $len = $316;
 $317 = $len;
 $318 = HEAP32[3704>>2]|0;
 $319 = (($318) + ($317<<4)|0);
 $320 = (($319) + 4|0);
 HEAP32[$320>>2] = 7;
 $321 = $len;
 $322 = HEAP32[3704>>2]|0;
 $323 = (($322) + ($321<<4)|0);
 HEAP32[$323>>2] = 0;
 $324 = $opx2;
 $325 = ($324|0)==(2);
 if ($325) {
  $326 = $len;
  $327 = HEAP32[3704>>2]|0;
  $328 = (($327) + ($326<<4)|0);
  $329 = (($328) + 8|0);
  HEAPF64[$329>>3] = -1.0;
 } else {
  $330 = $len;
  $331 = HEAP32[3704>>2]|0;
  $332 = (($331) + ($330<<4)|0);
  $333 = (($332) + 8|0);
  HEAPF64[$333>>3] = 1.0;
 }
 $334 = $len;
 $335 = (($334) + 1)|0;
 $len = $335;
 $336 = $len;
 $337 = HEAP32[3704>>2]|0;
 $338 = (($337) + ($336<<4)|0);
 $339 = $b2p;
 $340 = $b2ep;
 $341 = $b2p;
 $342 = $340;
 $343 = $341;
 $344 = (($342) - ($343))|0;
 _memmove(($338|0),($339|0),($344|0))|0;
 $345 = $b2ep;
 $346 = $b2p;
 $347 = $345;
 $348 = $346;
 $349 = (($347) - ($348))|0;
 $350 = (($349|0) / 16)&-1;
 $351 = $len;
 $352 = (($351) + ($350))|0;
 $len = $352;
 $353 = $len;
 $blen = $353;
 $354 = HEAP32[3704>>2]|0;
 $355 = $len;
 $356 = (_min_level($354,$355)|0);
 $j = $356;
 $357 = $j;
 $358 = (7 - ($357))|0;
 $j = $358;
 $i = 0;
 while(1) {
  $359 = $i;
  $360 = $len;
  $361 = ($359|0)<($360|0);
  if (!($361)) {
   break;
  }
  $362 = $j;
  $363 = $i;
  $364 = HEAP32[3704>>2]|0;
  $365 = (($364) + ($363<<4)|0);
  $366 = (($365) + 4|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = (($367) + ($362))|0;
  HEAP32[$366>>2] = $368;
  $369 = $i;
  $370 = (($369) + 1)|0;
  $i = $370;
 }
 $371 = $len;
 $372 = HEAP32[3704>>2]|0;
 $373 = (($372) + ($371<<4)|0);
 $374 = (($373) + 4|0);
 HEAP32[$374>>2] = 6;
 $375 = $len;
 $376 = HEAP32[3704>>2]|0;
 $377 = (($376) + ($375<<4)|0);
 HEAP32[$377>>2] = 2;
 $378 = $len;
 $379 = HEAP32[3704>>2]|0;
 $380 = (($379) + ($378<<4)|0);
 $381 = (($380) + 8|0);
 HEAP32[$381>>2] = 8;
 $382 = $len;
 $383 = (($382) + 1)|0;
 $len = $383;
 $384 = $len;
 $385 = HEAP32[3704>>2]|0;
 $386 = (($385) + ($384<<4)|0);
 $387 = (($386) + 4|0);
 HEAP32[$387>>2] = 6;
 $388 = $len;
 $389 = HEAP32[3704>>2]|0;
 $390 = (($389) + ($388<<4)|0);
 HEAP32[$390>>2] = 0;
 $391 = $len;
 $392 = HEAP32[3704>>2]|0;
 $393 = (($392) + ($391<<4)|0);
 $394 = (($393) + 8|0);
 HEAPF64[$394>>3] = 2.0;
 $395 = $len;
 $396 = (($395) + 1)|0;
 $len = $396;
 $397 = $len;
 $398 = HEAP32[3704>>2]|0;
 $399 = (($398) + ($397<<4)|0);
 $400 = (($399) + 4|0);
 HEAP32[$400>>2] = 5;
 $401 = $len;
 $402 = HEAP32[3704>>2]|0;
 $403 = (($402) + ($401<<4)|0);
 HEAP32[$403>>2] = 2;
 $404 = $len;
 $405 = HEAP32[3704>>2]|0;
 $406 = (($405) + ($404<<4)|0);
 $407 = (($406) + 8|0);
 HEAP32[$407>>2] = 2;
 $408 = $len;
 $409 = (($408) + 1)|0;
 $len = $409;
 $410 = $len;
 $411 = HEAP32[3704>>2]|0;
 $412 = (($411) + ($410<<4)|0);
 $413 = (($412) + 4|0);
 HEAP32[$413>>2] = 6;
 $414 = $len;
 $415 = HEAP32[3704>>2]|0;
 $416 = (($415) + ($414<<4)|0);
 HEAP32[$416>>2] = 0;
 $417 = $len;
 $418 = HEAP32[3704>>2]|0;
 $419 = (($418) + ($417<<4)|0);
 $420 = (($419) + 8|0);
 HEAPF64[$420>>3] = 4.0;
 $421 = $len;
 $422 = (($421) + 1)|0;
 $len = $422;
 $423 = $len;
 $424 = HEAP32[3704>>2]|0;
 $425 = (($424) + ($423<<4)|0);
 $426 = (($425) + 4|0);
 HEAP32[$426>>2] = 6;
 $427 = $len;
 $428 = HEAP32[3704>>2]|0;
 $429 = (($428) + ($427<<4)|0);
 HEAP32[$429>>2] = 2;
 $430 = $len;
 $431 = HEAP32[3704>>2]|0;
 $432 = (($431) + ($430<<4)|0);
 $433 = (($432) + 8|0);
 HEAP32[$433>>2] = 4;
 $434 = $len;
 $435 = (($434) + 1)|0;
 $len = $435;
 $436 = $len;
 $aloc = $436;
 $437 = $len;
 $438 = HEAP32[3704>>2]|0;
 $439 = (($438) + ($437<<4)|0);
 $440 = $a1p;
 $441 = $x1p;
 $442 = $a1p;
 $443 = $441;
 $444 = $442;
 $445 = (($443) - ($444))|0;
 _memmove(($439|0),($440|0),($445|0))|0;
 $446 = $x1p;
 $447 = $a1p;
 $448 = $446;
 $449 = $447;
 $450 = (($448) - ($449))|0;
 $451 = (($450|0) / 16)&-1;
 $452 = $len;
 $453 = (($452) + ($451))|0;
 $len = $453;
 $454 = $len;
 $455 = HEAP32[3704>>2]|0;
 $456 = (($455) + ($454<<4)|0);
 $457 = (($456) + 4|0);
 HEAP32[$457>>2] = 7;
 $458 = $len;
 $459 = HEAP32[3704>>2]|0;
 $460 = (($459) + ($458<<4)|0);
 HEAP32[$460>>2] = 0;
 $461 = $opx1;
 $462 = ($461|0)==(2);
 if ($462) {
  $463 = $len;
  $464 = HEAP32[3704>>2]|0;
  $465 = (($464) + ($463<<4)|0);
  $466 = (($465) + 8|0);
  HEAPF64[$466>>3] = -1.0;
 } else {
  $467 = $len;
  $468 = HEAP32[3704>>2]|0;
  $469 = (($468) + ($467<<4)|0);
  $470 = (($469) + 8|0);
  HEAPF64[$470>>3] = 1.0;
 }
 $471 = $len;
 $472 = (($471) + 1)|0;
 $len = $472;
 $473 = $len;
 $474 = HEAP32[3704>>2]|0;
 $475 = (($474) + ($473<<4)|0);
 $476 = $a2p;
 $477 = $a2ep;
 $478 = $a2p;
 $479 = $477;
 $480 = $478;
 $481 = (($479) - ($480))|0;
 _memmove(($475|0),($476|0),($481|0))|0;
 $482 = $a2ep;
 $483 = $a2p;
 $484 = $482;
 $485 = $483;
 $486 = (($484) - ($485))|0;
 $487 = (($486|0) / 16)&-1;
 $488 = $len;
 $489 = (($488) + ($487))|0;
 $len = $489;
 $490 = $len;
 $491 = $aloc;
 $492 = (($490) - ($491))|0;
 $alen = $492;
 $493 = $aloc;
 $494 = HEAP32[3704>>2]|0;
 $495 = (($494) + ($493<<4)|0);
 $496 = $len;
 $497 = $aloc;
 $498 = (($496) - ($497))|0;
 $499 = (_min_level($495,$498)|0);
 $j = $499;
 $500 = $j;
 $501 = (7 - ($500))|0;
 $j = $501;
 $502 = $aloc;
 $i = $502;
 while(1) {
  $503 = $i;
  $504 = $len;
  $505 = ($503|0)<($504|0);
  if (!($505)) {
   break;
  }
  $506 = $j;
  $507 = $i;
  $508 = HEAP32[3704>>2]|0;
  $509 = (($508) + ($507<<4)|0);
  $510 = (($509) + 4|0);
  $511 = HEAP32[$510>>2]|0;
  $512 = (($511) + ($506))|0;
  HEAP32[$510>>2] = $512;
  $513 = $i;
  $514 = (($513) + 1)|0;
  $i = $514;
 }
 $515 = $len;
 $516 = HEAP32[3704>>2]|0;
 $517 = (($516) + ($515<<4)|0);
 $518 = (($517) + 4|0);
 HEAP32[$518>>2] = 6;
 $519 = $len;
 $520 = HEAP32[3704>>2]|0;
 $521 = (($520) + ($519<<4)|0);
 HEAP32[$521>>2] = 2;
 $522 = $len;
 $523 = HEAP32[3704>>2]|0;
 $524 = (($523) + ($522<<4)|0);
 $525 = (($524) + 8|0);
 HEAP32[$525>>2] = 4;
 $526 = $len;
 $527 = (($526) + 1)|0;
 $len = $527;
 $528 = $len;
 $k = $528;
 $529 = $len;
 $530 = HEAP32[3704>>2]|0;
 $531 = (($530) + ($529<<4)|0);
 ;HEAP32[$531+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$531+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$531+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$531+12>>2]=HEAP32[3736+12>>2]|0;
 $532 = $len;
 $533 = (($532) + 1)|0;
 $len = $533;
 $534 = HEAP32[3688>>2]|0;
 $p1 = $534;
 $p2 = $534;
 while(1) {
  $535 = $p1;
  $536 = $ep;
  $537 = ($535>>>0)>=($536>>>0);
  if ($537) {
   label = 148;
  } else {
   $538 = $p1;
   $539 = (($538) + 4|0);
   $540 = HEAP32[$539>>2]|0;
   $541 = ($540|0)==(1);
   if ($541) {
    $542 = $p1;
    $543 = HEAP32[$542>>2]|0;
    $544 = ($543|0)==(2);
    if ($544) {
     label = 148;
    }
   }
  }
  if ((label|0) == 148) {
   label = 0;
   $545 = $p2;
   $546 = $x1p;
   $547 = ($545>>>0)<=($546>>>0);
   if ($547) {
    $548 = $p1;
    $549 = $x1p;
    $550 = ($548>>>0)>($549>>>0);
    if (!($550)) {
     label = 150;
    }
   } else {
    label = 150;
   }
   do {
    if ((label|0) == 150) {
     label = 0;
     $551 = $p2;
     $552 = $x2p;
     $553 = ($551>>>0)<=($552>>>0);
     if ($553) {
      $554 = $p1;
      $555 = $x2p;
      $556 = ($554>>>0)>($555>>>0);
      if ($556) {
       break;
      }
     }
     $557 = $p2;
     $558 = HEAP32[3688>>2]|0;
     $559 = ($557|0)==($558|0);
     if ($559) {
      $560 = $len;
      $561 = HEAP32[3704>>2]|0;
      $562 = (($561) + ($560<<4)|0);
      $563 = (($562) + 4|0);
      HEAP32[$563>>2] = 1;
      $564 = $len;
      $565 = HEAP32[3704>>2]|0;
      $566 = (($565) + ($564<<4)|0);
      HEAP32[$566>>2] = 2;
      $567 = $len;
      $568 = HEAP32[3704>>2]|0;
      $569 = (($568) + ($567<<4)|0);
      $570 = (($569) + 8|0);
      HEAP32[$570>>2] = 1;
      $571 = $len;
      $572 = (($571) + 1)|0;
      $len = $572;
     }
     $573 = $len;
     $574 = HEAP32[3704>>2]|0;
     $575 = (($574) + ($573<<4)|0);
     $576 = $p2;
     $577 = $p1;
     $578 = $p2;
     $579 = $577;
     $580 = $578;
     $581 = (($579) - ($580))|0;
     _memmove(($575|0),($576|0),($581|0))|0;
     $582 = $p1;
     $583 = $p2;
     $584 = $582;
     $585 = $583;
     $586 = (($584) - ($585))|0;
     $587 = (($586|0) / 16)&-1;
     $588 = $len;
     $589 = (($588) + ($587))|0;
     $len = $589;
    }
   } while(0);
   $590 = $p1;
   $591 = $ep;
   $592 = ($590>>>0)>=($591>>>0);
   if ($592) {
    break;
   }
   $593 = $p1;
   $p2 = $593;
  }
  $594 = $p1;
  $595 = (($594) + 16|0);
  $p1 = $595;
 }
 $596 = $k;
 $i = $596;
 while(1) {
  $597 = $i;
  $598 = $len;
  $599 = ($597|0)<($598|0);
  if (!($599)) {
   break;
  }
  $600 = $i;
  $601 = HEAP32[3704>>2]|0;
  $602 = (($601) + ($600<<4)|0);
  $603 = (($602) + 4|0);
  $604 = HEAP32[$603>>2]|0;
  $605 = (($604) + 6)|0;
  HEAP32[$603>>2] = $605;
  $606 = $i;
  $607 = (($606) + 1)|0;
  $i = $607;
 }
 $608 = $len;
 $609 = HEAP32[3704>>2]|0;
 $610 = (($609) + ($608<<4)|0);
 $611 = (($610) + 4|0);
 HEAP32[$611>>2] = 4;
 $612 = $len;
 $613 = HEAP32[3704>>2]|0;
 $614 = (($613) + ($612<<4)|0);
 HEAP32[$614>>2] = 2;
 $615 = $len;
 $616 = HEAP32[3704>>2]|0;
 $617 = (($616) + ($615<<4)|0);
 $618 = (($617) + 8|0);
 HEAP32[$618>>2] = 8;
 $619 = $len;
 $620 = (($619) + 1)|0;
 $len = $620;
 $621 = $len;
 $622 = HEAP32[3704>>2]|0;
 $623 = (($622) + ($621<<4)|0);
 $624 = (($623) + 4|0);
 HEAP32[$624>>2] = 4;
 $625 = $len;
 $626 = HEAP32[3704>>2]|0;
 $627 = (($626) + ($625<<4)|0);
 HEAP32[$627>>2] = 0;
 $628 = $len;
 $629 = HEAP32[3704>>2]|0;
 $630 = (($629) + ($628<<4)|0);
 $631 = (($630) + 8|0);
 HEAPF64[$631>>3] = 0.5;
 $632 = $len;
 $633 = (($632) + 1)|0;
 $len = $633;
 $634 = $len;
 $635 = HEAP32[3704>>2]|0;
 $636 = (($635) + ($634<<4)|0);
 $637 = (($636) + 4|0);
 HEAP32[$637>>2] = 3;
 $638 = $len;
 $639 = HEAP32[3704>>2]|0;
 $640 = (($639) + ($638<<4)|0);
 HEAP32[$640>>2] = 2;
 $641 = $len;
 $642 = HEAP32[3704>>2]|0;
 $643 = (($642) + ($641<<4)|0);
 $644 = (($643) + 8|0);
 HEAP32[$644>>2] = 4;
 $645 = $len;
 $646 = (($645) + 1)|0;
 $len = $646;
 $647 = $len;
 $648 = HEAP32[3704>>2]|0;
 $649 = (($648) + ($647<<4)|0);
 $650 = (($649) + 4|0);
 HEAP32[$650>>2] = 3;
 $651 = $len;
 $652 = HEAP32[3704>>2]|0;
 $653 = (($652) + ($651<<4)|0);
 HEAP32[$653>>2] = 1;
 $654 = $len;
 $655 = HEAP32[3704>>2]|0;
 $656 = (($655) + ($654<<4)|0);
 $657 = (($656) + 8|0);
 (_next_sign($657)|0);
 $658 = $len;
 $659 = (($658) + 1)|0;
 $len = $659;
 $660 = $len;
 $661 = HEAP32[3704>>2]|0;
 $662 = (($661) + ($660<<4)|0);
 $663 = (($662) + 4|0);
 HEAP32[$663>>2] = 2;
 $664 = $len;
 $665 = HEAP32[3704>>2]|0;
 $666 = (($665) + ($664<<4)|0);
 HEAP32[$666>>2] = 2;
 $667 = $len;
 $668 = HEAP32[3704>>2]|0;
 $669 = (($668) + ($667<<4)|0);
 $670 = (($669) + 8|0);
 HEAP32[$670>>2] = 2;
 $671 = $len;
 $672 = (($671) + 1)|0;
 $len = $672;
 $673 = $len;
 $674 = $blen;
 $675 = (($673) + ($674))|0;
 $676 = (($675) + 3)|0;
 $677 = $alen;
 $678 = (($676) + ($677))|0;
 $679 = HEAP32[8>>2]|0;
 $680 = ($678|0)>($679|0);
 if ($680) {
  _error_huge();
 }
 $681 = $len;
 $682 = HEAP32[3704>>2]|0;
 $683 = (($682) + ($681<<4)|0);
 $684 = HEAP32[3704>>2]|0;
 $685 = $blen;
 $686 = $685<<4;
 _memmove(($683|0),($684|0),($686|0))|0;
 $687 = $blen;
 $688 = $len;
 $689 = (($688) + ($687))|0;
 $len = $689;
 $690 = $len;
 $691 = HEAP32[3704>>2]|0;
 $692 = (($691) + ($690<<4)|0);
 $693 = (($692) + 4|0);
 HEAP32[$693>>2] = 1;
 $694 = $len;
 $695 = HEAP32[3704>>2]|0;
 $696 = (($695) + ($694<<4)|0);
 HEAP32[$696>>2] = 2;
 $697 = $len;
 $698 = HEAP32[3704>>2]|0;
 $699 = (($698) + ($697<<4)|0);
 $700 = (($699) + 8|0);
 HEAP32[$700>>2] = 5;
 $701 = $len;
 $702 = (($701) + 1)|0;
 $len = $702;
 $703 = $len;
 $704 = HEAP32[3704>>2]|0;
 $705 = (($704) + ($703<<4)|0);
 $706 = (($705) + 4|0);
 HEAP32[$706>>2] = 2;
 $707 = $len;
 $708 = HEAP32[3704>>2]|0;
 $709 = (($708) + ($707<<4)|0);
 HEAP32[$709>>2] = 0;
 $710 = $len;
 $711 = HEAP32[3704>>2]|0;
 $712 = (($711) + ($710<<4)|0);
 $713 = (($712) + 8|0);
 HEAPF64[$713>>3] = 2.0;
 $714 = $len;
 $715 = (($714) + 1)|0;
 $len = $715;
 $716 = $len;
 $717 = HEAP32[3704>>2]|0;
 $718 = (($717) + ($716<<4)|0);
 $719 = (($718) + 4|0);
 HEAP32[$719>>2] = 2;
 $720 = $len;
 $721 = HEAP32[3704>>2]|0;
 $722 = (($721) + ($720<<4)|0);
 HEAP32[$722>>2] = 2;
 $723 = $len;
 $724 = HEAP32[3704>>2]|0;
 $725 = (($724) + ($723<<4)|0);
 $726 = (($725) + 8|0);
 HEAP32[$726>>2] = 4;
 $727 = $len;
 $728 = (($727) + 1)|0;
 $len = $728;
 $729 = $len;
 $730 = HEAP32[3704>>2]|0;
 $731 = (($730) + ($729<<4)|0);
 $732 = $aloc;
 $733 = HEAP32[3704>>2]|0;
 $734 = (($733) + ($732<<4)|0);
 $735 = $alen;
 $736 = $735<<4;
 _memmove(($731|0),($734|0),($736|0))|0;
 $737 = $alen;
 $738 = $len;
 $739 = (($738) + ($737))|0;
 $len = $739;
 $740 = HEAP32[3704>>2]|0;
 $741 = $len;
 $742 = $1;
 $743 = (_found_var($740,$741,$742)|0);
 $744 = ($743|0)!=(0);
 if ($744) {
  $0 = 0;
  $758 = $0;
  STACKTOP = sp;return ($758|0);
 } else {
  $745 = HEAP32[3680>>2]|0;
  $746 = $nx1;
  $747 = $746<<4;
  _memmove(($745|0),($x1_storage|0),($747|0))|0;
  $748 = $nx1;
  HEAP32[3712>>2] = $748;
  $749 = HEAP32[3680>>2]|0;
  (_simp_loop($749,3712)|0);
  $750 = HEAP32[3688>>2]|0;
  $751 = HEAP32[3704>>2]|0;
  $752 = $len;
  $753 = $752<<4;
  _memmove(($750|0),($751|0),($753|0))|0;
  $754 = $len;
  HEAP32[3720>>2] = $754;
  $755 = HEAP32[3688>>2]|0;
  (_simp_loop($755,3720)|0);
  $756 = HEAP32[3688>>2]|0;
  (_uf_tsimp($756,3720)|0);
  $757 = HEAP32[3688>>2]|0;
  _simps_side($757,3720,0);
  $0 = 1;
  $758 = $0;
  STACKTOP = sp;return ($758|0);
 }
 return 0|0;
}
function _parse($n,$cp) {
 $n = $n|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $cp;
 $3 = $1;
 $4 = $2;
 $5 = (_parse_equation($3,$4)|0);
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $7 = $1;
 $8 = (2080 + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $1;
  $12 = (2880 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $0 = 1;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  }
 }
 $15 = $1;
 $16 = (2080 + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = $1;
  $20 = (2080 + ($19<<2)|0);
  HEAP32[$20>>2] = 1;
  $21 = $1;
  $22 = (480 + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  ;HEAP32[$23+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$23+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[3736+12>>2]|0;
 }
 $24 = $1;
 HEAP32[472>>2] = $24;
 $25 = HEAP32[472>>2]|0;
 $26 = (_return_result($25)|0);
 $0 = $26;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _process_parse($n,$cp) {
 $n = $n|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0.0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0, $53 = 0;
 var $530 = 0.0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $answer_v = 0, $cp1 = 0, $ep = 0, $equals_flag = 0, $i = 0, $op = 0;
 var $previous_repeat_flag = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $answer_v = sp;
 $1 = $n;
 $2 = $cp;
 $equals_flag = 0;
 $op = 0;
 HEAP32[$answer_v>>2] = 0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $653 = $0;
  STACKTOP = sp;return ($653|0);
 }
 $5 = $2;
 $6 = (_strchr($5,61)|0);
 $cp1 = $6;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $2;
   $9 = (_strrchr($8,61)|0);
   $10 = $cp1;
   $11 = ($9|0)==($10|0);
   if ($11) {
    $12 = $2;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (_is_mathomatic_operator($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     $17 = $2;
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = ($19|0)!=(61);
     if ($20) {
      $21 = $2;
      $22 = (($21) + 1|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = $23 << 24 >> 24;
      $25 = (_is_mathomatic_operator($24)|0);
      $26 = ($25|0)!=(0);
      if ($26) {
       $27 = $2;
       $28 = (($27) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29 << 24 >> 24;
       $31 = ($30|0)==(61);
       if ($31) {
        $32 = $2;
        $33 = HEAP8[$32>>0]|0;
        $34 = $33 << 24 >> 24;
        switch ($34|0) {
        case 43:  {
         $op = 1;
         break;
        }
        case 47:  {
         $op = 5;
         break;
        }
        case 42:  {
         $op = 4;
         break;
        }
        case 94:  {
         $op = 8;
         break;
        }
        case 37:  {
         $op = 6;
         break;
        }
        case 45:  {
         $op = 2;
         break;
        }
        default: {
        }
        }
       } else {
        $35 = $2;
        $36 = (($35) + 2|0);
        $37 = HEAP8[$36>>0]|0;
        $38 = $37 << 24 >> 24;
        $39 = ($38|0)==(61);
        if ($39) {
         $40 = $2;
         $41 = HEAP8[$40>>0]|0;
         $42 = $41 << 24 >> 24;
         $43 = ($42|0)==(42);
         if ($43) {
          $44 = $2;
          $45 = (($44) + 1|0);
          $46 = HEAP8[$45>>0]|0;
          $47 = $46 << 24 >> 24;
          $48 = ($47|0)==(42);
          if ($48) {
           $op = 8;
          } else {
           label = 21;
          }
         } else {
          label = 21;
         }
         if ((label|0) == 21) {
          $49 = $2;
          $50 = HEAP8[$49>>0]|0;
          $51 = $50 << 24 >> 24;
          $52 = ($51|0)==(47);
          if ($52) {
           $53 = $2;
           $54 = (($53) + 1|0);
           $55 = HEAP8[$54>>0]|0;
           $56 = $55 << 24 >> 24;
           $57 = ($56|0)==(47);
           if ($57) {
            $op = 7;
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $58 = $op;
   $59 = ($58|0)!=(0);
   if (!($59)) {
    break;
   }
   $60 = HEAP32[472>>2]|0;
   $61 = $1;
   $62 = ($60|0)==($61|0);
   if (!($62)) {
    $63 = HEAP32[472>>2]|0;
    $64 = ($63|0)<(0);
    if (!($64)) {
     $65 = HEAP32[472>>2]|0;
     $66 = HEAP32[464>>2]|0;
     $67 = ($65|0)>=($66|0);
     if (!($67)) {
      $68 = HEAP32[472>>2]|0;
      $69 = (2080 + ($68<<2)|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)<=(0);
      if (!($71)) {
       $72 = $cp1;
       $73 = (($72) + 1|0);
       $74 = $2;
       $75 = $73;
       $76 = $74;
       $77 = (($75) - ($76))|0;
       $78 = HEAP32[41240>>2]|0;
       $79 = (($78) + ($77))|0;
       HEAP32[41240>>2] = $79;
       $80 = $1;
       $81 = $cp1;
       $82 = (($81) + 1|0);
       $83 = (_parse_equation($80,$82)|0);
       $84 = ($83|0)==(0|0);
       if ($84) {
        $0 = 0;
        $653 = $0;
        STACKTOP = sp;return ($653|0);
       }
       $85 = $1;
       $86 = (2080 + ($85<<2)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($87|0)<=(0);
       if (!($88)) {
        $89 = $1;
        $90 = (2880 + ($89<<2)|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ($91|0)!=(0);
        if (!($92)) {
         $97 = HEAP32[472>>2]|0;
         $98 = (2080 + ($97<<2)|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = (($99) + 1)|0;
         $101 = $1;
         $102 = (2080 + ($101<<2)|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = (($100) + ($103))|0;
         $105 = HEAP32[8>>2]|0;
         $106 = ($104|0)>($105|0);
         if ($106) {
          label = 41;
         } else {
          $107 = HEAP32[472>>2]|0;
          $108 = (2880 + ($107<<2)|0);
          $109 = HEAP32[$108>>2]|0;
          $110 = (($109) + 1)|0;
          $111 = $1;
          $112 = (2080 + ($111<<2)|0);
          $113 = HEAP32[$112>>2]|0;
          $114 = (($110) + ($113))|0;
          $115 = HEAP32[8>>2]|0;
          $116 = ($114|0)>($115|0);
          if ($116) {
           label = 41;
          }
         }
         if ((label|0) == 41) {
          $117 = $1;
          $118 = (2080 + ($117<<2)|0);
          HEAP32[$118>>2] = 0;
          $119 = $1;
          $120 = (2880 + ($119<<2)|0);
          HEAP32[$120>>2] = 0;
          _error_huge();
         }
         $i = 0;
         while(1) {
          $121 = $i;
          $122 = HEAP32[472>>2]|0;
          $123 = (2080 + ($122<<2)|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = ($121|0)<($124|0);
          if (!($125)) {
           break;
          }
          $126 = $i;
          $127 = HEAP32[472>>2]|0;
          $128 = (480 + ($127<<2)|0);
          $129 = HEAP32[$128>>2]|0;
          $130 = (($129) + ($126<<4)|0);
          $131 = (($130) + 4|0);
          $132 = HEAP32[$131>>2]|0;
          $133 = (($132) + 1)|0;
          HEAP32[$131>>2] = $133;
          $134 = $i;
          $135 = (($134) + 1)|0;
          $i = $135;
         }
         $136 = $i;
         $137 = HEAP32[472>>2]|0;
         $138 = (480 + ($137<<2)|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($139) + ($136<<4)|0);
         HEAP32[$140>>2] = 2;
         $141 = $i;
         $142 = HEAP32[472>>2]|0;
         $143 = (480 + ($142<<2)|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = (($144) + ($141<<4)|0);
         $146 = (($145) + 4|0);
         HEAP32[$146>>2] = 1;
         $147 = $op;
         $148 = $i;
         $149 = HEAP32[472>>2]|0;
         $150 = (480 + ($149<<2)|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = (($151) + ($148<<4)|0);
         $153 = (($152) + 8|0);
         HEAP32[$153>>2] = $147;
         $154 = $i;
         $155 = (($154) + 1)|0;
         $i = $155;
         $156 = $i;
         $157 = HEAP32[472>>2]|0;
         $158 = (480 + ($157<<2)|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = (($159) + ($156<<4)|0);
         $161 = $1;
         $162 = (480 + ($161<<2)|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = $1;
         $165 = (2080 + ($164<<2)|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = $166<<4;
         _memmove(($160|0),($163|0),($167|0))|0;
         $168 = $1;
         $169 = (2080 + ($168<<2)|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = (1 + ($170))|0;
         $172 = HEAP32[472>>2]|0;
         $173 = (2080 + ($172<<2)|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = (($174) + ($171))|0;
         HEAP32[$173>>2] = $175;
         while(1) {
          $176 = $i;
          $177 = HEAP32[472>>2]|0;
          $178 = (2080 + ($177<<2)|0);
          $179 = HEAP32[$178>>2]|0;
          $180 = ($176|0)<($179|0);
          if (!($180)) {
           break;
          }
          $181 = $i;
          $182 = HEAP32[472>>2]|0;
          $183 = (480 + ($182<<2)|0);
          $184 = HEAP32[$183>>2]|0;
          $185 = (($184) + ($181<<4)|0);
          $186 = (($185) + 4|0);
          $187 = HEAP32[$186>>2]|0;
          $188 = (($187) + 1)|0;
          HEAP32[$186>>2] = $188;
          $189 = $i;
          $190 = (($189) + 1)|0;
          $i = $190;
         }
         $191 = HEAP32[472>>2]|0;
         $192 = (2880 + ($191<<2)|0);
         $193 = HEAP32[$192>>2]|0;
         $194 = ($193|0)>(0);
         if ($194) {
          $i = 0;
          while(1) {
           $195 = $i;
           $196 = HEAP32[472>>2]|0;
           $197 = (2880 + ($196<<2)|0);
           $198 = HEAP32[$197>>2]|0;
           $199 = ($195|0)<($198|0);
           if (!($199)) {
            break;
           }
           $200 = $i;
           $201 = HEAP32[472>>2]|0;
           $202 = (1280 + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($203) + ($200<<4)|0);
           $205 = (($204) + 4|0);
           $206 = HEAP32[$205>>2]|0;
           $207 = (($206) + 1)|0;
           HEAP32[$205>>2] = $207;
           $208 = $i;
           $209 = (($208) + 1)|0;
           $i = $209;
          }
          $210 = $i;
          $211 = HEAP32[472>>2]|0;
          $212 = (1280 + ($211<<2)|0);
          $213 = HEAP32[$212>>2]|0;
          $214 = (($213) + ($210<<4)|0);
          HEAP32[$214>>2] = 2;
          $215 = $i;
          $216 = HEAP32[472>>2]|0;
          $217 = (1280 + ($216<<2)|0);
          $218 = HEAP32[$217>>2]|0;
          $219 = (($218) + ($215<<4)|0);
          $220 = (($219) + 4|0);
          HEAP32[$220>>2] = 1;
          $221 = $op;
          $222 = $i;
          $223 = HEAP32[472>>2]|0;
          $224 = (1280 + ($223<<2)|0);
          $225 = HEAP32[$224>>2]|0;
          $226 = (($225) + ($222<<4)|0);
          $227 = (($226) + 8|0);
          HEAP32[$227>>2] = $221;
          $228 = $i;
          $229 = (($228) + 1)|0;
          $i = $229;
          $230 = $i;
          $231 = HEAP32[472>>2]|0;
          $232 = (1280 + ($231<<2)|0);
          $233 = HEAP32[$232>>2]|0;
          $234 = (($233) + ($230<<4)|0);
          $235 = $1;
          $236 = (480 + ($235<<2)|0);
          $237 = HEAP32[$236>>2]|0;
          $238 = $1;
          $239 = (2080 + ($238<<2)|0);
          $240 = HEAP32[$239>>2]|0;
          $241 = $240<<4;
          _memmove(($234|0),($237|0),($241|0))|0;
          $242 = $1;
          $243 = (2080 + ($242<<2)|0);
          $244 = HEAP32[$243>>2]|0;
          $245 = (1 + ($244))|0;
          $246 = HEAP32[472>>2]|0;
          $247 = (2880 + ($246<<2)|0);
          $248 = HEAP32[$247>>2]|0;
          $249 = (($248) + ($245))|0;
          HEAP32[$247>>2] = $249;
          while(1) {
           $250 = $i;
           $251 = HEAP32[472>>2]|0;
           $252 = (2880 + ($251<<2)|0);
           $253 = HEAP32[$252>>2]|0;
           $254 = ($250|0)<($253|0);
           if (!($254)) {
            break;
           }
           $255 = $i;
           $256 = HEAP32[472>>2]|0;
           $257 = (1280 + ($256<<2)|0);
           $258 = HEAP32[$257>>2]|0;
           $259 = (($258) + ($255<<4)|0);
           $260 = (($259) + 4|0);
           $261 = HEAP32[$260>>2]|0;
           $262 = (($261) + 1)|0;
           HEAP32[$260>>2] = $262;
           $263 = $i;
           $264 = (($263) + 1)|0;
           $i = $264;
          }
         }
         $265 = $1;
         $266 = (2080 + ($265<<2)|0);
         HEAP32[$266>>2] = 0;
         $267 = $1;
         $268 = (2880 + ($267<<2)|0);
         HEAP32[$268>>2] = 0;
         $269 = HEAP32[472>>2]|0;
         _simp_equation($269);
         $270 = HEAP32[472>>2]|0;
         $271 = (_return_result($270)|0);
         $0 = $271;
         $653 = $0;
         STACKTOP = sp;return ($653|0);
        }
       }
       _error(47584);
       $93 = $1;
       $94 = (2080 + ($93<<2)|0);
       HEAP32[$94>>2] = 0;
       $95 = $1;
       $96 = (2880 + ($95<<2)|0);
       HEAP32[$96>>2] = 0;
       $0 = 0;
       $653 = $0;
       STACKTOP = sp;return ($653|0);
      }
     }
    }
   }
   _error(47544);
   $0 = 0;
   $653 = $0;
   STACKTOP = sp;return ($653|0);
  }
 } while(0);
 $272 = $1;
 $273 = $2;
 $274 = (_parse_equation($272,$273)|0);
 $ep = $274;
 $275 = ($274|0)!=(0|0);
 if (!($275)) {
  $0 = 0;
  $653 = $0;
  STACKTOP = sp;return ($653|0);
 }
 $276 = $2;
 $cp1 = $276;
 while(1) {
  $277 = $cp1;
  $278 = $ep;
  $279 = ($277>>>0)<($278>>>0);
  if (!($279)) {
   break;
  }
  $280 = $cp1;
  $281 = HEAP8[$280>>0]|0;
  $282 = $281 << 24 >> 24;
  $283 = ($282|0)==(61);
  if ($283) {
   label = 66;
   break;
  }
  $284 = $cp1;
  $285 = (($284) + 1|0);
  $cp1 = $285;
 }
 if ((label|0) == 66) {
  $equals_flag = 1;
 }
 $286 = $1;
 $287 = (2080 + ($286<<2)|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = ($288|0)==(0);
 if ($289) {
  $290 = $1;
  $291 = (2880 + ($290<<2)|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = ($292|0)==(0);
  if ($293) {
   $294 = $2;
   $295 = (_strcmp($294,47600)|0);
   $296 = ($295|0)==(0);
   if ($296) {
    $297 = HEAP32[472>>2]|0;
    $298 = $1;
    $299 = ($297|0)!=($298|0);
    if ($299) {
     $300 = HEAP32[472>>2]|0;
     $301 = ($300|0)>=(0);
     if ($301) {
      $302 = HEAP32[472>>2]|0;
      $303 = HEAP32[464>>2]|0;
      $304 = ($302|0)<($303|0);
      if ($304) {
       $305 = HEAP32[472>>2]|0;
       $306 = (2080 + ($305<<2)|0);
       $307 = HEAP32[$306>>2]|0;
       $308 = ($307|0)>(0);
       if ($308) {
        $309 = HEAP32[472>>2]|0;
        $310 = (2880 + ($309<<2)|0);
        $311 = HEAP32[$310>>2]|0;
        $312 = ($311|0)>(0);
        if ($312) {
         $313 = HEAP32[472>>2]|0;
         $1 = $313;
         $314 = $1;
         $315 = (2080 + ($314<<2)|0);
         $316 = HEAP32[$315>>2]|0;
         $i = $316;
         $317 = HEAP32[3704>>2]|0;
         $318 = $1;
         $319 = (480 + ($318<<2)|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = $i;
         $322 = $321<<4;
         _memmove(($317|0),($320|0),($322|0))|0;
         $323 = $1;
         $324 = (2880 + ($323<<2)|0);
         $325 = HEAP32[$324>>2]|0;
         $326 = $1;
         $327 = (2080 + ($326<<2)|0);
         HEAP32[$327>>2] = $325;
         $328 = $1;
         $329 = (480 + ($328<<2)|0);
         $330 = HEAP32[$329>>2]|0;
         $331 = $1;
         $332 = (1280 + ($331<<2)|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = $1;
         $335 = (2880 + ($334<<2)|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = $336<<4;
         _memmove(($330|0),($333|0),($337|0))|0;
         $338 = $i;
         $339 = $1;
         $340 = (2880 + ($339<<2)|0);
         HEAP32[$340>>2] = $338;
         $341 = $1;
         $342 = (1280 + ($341<<2)|0);
         $343 = HEAP32[$342>>2]|0;
         $344 = HEAP32[3704>>2]|0;
         $345 = $i;
         $346 = $345<<4;
         _memmove(($343|0),($344|0),($346|0))|0;
         $347 = HEAP32[472>>2]|0;
         $348 = (_return_result($347)|0);
         $0 = $348;
         $653 = $0;
         STACKTOP = sp;return ($653|0);
        }
       }
      }
     }
    }
   }
   $0 = 1;
   $653 = $0;
   STACKTOP = sp;return ($653|0);
  }
 }
 $349 = $1;
 $350 = (2080 + ($349<<2)|0);
 $351 = HEAP32[$350>>2]|0;
 $352 = ($351|0)==(0);
 if ($352) {
  label = 81;
 } else {
  $353 = $1;
  $354 = (2880 + ($353<<2)|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = ($355|0)==(0);
  if ($356) {
   label = 81;
  }
 }
 if ((label|0) == 81) {
  $357 = $equals_flag;
  $358 = ($357|0)!=(0);
  if ($358) {
   $359 = HEAP32[472>>2]|0;
   $360 = $1;
   $361 = ($359|0)!=($360|0);
   if ($361) {
    $362 = HEAP32[472>>2]|0;
    $363 = ($362|0)<(0);
    if (!($363)) {
     $364 = HEAP32[472>>2]|0;
     $365 = HEAP32[464>>2]|0;
     $366 = ($364|0)>=($365|0);
     if (!($366)) {
      $367 = HEAP32[472>>2]|0;
      $368 = (2080 + ($367<<2)|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = ($369|0)<=(0);
      if (!($370)) {
       $371 = HEAP32[472>>2]|0;
       $372 = (2880 + ($371<<2)|0);
       $373 = HEAP32[$372>>2]|0;
       $374 = ($373|0)==(0);
       if ($374) {
        $375 = $1;
        $376 = (2080 + ($375<<2)|0);
        $377 = HEAP32[$376>>2]|0;
        $378 = ($377|0)!=(0);
        if ($378) {
         $379 = HEAP32[472>>2]|0;
         $380 = (1280 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = HEAP32[472>>2]|0;
         $383 = (480 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = HEAP32[472>>2]|0;
         $386 = (2080 + ($385<<2)|0);
         $387 = HEAP32[$386>>2]|0;
         $388 = $387<<4;
         _memmove(($381|0),($384|0),($388|0))|0;
         $389 = HEAP32[472>>2]|0;
         $390 = (2080 + ($389<<2)|0);
         $391 = HEAP32[$390>>2]|0;
         $392 = HEAP32[472>>2]|0;
         $393 = (2880 + ($392<<2)|0);
         HEAP32[$393>>2] = $391;
         $394 = HEAP32[472>>2]|0;
         $395 = (480 + ($394<<2)|0);
         $396 = HEAP32[$395>>2]|0;
         $397 = $1;
         $398 = (480 + ($397<<2)|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = $1;
         $401 = (2080 + ($400<<2)|0);
         $402 = HEAP32[$401>>2]|0;
         $403 = $402<<4;
         _memmove(($396|0),($399|0),($403|0))|0;
         $404 = $1;
         $405 = (2080 + ($404<<2)|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = HEAP32[472>>2]|0;
         $408 = (2080 + ($407<<2)|0);
         HEAP32[$408>>2] = $406;
        } else {
         $409 = $1;
         $410 = (2880 + ($409<<2)|0);
         $411 = HEAP32[$410>>2]|0;
         $412 = ($411|0)!=(0);
         if ($412) {
          $413 = HEAP32[472>>2]|0;
          $414 = (1280 + ($413<<2)|0);
          $415 = HEAP32[$414>>2]|0;
          $416 = $1;
          $417 = (1280 + ($416<<2)|0);
          $418 = HEAP32[$417>>2]|0;
          $419 = $1;
          $420 = (2880 + ($419<<2)|0);
          $421 = HEAP32[$420>>2]|0;
          $422 = $421<<4;
          _memmove(($415|0),($418|0),($422|0))|0;
          $423 = $1;
          $424 = (2880 + ($423<<2)|0);
          $425 = HEAP32[$424>>2]|0;
          $426 = HEAP32[472>>2]|0;
          $427 = (2880 + ($426<<2)|0);
          HEAP32[$427>>2] = $425;
         }
        }
        $428 = $1;
        $429 = (2080 + ($428<<2)|0);
        HEAP32[$429>>2] = 0;
        $430 = $1;
        $431 = (2880 + ($430<<2)|0);
        HEAP32[$431>>2] = 0;
        $432 = HEAP32[472>>2]|0;
        $433 = (_return_result($432)|0);
        $0 = $433;
        $653 = $0;
        STACKTOP = sp;return ($653|0);
       }
      }
     }
    }
   }
  }
  $434 = HEAP32[96>>2]|0;
  $435 = ($434|0)!=(0);
  if ($435) {
   label = 95;
  } else {
   $436 = $equals_flag;
   $437 = ($436|0)!=(0);
   if ($437) {
    label = 95;
   }
  }
  L135: do {
   if ((label|0) == 95) {
    $438 = $1;
    $439 = (2080 + ($438<<2)|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = ($440|0)==(1);
    do {
     if ($441) {
      $442 = $1;
      $443 = (480 + ($442<<2)|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = HEAP32[$444>>2]|0;
      $446 = ($445|0)==(0);
      if ($446) {
       $447 = $1;
       $448 = (480 + ($447<<2)|0);
       $449 = HEAP32[$448>>2]|0;
       $450 = (($449) + 8|0);
       $451 = +HEAPF64[$450>>3];
       $452 = $451 == 0.0;
       if ($452) {
        break;
       }
      }
      $453 = $1;
      $454 = (480 + ($453<<2)|0);
      $455 = HEAP32[$454>>2]|0;
      $456 = HEAP32[$455>>2]|0;
      $457 = ($456|0)==(1);
      if ($457) {
       $458 = $1;
       $459 = (480 + ($458<<2)|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = (($460) + 8|0);
       $462 = HEAP32[$461>>2]|0;
       $463 = $462 & 16383;
       $464 = ($463|0)>(4);
       if (!($464)) {
        $465 = $equals_flag;
        $466 = ($465|0)!=(0);
        if (!($466)) {
         label = 101;
        }
       }
      } else {
       label = 101;
      }
     } else {
      label = 101;
     }
    } while(0);
    do {
     if ((label|0) == 101) {
      $467 = $1;
      $468 = (2880 + ($467<<2)|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = ($469|0)==(1);
      if ($470) {
       $471 = $1;
       $472 = (1280 + ($471<<2)|0);
       $473 = HEAP32[$472>>2]|0;
       $474 = HEAP32[$473>>2]|0;
       $475 = ($474|0)==(0);
       if ($475) {
        $476 = $1;
        $477 = (1280 + ($476<<2)|0);
        $478 = HEAP32[$477>>2]|0;
        $479 = (($478) + 8|0);
        $480 = +HEAPF64[$479>>3];
        $481 = $480 == 0.0;
        if ($481) {
         break;
        }
       }
       $482 = $1;
       $483 = (1280 + ($482<<2)|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = HEAP32[$484>>2]|0;
       $486 = ($485|0)==(1);
       if ($486) {
        break;
       }
      }
      break L135;
     }
    } while(0);
    $487 = $1;
    $488 = HEAP32[472>>2]|0;
    $489 = (_solve_espace($487,$488)|0);
    $rv = $489;
    $490 = $1;
    $491 = (2080 + ($490<<2)|0);
    HEAP32[$491>>2] = 0;
    $492 = $1;
    $493 = (2880 + ($492<<2)|0);
    HEAP32[$493>>2] = 0;
    $494 = $rv;
    $495 = ($494|0)!=(0);
    if ($495) {
     $496 = HEAP32[472>>2]|0;
     $497 = (_return_result($496)|0);
     $0 = $497;
     $653 = $0;
     STACKTOP = sp;return ($653|0);
    } else {
     $0 = 0;
     $653 = $0;
     STACKTOP = sp;return ($653|0);
    }
   }
  } while(0);
  $498 = $equals_flag;
  $499 = ($498|0)!=(0);
  if (!($499)) {
   $500 = HEAP32[120>>2]|0;
   $501 = ($500|0)!=(0);
   if ($501) {
    $502 = $1;
    $503 = (2080 + ($502<<2)|0);
    $504 = HEAP32[$503>>2]|0;
    $505 = ($504|0)==(1);
    if ($505) {
     $506 = $1;
     $507 = (480 + ($506<<2)|0);
     $508 = HEAP32[$507>>2]|0;
     $509 = HEAP32[$508>>2]|0;
     $510 = ($509|0)==(0);
     if ($510) {
      $511 = $1;
      $512 = (480 + ($511<<2)|0);
      $513 = HEAP32[$512>>2]|0;
      $514 = (($513) + 8|0);
      $515 = +HEAPF64[$514>>3];
      $516 = (+_fmod((+$515),1.0));
      $517 = $516 == 0.0;
      if ($517) {
       $518 = $1;
       $519 = (480 + ($518<<2)|0);
       $520 = HEAP32[$519>>2]|0;
       $521 = (($520) + 8|0);
       $522 = +HEAPF64[$521>>3];
       $523 = $522 > 0.0;
       if ($523) {
        $524 = $1;
        $525 = (480 + ($524<<2)|0);
        $526 = HEAP32[$525>>2]|0;
        $527 = (($526) + 8|0);
        $528 = +HEAPF64[$527>>3];
        $529 = HEAP32[464>>2]|0;
        $530 = (+($529|0));
        $531 = $528 <= $530;
        if ($531) {
         $532 = $1;
         $533 = (480 + ($532<<2)|0);
         $534 = HEAP32[$533>>2]|0;
         $535 = (($534) + 8|0);
         $536 = +HEAPF64[$535>>3];
         $537 = $536 - 1.0;
         $538 = (~~(($537)));
         HEAP32[472>>2] = $538;
         $539 = $1;
         $540 = (2080 + ($539<<2)|0);
         HEAP32[$540>>2] = 0;
         $541 = HEAP32[472>>2]|0;
         (_return_result($541)|0);
         $0 = 1;
         $653 = $0;
         STACKTOP = sp;return ($653|0);
        }
       }
      }
     }
    }
   }
  }
  $542 = HEAP32[104>>2]|0;
  $543 = ($542|0)!=(0);
  L169: do {
   if ($543) {
    $544 = $1;
    $545 = (2080 + ($544<<2)|0);
    $546 = HEAP32[$545>>2]|0;
    $547 = ($546|0)!=(0);
    do {
     if ($547) {
      $548 = $1;
      $549 = (480 + ($548<<2)|0);
      $550 = HEAP32[$549>>2]|0;
      $551 = $1;
      $552 = (2080 + ($551<<2)|0);
      $553 = HEAP32[$552>>2]|0;
      $554 = (_exp_is_numeric($550,$553)|0);
      $555 = ($554|0)!=(0);
      if ($555) {
       $556 = $1;
       $557 = (1280 + ($556<<2)|0);
       $558 = HEAP32[$557>>2]|0;
       $559 = $1;
       $560 = (480 + ($559<<2)|0);
       $561 = HEAP32[$560>>2]|0;
       $562 = $1;
       $563 = (2080 + ($562<<2)|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = $564<<4;
       _memmove(($558|0),($561|0),($565|0))|0;
       $566 = $1;
       $567 = (2080 + ($566<<2)|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = $1;
       $570 = (2880 + ($569<<2)|0);
       HEAP32[$570>>2] = $568;
       break;
      } else {
       break L169;
      }
     }
    } while(0);
    $571 = $1;
    $572 = (1280 + ($571<<2)|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = $1;
    $575 = (2880 + ($574<<2)|0);
    $576 = HEAP32[$575>>2]|0;
    $577 = (_exp_is_numeric($573,$576)|0);
    $578 = ($577|0)!=(0);
    if (!($578)) {
     label = 134;
     break;
    }
    $579 = $1;
    $580 = (480 + ($579<<2)|0);
    $581 = HEAP32[$580>>2]|0;
    $582 = (($581) + 4|0);
    HEAP32[$582>>2] = 1;
    $583 = $1;
    $584 = (480 + ($583<<2)|0);
    $585 = HEAP32[$584>>2]|0;
    HEAP32[$585>>2] = 1;
    (_parse_var($answer_v,47608)|0);
    $586 = HEAP32[$answer_v>>2]|0;
    $587 = $1;
    $588 = (480 + ($587<<2)|0);
    $589 = HEAP32[$588>>2]|0;
    $590 = (($589) + 8|0);
    HEAP32[$590>>2] = $586;
    $591 = $1;
    $592 = (2080 + ($591<<2)|0);
    HEAP32[$592>>2] = 1;
    $593 = $1;
    HEAP32[472>>2] = $593;
    $594 = HEAP32[41296>>2]|0;
    $previous_repeat_flag = $594;
    HEAP32[41296>>2] = 1;
    $595 = (_approximate_cmd(47616)|0);
    $rv = $595;
    $596 = $previous_repeat_flag;
    HEAP32[41296>>2] = $596;
    $597 = HEAP32[47536>>2]|0;
    $i = $597;
    $598 = HEAP32[112>>2]|0;
    $599 = ($598|0)!=(0);
    if ($599) {
     $600 = $i;
     $601 = ($600|0)>=(0);
     if ($601) {
      $602 = $i;
      $603 = HEAP32[464>>2]|0;
      $604 = ($602|0)<($603|0);
      if ($604) {
       $605 = $i;
       $606 = $1;
       $607 = ($605|0)!=($606|0);
       do {
        if ($607) {
         $608 = $i;
         $609 = (2080 + ($608<<2)|0);
         $610 = HEAP32[$609>>2]|0;
         $611 = ($610|0)==(1);
         if ($611) {
          $612 = $i;
          $613 = (480 + ($612<<2)|0);
          $614 = HEAP32[$613>>2]|0;
          $615 = HEAP32[$614>>2]|0;
          $616 = ($615|0)==(1);
          if (!($616)) {
           break;
          }
          $617 = $i;
          $618 = (480 + ($617<<2)|0);
          $619 = HEAP32[$618>>2]|0;
          $620 = (($619) + 8|0);
          $621 = HEAP32[$620>>2]|0;
          $622 = HEAP32[$answer_v>>2]|0;
          $623 = ($621|0)==($622|0);
          if (!($623)) {
           break;
          }
          $624 = $i;
          $625 = (2080 + ($624<<2)|0);
          HEAP32[$625>>2] = 0;
          $626 = $i;
          $627 = (2880 + ($626<<2)|0);
          HEAP32[$627>>2] = 0;
         }
        }
       } while(0);
      }
     }
    }
    $628 = $1;
    HEAP32[47536>>2] = $628;
    $629 = $rv;
    $0 = $629;
    $653 = $0;
    STACKTOP = sp;return ($653|0);
   } else {
    label = 134;
   }
  } while(0);
  if ((label|0) == 134) {
  }
  $630 = $equals_flag;
  $631 = ($630|0)!=(0);
  if ($631) {
   $632 = $1;
   $633 = (2880 + ($632<<2)|0);
   $634 = HEAP32[$633>>2]|0;
   $635 = ($634|0)!=(0);
   if ($635) {
    $636 = $1;
    $637 = (2080 + ($636<<2)|0);
    HEAP32[$637>>2] = 1;
    $638 = $1;
    $639 = (480 + ($638<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    ;HEAP32[$640+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$640+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$640+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$640+12>>2]=HEAP32[3736+12>>2]|0;
   } else {
    $641 = $1;
    $642 = (2080 + ($641<<2)|0);
    $643 = HEAP32[$642>>2]|0;
    $644 = ($643|0)!=(0);
    if ($644) {
     $645 = $1;
     $646 = (2880 + ($645<<2)|0);
     HEAP32[$646>>2] = 1;
     $647 = $1;
     $648 = (1280 + ($647<<2)|0);
     $649 = HEAP32[$648>>2]|0;
     ;HEAP32[$649+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$649+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$649+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$649+12>>2]=HEAP32[3736+12>>2]|0;
    }
   }
  }
 }
 $650 = $1;
 HEAP32[472>>2] = $650;
 $651 = HEAP32[472>>2]|0;
 $652 = (_return_result($651)|0);
 $0 = $652;
 $653 = $0;
 STACKTOP = sp;return ($653|0);
}
function _process($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cp;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(58);
  if ($7) {
   $8 = HEAP32[41240>>2]|0;
   $9 = (($8) + 1)|0;
   HEAP32[41240>>2] = $9;
   $10 = $1;
   $11 = (($10) + 1|0);
   $12 = (_process_rv($11)|0);
   HEAP32[440>>2] = $12;
   $0 = 1;
   $18 = $0;
   STACKTOP = sp;return ($18|0);
  }
 }
 $13 = $1;
 $14 = (_process_rv($13)|0);
 HEAP32[440>>2] = $14;
 $15 = HEAP32[440>>2]|0;
 $16 = ($15|0)!=(0);
 if (!($16)) {
 }
 $17 = HEAP32[440>>2]|0;
 $0 = $17;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _process_rv($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf2 = 0, $cp1 = 0, $cp_start = 0, $fp = 0, $i = 0, $i1 = 0, $len = 0, $our_repeat_flag = 0, $rv = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cp1 = sp + 32|0;
 $buf2 = sp + 48|0;
 $v = sp + 8|0;
 $1 = $cp;
 HEAP32[$cp1>>2] = 0;
 $our_repeat_flag = 0;
 _init_gvars();
 _set_sign_array();
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $324 = $0;
  STACKTOP = sp;return ($324|0);
 }
 $4 = $1;
 $cp_start = $4;
 $5 = $1;
 $6 = (_skip_space($5)|0);
 $1 = $6;
 $7 = $1;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(47);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (_isvarchar($14)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $1;
   $18 = (($17) + 1|0);
   $1 = $18;
   $19 = $1;
   $20 = (_parse_var($v,$19)|0);
   HEAP32[$cp1>>2] = $20;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $0 = 0;
    $324 = $0;
    STACKTOP = sp;return ($324|0);
   }
   $22 = HEAP32[$cp1>>2]|0;
   $23 = (_extra_characters($22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    $0 = 0;
    $324 = $0;
    STACKTOP = sp;return ($324|0);
   }
   $25 = HEAP32[$v>>2]|0;
   $26 = (_search_all_for_var($25,1)|0);
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = HEAP32[472>>2]|0;
    $29 = (_return_result($28)|0);
    $0 = $29;
    $324 = $0;
    STACKTOP = sp;return ($324|0);
   } else {
    _error(47624);
    $0 = 0;
    $324 = $0;
    STACKTOP = sp;return ($324|0);
   }
  }
 }
 $30 = $1;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)==(35);
 do {
  if ($33) {
   $34 = $1;
   $35 = (($34) + 1|0);
   $1 = $35;
   $36 = $1;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = (_isvarchar($38)|0);
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = $1;
    $42 = (_parse_var($v,$41)|0);
    HEAP32[$cp1>>2] = $42;
    $43 = ($42|0)==(0|0);
    if ($43) {
     $0 = 0;
     $324 = $0;
     STACKTOP = sp;return ($324|0);
    }
    $44 = HEAP32[$cp1>>2]|0;
    $45 = (_extra_characters($44)|0);
    $46 = ($45|0)!=(0);
    if ($46) {
     $0 = 0;
     $324 = $0;
     STACKTOP = sp;return ($324|0);
    }
    $47 = HEAP32[$v>>2]|0;
    $48 = (_search_all_for_var($47,0)|0);
    $49 = ($48|0)!=(0);
    if ($49) {
     $50 = HEAP32[472>>2]|0;
     $51 = (_return_result($50)|0);
     $0 = $51;
     $324 = $0;
     STACKTOP = sp;return ($324|0);
    } else {
     _error(47624);
     $0 = 0;
     $324 = $0;
     STACKTOP = sp;return ($324|0);
    }
   }
   $52 = HEAP32[472>>2]|0;
   $i = $52;
   $53 = $1;
   HEAP32[$cp1>>2] = $53;
   $54 = $1;
   $55 = HEAP8[$54>>0]|0;
   $56 = $55 << 24 >> 24;
   if ((($56|0) == 45) | (($56|0) == 43)) {
    $57 = $1;
    $58 = (_strtol($57,$cp1,10)|0);
    $59 = $i;
    $60 = (($59) + ($58))|0;
    $i = $60;
   } else {
    $61 = $1;
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = (_isdigit($63)|0);
    $65 = ($64|0)!=(0);
    if ($65) {
     $66 = $1;
     $67 = (_strtol($66,$cp1,10)|0);
     $68 = (($67) - 1)|0;
     $i = $68;
    }
   }
   $69 = HEAP32[$cp1>>2]|0;
   $70 = ($69|0)==(0|0);
   if (!($70)) {
    $71 = $1;
    $72 = HEAP32[$cp1>>2]|0;
    $73 = ($71|0)==($72|0);
    if (!($73)) {
     $74 = HEAP32[$cp1>>2]|0;
     $75 = HEAP8[$74>>0]|0;
     $76 = $75 << 24 >> 24;
     $77 = ($76|0)==(0);
     if (!($77)) {
      $78 = HEAP32[$cp1>>2]|0;
      $79 = HEAP8[$78>>0]|0;
      $80 = $79 << 24 >> 24;
      $81 = ($80|0)==(58);
      if (!($81)) {
       $82 = HEAP32[$cp1>>2]|0;
       $83 = HEAP8[$82>>0]|0;
       $84 = $83 << 24 >> 24;
       $85 = (_isspace($84)|0);
       $86 = ($85|0)!=(0);
       if (!($86)) {
        $119 = $1;
        $120 = (($119) + -1|0);
        $1 = $120;
        break;
       }
      }
     }
     $87 = $i;
     $88 = (_alloc_to_espace($87)|0);
     $89 = ($88|0)!=(0);
     if (!($89)) {
      $90 = $1;
      $91 = $cp_start;
      $92 = $90;
      $93 = $91;
      $94 = (($92) - ($93))|0;
      _put_up_arrow($94,47672);
      $0 = 0;
      $324 = $0;
      STACKTOP = sp;return ($324|0);
     }
     $95 = HEAP32[$cp1>>2]|0;
     $1 = $95;
     $96 = $1;
     $97 = HEAP8[$96>>0]|0;
     $98 = $97 << 24 >> 24;
     $99 = ($98|0)==(58);
     if ($99) {
      $100 = $1;
      $101 = (($100) + 1|0);
      $1 = $101;
     }
     $102 = $1;
     $103 = (_skip_space($102)|0);
     $1 = $103;
     $104 = $1;
     $105 = HEAP8[$104>>0]|0;
     $106 = ($105<<24>>24)!=(0);
     if ($106) {
      $107 = $1;
      $108 = $cp_start;
      $109 = $107;
      $110 = $108;
      $111 = (($109) - ($110))|0;
      $112 = HEAP32[41240>>2]|0;
      $113 = (($112) + ($111))|0;
      HEAP32[41240>>2] = $113;
      $114 = $i;
      $115 = $1;
      $116 = (_parse($114,$115)|0);
      $0 = $116;
      $324 = $0;
      STACKTOP = sp;return ($324|0);
     } else {
      $117 = $i;
      HEAP32[472>>2] = $117;
      $118 = HEAP32[472>>2]|0;
      (_return_result($118)|0);
      $0 = 1;
      $324 = $0;
      STACKTOP = sp;return ($324|0);
     }
    }
   }
   $0 = 1;
   $324 = $0;
   STACKTOP = sp;return ($324|0);
  }
 } while(0);
 $121 = $1;
 $122 = HEAP8[$121>>0]|0;
 $123 = $122 << 24 >> 24;
 $124 = ($123|0)==(63);
 if ($124) {
  $125 = $1;
  $126 = (($125) + 1|0);
  $127 = (_skip_space($126)|0);
  $1 = $127;
  $128 = $1;
  $129 = $cp_start;
  $130 = $128;
  $131 = $129;
  $132 = (($130) - ($131))|0;
  $133 = HEAP32[41240>>2]|0;
  $134 = (($133) + ($132))|0;
  HEAP32[41240>>2] = $134;
  $135 = $1;
  $136 = (_help_cmd($135)|0);
  $0 = $136;
  $324 = $0;
  STACKTOP = sp;return ($324|0);
 }
 while(1) {
  $137 = $1;
  HEAP32[$cp1>>2] = $137;
  while(1) {
   $138 = HEAP32[$cp1>>2]|0;
   $139 = HEAP8[$138>>0]|0;
   $140 = $139 << 24 >> 24;
   $141 = ($140|0)!=(0);
   if ($141) {
    $142 = HEAP32[$cp1>>2]|0;
    $143 = HEAP8[$142>>0]|0;
    $144 = $143 << 24 >> 24;
    $145 = (_isspace($144)|0);
    $146 = ($145|0)!=(0);
    $147 = $146 ^ 1;
    $325 = $147;
   } else {
    $325 = 0;
   }
   if (!($325)) {
    break;
   }
   $148 = HEAP32[$cp1>>2]|0;
   $149 = (($148) + 1|0);
   HEAP32[$cp1>>2] = $149;
  }
  $150 = HEAP32[$cp1>>2]|0;
  $151 = $1;
  $152 = $150;
  $153 = $151;
  $154 = (($152) - ($153))|0;
  $len = $154;
  $155 = $len;
  $156 = ($155>>>0)>=(4);
  if (!($156)) {
   break;
  }
  $157 = $len;
  $158 = ($157>>>0)<=(6);
  if (!($158)) {
   break;
  }
  $159 = $1;
  $160 = $len;
  $161 = (_strncasecmp($159,47704,$160)|0);
  $162 = ($161|0)==(0);
  if (!($162)) {
   break;
  }
  $our_repeat_flag = 1;
  $163 = HEAP32[$cp1>>2]|0;
  $164 = (_skip_space($163)|0);
  $1 = $164;
 }
 $i = 0;
 while(1) {
  $165 = $i;
  $166 = ($165|0)<(37);
  if (!($166)) {
   label = 101;
   break;
  }
  $167 = $len;
  $168 = $i;
  $169 = (47712 + (($168*24)|0)|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (_strlen(($170|0))|0);
  $172 = (4)<($171>>>0);
  if ($172) {
   $178 = 4;
  } else {
   $173 = $i;
   $174 = (47712 + (($173*24)|0)|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (_strlen(($175|0))|0);
   $178 = $176;
  }
  $177 = ($167>>>0)>=($178>>>0);
  if ($177) {
   $179 = $len;
   $180 = $i;
   $181 = (47712 + (($180*24)|0)|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (_strlen(($182|0))|0);
   $184 = ($179>>>0)<=($183>>>0);
   if ($184) {
    $185 = $1;
    $186 = $i;
    $187 = (47712 + (($186*24)|0)|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = $len;
    $190 = (_strncasecmp($185,$188,$189)|0);
    $191 = ($190|0)==(0);
    if ($191) {
     break;
    }
   }
  }
  $192 = $i;
  $193 = (47712 + (($192*24)|0)|0);
  $194 = (($193) + 4|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ($195|0)!=(0|0);
  if ($196) {
   $197 = $len;
   $198 = $i;
   $199 = (47712 + (($198*24)|0)|0);
   $200 = (($199) + 4|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = (_strlen(($201|0))|0);
   $203 = (4)<($202>>>0);
   if ($203) {
    $210 = 4;
   } else {
    $204 = $i;
    $205 = (47712 + (($204*24)|0)|0);
    $206 = (($205) + 4|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = (_strlen(($207|0))|0);
    $210 = $208;
   }
   $209 = ($197>>>0)>=($210>>>0);
   if ($209) {
    $211 = $len;
    $212 = $i;
    $213 = (47712 + (($212*24)|0)|0);
    $214 = (($213) + 4|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = (_strlen(($215|0))|0);
    $217 = ($211>>>0)<=($216>>>0);
    if ($217) {
     $218 = $1;
     $219 = $i;
     $220 = (47712 + (($219*24)|0)|0);
     $221 = (($220) + 4|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = $len;
     $224 = (_strncasecmp($218,$222,$223)|0);
     $225 = ($224|0)==(0);
     if ($225) {
      break;
     }
    }
   }
  }
  $309 = $i;
  $310 = (($309) + 1)|0;
  $i = $310;
 }
 if ((label|0) == 101) {
  $311 = $our_repeat_flag;
  $312 = ($311|0)!=(0);
  if ($312) {
   _error(48688);
   $0 = 0;
   $324 = $0;
   STACKTOP = sp;return ($324|0);
  } else {
   $313 = (_next_espace()|0);
   $i = $313;
   $314 = $1;
   $315 = $cp_start;
   $316 = $314;
   $317 = $315;
   $318 = (($316) - ($317))|0;
   $319 = HEAP32[41240>>2]|0;
   $320 = (($319) + ($318))|0;
   HEAP32[41240>>2] = $320;
   $321 = $i;
   $322 = $1;
   $323 = (_process_parse($321,$322)|0);
   $0 = $323;
   $324 = $0;
   STACKTOP = sp;return ($324|0);
  }
 }
 $226 = HEAP32[$cp1>>2]|0;
 $227 = (_skip_space($226)|0);
 HEAP32[$cp1>>2] = $227;
 $228 = HEAP32[$cp1>>2]|0;
 $229 = $cp_start;
 $230 = $228;
 $231 = $229;
 $232 = (($230) - ($231))|0;
 $233 = HEAP32[41240>>2]|0;
 $234 = (($233) + ($232))|0;
 HEAP32[41240>>2] = $234;
 $235 = HEAP32[$cp1>>2]|0;
 $236 = (_my_strlcpy($buf2,$235,4096)|0);
 $237 = ($236>>>0)>=(4096);
 if ($237) {
  _error(48600);
  $0 = 0;
  $324 = $0;
  STACKTOP = sp;return ($324|0);
 }
 $fp = 0;
 $238 = HEAP32[41288>>2]|0;
 $239 = ($238|0)<(2);
 if ($239) {
  HEAP32[41024>>2] = 0;
  HEAP32[41016>>2] = 0;
  $240 = (_strlen(($buf2|0))|0);
  $241 = (($240) - 1)|0;
  $i1 = $241;
  while(1) {
   $242 = $i1;
   $243 = ($242|0)>=(0);
   if (!($243)) {
    break;
   }
   $244 = $i1;
   $245 = (($buf2) + ($244)|0);
   $246 = HEAP8[$245>>0]|0;
   $247 = $246 << 24 >> 24;
   $248 = ($247|0)==(62);
   if ($248) {
    label = 74;
    break;
   }
   $265 = $i1;
   $266 = (($265) + -1)|0;
   $i1 = $266;
  }
  if ((label|0) == 74) {
   $249 = $i1;
   $250 = (($249) + 1)|0;
   $251 = (($buf2) + ($250)|0);
   $252 = (_skip_space($251)|0);
   HEAP32[41016>>2] = $252;
   $253 = $i1;
   $254 = ($253|0)!=(0);
   if ($254) {
    $255 = $i1;
    $256 = (($255) - 1)|0;
    $257 = (($buf2) + ($256)|0);
    $258 = HEAP8[$257>>0]|0;
    $259 = $258 << 24 >> 24;
    $260 = ($259|0)==(62);
    if ($260) {
     $261 = $i1;
     $262 = (($261) + -1)|0;
     $i1 = $262;
     HEAP32[41024>>2] = 1;
    }
   }
   $263 = $i1;
   $264 = (($buf2) + ($263)|0);
   HEAP8[$264>>0] = 0;
  }
  $267 = HEAP32[41016>>2]|0;
  $268 = ($267|0)!=(0|0);
  if ($268) {
   $269 = HEAP32[41024>>2]|0;
   $270 = ($269|0)!=(0);
   if ($270) {
    $271 = HEAP32[41016>>2]|0;
    $272 = (_fopen(($271|0),(48624|0))|0);
    $fp = $272;
   } else {
    $273 = HEAP32[41016>>2]|0;
    $274 = (_fopen(($273|0),(48632|0))|0);
    $fp = $274;
   }
   $275 = $fp;
   $276 = ($275|0)==(0|0);
   if ($276) {
    $277 = HEAP32[41016>>2]|0;
    _perror(($277|0));
    _error(48640);
    HEAP32[41016>>2] = 0;
    $0 = 0;
    $324 = $0;
    STACKTOP = sp;return ($324|0);
   }
   $278 = HEAP32[41008>>2]|0;
   $279 = HEAP32[_stdout>>2]|0;
   $280 = ($278|0)!=($279|0);
   if ($280) {
    $281 = HEAP32[41008>>2]|0;
    $282 = HEAP32[_stderr>>2]|0;
    $283 = ($281|0)!=($282|0);
    if ($283) {
     $284 = HEAP32[41008>>2]|0;
     $285 = HEAP32[41000>>2]|0;
     $286 = ($284|0)!=($285|0);
     if ($286) {
      $287 = HEAP32[41008>>2]|0;
      (_fclose(($287|0))|0);
     }
    }
   }
   $288 = $fp;
   HEAP32[41008>>2] = $288;
  }
 }
 _remove_trailing_spaces($buf2);
 HEAP32[41280>>2] = 1;
 HEAP32[41304>>2] = 1;
 $289 = $our_repeat_flag;
 HEAP32[41296>>2] = $289;
 $290 = $i;
 $291 = (47712 + (($290*24)|0)|0);
 $292 = (($291) + 8|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = (FUNCTION_TABLE_ii[$293 & 127]($buf2)|0);
 $rv = $294;
 HEAP32[41296>>2] = 0;
 $295 = $fp;
 $296 = ($295|0)!=(0|0);
 if ($296) {
  $297 = HEAP32[41008>>2]|0;
  $298 = HEAP32[41000>>2]|0;
  $299 = ($297|0)!=($298|0);
  if ($299) {
   $300 = HEAP32[41008>>2]|0;
   $301 = HEAP32[_stdout>>2]|0;
   $302 = ($300|0)!=($301|0);
   if ($302) {
    $303 = HEAP32[41008>>2]|0;
    $304 = HEAP32[_stderr>>2]|0;
    $305 = ($303|0)!=($304|0);
    if ($305) {
     $306 = HEAP32[41008>>2]|0;
     (_fclose(($306|0))|0);
    }
   }
   $307 = HEAP32[41000>>2]|0;
   HEAP32[41008>>2] = $307;
  }
 }
 HEAP32[41016>>2] = 0;
 $308 = $rv;
 $0 = $308;
 $324 = $0;
 STACKTOP = sp;return ($324|0);
}
function _help_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cp1 = 0, $flag = 0, $html_out = 0, $i = 0, $j = 0, $row = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer124 = 0, $vararg_buffer127 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer142 = 0, $vararg_buffer145 = 0, $vararg_buffer148 = 0, $vararg_buffer151 = 0, $vararg_buffer154 = 0, $vararg_buffer157 = 0, $vararg_buffer16 = 0, $vararg_buffer160 = 0, $vararg_buffer163 = 0, $vararg_buffer166 = 0, $vararg_buffer169 = 0, $vararg_buffer172 = 0, $vararg_buffer175 = 0, $vararg_buffer178 = 0, $vararg_buffer181 = 0;
 var $vararg_buffer184 = 0, $vararg_buffer187 = 0, $vararg_buffer19 = 0, $vararg_buffer190 = 0, $vararg_buffer193 = 0, $vararg_buffer196 = 0, $vararg_buffer199 = 0, $vararg_buffer202 = 0, $vararg_buffer205 = 0, $vararg_buffer208 = 0, $vararg_buffer21 = 0, $vararg_buffer211 = 0, $vararg_buffer214 = 0, $vararg_buffer217 = 0, $vararg_buffer220 = 0, $vararg_buffer223 = 0, $vararg_buffer226 = 0, $vararg_buffer229 = 0, $vararg_buffer232 = 0, $vararg_buffer235 = 0;
 var $vararg_buffer238 = 0, $vararg_buffer24 = 0, $vararg_buffer241 = 0, $vararg_buffer244 = 0, $vararg_buffer247 = 0, $vararg_buffer250 = 0, $vararg_buffer253 = 0, $vararg_buffer256 = 0, $vararg_buffer259 = 0, $vararg_buffer26 = 0, $vararg_buffer262 = 0, $vararg_buffer265 = 0, $vararg_buffer268 = 0, $vararg_buffer271 = 0, $vararg_buffer274 = 0, $vararg_buffer277 = 0, $vararg_buffer280 = 0, $vararg_buffer283 = 0, $vararg_buffer286 = 0, $vararg_buffer289 = 0;
 var $vararg_buffer29 = 0, $vararg_buffer292 = 0, $vararg_buffer295 = 0, $vararg_buffer298 = 0, $vararg_buffer301 = 0, $vararg_buffer304 = 0, $vararg_buffer307 = 0, $vararg_buffer309 = 0, $vararg_buffer312 = 0, $vararg_buffer315 = 0, $vararg_buffer318 = 0, $vararg_buffer32 = 0, $vararg_buffer320 = 0, $vararg_buffer322 = 0, $vararg_buffer325 = 0, $vararg_buffer328 = 0, $vararg_buffer331 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer40 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0;
 var $vararg_buffer97 = 0, $vararg_ptr43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer331 = sp + 904|0;
 $vararg_buffer328 = sp + 896|0;
 $vararg_buffer325 = sp + 888|0;
 $vararg_buffer322 = sp + 880|0;
 $vararg_buffer320 = sp + 872|0;
 $vararg_buffer318 = sp + 864|0;
 $vararg_buffer315 = sp + 856|0;
 $vararg_buffer312 = sp + 848|0;
 $vararg_buffer309 = sp + 840|0;
 $vararg_buffer307 = sp + 832|0;
 $vararg_buffer304 = sp + 824|0;
 $vararg_buffer301 = sp + 816|0;
 $vararg_buffer298 = sp + 808|0;
 $vararg_buffer295 = sp + 800|0;
 $vararg_buffer292 = sp + 792|0;
 $vararg_buffer289 = sp + 784|0;
 $vararg_buffer286 = sp + 776|0;
 $vararg_buffer283 = sp + 768|0;
 $vararg_buffer280 = sp + 760|0;
 $vararg_buffer277 = sp + 752|0;
 $vararg_buffer274 = sp + 744|0;
 $vararg_buffer271 = sp + 736|0;
 $vararg_buffer268 = sp + 728|0;
 $vararg_buffer265 = sp + 720|0;
 $vararg_buffer262 = sp + 712|0;
 $vararg_buffer259 = sp + 704|0;
 $vararg_buffer256 = sp + 696|0;
 $vararg_buffer253 = sp + 688|0;
 $vararg_buffer250 = sp + 680|0;
 $vararg_buffer247 = sp + 672|0;
 $vararg_buffer244 = sp + 664|0;
 $vararg_buffer241 = sp + 656|0;
 $vararg_buffer238 = sp + 648|0;
 $vararg_buffer235 = sp + 640|0;
 $vararg_buffer232 = sp + 632|0;
 $vararg_buffer229 = sp + 624|0;
 $vararg_buffer226 = sp + 616|0;
 $vararg_buffer223 = sp + 608|0;
 $vararg_buffer220 = sp + 600|0;
 $vararg_buffer217 = sp + 592|0;
 $vararg_buffer214 = sp + 584|0;
 $vararg_buffer211 = sp + 576|0;
 $vararg_buffer208 = sp + 568|0;
 $vararg_buffer205 = sp + 560|0;
 $vararg_buffer202 = sp + 552|0;
 $vararg_buffer199 = sp + 544|0;
 $vararg_buffer196 = sp + 536|0;
 $vararg_buffer193 = sp + 528|0;
 $vararg_buffer190 = sp + 520|0;
 $vararg_buffer187 = sp + 512|0;
 $vararg_buffer184 = sp + 504|0;
 $vararg_buffer181 = sp + 496|0;
 $vararg_buffer178 = sp + 488|0;
 $vararg_buffer175 = sp + 480|0;
 $vararg_buffer172 = sp + 472|0;
 $vararg_buffer169 = sp + 464|0;
 $vararg_buffer166 = sp + 456|0;
 $vararg_buffer163 = sp + 448|0;
 $vararg_buffer160 = sp + 440|0;
 $vararg_buffer157 = sp + 432|0;
 $vararg_buffer154 = sp + 424|0;
 $vararg_buffer151 = sp + 416|0;
 $vararg_buffer148 = sp + 408|0;
 $vararg_buffer145 = sp + 400|0;
 $vararg_buffer142 = sp + 392|0;
 $vararg_buffer139 = sp + 384|0;
 $vararg_buffer136 = sp + 376|0;
 $vararg_buffer133 = sp + 368|0;
 $vararg_buffer130 = sp + 360|0;
 $vararg_buffer127 = sp + 352|0;
 $vararg_buffer124 = sp + 344|0;
 $vararg_buffer121 = sp + 336|0;
 $vararg_buffer118 = sp + 328|0;
 $vararg_buffer115 = sp + 320|0;
 $vararg_buffer112 = sp + 312|0;
 $vararg_buffer109 = sp + 304|0;
 $vararg_buffer106 = sp + 296|0;
 $vararg_buffer103 = sp + 288|0;
 $vararg_buffer100 = sp + 280|0;
 $vararg_buffer97 = sp + 272|0;
 $vararg_buffer94 = sp + 264|0;
 $vararg_buffer91 = sp + 256|0;
 $vararg_buffer88 = sp + 248|0;
 $vararg_buffer85 = sp + 240|0;
 $vararg_buffer82 = sp + 232|0;
 $vararg_buffer79 = sp + 224|0;
 $vararg_buffer76 = sp + 216|0;
 $vararg_buffer73 = sp + 208|0;
 $vararg_buffer70 = sp + 200|0;
 $vararg_buffer67 = sp + 192|0;
 $vararg_buffer64 = sp + 184|0;
 $vararg_buffer61 = sp + 176|0;
 $vararg_buffer58 = sp + 168|0;
 $vararg_buffer55 = sp + 160|0;
 $vararg_buffer53 = sp + 152|0;
 $vararg_buffer50 = sp + 144|0;
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer44 = sp + 128|0;
 $vararg_buffer40 = sp + 120|0;
 $vararg_buffer37 = sp + 112|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $cp;
 $2 = HEAP32[3792>>2]|0;
 $3 = ($2|0)==(2);
 if ($3) {
  $10 = 1;
 } else {
  $4 = HEAP32[3792>>2]|0;
  $5 = ($4|0)!=(0);
  if ($5) {
   $6 = HEAP32[41008>>2]|0;
   $7 = HEAP32[_stdout>>2]|0;
   $8 = ($6|0)==($7|0);
   $539 = $8;
  } else {
   $539 = 0;
  }
  $10 = $539;
 }
 $9 = $10&1;
 $html_out = $9;
 $11 = $1;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   label = 7;
  } else {
   $43 = $1;
   $44 = (_strcasecmp($43,49688)|0);
   $45 = ($44|0)==(0);
   if (!($45)) {
    break;
   }
   $46 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer32>>2] = 49744;
   (_fprintf(($46|0),(49696|0),($vararg_buffer32|0))|0);
   $47 = HEAP32[41008>>2]|0;
   (_fprintf(($47|0),(49752|0),($vararg_buffer35|0))|0);
   $i = 0;
   while(1) {
    $48 = $i;
    $49 = ($48|0)<(37);
    if (!($49)) {
     break;
    }
    $50 = HEAP32[41008>>2]|0;
    $51 = $i;
    $52 = (47712 + (($51*24)|0)|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$vararg_buffer37>>2] = $53;
    (_fprintf(($50|0),(48792|0),($vararg_buffer37|0))|0);
    $54 = HEAP32[41008>>2]|0;
    $55 = $i;
    $56 = (47712 + (($55*24)|0)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $i;
    $59 = (47712 + (($58*24)|0)|0);
    $60 = (($59) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    HEAP32[$vararg_buffer40>>2] = $57;
    $vararg_ptr43 = (($vararg_buffer40) + 4|0);
    HEAP32[$vararg_ptr43>>2] = $61;
    (_fprintf(($54|0),(49776|0),($vararg_buffer40|0))|0);
    $62 = $i;
    $63 = (47712 + (($62*24)|0)|0);
    $64 = (($63) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)!=(0|0);
    if ($66) {
     $67 = HEAP32[41008>>2]|0;
     $68 = $i;
     $69 = (47712 + (($68*24)|0)|0);
     $70 = (($69) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     HEAP32[$vararg_buffer44>>2] = $71;
     (_fprintf(($67|0),(49784|0),($vararg_buffer44|0))|0);
    } else {
     $72 = $i;
     $73 = (47712 + (($72*24)|0)|0);
     $74 = (($73) + 20|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)!=(0|0);
     if ($76) {
      $77 = HEAP32[41008>>2]|0;
      $78 = $i;
      $79 = (47712 + (($78*24)|0)|0);
      $80 = (($79) + 20|0);
      $81 = HEAP32[$80>>2]|0;
      HEAP32[$vararg_buffer47>>2] = $81;
      (_fprintf(($77|0),(49824|0),($vararg_buffer47|0))|0);
     } else {
      $82 = HEAP32[41008>>2]|0;
      $83 = $i;
      $84 = (47712 + (($83*24)|0)|0);
      $85 = (($84) + 16|0);
      $86 = HEAP32[$85>>2]|0;
      HEAP32[$vararg_buffer50>>2] = $86;
      (_fprintf(($82|0),(49824|0),($vararg_buffer50|0))|0);
     }
    }
    $87 = HEAP32[41008>>2]|0;
    (_fprintf(($87|0),(46080|0),($vararg_buffer53|0))|0);
    $88 = $i;
    $89 = (($88) + 1)|0;
    $i = $89;
   }
   $0 = 1;
   $538 = $0;
   STACKTOP = sp;return ($538|0);
  }
 } while(0);
 L27: while(1) {
  if ((label|0) == 7) {
   label = 0;
   $15 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer>>2] = 49024;
   (_fprintf(($15|0),(48872|0),($vararg_buffer|0))|0);
   $16 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer1>>2] = 49096;
   (_fprintf(($16|0),(48872|0),($vararg_buffer1|0))|0);
   $17 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer4>>2] = 49176;
   (_fprintf(($17|0),(48872|0),($vararg_buffer4|0))|0);
   $18 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer7>>2] = 49248;
   (_fprintf(($18|0),(48872|0),($vararg_buffer7|0))|0);
   $19 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer10>>2] = 49328;
   (_fprintf(($19|0),(48872|0),($vararg_buffer10|0))|0);
   $20 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer13>>2] = 49408;
   (_fprintf(($20|0),(48872|0),($vararg_buffer13|0))|0);
   $21 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer16>>2] = 37;
   (_fprintf(($21|0),(49488|0),($vararg_buffer16|0))|0);
   (_set_color(0)|0);
   $i = 0;
   while(1) {
    $22 = $i;
    $23 = ($22|0)<(37);
    if (!($23)) {
     break;
    }
    $24 = $i;
    $25 = (($24|0) % 5)&-1;
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = HEAP32[41008>>2]|0;
     (_fprintf(($27|0),(46080|0),($vararg_buffer19|0))|0);
    }
    $28 = HEAP32[41008>>2]|0;
    $29 = $i;
    $30 = (47712 + (($29*24)|0)|0);
    $31 = HEAP32[$30>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $31;
    $32 = (_fprintf(($28|0),(48792|0),($vararg_buffer21|0))|0);
    $33 = (15 - ($32))|0;
    $j = $33;
    while(1) {
     $34 = $j;
     $35 = ($34|0)>(0);
     if (!($35)) {
      break;
     }
     $36 = HEAP32[41008>>2]|0;
     (_fprintf(($36|0),(49552|0),($vararg_buffer24|0))|0);
     $37 = $j;
     $38 = (($37) + -1)|0;
     $j = $38;
    }
    $39 = $i;
    $40 = (($39) + 1)|0;
    $i = $40;
   }
   _default_color(0);
   $41 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer26>>2] = 49560;
   (_fprintf(($41|0),(48872|0),($vararg_buffer26|0))|0);
   $42 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer29>>2] = 49624;
   (_fprintf(($42|0),(48872|0),($vararg_buffer29|0))|0);
  }
  L44: while(1) {
   $90 = $1;
   $cp1 = $90;
   while(1) {
    $91 = $cp1;
    $92 = HEAP8[$91>>0]|0;
    $93 = $92 << 24 >> 24;
    $94 = ($93|0)!=(0);
    if ($94) {
     $95 = $cp1;
     $96 = HEAP8[$95>>0]|0;
     $97 = $96 << 24 >> 24;
     $98 = (_isspace($97)|0);
     $99 = ($98|0)!=(0);
     if ($99) {
      $540 = 0;
     } else {
      $100 = $cp1;
      $101 = HEAP8[$100>>0]|0;
      $102 = $101 << 24 >> 24;
      $103 = ($102|0)!=(44);
      $540 = $103;
     }
    } else {
     $540 = 0;
    }
    if (!($540)) {
     break;
    }
    $104 = $cp1;
    $105 = (($104) + 1|0);
    $cp1 = $105;
   }
   $106 = $cp1;
   $107 = $1;
   $108 = ($106|0)!=($107|0);
   if (!($108)) {
    label = 137;
    break L27;
   }
   $109 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer55>>2] = 49832;
   (_fprintf(($109|0),(48872|0),($vararg_buffer55|0))|0);
   $110 = HEAP32[41008>>2]|0;
   $111 = HEAP32[_stdout>>2]|0;
   $112 = ($110|0)!=($111|0);
   if ($112) {
    $113 = HEAP32[41008>>2]|0;
    HEAP32[$vararg_buffer58>>2] = 47616;
    (_fprintf(($113|0),(48872|0),($vararg_buffer58|0))|0);
   }
   $flag = 0;
   $i = 0;
   while(1) {
    $114 = $i;
    $115 = ($114|0)<(37);
    if (!($115)) {
     break;
    }
    $116 = $1;
    $117 = $i;
    $118 = (47712 + (($117*24)|0)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $cp1;
    $121 = $1;
    $122 = $120;
    $123 = $121;
    $124 = (($122) - ($123))|0;
    $125 = (_strncasecmp($116,$119,$124)|0);
    $126 = ($125|0)==(0);
    if ($126) {
     label = 46;
    } else {
     $127 = $i;
     $128 = (47712 + (($127*24)|0)|0);
     $129 = (($128) + 4|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)!=(0|0);
     if ($131) {
      $132 = $1;
      $133 = $i;
      $134 = (47712 + (($133*24)|0)|0);
      $135 = (($134) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $cp1;
      $138 = $1;
      $139 = $137;
      $140 = $138;
      $141 = (($139) - ($140))|0;
      $142 = (_strncasecmp($132,$136,$141)|0);
      $143 = ($142|0)==(0);
      if ($143) {
       label = 46;
      }
     }
    }
    if ((label|0) == 46) {
     label = 0;
     $144 = $i;
     (_display_command($144)|0);
     $flag = 1;
    }
    $145 = $i;
    $146 = (($145) + 1)|0;
    $i = $146;
   }
   $147 = $1;
   $148 = $cp1;
   $149 = $1;
   $150 = $148;
   $151 = $149;
   $152 = (($150) - ($151))|0;
   $153 = (_strncasecmp($147,47704,$152)|0);
   $154 = ($153|0)==(0);
   if ($154) {
    (_display_repeat_command()|0);
    $flag = 1;
   }
   $155 = $flag;
   $156 = ($155|0)!=(0);
   if ($156) {
    $157 = $cp1;
    $158 = (_skip_comma_space($157)|0);
    $1 = $158;
    continue;
   }
   $159 = $1;
   $160 = $cp1;
   $161 = $1;
   $162 = $160;
   $163 = $161;
   $164 = (($162) - ($163))|0;
   $165 = (_strncasecmp($159,49912,$164)|0);
   $166 = ($165|0)==(0);
   L75: do {
    if ($166) {
     $167 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer61>>2] = 49920;
     $168 = (_fprintf(($167|0),(48872|0),($vararg_buffer61|0))|0);
     _underline_title($168);
     $169 = HEAP32[41008>>2]|0;
     _display_startup_message($169);
    } else {
     $170 = $1;
     $171 = $cp1;
     $172 = $1;
     $173 = $171;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = (_strncasecmp($170,49936,$175)|0);
     $177 = ($176|0)==(0);
     if ($177) {
      label = 56;
      break L27;
     }
     $179 = $1;
     $180 = $cp1;
     $181 = $1;
     $182 = $180;
     $183 = $181;
     $184 = (($182) - ($183))|0;
     $185 = (_strncasecmp($179,49952,$184)|0);
     $186 = ($185|0)==(0);
     if ($186) {
      label = 58;
      break L27;
     }
     $192 = $1;
     $193 = $cp1;
     $194 = $1;
     $195 = $193;
     $196 = $194;
     $197 = (($195) - ($196))|0;
     $198 = (_strncasecmp($192,50040,$197)|0);
     $199 = ($198|0)==(0);
     if ($199) {
      label = 60;
      break L27;
     }
     $209 = $1;
     $210 = $cp1;
     $211 = $1;
     $212 = $210;
     $213 = $211;
     $214 = (($212) - ($213))|0;
     $215 = (_strncasecmp($209,50400,$214)|0);
     $216 = ($215|0)==(0);
     if (!($216)) {
      $217 = $1;
      $218 = $cp1;
      $219 = $1;
      $220 = $218;
      $221 = $219;
      $222 = (($220) - ($221))|0;
      $223 = (_strncasecmp($217,50408,$222)|0);
      $224 = ($223|0)==(0);
      if (!($224)) {
       $245 = $1;
       $246 = $cp1;
       $247 = $1;
       $248 = $246;
       $249 = $247;
       $250 = (($248) - ($249))|0;
       $251 = (_strncasecmp($245,51640,$250)|0);
       $252 = ($251|0)==(0);
       if (!($252)) {
        $253 = $1;
        $254 = $cp1;
        $255 = $1;
        $256 = $254;
        $257 = $255;
        $258 = (($256) - ($257))|0;
        $259 = (_strncasecmp($253,51656,$258)|0);
        $260 = ($259|0)==(0);
        if (!($260)) {
         $261 = $1;
         $262 = $cp1;
         $263 = $1;
         $264 = $262;
         $265 = $263;
         $266 = (($264) - ($265))|0;
         $267 = (_strncasecmp($261,51672,$266)|0);
         $268 = ($267|0)==(0);
         if (!($268)) {
          $273 = $1;
          $274 = $cp1;
          $275 = $1;
          $276 = $274;
          $277 = $275;
          $278 = (($276) - ($277))|0;
          $279 = (_strncasecmp($273,51728,$278)|0);
          $280 = ($279|0)==(0);
          if ($280) {
           $281 = HEAP32[41008>>2]|0;
           HEAP32[$vararg_buffer151>>2] = 51736;
           $282 = (_fprintf(($281|0),(48872|0),($vararg_buffer151|0))|0);
           _underline_title($282);
           $283 = HEAP32[41008>>2]|0;
           HEAP32[$vararg_buffer154>>2] = 51752;
           (_fprintf(($283|0),(48872|0),($vararg_buffer154|0))|0);
           $284 = HEAP32[41008>>2]|0;
           HEAP32[$vararg_buffer157>>2] = 51824;
           (_fprintf(($284|0),(48872|0),($vararg_buffer157|0))|0);
           $285 = HEAP32[41008>>2]|0;
           HEAP32[$vararg_buffer160>>2] = 51864;
           (_fprintf(($285|0),(48872|0),($vararg_buffer160|0))|0);
           $286 = HEAP32[41008>>2]|0;
           HEAP32[$vararg_buffer163>>2] = 51920;
           (_fprintf(($286|0),(48872|0),($vararg_buffer163|0))|0);
           $287 = HEAP32[41008>>2]|0;
           HEAP32[$vararg_buffer166>>2] = 51984;
           (_fprintf(($287|0),(48872|0),($vararg_buffer166|0))|0);
           (_version_report()|0);
           break;
          }
          $288 = $1;
          $289 = $cp1;
          $290 = $1;
          $291 = $289;
          $292 = $290;
          $293 = (($291) - ($292))|0;
          $294 = (_strncasecmp($288,52024,$293)|0);
          $295 = ($294|0)==(0);
          do {
           if (!($295)) {
            $296 = $1;
            $297 = $cp1;
            $298 = $1;
            $299 = $297;
            $300 = $298;
            $301 = (($299) - ($300))|0;
            $302 = (_strncasecmp($296,52032,$301)|0);
            $303 = ($302|0)==(0);
            if ($303) {
             break;
            }
            $327 = $1;
            $328 = HEAP8[$327>>0]|0;
            $329 = $328 << 24 >> 24;
            $330 = ($329|0)==(33);
            if ($330) {
             $331 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer172>>2] = 52072;
             (_fprintf(($331|0),(48872|0),($vararg_buffer172|0))|0);
             $332 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer175>>2] = 52144;
             (_fprintf(($332|0),(48872|0),($vararg_buffer175|0))|0);
             $333 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer178>>2] = 52216;
             (_fprintf(($333|0),(48872|0),($vararg_buffer178|0))|0);
             $334 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer181>>2] = 52296;
             (_fprintf(($334|0),(48872|0),($vararg_buffer181|0))|0);
             $335 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer184>>2] = 52352;
             (_fprintf(($335|0),(48872|0),($vararg_buffer184|0))|0);
             break L75;
            }
            $336 = $1;
            $337 = HEAP8[$336>>0]|0;
            $338 = $337 << 24 >> 24;
            $339 = (_is_mathomatic_operator($338)|0);
            $340 = ($339|0)!=(0);
            do {
             if (!($340)) {
              $341 = $1;
              $342 = $cp1;
              $343 = $1;
              $344 = $342;
              $345 = $343;
              $346 = (($344) - ($345))|0;
              $347 = (_strncasecmp($341,52392,$346)|0);
              $348 = ($347|0)==(0);
              if ($348) {
               break;
              }
              $349 = $1;
              $350 = $cp1;
              $351 = $1;
              $352 = $350;
              $353 = $351;
              $354 = (($352) - ($353))|0;
              $355 = (_strncasecmp($349,52408,$354)|0);
              $356 = ($355|0)==(0);
              if ($356) {
               break;
              }
              $357 = $1;
              $358 = $cp1;
              $359 = $1;
              $360 = $358;
              $361 = $359;
              $362 = (($360) - ($361))|0;
              $363 = (_strncasecmp($357,52424,$362)|0);
              $364 = ($363|0)==(0);
              if ($364) {
               break;
              }
              $387 = $1;
              $388 = HEAP8[$387>>0]|0;
              $389 = $388 << 24 >> 24;
              $390 = (_isdigit($389)|0);
              $391 = ($390|0)!=(0);
              do {
               if (!($391)) {
                $392 = $1;
                $393 = HEAP8[$392>>0]|0;
                $394 = $393 << 24 >> 24;
                $395 = ($394|0)==(46);
                if ($395) {
                 break;
                }
                $396 = $1;
                $397 = $cp1;
                $398 = $1;
                $399 = $397;
                $400 = $398;
                $401 = (($399) - ($400))|0;
                $402 = (_strncasecmp($396,53696,$401)|0);
                $403 = ($402|0)==(0);
                if ($403) {
                 break;
                }
                $404 = $1;
                $405 = $cp1;
                $406 = $1;
                $407 = $405;
                $408 = $406;
                $409 = (($407) - ($408))|0;
                $410 = (_strncasecmp($404,53712,$409)|0);
                $411 = ($410|0)==(0);
                if ($411) {
                 break;
                }
                $412 = $1;
                $413 = $cp1;
                $414 = $1;
                $415 = $413;
                $416 = $414;
                $417 = (($415) - ($416))|0;
                $418 = (_strncasecmp($412,53720,$417)|0);
                $419 = ($418|0)==(0);
                if ($419) {
                 break;
                }
                $420 = $1;
                $421 = $cp1;
                $422 = $1;
                $423 = $421;
                $424 = $422;
                $425 = (($423) - ($424))|0;
                $426 = (_strncasecmp($420,53728,$425)|0);
                $427 = ($426|0)==(0);
                if ($427) {
                 break;
                }
                $428 = $1;
                $429 = $cp1;
                $430 = $1;
                $431 = $429;
                $432 = $430;
                $433 = (($431) - ($432))|0;
                $434 = (_strncasecmp($428,53736,$433)|0);
                $435 = ($434|0)==(0);
                if ($435) {
                 break;
                }
                $459 = $1;
                $460 = $cp1;
                $461 = $1;
                $462 = $460;
                $463 = $461;
                $464 = (($462) - ($463))|0;
                $465 = (_strncasecmp($459,54960,$464)|0);
                $466 = ($465|0)==(0);
                if ($466) {
                 break L44;
                }
                $469 = $1;
                $470 = $cp1;
                $471 = $1;
                $472 = $470;
                $473 = $471;
                $474 = (($472) - ($473))|0;
                $475 = (_strncasecmp($469,54976,$474)|0);
                $476 = ($475|0)==(0);
                do {
                 if (!($476)) {
                  $477 = $1;
                  $478 = $cp1;
                  $479 = $1;
                  $480 = $478;
                  $481 = $479;
                  $482 = (($480) - ($481))|0;
                  $483 = (_strncasecmp($477,54984,$482)|0);
                  $484 = ($483|0)==(0);
                  if ($484) {
                   break;
                  }
                  $505 = $1;
                  $506 = (_is_all($505)|0);
                  $507 = ($506|0)!=(0);
                  if (!($507)) {
                   label = 136;
                   break L27;
                  }
                  $508 = HEAP32[41008>>2]|0;
                  HEAP32[$vararg_buffer325>>2] = 49744;
                  $509 = (_fprintf(($508|0),(55248|0),($vararg_buffer325|0))|0);
                  _underline_title($509);
                  $i = 0;
                  $row = 3;
                  while(1) {
                   $510 = $i;
                   $511 = ($510|0)<(37);
                   if (!($511)) {
                    break;
                   }
                   $512 = $i;
                   $513 = (_display_command($512)|0);
                   $514 = $row;
                   $515 = (($514) + ($513))|0;
                   $row = $515;
                   $516 = $i;
                   $517 = (($516) + 1)|0;
                   $i = $517;
                   $518 = $i;
                   $519 = ($518|0)>=(37);
                   if ($519) {
                    label = 126;
                    break;
                   }
                   $520 = HEAP32[80>>2]|0;
                   $521 = ($520|0)!=(0);
                   do {
                    if ($521) {
                     $522 = $row;
                     $523 = HEAP32[80>>2]|0;
                     $524 = (($523) - 5)|0;
                     $525 = ($522|0)>=($524|0);
                     if (!($525)) {
                      break;
                     }
                     $row = 1;
                     $526 = HEAP32[41008>>2]|0;
                     $527 = HEAP32[_stdout>>2]|0;
                     $528 = ($526|0)==($527|0);
                     if ($528) {
                      $529 = (_pause_cmd(47616)|0);
                      $530 = ($529|0)!=(0);
                      if (!($530)) {
                       label = 131;
                       break L27;
                      }
                     }
                    }
                   } while(0);
                  }
                  if ((label|0) == 126) {
                   label = 0;
                  }
                  $531 = HEAP32[41008>>2]|0;
                  HEAP32[$vararg_buffer328>>2] = 37;
                  (_fprintf(($531|0),(55288|0),($vararg_buffer328|0))|0);
                  break L75;
                 }
                } while(0);
                $485 = HEAP32[41008>>2]|0;
                HEAP32[$vararg_buffer304>>2] = 54992;
                $486 = (_fprintf(($485|0),(48872|0),($vararg_buffer304|0))|0);
                _underline_title($486);
                $487 = HEAP32[392>>2]|0;
                $488 = ($487|0)!=(0);
                if ($488) {
                 $489 = HEAP32[392>>2]|0;
                 $490 = ($489|0)==(2);
                 if ($490) {
                  $491 = HEAP32[41008>>2]|0;
                  (_fprintf(($491|0),(55008|0),($vararg_buffer307|0))|0);
                 }
                 $492 = HEAP32[41008>>2]|0;
                 $493 = HEAP32[400>>2]|0;
                 $494 = ($493|0)!=(0);
                 $495 = $494 ? 55080 : 55088;
                 HEAP32[$vararg_buffer309>>2] = $495;
                 (_fprintf(($492|0),(55024|0),($vararg_buffer309|0))|0);
                 $496 = HEAP32[3792>>2]|0;
                 $497 = ($496|0)!=(0);
                 if ($497) {
                  $498 = HEAP32[41008>>2]|0;
                  HEAP32[$vararg_buffer312>>2] = 55096;
                  (_fprintf(($498|0),(48872|0),($vararg_buffer312|0))|0);
                 } else {
                  $499 = HEAP32[41008>>2]|0;
                  HEAP32[$vararg_buffer315>>2] = 55152;
                  (_fprintf(($499|0),(48872|0),($vararg_buffer315|0))|0);
                 }
                 $500 = (_display_all_colors()|0);
                 $501 = ($500|0)!=(0);
                 if ($501) {
                  $502 = HEAP32[41008>>2]|0;
                  (_fprintf(($502|0),(55176|0),($vararg_buffer318|0))|0);
                 } else {
                  $503 = HEAP32[41008>>2]|0;
                  (_fprintf(($503|0),(46080|0),($vararg_buffer320|0))|0);
                 }
                } else {
                 $504 = HEAP32[41008>>2]|0;
                 HEAP32[$vararg_buffer322>>2] = 55208;
                 (_fprintf(($504|0),(48872|0),($vararg_buffer322|0))|0);
                }
                break L75;
               }
              } while(0);
              $436 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer244>>2] = 53752;
              $437 = (_fprintf(($436|0),(48872|0),($vararg_buffer244|0))|0);
              _underline_title($437);
              $438 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer247>>2] = 53768;
              (_fprintf(($438|0),(48872|0),($vararg_buffer247|0))|0);
              $439 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer250>>2] = 53848;
              (_fprintf(($439|0),(48872|0),($vararg_buffer250|0))|0);
              $440 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer253>>2] = 53928;
              (_fprintf(($440|0),(48872|0),($vararg_buffer253|0))|0);
              $441 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer256>>2] = 54008;
              (_fprintf(($441|0),(48872|0),($vararg_buffer256|0))|0);
              $442 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer259>>2] = 54088;
              (_fprintf(($442|0),(48872|0),($vararg_buffer259|0))|0);
              $443 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer262>>2] = 54168;
              (_fprintf(($443|0),(48872|0),($vararg_buffer262|0))|0);
              $444 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer265>>2] = 54224;
              (_fprintf(($444|0),(48872|0),($vararg_buffer265|0))|0);
              $445 = $html_out;
              $446 = ($445|0)!=(0);
              if ($446) {
               $447 = HEAP32[41008>>2]|0;
               HEAP32[$vararg_buffer268>>2] = 54256;
               (_fprintf(($447|0),(48872|0),($vararg_buffer268|0))|0);
               $448 = HEAP32[41008>>2]|0;
               HEAP32[$vararg_buffer271>>2] = 54328;
               (_fprintf(($448|0),(48872|0),($vararg_buffer271|0))|0);
               $449 = HEAP32[41008>>2]|0;
               HEAP32[$vararg_buffer274>>2] = 54392;
               (_fprintf(($449|0),(48872|0),($vararg_buffer274|0))|0);
              } else {
               $450 = HEAP32[41008>>2]|0;
               HEAP32[$vararg_buffer277>>2] = 54456;
               (_fprintf(($450|0),(48872|0),($vararg_buffer277|0))|0);
               $451 = HEAP32[41008>>2]|0;
               HEAP32[$vararg_buffer280>>2] = 54512;
               (_fprintf(($451|0),(48872|0),($vararg_buffer280|0))|0);
               $452 = HEAP32[41008>>2]|0;
               HEAP32[$vararg_buffer283>>2] = 54576;
               (_fprintf(($452|0),(48872|0),($vararg_buffer283|0))|0);
              }
              $453 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer286>>2] = 54632;
              (_fprintf(($453|0),(48872|0),($vararg_buffer286|0))|0);
              $454 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer289>>2] = 54704;
              (_fprintf(($454|0),(48872|0),($vararg_buffer289|0))|0);
              $455 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer292>>2] = 54752;
              (_fprintf(($455|0),(48872|0),($vararg_buffer292|0))|0);
              $456 = HEAP32[41008>>2]|0;
              HEAP32[$vararg_buffer295>>2] = 54800;
              (_fprintf(($456|0),(48872|0),($vararg_buffer295|0))|0);
              $457 = HEAP32[41008>>2]|0;
              HEAPF64[tempDoublePtr>>3]=1.7976931348623157E+308;HEAP32[$vararg_buffer298>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer298+4>>2]=HEAP32[tempDoublePtr+4>>2];
              (_fprintf(($457|0),(54840|0),($vararg_buffer298|0))|0);
              $458 = HEAP32[41008>>2]|0;
              HEAPF64[tempDoublePtr>>3]=2.2250738585072014E-308;HEAP32[$vararg_buffer301>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer301+4>>2]=HEAP32[tempDoublePtr+4>>2];
              (_fprintf(($458|0),(54912|0),($vararg_buffer301|0))|0);
              break L75;
             }
            } while(0);
            $365 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer187>>2] = 52440;
            $366 = (_fprintf(($365|0),(48872|0),($vararg_buffer187|0))|0);
            _underline_title($366);
            $367 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer190>>2] = 52456;
            (_fprintf(($367|0),(48872|0),($vararg_buffer190|0))|0);
            $368 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer193>>2] = 52536;
            (_fprintf(($368|0),(48872|0),($vararg_buffer193|0))|0);
            $369 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer196>>2] = 52592;
            (_fprintf(($369|0),(48872|0),($vararg_buffer196|0))|0);
            $370 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer199>>2] = 52664;
            (_fprintf(($370|0),(48872|0),($vararg_buffer199|0))|0);
            $371 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer202>>2] = 52720;
            (_fprintf(($371|0),(48872|0),($vararg_buffer202|0))|0);
            $372 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer205>>2] = 52792;
            (_fprintf(($372|0),(48872|0),($vararg_buffer205|0))|0);
            $373 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer208>>2] = 52840;
            (_fprintf(($373|0),(48872|0),($vararg_buffer208|0))|0);
            $374 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer211>>2] = 52904;
            (_fprintf(($374|0),(48872|0),($vararg_buffer211|0))|0);
            $375 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer214>>2] = 52984;
            (_fprintf(($375|0),(48872|0),($vararg_buffer214|0))|0);
            $376 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer217>>2] = 53064;
            (_fprintf(($376|0),(48872|0),($vararg_buffer217|0))|0);
            $377 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer220>>2] = 53144;
            (_fprintf(($377|0),(48872|0),($vararg_buffer220|0))|0);
            $378 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer223>>2] = 53224;
            (_fprintf(($378|0),(48872|0),($vararg_buffer223|0))|0);
            $379 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer226>>2] = 53304;
            (_fprintf(($379|0),(48872|0),($vararg_buffer226|0))|0);
            $380 = $html_out;
            $381 = ($380|0)!=(0);
            if ($381) {
             $382 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer229>>2] = 53384;
             (_fprintf(($382|0),(48872|0),($vararg_buffer229|0))|0);
             $383 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer232>>2] = 53448;
             (_fprintf(($383|0),(48872|0),($vararg_buffer232|0))|0);
            } else {
             $384 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer235>>2] = 53512;
             (_fprintf(($384|0),(48872|0),($vararg_buffer235|0))|0);
             $385 = HEAP32[41008>>2]|0;
             HEAP32[$vararg_buffer238>>2] = 53568;
             (_fprintf(($385|0),(48872|0),($vararg_buffer238|0))|0);
            }
            $386 = HEAP32[41008>>2]|0;
            HEAP32[$vararg_buffer241>>2] = 53624;
            (_fprintf(($386|0),(48872|0),($vararg_buffer241|0))|0);
            break L75;
           }
          } while(0);
          $304 = HEAP32[41008>>2]|0;
          HEAP32[$vararg_buffer169>>2] = 52040;
          $305 = (_fprintf(($304|0),(48872|0),($vararg_buffer169|0))|0);
          _underline_title($305);
          $i = 0;
          $row = 3;
          while(1) {
           $306 = $i;
           $307 = ($306|0)<(37);
           if (!($307)) {
            break;
           }
           $308 = $i;
           $309 = (_display_usage(47616,$308)|0);
           $310 = $row;
           $311 = (($310) + ($309))|0;
           $row = $311;
           $312 = $i;
           $313 = (($312) + 1)|0;
           $i = $313;
           $314 = $i;
           $315 = ($314|0)>=(37);
           if ($315) {
            label = 75;
            break;
           }
           $316 = HEAP32[80>>2]|0;
           $317 = ($316|0)!=(0);
           do {
            if ($317) {
             $318 = $row;
             $319 = HEAP32[80>>2]|0;
             $320 = (($319) - 3)|0;
             $321 = ($318|0)>=($320|0);
             if (!($321)) {
              break;
             }
             $row = 2;
             $322 = HEAP32[41008>>2]|0;
             $323 = HEAP32[_stdout>>2]|0;
             $324 = ($322|0)==($323|0);
             if ($324) {
              $325 = (_pause_cmd(47616)|0);
              $326 = ($325|0)!=(0);
              if (!($326)) {
               label = 80;
               break L27;
              }
             }
            }
           } while(0);
          }
          if ((label|0) == 75) {
           label = 0;
          }
          break;
         }
        }
       }
       $269 = HEAP32[41008>>2]|0;
       HEAP32[$vararg_buffer145>>2] = 51688;
       $270 = (_fprintf(($269|0),(48872|0),($vararg_buffer145|0))|0);
       _underline_title($270);
       $271 = HEAP32[41008>>2]|0;
       $272 = HEAP32[45168>>2]|0;
       HEAP32[$vararg_buffer148>>2] = $272;
       (_fprintf(($271|0),(48792|0),($vararg_buffer148|0))|0);
       break;
      }
     }
     $225 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer88>>2] = 50416;
     $226 = (_fprintf(($225|0),(48872|0),($vararg_buffer88|0))|0);
     _underline_title($226);
     $227 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer91>>2] = 50440;
     (_fprintf(($227|0),(48872|0),($vararg_buffer91|0))|0);
     $228 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer94>>2] = 50488;
     (_fprintf(($228|0),(48872|0),($vararg_buffer94|0))|0);
     $229 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer97>>2] = 50568;
     (_fprintf(($229|0),(48872|0),($vararg_buffer97|0))|0);
     $230 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer100>>2] = 50648;
     (_fprintf(($230|0),(48872|0),($vararg_buffer100|0))|0);
     $231 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer103>>2] = 50728;
     (_fprintf(($231|0),(48872|0),($vararg_buffer103|0))|0);
     $232 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer106>>2] = 50768;
     (_fprintf(($232|0),(48872|0),($vararg_buffer106|0))|0);
     $233 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer109>>2] = 50832;
     (_fprintf(($233|0),(48872|0),($vararg_buffer109|0))|0);
     $234 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer112>>2] = 50904;
     (_fprintf(($234|0),(48872|0),($vararg_buffer112|0))|0);
     $235 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer115>>2] = 50984;
     (_fprintf(($235|0),(48872|0),($vararg_buffer115|0))|0);
     $236 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer118>>2] = 51048;
     (_fprintf(($236|0),(48872|0),($vararg_buffer118|0))|0);
     $237 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer121>>2] = 51096;
     (_fprintf(($237|0),(48872|0),($vararg_buffer121|0))|0);
     $238 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer124>>2] = 51176;
     (_fprintf(($238|0),(48872|0),($vararg_buffer124|0))|0);
     $239 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer127>>2] = 51256;
     (_fprintf(($239|0),(48872|0),($vararg_buffer127|0))|0);
     $240 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer130>>2] = 51288;
     (_fprintf(($240|0),(48872|0),($vararg_buffer130|0))|0);
     $241 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer133>>2] = 51360;
     (_fprintf(($241|0),(48872|0),($vararg_buffer133|0))|0);
     $242 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer136>>2] = 51408;
     (_fprintf(($242|0),(48872|0),($vararg_buffer136|0))|0);
     $243 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer139>>2] = 51488;
     (_fprintf(($243|0),(48872|0),($vararg_buffer139|0))|0);
     $244 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer142>>2] = 51568;
     (_fprintf(($244|0),(48872|0),($vararg_buffer142|0))|0);
    }
   } while(0);
   $532 = HEAP32[41008>>2]|0;
   $533 = HEAP32[_stdout>>2]|0;
   $534 = ($532|0)!=($533|0);
   if ($534) {
    $535 = HEAP32[41008>>2]|0;
    HEAP32[$vararg_buffer331>>2] = 47616;
    (_fprintf(($535|0),(48872|0),($vararg_buffer331|0))|0);
   }
   $536 = $cp1;
   $537 = (_skip_comma_space($536)|0);
   $1 = $537;
  }
  $467 = $cp1;
  $468 = (_skip_comma_space($467)|0);
  $1 = $468;
  label = 7;
 }
 if ((label|0) == 56) {
  $178 = (_read_examples(45744)|0);
  $0 = $178;
  $538 = $0;
  STACKTOP = sp;return ($538|0);
 }
 else if ((label|0) == 58) {
  $187 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer64>>2] = 49968;
  $188 = (_fprintf(($187|0),(48872|0),($vararg_buffer64|0))|0);
  _underline_title($188);
  $189 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer67>>2] = 49984;
  $190 = (_fprintf(($189|0),(48872|0),($vararg_buffer67|0))|0);
  _underline_title($190);
  $191 = (_read_examples(47136)|0);
  $0 = $191;
  $538 = $0;
  STACKTOP = sp;return ($538|0);
 }
 else if ((label|0) == 60) {
  $200 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer70>>2] = 50056;
  $201 = (_fprintf(($200|0),(48872|0),($vararg_buffer70|0))|0);
  _underline_title($201);
  $202 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer73>>2] = 50080;
  (_fprintf(($202|0),(48872|0),($vararg_buffer73|0))|0);
  $203 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer76>>2] = 50128;
  (_fprintf(($203|0),(48872|0),($vararg_buffer76|0))|0);
  $204 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer79>>2] = 50200;
  (_fprintf(($204|0),(48872|0),($vararg_buffer79|0))|0);
  $205 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer82>>2] = 50272;
  (_fprintf(($205|0),(48872|0),($vararg_buffer82|0))|0);
  $206 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer85>>2] = 50352;
  $207 = (_fprintf(($206|0),(48872|0),($vararg_buffer85|0))|0);
  _underline_title($207);
  $208 = (_read_examples(47496)|0);
  $0 = $208;
  $538 = $0;
  STACKTOP = sp;return ($538|0);
 }
 else if ((label|0) == 80) {
  $0 = 0;
  $538 = $0;
  STACKTOP = sp;return ($538|0);
 }
 else if ((label|0) == 131) {
  $0 = 0;
  $538 = $0;
  STACKTOP = sp;return ($538|0);
 }
 else if ((label|0) == 136) {
  _error(55344);
  $0 = 0;
  $538 = $0;
  STACKTOP = sp;return ($538|0);
 }
 else if ((label|0) == 137) {
  $0 = 1;
  $538 = $0;
  STACKTOP = sp;return ($538|0);
 }
 return 0|0;
}
function _display_process($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $nlt = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $cp;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $4 = $1;
 $5 = (_strlen(($4|0))|0);
 $len = $5;
 $6 = $len;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = $len;
  $9 = (($8) + -1)|0;
  $len = $9;
 }
 $10 = $len;
 $11 = $1;
 $12 = (($11) + ($10)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = ($14|0)==(10);
 $16 = $15&1;
 $nlt = $16;
 HEAP32[41240>>2] = 0;
 $17 = HEAP32[41008>>2]|0;
 $18 = HEAP32[_stdout>>2]|0;
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[41008>>2]|0;
  $21 = HEAP32[_stderr>>2]|0;
  $22 = ($20|0)!=($21|0);
  if ($22) {
   $23 = HEAP32[3792>>2]|0;
   $24 = ($23|0)==(2);
   if ($24) {
    (_set_color(3)|0);
    $25 = HEAP32[41008>>2]|0;
    $26 = HEAP32[472>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$vararg_buffer>>2] = $27;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 48752;
    $28 = (_fprintf(($25|0),(48744|0),($vararg_buffer|0))|0);
    HEAP32[41240>>2] = $28;
    _default_color(0);
    $29 = HEAP32[41240>>2]|0;
    $30 = (($29) - 9)|0;
    HEAP32[41240>>2] = $30;
    $31 = HEAP32[41008>>2]|0;
    $32 = $1;
    HEAP32[$vararg_buffer2>>2] = $32;
    (_fprintf(($31|0),(48768|0),($vararg_buffer2|0))|0);
   } else {
    $33 = HEAP32[41008>>2]|0;
    $34 = HEAP32[472>>2]|0;
    $35 = (($34) + 1)|0;
    HEAP32[$vararg_buffer5>>2] = $35;
    $vararg_ptr8 = (($vararg_buffer5) + 4|0);
    HEAP32[$vararg_ptr8>>2] = 48784;
    $36 = (_fprintf(($33|0),(48744|0),($vararg_buffer5|0))|0);
    HEAP32[41240>>2] = $36;
    $37 = HEAP32[41008>>2]|0;
    $38 = $1;
    HEAP32[$vararg_buffer9>>2] = $38;
    (_fprintf(($37|0),(48792|0),($vararg_buffer9|0))|0);
   }
   $39 = $nlt;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $41 = HEAP32[41008>>2]|0;
    (_fprintf(($41|0),(46080|0),($vararg_buffer12|0))|0);
   }
  }
 }
 $42 = $1;
 _set_error_level($42);
 $43 = $1;
 $44 = (_process($43)|0);
 $0 = $44;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _parse_var2($vp,$cp) {
 $vp = $vp|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $vp;
 $2 = $cp;
 $3 = $2;
 $4 = (_skip_comma_space($3)|0);
 $2 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (_parse_var($5,$6)|0);
 $2 = $7;
 $8 = $2;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = $2;
  $11 = (_skip_comma_space($10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return 0|0;
}
function _display_usage($pstr,$i) {
 $pstr = $pstr|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $pstr;
 $2 = $i;
 $len = 0;
 $3 = HEAP32[41008>>2]|0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $5 = (_fprintf(($3|0),(48792|0),($vararg_buffer|0))|0);
 $6 = $len;
 $7 = (($6) + ($5))|0;
 $len = $7;
 (_set_color(0)|0);
 $8 = HEAP32[41008>>2]|0;
 $9 = $2;
 $10 = (47712 + (($9*24)|0)|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $11;
 $12 = (_fprintf(($8|0),(48792|0),($vararg_buffer1|0))|0);
 $13 = $len;
 $14 = (($13) + ($12))|0;
 $len = $14;
 _default_color(0);
 $15 = HEAP32[41008>>2]|0;
 $16 = $2;
 $17 = (47712 + (($16*24)|0)|0);
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $19;
 $20 = (_fprintf(($15|0),(48800|0),($vararg_buffer4|0))|0);
 $21 = $len;
 $22 = (($21) + ($20))|0;
 $len = $22;
 $23 = HEAP32[72>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $len;
  $26 = HEAP32[72>>2]|0;
  $27 = ($25|0)>($26|0);
  if ($27) {
   $0 = 2;
   $28 = $0;
   STACKTOP = sp;return ($28|0);
  }
 }
 $0 = 1;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _display_command($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rows = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $i;
 $rows = 2;
 $1 = HEAP32[41008>>2]|0;
 $2 = $0;
 $3 = (47712 + (($2*24)|0)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (47712 + (($5*24)|0)|0);
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 (_fprintf(($1|0),(48808|0),($vararg_buffer|0))|0);
 $9 = $0;
 $10 = (_display_usage(48824,$9)|0);
 $11 = $rows;
 $12 = (($11) + ($10))|0;
 $rows = $12;
 $13 = $0;
 $14 = (47712 + (($13*24)|0)|0);
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = HEAP32[41008>>2]|0;
  $19 = $0;
  $20 = (47712 + (($19*24)|0)|0);
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $22;
  (_fprintf(($18|0),(48832|0),($vararg_buffer2|0))|0);
  $23 = $rows;
  $24 = (($23) + 1)|0;
  $rows = $24;
 }
 $25 = $0;
 $26 = (47712 + (($25*24)|0)|0);
 $27 = (($26) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  $37 = HEAP32[41008>>2]|0;
  (_fprintf(($37|0),(46080|0),($vararg_buffer8|0))|0);
  $38 = $rows;
  STACKTOP = sp;return ($38|0);
 }
 $30 = HEAP32[41008>>2]|0;
 $31 = $0;
 $32 = (47712 + (($31*24)|0)|0);
 $33 = (($32) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $34;
 (_fprintf(($30|0),(48872|0),($vararg_buffer5|0))|0);
 $35 = $rows;
 $36 = (($35) + 1)|0;
 $rows = $36;
 $37 = HEAP32[41008>>2]|0;
 (_fprintf(($37|0),(46080|0),($vararg_buffer8|0))|0);
 $38 = $rows;
 STACKTOP = sp;return ($38|0);
}
function _display_repeat_command() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[41008>>2]|0;
 HEAP32[$vararg_buffer>>2] = 48880;
 (_fprintf(($0|0),(48872|0),($vararg_buffer|0))|0);
 $1 = HEAP32[41008>>2]|0;
 (_fprintf(($1|0),(48824|0),($vararg_buffer1|0))|0);
 (_set_color(0)|0);
 $2 = HEAP32[41008>>2]|0;
 (_fprintf(($2|0),(47704|0),($vararg_buffer3|0))|0);
 _default_color(0);
 $3 = HEAP32[41008>>2]|0;
 (_fprintf(($3|0),(48952|0),($vararg_buffer5|0))|0);
 $4 = HEAP32[41008>>2]|0;
 HEAP32[$vararg_buffer7>>2] = 48976;
 (_fprintf(($4|0),(48872|0),($vararg_buffer7|0))|0);
 STACKTOP = sp;return 3;
}
function _read_examples($cpp) {
 $cpp = $cpp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cp = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cpp;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = (($3) + ($2<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 9;
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (___strdup($10)|0);
  $cp = $11;
  $12 = $cp;
  $13 = ($12|0)==(0|0);
  if ($13) {
   label = 4;
   break;
  }
  $14 = $cp;
  $15 = (_display_process($14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 6;
   break;
  }
  $18 = $cp;
  _free($18);
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 6) {
  $17 = $cp;
  _free($17);
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 9) {
  $0 = 1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return 0|0;
}
function _underline_title($count) {
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $count;
 $i = 1;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = ($1|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[41008>>2]|0;
  (_fprintf(($4|0),(49016|0),($vararg_buffer|0))|0);
  $5 = $i;
  $6 = (($5) + 1)|0;
  $i = $6;
 }
 $7 = HEAP32[41008>>2]|0;
 (_fprintf(($7|0),(46080|0),($vararg_buffer1|0))|0);
 STACKTOP = sp;return;
}
function _str_tolower($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $3 = $0;
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (_isascii($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $0;
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = (_isupper($13)|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $0;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = (_tolower($18)|0);
    $20 = $19&255;
    $21 = $0;
    HEAP8[$21>>0] = $20;
   }
  }
  $22 = $0;
  $23 = (($22) + 1|0);
  $0 = $23;
 }
 STACKTOP = sp;return;
}
function _put_up_arrow($cnt,$cp) {
 $cnt = $cnt|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cnt;
 $1 = $cp;
 $2 = $1;
 _error($2);
 STACKTOP = sp;return;
}
function _isvarchar($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ch;
 $2 = $1;
 $3 = (_isdigit($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $5 = $1;
 $6 = ($5|0)==(95);
 do {
  if ($6) {
   $16 = 1;
  } else {
   $7 = $1;
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = $1;
    $10 = (_strchr(128,$9)|0);
    $11 = ($10|0)!=(0|0);
    if ($11) {
     $16 = 1;
     break;
    }
   }
   $12 = $1;
   $13 = (_isalpha($12)|0);
   $14 = ($13|0)!=(0);
   $16 = $14;
  }
 } while(0);
 $15 = $16&1;
 $0 = $15;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _paren_increment($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ch;
 $2 = $1;
 if ((($2|0) == 41)) {
  $0 = -1;
 } else if ((($2|0) == 40)) {
  $0 = 1;
 } else {
  $0 = 0;
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _is_mathomatic_operator($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ch;
 $2 = $1;
 switch ($2|0) {
 case 124: case 61: case 45: case 43: case 37: case 47: case 94: case 42: case 33:  {
  $0 = 1;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _binary_parenthesize($p1,$n,$i) {
 $p1 = $p1|0;
 $n = $n|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $level = 0, $skip_negate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $n;
 $2 = $i;
 $3 = $2;
 $4 = $0;
 $5 = (($4) + ($3<<4)|0);
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(3);
 $9 = $8&1;
 $skip_negate = $9;
 $10 = $2;
 $11 = $0;
 $12 = (($11) + ($10<<4)|0);
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $level = $14;
 $16 = $2;
 $17 = (($16) - 1)|0;
 $18 = $0;
 $19 = (($18) + ($17<<4)|0);
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[$20>>2] = $22;
 $23 = $level;
 $24 = ($21|0)>($23|0);
 if ($24) {
  $25 = $2;
  $26 = (($25) - 2)|0;
  $j = $26;
  while(1) {
   $27 = $j;
   $28 = ($27|0)>=(0);
   if (!($28)) {
    break;
   }
   $29 = $j;
   $30 = $0;
   $31 = (($30) + ($29<<4)|0);
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $level;
   $35 = ($33|0)<=($34|0);
   if ($35) {
    label = 5;
    break;
   }
   $36 = $j;
   $37 = $0;
   $38 = (($37) + ($36<<4)|0);
   $39 = (($38) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$39>>2] = $41;
   $42 = $j;
   $43 = (($42) + -1)|0;
   $j = $43;
  }
  if ((label|0) == 5) {
  }
 }
 while(1) {
  $44 = $2;
  $45 = (($44) + 1)|0;
  $46 = $0;
  $47 = (($46) + ($45<<4)|0);
  $48 = (($47) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$48>>2] = $50;
  $51 = $level;
  $52 = ($49|0)>($51|0);
  if ($52) {
   break;
  }
  $73 = $skip_negate;
  $74 = ($73|0)!=(0);
  if (!($74)) {
   label = 24;
   break;
  }
  $75 = $2;
  $76 = (($75) + 1)|0;
  $77 = $0;
  $78 = (($77) + ($76<<4)|0);
  $79 = (($78) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $level;
  $82 = ($80|0)>($81|0);
  if (!($82)) {
   label = 24;
   break;
  }
  $83 = $2;
  $84 = (($83) + 3)|0;
  $85 = $1;
  $86 = ($84|0)<($85|0);
  if (!($86)) {
   label = 24;
   break;
  }
  $87 = $2;
  $88 = (($87) + 2)|0;
  $89 = $0;
  $90 = (($89) + ($88<<4)|0);
  $91 = (($90) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $level;
  $94 = ($92|0)==($93|0);
  if (!($94)) {
   label = 24;
   break;
  }
  $95 = $2;
  $96 = (($95) + 2)|0;
  $97 = $0;
  $98 = (($97) + ($96<<4)|0);
  $99 = (($98) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(3);
  if (!($101)) {
   label = 24;
   break;
  }
  $102 = $2;
  $103 = (($102) + 2)|0;
  $104 = $0;
  $105 = (($104) + ($103<<4)|0);
  $106 = (($105) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + 1)|0;
  HEAP32[$106>>2] = $108;
  $109 = $2;
  $110 = (($109) + 2)|0;
  $2 = $110;
 }
 if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
 $53 = $2;
 $54 = (($53) + 2)|0;
 $j = $54;
 while(1) {
  $55 = $j;
  $56 = $1;
  $57 = ($55|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $j;
  $59 = $0;
  $60 = (($59) + ($58<<4)|0);
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $level;
  $64 = ($62|0)<=($63|0);
  if ($64) {
   label = 14;
   break;
  }
  $65 = $j;
  $66 = $0;
  $67 = (($66) + ($65<<4)|0);
  $68 = (($67) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$68>>2] = $70;
  $71 = $j;
  $72 = (($71) + 1)|0;
  $j = $72;
 }
 if ((label|0) == 14) {
 }
 STACKTOP = sp;return;
}
function _handle_negate($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(3);
  if ($11) {
   $12 = $0;
   $13 = $1;
   $14 = HEAP32[$13>>2]|0;
   $15 = $i;
   _binary_parenthesize($12,$14,$15);
   $16 = $i;
   $17 = $0;
   $18 = (($17) + ($16<<4)|0);
   $19 = (($18) + 8|0);
   HEAP32[$19>>2] = 4;
  }
  $20 = $i;
  $21 = (($20) + 2)|0;
  $i = $21;
 }
 STACKTOP = sp;return;
}
function _give_priority($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>=(9);
  if ($11) {
   $12 = $0;
   $13 = $1;
   $14 = HEAP32[$13>>2]|0;
   $15 = $i;
   _binary_parenthesize($12,$14,$15);
  }
  $16 = $i;
  $17 = (($16) + 2)|0;
  $i = $17;
 }
 $18 = HEAP32[3776>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $1;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) - 2)|0;
  $i = $22;
  while(1) {
   $23 = $i;
   $24 = ($23|0)>=(1);
   if (!($24)) {
    break;
   }
   $25 = $i;
   $26 = $0;
   $27 = (($26) + ($25<<4)|0);
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(8);
   if ($30) {
    $31 = $0;
    $32 = $1;
    $33 = HEAP32[$32>>2]|0;
    $34 = $i;
    _binary_parenthesize($31,$33,$34);
   }
   $35 = $i;
   $36 = (($35) - 2)|0;
   $i = $36;
  }
 } else {
  $i = 1;
  while(1) {
   $37 = $i;
   $38 = $1;
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37|0)<($39|0);
   if (!($40)) {
    break;
   }
   $41 = $i;
   $42 = $0;
   $43 = (($42) + ($41<<4)|0);
   $44 = (($43) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(8);
   if ($46) {
    $47 = $0;
    $48 = $1;
    $49 = HEAP32[$48>>2]|0;
    $50 = $i;
    _binary_parenthesize($47,$49,$50);
   }
   $51 = $i;
   $52 = (($51) + 2)|0;
   $i = $52;
  }
 }
 $i = 1;
 while(1) {
  $53 = $i;
  $54 = $1;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)<($55|0);
  if (!($56)) {
   break;
  }
  $57 = $i;
  $58 = $0;
  $59 = (($58) + ($57<<4)|0);
  $60 = (($59) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  if ((($61|0) == 7) | (($61|0) == 6) | (($61|0) == 5) | (($61|0) == 4)) {
   $62 = $0;
   $63 = $1;
   $64 = HEAP32[$63>>2]|0;
   $65 = $i;
   _binary_parenthesize($62,$64,$65);
  }
  $66 = $i;
  $67 = (($66) + 2)|0;
  $i = $67;
 }
 $68 = $0;
 $69 = $1;
 _handle_negate($68,$69);
 STACKTOP = sp;return;
}
function _parse_section($equation,$np,$cp,$allow_space) {
 $equation = $equation|0;
 $np = $np|0;
 $cp = $cp|0;
 $allow_space = $allow_space|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $abs_array = 0, $abs_count = 0, $cp1 = 0, $cp_start = 0;
 var $cur_level = 0, $d = 0.0, $i = 0, $n = 0, $old_n = 0, $operand = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 84|0;
 $cp1 = sp + 52|0;
 $abs_array = sp + 8|0;
 $1 = $equation;
 $2 = $np;
 HEAP32[$3>>2] = $cp;
 $4 = $allow_space;
 $n = 0;
 $cur_level = 1;
 $operand = 0;
 $abs_count = 0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $655 = $0;
  STACKTOP = sp;return ($655|0);
 }
 $7 = HEAP32[$3>>2]|0;
 $cp_start = $7;
 L5: while(1) {
  $8 = $n;
  $9 = HEAP32[8>>2]|0;
  $10 = (($9) - 10)|0;
  $11 = ($8|0)>($10|0);
  if ($11) {
   _error_huge();
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  L10: do {
   switch ($14|0) {
   case 123: case 40:  {
    $15 = $operand;
    $16 = ($15|0)!=(0);
    if ($16) {
     $operand = 0;
     $17 = $cur_level;
     $18 = $n;
     $19 = $1;
     $20 = (($19) + ($18<<4)|0);
     $21 = (($20) + 4|0);
     HEAP32[$21>>2] = $17;
     $22 = $n;
     $23 = $1;
     $24 = (($23) + ($22<<4)|0);
     HEAP32[$24>>2] = 2;
     $25 = $n;
     $26 = $1;
     $27 = (($26) + ($25<<4)|0);
     $28 = (($27) + 8|0);
     HEAP32[$28>>2] = 4;
     $29 = $n;
     $30 = (($29) + 1)|0;
     $n = $30;
    }
    $31 = $cur_level;
    $32 = (($31) + 1)|0;
    $cur_level = $32;
    break;
   }
   case 13:  {
    break;
   }
   case 27:  {
    $54 = HEAP32[$3>>2]|0;
    $55 = (($54) + 1|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56 << 24 >> 24;
    $58 = ($57|0)==(91);
    if ($58) {
     label = 24;
     break L5;
    }
    $59 = HEAP32[$3>>2]|0;
    $60 = (($59) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $63 = ($62|0)==(79);
    if ($63) {
     label = 24;
     break L5;
    }
    break;
   }
   case 10: case 0: case 59: case 61: case 44:  {
    label = 20;
    break L5;
    break;
   }
   case 125: case 41:  {
    $33 = $cur_level;
    $34 = (($33) + -1)|0;
    $cur_level = $34;
    $35 = $cur_level;
    $36 = ($35|0)<=(0);
    if ($36) {
     label = 13;
     break L5;
    }
    $37 = $abs_count;
    $38 = ($37|0)>(0);
    if ($38) {
     $39 = $cur_level;
     $40 = $abs_count;
     $41 = (($40) - 1)|0;
     $42 = (($abs_array) + ($41<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($39|0)<($43|0);
     if ($44) {
      label = 13;
      break L5;
     }
    }
    $50 = $operand;
    $51 = ($50|0)!=(0);
    if (!($51)) {
     label = 15;
     break L5;
    }
    break;
   }
   case 12: case 9: case 32:  {
    $52 = $4;
    $53 = ($52|0)!=(0);
    if (!($53)) {
     label = 19;
     break L5;
    }
    break;
   }
   default: {
    $64 = $operand;
    $65 = ($64|0)!=(0);
    $66 = $65 ^ 1;
    $67 = $66&1;
    $operand = $67;
    $68 = HEAP32[$3>>2]|0;
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    L28: do {
     switch ($70|0) {
     case 94:  {
      label = 43;
      break;
     }
     case 42:  {
      $211 = HEAP32[$3>>2]|0;
      $212 = (($211) + 1|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = $213 << 24 >> 24;
      $215 = ($214|0)==(42);
      if ($215) {
       $216 = HEAP32[$3>>2]|0;
       $217 = (($216) + 1|0);
       HEAP32[$3>>2] = $217;
       label = 43;
       break L28;
      }
      $218 = $operand;
      $219 = ($218|0)!=(0);
      if ($219) {
       label = 49;
       break L5;
      }
      $220 = $cur_level;
      $221 = $n;
      $222 = $1;
      $223 = (($222) + ($221<<4)|0);
      $224 = (($223) + 4|0);
      HEAP32[$224>>2] = $220;
      $225 = $n;
      $226 = $1;
      $227 = (($226) + ($225<<4)|0);
      HEAP32[$227>>2] = 2;
      $228 = $n;
      $229 = $1;
      $230 = (($229) + ($228<<4)|0);
      $231 = (($230) + 8|0);
      HEAP32[$231>>2] = 4;
      $232 = $n;
      $233 = (($232) + 1)|0;
      $n = $233;
      break;
     }
     case 45: case 43:  {
      $291 = $operand;
      $292 = ($291|0)!=(0);
      if (!($292)) {
       $293 = $cur_level;
       $294 = $n;
       $295 = $1;
       $296 = (($295) + ($294<<4)|0);
       $297 = (($296) + 4|0);
       HEAP32[$297>>2] = $293;
       $298 = $n;
       $299 = $1;
       $300 = (($299) + ($298<<4)|0);
       HEAP32[$300>>2] = 2;
       $301 = HEAP32[$3>>2]|0;
       $302 = HEAP8[$301>>0]|0;
       $303 = $302 << 24 >> 24;
       $304 = ($303|0)==(43);
       $305 = $304 ? 1 : 2;
       $306 = $n;
       $307 = $1;
       $308 = (($307) + ($306<<4)|0);
       $309 = (($308) + 8|0);
       HEAP32[$309>>2] = $305;
       $310 = $n;
       $311 = (($310) + 1)|0;
       $n = $311;
      }
      $312 = HEAP32[$3>>2]|0;
      $313 = (_strncmp($312,60792,3)|0);
      $314 = ($313|0)==(0);
      if ($314) {
       $315 = $cur_level;
       $316 = $n;
       $317 = $1;
       $318 = (($317) + ($316<<4)|0);
       $319 = (($318) + 4|0);
       HEAP32[$319>>2] = $315;
       $320 = $n;
       $321 = $1;
       $322 = (($321) + ($320<<4)|0);
       HEAP32[$322>>2] = 1;
       $323 = $n;
       $324 = $1;
       $325 = (($324) + ($323<<4)|0);
       $326 = (($325) + 8|0);
       (_next_sign($326)|0);
       $327 = $n;
       $328 = (($327) + 1)|0;
       $n = $328;
       $329 = $cur_level;
       $330 = $n;
       $331 = $1;
       $332 = (($331) + ($330<<4)|0);
       $333 = (($332) + 4|0);
       HEAP32[$333>>2] = $329;
       $334 = $n;
       $335 = $1;
       $336 = (($335) + ($334<<4)|0);
       HEAP32[$336>>2] = 2;
       $337 = $n;
       $338 = $1;
       $339 = (($338) + ($337<<4)|0);
       $340 = (($339) + 8|0);
       HEAP32[$340>>2] = 4;
       $341 = $n;
       $342 = (($341) + 1)|0;
       $n = $342;
       $343 = HEAP32[$3>>2]|0;
       $344 = (($343) + 2|0);
       HEAP32[$3>>2] = $344;
       $operand = 0;
       break L28;
      }
      $345 = $operand;
      $346 = ($345|0)!=(0);
      if ($346) {
       label = 69;
       break L28;
      } else {
       break L28;
      }
      break;
     }
     case 46: case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      label = 69;
      break;
     }
     case 33:  {
      $155 = $operand;
      $156 = ($155|0)!=(0);
      if ($156) {
       label = 37;
       break L5;
      }
      $157 = HEAP32[$3>>2]|0;
      $158 = (($157) + 1|0);
      $159 = HEAP8[$158>>0]|0;
      $160 = $159 << 24 >> 24;
      $161 = ($160|0)==(33);
      if ($161) {
       $162 = HEAP32[$3>>2]|0;
       $163 = (($162) + 2|0);
       $164 = HEAP8[$163>>0]|0;
       $165 = $164 << 24 >> 24;
       $166 = ($165|0)!=(33);
       if ($166) {
        _warning(60736);
       }
      }
      $167 = $cur_level;
      $168 = $n;
      $169 = $1;
      $170 = (($169) + ($168<<4)|0);
      $171 = (($170) + 4|0);
      HEAP32[$171>>2] = $167;
      $172 = $n;
      $173 = $1;
      $174 = (($173) + ($172<<4)|0);
      HEAP32[$174>>2] = 2;
      $175 = $n;
      $176 = $1;
      $177 = (($176) + ($175<<4)|0);
      $178 = (($177) + 8|0);
      HEAP32[$178>>2] = 9;
      $179 = $n;
      $180 = (($179) + 1)|0;
      $n = $180;
      $181 = $cur_level;
      $182 = $n;
      $183 = $1;
      $184 = (($183) + ($182<<4)|0);
      $185 = (($184) + 4|0);
      HEAP32[$185>>2] = $181;
      $186 = $n;
      $187 = $1;
      $188 = (($187) + ($186<<4)|0);
      HEAP32[$188>>2] = 0;
      $189 = $n;
      $190 = $1;
      $191 = (($190) + ($189<<4)|0);
      $192 = (($191) + 8|0);
      HEAPF64[$192>>3] = 1.0;
      $193 = $n;
      $194 = (($193) + 1)|0;
      $n = $194;
      $operand = 1;
      break;
     }
     case 35:  {
      $427 = $operand;
      $428 = ($427|0)!=(0);
      if (!($428)) {
       label = 79;
       break L5;
      }
      $429 = HEAP32[$3>>2]|0;
      $430 = (($429) + 1|0);
      HEAP32[$3>>2] = $430;
      HEAP32[$cp1>>2] = 0;
      $431 = HEAP32[$3>>2]|0;
      $432 = HEAP8[$431>>0]|0;
      $433 = $432 << 24 >> 24;
      if ((($433|0) == 45) | (($433|0) == 43)) {
       $434 = HEAP32[$3>>2]|0;
       $435 = (_strtol($434,$cp1,10)|0);
       $i = $435;
       $436 = HEAP32[472>>2]|0;
       $437 = $i;
       $438 = (($436) + ($437))|0;
       $i = $438;
      } else {
       $439 = HEAP32[$3>>2]|0;
       $440 = (_strtol($439,$cp1,10)|0);
       $441 = (($440) - 1)|0;
       $i = $441;
      }
      $442 = HEAP32[$cp1>>2]|0;
      $443 = ($442|0)==(0|0);
      if ($443) {
       label = 85;
       break L5;
      }
      $444 = HEAP32[$3>>2]|0;
      $445 = HEAP32[$cp1>>2]|0;
      $446 = ($444|0)==($445|0);
      if ($446) {
       label = 85;
       break L5;
      }
      $452 = $i;
      $453 = ($452|0)<(0);
      if ($453) {
       label = 89;
       break L5;
      }
      $454 = $i;
      $455 = HEAP32[464>>2]|0;
      $456 = ($454|0)>=($455|0);
      if ($456) {
       label = 89;
       break L5;
      }
      $457 = $i;
      $458 = (2080 + ($457<<2)|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = ($459|0)<=(0);
      if ($460) {
       label = 89;
       break L5;
      }
      $466 = HEAP32[$cp1>>2]|0;
      $467 = (($466) + -1|0);
      HEAP32[$3>>2] = $467;
      $468 = $n;
      $old_n = $468;
      $469 = $i;
      $470 = (2880 + ($469<<2)|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = ($471|0)!=(0);
      if ($472) {
       $473 = $i;
       $474 = (2880 + ($473<<2)|0);
       $475 = HEAP32[$474>>2]|0;
       $476 = $n;
       $477 = (($476) + ($475))|0;
       $n = $477;
       $478 = $n;
       $479 = HEAP32[8>>2]|0;
       $480 = ($478|0)>($479|0);
       if ($480) {
        _error_huge();
       }
       $481 = $old_n;
       $482 = $1;
       $483 = (($482) + ($481<<4)|0);
       $484 = $i;
       $485 = (1280 + ($484<<2)|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = $i;
       $488 = (2880 + ($487<<2)|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = $489<<4;
       _memmove(($483|0),($486|0),($490|0))|0;
      } else {
       $491 = $i;
       $492 = (2080 + ($491<<2)|0);
       $493 = HEAP32[$492>>2]|0;
       $494 = $n;
       $495 = (($494) + ($493))|0;
       $n = $495;
       $496 = $n;
       $497 = HEAP32[8>>2]|0;
       $498 = ($496|0)>($497|0);
       if ($498) {
        _error_huge();
       }
       $499 = $old_n;
       $500 = $1;
       $501 = (($500) + ($499<<4)|0);
       $502 = $i;
       $503 = (480 + ($502<<2)|0);
       $504 = HEAP32[$503>>2]|0;
       $505 = $i;
       $506 = (2080 + ($505<<2)|0);
       $507 = HEAP32[$506>>2]|0;
       $508 = $507<<4;
       _memmove(($501|0),($504|0),($508|0))|0;
      }
      while(1) {
       $509 = $old_n;
       $510 = $n;
       $511 = ($509|0)<($510|0);
       if (!($511)) {
        break;
       }
       $512 = $cur_level;
       $513 = $old_n;
       $514 = $1;
       $515 = (($514) + ($513<<4)|0);
       $516 = (($515) + 4|0);
       $517 = HEAP32[$516>>2]|0;
       $518 = (($517) + ($512))|0;
       HEAP32[$516>>2] = $518;
       $519 = $old_n;
       $520 = (($519) + 1)|0;
       $old_n = $520;
      }
      break;
     }
     case 47:  {
      $234 = $operand;
      $235 = ($234|0)!=(0);
      if ($235) {
       label = 52;
       break L5;
      }
      $236 = HEAP32[$3>>2]|0;
      $237 = (($236) + 1|0);
      $238 = HEAP8[$237>>0]|0;
      $239 = $238 << 24 >> 24;
      $240 = ($239|0)==(47);
      if ($240) {
       $241 = HEAP32[$3>>2]|0;
       $242 = (($241) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = $cur_level;
       $244 = $n;
       $245 = $1;
       $246 = (($245) + ($244<<4)|0);
       $247 = (($246) + 4|0);
       HEAP32[$247>>2] = $243;
       $248 = $n;
       $249 = $1;
       $250 = (($249) + ($248<<4)|0);
       HEAP32[$250>>2] = 2;
       $251 = $n;
       $252 = $1;
       $253 = (($252) + ($251<<4)|0);
       $254 = (($253) + 8|0);
       HEAP32[$254>>2] = 7;
      } else {
       $255 = $cur_level;
       $256 = $n;
       $257 = $1;
       $258 = (($257) + ($256<<4)|0);
       $259 = (($258) + 4|0);
       HEAP32[$259>>2] = $255;
       $260 = $n;
       $261 = $1;
       $262 = (($261) + ($260<<4)|0);
       HEAP32[$262>>2] = 2;
       $263 = $n;
       $264 = $1;
       $265 = (($264) + ($263<<4)|0);
       $266 = (($265) + 8|0);
       HEAP32[$266>>2] = 5;
      }
      $267 = $n;
      $268 = (($267) + 1)|0;
      $n = $268;
      break;
     }
     case 37:  {
      $269 = $operand;
      $270 = ($269|0)!=(0);
      if (!($270)) {
       $277 = $cur_level;
       $278 = $n;
       $279 = $1;
       $280 = (($279) + ($278<<4)|0);
       $281 = (($280) + 4|0);
       HEAP32[$281>>2] = $277;
       $282 = $n;
       $283 = $1;
       $284 = (($283) + ($282<<4)|0);
       HEAP32[$284>>2] = 2;
       $285 = $n;
       $286 = $1;
       $287 = (($286) + ($285<<4)|0);
       $288 = (($287) + 8|0);
       HEAP32[$288>>2] = 6;
       $289 = $n;
       $290 = (($289) + 1)|0;
       $n = $290;
       break L28;
      }
      $271 = HEAP32[$3>>2]|0;
      $272 = (($271) + 1|0);
      $273 = HEAP8[$272>>0]|0;
      $274 = $273 << 24 >> 24;
      $275 = (_isalpha($274)|0);
      $276 = ($275|0)!=(0);
      if (!($276)) {
       label = 60;
       break L5;
      }
      $operand = 0;
      break;
     }
     case 124:  {
      $71 = $operand;
      $72 = ($71|0)!=(0);
      if ($72) {
       $73 = $abs_count;
       $74 = ($73|0)>=(10);
       if ($74) {
        label = 29;
        break L5;
       }
       $75 = $cur_level;
       $76 = (($75) + 3)|0;
       $cur_level = $76;
       $77 = $cur_level;
       $78 = $abs_count;
       $79 = (($78) + 1)|0;
       $abs_count = $79;
       $80 = (($abs_array) + ($78<<2)|0);
       HEAP32[$80>>2] = $77;
      } else {
       $81 = $abs_count;
       $82 = ($81|0)<=(0);
       if ($82) {
        label = 33;
        break L5;
       }
       $83 = $cur_level;
       $84 = $abs_count;
       $85 = (($84) + -1)|0;
       $abs_count = $85;
       $86 = (($abs_array) + ($85<<2)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($83|0)!=($87|0);
       if ($88) {
        label = 33;
        break L5;
       }
       $89 = $cur_level;
       $90 = (($89) + -1)|0;
       $cur_level = $90;
       $91 = $cur_level;
       $92 = $n;
       $93 = $1;
       $94 = (($93) + ($92<<4)|0);
       $95 = (($94) + 4|0);
       HEAP32[$95>>2] = $91;
       $96 = $n;
       $97 = $1;
       $98 = (($97) + ($96<<4)|0);
       HEAP32[$98>>2] = 2;
       $99 = $n;
       $100 = $1;
       $101 = (($100) + ($99<<4)|0);
       $102 = (($101) + 8|0);
       HEAP32[$102>>2] = 8;
       $103 = $n;
       $104 = (($103) + 1)|0;
       $n = $104;
       $105 = $cur_level;
       $106 = $n;
       $107 = $1;
       $108 = (($107) + ($106<<4)|0);
       $109 = (($108) + 4|0);
       HEAP32[$109>>2] = $105;
       $110 = $n;
       $111 = $1;
       $112 = (($111) + ($110<<4)|0);
       HEAP32[$112>>2] = 0;
       $113 = $n;
       $114 = $1;
       $115 = (($114) + ($113<<4)|0);
       $116 = (($115) + 8|0);
       HEAPF64[$116>>3] = 2.0;
       $117 = $n;
       $118 = (($117) + 1)|0;
       $n = $118;
       $119 = $cur_level;
       $120 = (($119) + -1)|0;
       $cur_level = $120;
       $121 = $cur_level;
       $122 = $n;
       $123 = $1;
       $124 = (($123) + ($122<<4)|0);
       $125 = (($124) + 4|0);
       HEAP32[$125>>2] = $121;
       $126 = $n;
       $127 = $1;
       $128 = (($127) + ($126<<4)|0);
       HEAP32[$128>>2] = 2;
       $129 = $n;
       $130 = $1;
       $131 = (($130) + ($129<<4)|0);
       $132 = (($131) + 8|0);
       HEAP32[$132>>2] = 8;
       $133 = $n;
       $134 = (($133) + 1)|0;
       $n = $134;
       $135 = $cur_level;
       $136 = $n;
       $137 = $1;
       $138 = (($137) + ($136<<4)|0);
       $139 = (($138) + 4|0);
       HEAP32[$139>>2] = $135;
       $140 = $n;
       $141 = $1;
       $142 = (($141) + ($140<<4)|0);
       HEAP32[$142>>2] = 0;
       $143 = $n;
       $144 = $1;
       $145 = (($144) + ($143<<4)|0);
       $146 = (($145) + 8|0);
       HEAPF64[$146>>3] = 0.5;
       $147 = $n;
       $148 = (($147) + 1)|0;
       $n = $148;
       $149 = $cur_level;
       $150 = (($149) + -1)|0;
       $cur_level = $150;
      }
      $151 = $operand;
      $152 = ($151|0)!=(0);
      $153 = $152 ^ 1;
      $154 = $153&1;
      $operand = $154;
      break;
     }
     default: {
      $521 = HEAP32[$3>>2]|0;
      $522 = HEAP8[$521>>0]|0;
      $523 = $522 << 24 >> 24;
      $524 = (_isvarchar($523)|0);
      $525 = ($524|0)!=(0);
      if (!($525)) {
       label = 103;
       break L5;
      }
      $531 = $operand;
      $532 = ($531|0)!=(0);
      if (!($532)) {
       $operand = 1;
       $533 = $cur_level;
       $534 = $n;
       $535 = $1;
       $536 = (($535) + ($534<<4)|0);
       $537 = (($536) + 4|0);
       HEAP32[$537>>2] = $533;
       $538 = $n;
       $539 = $1;
       $540 = (($539) + ($538<<4)|0);
       HEAP32[$540>>2] = 2;
       $541 = $n;
       $542 = $1;
       $543 = (($542) + ($541<<4)|0);
       $544 = (($543) + 8|0);
       HEAP32[$544>>2] = 4;
       $545 = $n;
       $546 = (($545) + 1)|0;
       $n = $546;
      }
      $547 = HEAP32[$3>>2]|0;
      HEAP32[$cp1>>2] = $547;
      $548 = HEAP32[$3>>2]|0;
      $549 = (_strncasecmp($548,60952,3)|0);
      $550 = ($549|0)==(0);
      if ($550) {
       $551 = HEAP32[$3>>2]|0;
       $552 = (($551) + 3|0);
       $553 = HEAP8[$552>>0]|0;
       $554 = $553 << 24 >> 24;
       $555 = (_isvarchar($554)|0);
       $556 = ($555|0)!=(0);
       if ($556) {
        label = 109;
       } else {
        $557 = $n;
        $558 = $1;
        $559 = (($558) + ($557<<4)|0);
        HEAP32[$559>>2] = 0;
        $560 = $n;
        $561 = $1;
        $562 = (($561) + ($560<<4)|0);
        $563 = (($562) + 8|0);
        HEAPF64[$563>>3] = inf;
        $564 = HEAP32[$3>>2]|0;
        $565 = (($564) + 3|0);
        HEAP32[$3>>2] = $565;
       }
      } else {
       label = 109;
      }
      if ((label|0) == 109) {
       label = 0;
       $566 = HEAP32[$3>>2]|0;
       $567 = (_strncasecmp($566,60952,3)|0);
       $568 = ($567|0)==(0);
       if ($568) {
        $569 = HEAP32[$3>>2]|0;
        $570 = (($569) + 3|0);
        $571 = HEAP8[$570>>0]|0;
        $572 = $571 << 24 >> 24;
        $573 = (_isvarchar($572)|0);
        $574 = ($573|0)!=(0);
        if ($574) {
         label = 112;
        } else {
         $575 = $n;
         $576 = $1;
         $577 = (($576) + ($575<<4)|0);
         HEAP32[$577>>2] = 0;
         $578 = $n;
         $579 = $1;
         $580 = (($579) + ($578<<4)|0);
         $581 = (($580) + 8|0);
         HEAPF64[$581>>3] = inf;
         $582 = HEAP32[$3>>2]|0;
         $583 = (($582) + 3|0);
         HEAP32[$3>>2] = $583;
        }
       } else {
        label = 112;
       }
       if ((label|0) == 112) {
        label = 0;
        $584 = $n;
        $585 = $1;
        $586 = (($585) + ($584<<4)|0);
        HEAP32[$586>>2] = 1;
        $587 = $n;
        $588 = $1;
        $589 = (($588) + ($587<<4)|0);
        $590 = (($589) + 8|0);
        $591 = HEAP32[$3>>2]|0;
        $592 = (_parse_var($590,$591)|0);
        HEAP32[$3>>2] = $592;
        $593 = HEAP32[$3>>2]|0;
        $594 = ($593|0)==(0|0);
        if ($594) {
         label = 113;
         break L5;
        }
       }
      }
      $595 = HEAP32[$3>>2]|0;
      $596 = HEAP8[$595>>0]|0;
      $597 = $596 << 24 >> 24;
      $598 = ($597|0)==(40);
      if ($598) {
       label = 117;
       break L5;
      }
      $604 = HEAP32[$3>>2]|0;
      $605 = (($604) + -1|0);
      HEAP32[$3>>2] = $605;
      $606 = $cur_level;
      $607 = $n;
      $608 = $1;
      $609 = (($608) + ($607<<4)|0);
      $610 = (($609) + 4|0);
      HEAP32[$610>>2] = $606;
      $611 = $n;
      $612 = (($611) + 1)|0;
      $n = $612;
     }
     }
    } while(0);
    if ((label|0) == 43) {
     label = 0;
     $195 = $operand;
     $196 = ($195|0)!=(0);
     if ($196) {
      label = 44;
      break L5;
     }
     $197 = $cur_level;
     $198 = $n;
     $199 = $1;
     $200 = (($199) + ($198<<4)|0);
     $201 = (($200) + 4|0);
     HEAP32[$201>>2] = $197;
     $202 = $n;
     $203 = $1;
     $204 = (($203) + ($202<<4)|0);
     HEAP32[$204>>2] = 2;
     $205 = $n;
     $206 = $1;
     $207 = (($206) + ($205<<4)|0);
     $208 = (($207) + 8|0);
     HEAP32[$208>>2] = 8;
     $209 = $n;
     $210 = (($209) + 1)|0;
     $n = $210;
    }
    else if ((label|0) == 69) {
     label = 0;
     $347 = $operand;
     $348 = ($347|0)!=(0);
     if (!($348)) {
      $operand = 1;
      $349 = $cur_level;
      $350 = $n;
      $351 = $1;
      $352 = (($351) + ($350<<4)|0);
      $353 = (($352) + 4|0);
      HEAP32[$353>>2] = $349;
      $354 = $n;
      $355 = $1;
      $356 = (($355) + ($354<<4)|0);
      HEAP32[$356>>2] = 2;
      $357 = $n;
      $358 = $1;
      $359 = (($358) + ($357<<4)|0);
      $360 = (($359) + 8|0);
      HEAP32[$360>>2] = 4;
      $361 = $n;
      $362 = (($361) + 1)|0;
      $n = $362;
     }
     $363 = HEAP32[$3>>2]|0;
     $364 = HEAP8[$363>>0]|0;
     $365 = $364 << 24 >> 24;
     $366 = ($365|0)==(45);
     if ($366) {
      $367 = $n;
      $368 = $1;
      $369 = (($368) + ($367<<4)|0);
      HEAP32[$369>>2] = 0;
      $370 = $n;
      $371 = $1;
      $372 = (($371) + ($370<<4)|0);
      $373 = (($372) + 8|0);
      HEAPF64[$373>>3] = -1.0;
      $374 = $cur_level;
      $375 = $n;
      $376 = $1;
      $377 = (($376) + ($375<<4)|0);
      $378 = (($377) + 4|0);
      HEAP32[$378>>2] = $374;
      $379 = $n;
      $380 = (($379) + 1)|0;
      $n = $380;
      $381 = $n;
      $382 = $1;
      $383 = (($382) + ($381<<4)|0);
      HEAP32[$383>>2] = 2;
      $384 = $n;
      $385 = $1;
      $386 = (($385) + ($384<<4)|0);
      $387 = (($386) + 8|0);
      HEAP32[$387>>2] = 3;
      $388 = $cur_level;
      $389 = $n;
      $390 = $1;
      $391 = (($390) + ($389<<4)|0);
      $392 = (($391) + 4|0);
      HEAP32[$392>>2] = $388;
      $393 = $n;
      $394 = (($393) + 1)|0;
      $n = $394;
      $operand = 0;
      break L10;
     }
     $395 = HEAP32[$3>>2]|0;
     HEAP32[$cp1>>2] = $395;
     $396 = (___errno_location()|0);
     HEAP32[$396>>2] = 0;
     $397 = HEAP32[$cp1>>2]|0;
     $398 = (+_strtod($397,$3));
     $d = $398;
     $399 = HEAP32[$3>>2]|0;
     $400 = HEAP32[$cp1>>2]|0;
     $401 = ($399|0)==($400|0);
     if ($401) {
      label = 74;
      break L5;
     }
     $402 = (___errno_location()|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = ($403|0)!=(0);
     if ($404) {
      label = 76;
      break L5;
     }
     $410 = $n;
     $411 = $1;
     $412 = (($411) + ($410<<4)|0);
     HEAP32[$412>>2] = 0;
     $413 = $d;
     $414 = $n;
     $415 = $1;
     $416 = (($415) + ($414<<4)|0);
     $417 = (($416) + 8|0);
     HEAPF64[$417>>3] = $413;
     $418 = $cur_level;
     $419 = $n;
     $420 = $1;
     $421 = (($420) + ($419<<4)|0);
     $422 = (($421) + 4|0);
     HEAP32[$422>>2] = $418;
     $423 = $n;
     $424 = (($423) + 1)|0;
     $n = $424;
     $425 = HEAP32[$3>>2]|0;
     $426 = (($425) + -1|0);
     HEAP32[$3>>2] = $426;
    }
   }
   }
  } while(0);
  $613 = HEAP32[$3>>2]|0;
  $614 = (($613) + 1|0);
  HEAP32[$3>>2] = $614;
 }
 switch (label|0) {
  case 13: {
   $45 = HEAP32[$3>>2]|0;
   $46 = $cp_start;
   $47 = $45;
   $48 = $46;
   $49 = (($47) - ($48))|0;
   _put_up_arrow($49,60592);
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
  case 15: {
   break;
  }
  case 19: {
   label = 20;
   break;
  }
  case 24: {
   _error(60632);
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
  case 29: {
   _error(60696);
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
  case 33: {
   break;
  }
  case 37: {
   break;
  }
  case 44: {
   break;
  }
  case 49: {
   break;
  }
  case 52: {
   break;
  }
  case 60: {
   break;
  }
  case 74: {
   break;
  }
  case 76: {
   $405 = HEAP32[$cp1>>2]|0;
   $406 = $cp_start;
   $407 = $405;
   $408 = $406;
   $409 = (($407) - ($408))|0;
   _put_up_arrow($409,60800);
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
  case 79: {
   break;
  }
  case 85: {
   $447 = HEAP32[$3>>2]|0;
   $448 = $cp_start;
   $449 = $447;
   $450 = $448;
   $451 = (($449) - ($450))|0;
   _put_up_arrow($451,60824);
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
  case 89: {
   $461 = HEAP32[$3>>2]|0;
   $462 = $cp_start;
   $463 = $461;
   $464 = $462;
   $465 = (($463) - ($464))|0;
   _put_up_arrow($465,60872);
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
  case 103: {
   $526 = HEAP32[$3>>2]|0;
   $527 = $cp_start;
   $528 = $526;
   $529 = $527;
   $530 = (($528) - ($529))|0;
   _put_up_arrow($530,60928);
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
  case 113: {
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
  case 117: {
   $599 = HEAP32[$cp1>>2]|0;
   $600 = $cp_start;
   $601 = $599;
   $602 = $600;
   $603 = (($601) - ($602))|0;
   _put_up_arrow($603,60960);
   $0 = 0;
   $655 = $0;
   STACKTOP = sp;return ($655|0);
   break;
  }
 }
 if ((label|0) == 20) {
  $615 = $abs_count;
  $616 = ($615|0)!=(0);
  do {
   if (!($616)) {
    $617 = $n;
    $618 = ($617|0)!=(0);
    if ($618) {
     $619 = $operand;
     $620 = ($619|0)!=(0);
     if (!($620)) {
      break;
     }
    }
    $621 = $cur_level;
    $622 = ($621|0)!=(1);
    if ($622) {
     $623 = HEAP32[$3>>2]|0;
     $624 = $cp_start;
     $625 = $623;
     $626 = $624;
     $627 = (($625) - ($626))|0;
     _put_up_arrow($627,60984);
     $0 = 0;
     $655 = $0;
     STACKTOP = sp;return ($655|0);
    }
    while(1) {
     $628 = HEAP32[$3>>2]|0;
     $629 = HEAP8[$628>>0]|0;
     $630 = $629 << 24 >> 24;
     $631 = ($630|0)==(61);
     if (!($631)) {
      break;
     }
     $632 = HEAP32[$3>>2]|0;
     $633 = (($632) + 1|0);
     HEAP32[$3>>2] = $633;
    }
    $634 = $n;
    $635 = $2;
    HEAP32[$635>>2] = $634;
    $636 = $n;
    $637 = ($636|0)!=(0);
    if ($637) {
     $638 = $1;
     $639 = $2;
     _give_priority($638,$639);
     $640 = $1;
     $641 = $2;
     _organize($640,$641);
    }
    $642 = HEAP32[$3>>2]|0;
    $643 = $cp_start;
    $644 = $642;
    $645 = $643;
    $646 = (($644) - ($645))|0;
    $647 = HEAP32[41240>>2]|0;
    $648 = (($647) + ($646))|0;
    HEAP32[41240>>2] = $648;
    $649 = HEAP32[$3>>2]|0;
    $0 = $649;
    $655 = $0;
    STACKTOP = sp;return ($655|0);
   }
  } while(0);
 }
 $650 = HEAP32[$3>>2]|0;
 $651 = $cp_start;
 $652 = $650;
 $653 = $651;
 $654 = (($652) - ($653))|0;
 _put_up_arrow($654,61024);
 $0 = 0;
 $655 = $0;
 STACKTOP = sp;return ($655|0);
}
function _parse_var($vp,$cp) {
 $vp = $vp|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $cp1 = 0, $i = 0, $j = 0, $len = 0, $level = 0, $strcmpfunc = 0, $vtmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $cp1 = sp + 12|0;
 $1 = $vp;
 $2 = $cp;
 $3 = HEAP32[24>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $strcmpfunc = 43;
 } else {
  $strcmpfunc = 44;
 }
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (_isvarchar($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $2;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (_paren_increment($12)|0);
  $14 = ($13|0)<(0);
  if (!($14)) {
   $level = 0;
   $15 = $2;
   HEAP32[$cp1>>2] = $15;
   $i = 0;
   while(1) {
    $16 = HEAP32[$cp1>>2]|0;
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)!=(0);
    if (!($18)) {
     break;
    }
    $19 = $level;
    $20 = ($19|0)<=(0);
    if ($20) {
     $21 = HEAP32[$cp1>>2]|0;
     $22 = HEAP8[$21>>0]|0;
     $23 = $22 << 24 >> 24;
     $24 = (_isvarchar($23)|0);
     $25 = ($24|0)!=(0);
     if (!($25)) {
      label = 11;
      break;
     }
    }
    $26 = HEAP32[$cp1>>2]|0;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = (_paren_increment($28)|0);
    $j = $29;
    $30 = $j;
    $31 = $level;
    $32 = (($31) + ($30))|0;
    $level = $32;
    $33 = $level;
    $34 = ($33|0)<(0);
    if ($34) {
     label = 13;
     break;
    }
    $35 = $i;
    $36 = ($35|0)>=(100);
    if ($36) {
     label = 15;
     break;
    }
    $37 = HEAP32[$cp1>>2]|0;
    $38 = (($37) + 1|0);
    HEAP32[$cp1>>2] = $38;
    $39 = HEAP8[$37>>0]|0;
    $40 = $i;
    $41 = (($40) + 1)|0;
    $i = $41;
    $42 = (($buf) + ($40)|0);
    HEAP8[$42>>0] = $39;
    $43 = $j;
    $44 = ($43|0)==(-1);
    if ($44) {
     $45 = $level;
     $46 = ($45|0)<=(0);
     if ($46) {
      label = 18;
      break;
     }
    }
   }
   if ((label|0) == 11) {
   }
   else if ((label|0) == 13) {
   }
   else if ((label|0) == 15) {
    _error(61064);
    $0 = 0;
    $204 = $0;
    STACKTOP = sp;return ($204|0);
   }
   else if ((label|0) == 18) {
   }
   $47 = $i;
   $48 = (($buf) + ($47)|0);
   HEAP8[$48>>0] = 0;
   $49 = $level;
   $50 = ($49|0)>(0);
   if ($50) {
    _error(60984);
    $0 = 0;
    $204 = $0;
    STACKTOP = sp;return ($204|0);
   }
   $51 = (_strcasecmp($buf,61088)|0);
   $52 = ($51|0)==(0);
   if ($52) {
    _warning(61096);
   }
   $53 = (_strcasecmp($buf,60952)|0);
   $54 = ($53|0)==(0);
   if (!($54)) {
    $55 = (_strcasecmp($buf,60952)|0);
    $56 = ($55|0)==(0);
    if (!($56)) {
     $57 = $strcmpfunc;
     $58 = (FUNCTION_TABLE_iii[$57 & 127]($buf,61200)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $vtmp = 4;
      $178 = HEAP32[$cp1>>2]|0;
      $179 = HEAP8[$178>>0]|0;
      $180 = $179 << 24 >> 24;
      $181 = (_isdigit($180)|0);
      $182 = ($181|0)!=(0);
      do {
       if ($182) {
        $183 = HEAP32[$cp1>>2]|0;
        $184 = (_strtol($183,$cp1,10)|0);
        $j = $184;
        $185 = $j;
        $186 = ($185|0)<(0);
        if (!($186)) {
         $187 = $j;
         $188 = ($187|0)>(62);
         if (!($188)) {
          $189 = $vtmp;
          $190 = ($189|0)==(4);
          if ($190) {
           $191 = $j;
           $192 = (($191) + 1)|0;
           $193 = (40936 + ($192)|0);
           HEAP8[$193>>0] = 1;
          }
          $194 = $j;
          $195 = (($194) + 1)|0;
          $196 = $195 << 14;
          $197 = $vtmp;
          $198 = (($197) + ($196))|0;
          $vtmp = $198;
          break;
         }
        }
        _error(61456);
        $0 = 0;
        $204 = $0;
        STACKTOP = sp;return ($204|0);
       } else {
        $199 = $vtmp;
        $200 = ($199|0)==(4);
        if ($200) {
         HEAP8[40936>>0] = 1;
        }
       }
      } while(0);
      $201 = $vtmp;
      $202 = $1;
      HEAP32[$202>>2] = $201;
      $203 = HEAP32[$cp1>>2]|0;
      $0 = $203;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $60 = $2;
     $61 = (_strncasecmp($60,61208,2)|0);
     $62 = ($61|0)==(0);
     if ($62) {
      $63 = $1;
      HEAP32[$63>>2] = 3;
      $64 = $2;
      $65 = (($64) + 2|0);
      $0 = $65;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $66 = $2;
     $67 = (_strncasecmp($66,61216,2)|0);
     $68 = ($67|0)==(0);
     if ($68) {
      $69 = $1;
      HEAP32[$69>>2] = 1;
      $70 = $2;
      $71 = (($70) + 2|0);
      $0 = $71;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $72 = $2;
     $73 = (_strncasecmp($72,61224,3)|0);
     $74 = ($73|0)==(0);
     if ($74) {
      $75 = $1;
      HEAP32[$75>>2] = 2;
      $76 = $2;
      $77 = (($76) + 3|0);
      $0 = $77;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $level = 0;
     $78 = $2;
     HEAP32[$cp1>>2] = $78;
     $i = 0;
     while(1) {
      $79 = HEAP32[$cp1>>2]|0;
      $80 = HEAP8[$79>>0]|0;
      $81 = ($80<<24>>24)!=(0);
      if (!($81)) {
       break;
      }
      $82 = $level;
      $83 = ($82|0)<=(0);
      if ($83) {
       $84 = HEAP32[$cp1>>2]|0;
       $85 = HEAP8[$84>>0]|0;
       $86 = $85 << 24 >> 24;
       $87 = (_isvarchar($86)|0);
       $88 = ($87|0)!=(0);
       if (!($88)) {
        $89 = HEAP32[$cp1>>2]|0;
        $90 = HEAP8[$89>>0]|0;
        $91 = $90 << 24 >> 24;
        $92 = (_isdigit($91)|0);
        $93 = ($92|0)!=(0);
        if (!($93)) {
         label = 40;
         break;
        }
       }
      }
      $94 = HEAP32[$cp1>>2]|0;
      $95 = HEAP8[$94>>0]|0;
      $96 = $95 << 24 >> 24;
      $97 = (_paren_increment($96)|0);
      $j = $97;
      $98 = $j;
      $99 = $level;
      $100 = (($99) + ($98))|0;
      $level = $100;
      $101 = $level;
      $102 = ($101|0)<(0);
      if ($102) {
       label = 42;
       break;
      }
      $103 = $i;
      $104 = ($103|0)>=(100);
      if ($104) {
       label = 44;
       break;
      }
      $105 = HEAP32[$cp1>>2]|0;
      $106 = (($105) + 1|0);
      HEAP32[$cp1>>2] = $106;
      $107 = HEAP8[$105>>0]|0;
      $108 = $i;
      $109 = (($108) + 1)|0;
      $i = $109;
      $110 = (($buf) + ($108)|0);
      HEAP8[$110>>0] = $107;
      $111 = $j;
      $112 = ($111|0)==(-1);
      if ($112) {
       $113 = $level;
       $114 = ($113|0)<=(0);
       if ($114) {
        label = 47;
        break;
       }
      }
     }
     if ((label|0) == 40) {
     }
     else if ((label|0) == 42) {
     }
     else if ((label|0) == 44) {
      _error(61064);
      $0 = 0;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     else if ((label|0) == 47) {
     }
     $115 = $i;
     $116 = ($115|0)<=(0);
     if ($116) {
      _error(61232);
      $0 = 0;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $117 = $i;
     $118 = (($buf) + ($117)|0);
     HEAP8[$118>>0] = 0;
     $119 = $level;
     $120 = ($119|0)>(0);
     if ($120) {
      _error(60984);
      $0 = 0;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $121 = $strcmpfunc;
     $122 = (FUNCTION_TABLE_iii[$121 & 127]($buf,61264)|0);
     $123 = ($122|0)==(0);
     if ($123) {
      $124 = $1;
      HEAP32[$124>>2] = 3;
      $125 = HEAP32[$cp1>>2]|0;
      $0 = $125;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $126 = $strcmpfunc;
     $127 = (FUNCTION_TABLE_iii[$126 & 127]($buf,61272)|0);
     $128 = ($127|0)==(0);
     if ($128) {
      $129 = $1;
      HEAP32[$129>>2] = 1;
      $130 = HEAP32[$cp1>>2]|0;
      $0 = $130;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $131 = $strcmpfunc;
     $132 = (FUNCTION_TABLE_iii[$131 & 127]($buf,61280)|0);
     $133 = ($132|0)==(0);
     if ($133) {
      $134 = $1;
      HEAP32[$134>>2] = 2;
      $135 = HEAP32[$cp1>>2]|0;
      $0 = $135;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $136 = (_is_all($buf)|0);
     $137 = ($136|0)!=(0);
     if ($137) {
      _error(61288);
      $0 = 0;
      $204 = $0;
      STACKTOP = sp;return ($204|0);
     }
     $vtmp = 0;
     $i = 0;
     while(1) {
      $138 = $i;
      $139 = (3800 + ($138<<2)|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)!=(0|0);
      if (!($141)) {
       break;
      }
      $142 = $strcmpfunc;
      $143 = $i;
      $144 = (3800 + ($143<<2)|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (FUNCTION_TABLE_iii[$142 & 127]($buf,$145)|0);
      $147 = ($146|0)==(0);
      if ($147) {
       label = 64;
       break;
      }
      $150 = $i;
      $151 = (($150) + 1)|0;
      $i = $151;
     }
     if ((label|0) == 64) {
      $148 = $i;
      $149 = (($148) + 65)|0;
      $vtmp = $149;
     }
     $152 = $vtmp;
     $153 = ($152|0)==(0);
     do {
      if ($153) {
       $154 = $i;
       $155 = ($154|0)>=(7999);
       if ($155) {
        _error(61360);
        $0 = 0;
        $204 = $0;
        STACKTOP = sp;return ($204|0);
       }
       $156 = (_strlen(($buf|0))|0);
       $157 = (($156) + 1)|0;
       $len = $157;
       $158 = $len;
       $159 = (_malloc($158)|0);
       $160 = $i;
       $161 = (3800 + ($160<<2)|0);
       HEAP32[$161>>2] = $159;
       $162 = $i;
       $163 = (3800 + ($162<<2)|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==(0|0);
       if (!($165)) {
        $166 = $i;
        $167 = (3800 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = $len;
        _memmove(($168|0),($buf|0),($169|0))|0;
        $170 = $i;
        $171 = (($170) + 65)|0;
        $vtmp = $171;
        $172 = $i;
        $173 = (($172) + 1)|0;
        $174 = (3800 + ($173<<2)|0);
        HEAP32[$174>>2] = 0;
        break;
       }
       _error(61408);
       $0 = 0;
       $204 = $0;
       STACKTOP = sp;return ($204|0);
      }
     } while(0);
     $175 = $vtmp;
     $176 = $1;
     HEAP32[$176>>2] = $175;
     $177 = HEAP32[$cp1>>2]|0;
     $0 = $177;
     $204 = $0;
     STACKTOP = sp;return ($204|0);
    }
   }
   _error(61160);
   $0 = 0;
   $204 = $0;
   STACKTOP = sp;return ($204|0);
  }
 }
 _error(61040);
 $0 = 0;
 $204 = $0;
 STACKTOP = sp;return ($204|0);
}
function _parse_equation($n,$cp) {
 $n = $n|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $cp;
 $3 = $1;
 $4 = (480 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (2080 + ($6<<2)|0);
 $8 = $2;
 $9 = (_parse_expr($5,$7,$8,1)|0);
 $2 = $9;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = (1280 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = (2880 + ($14<<2)|0);
  $16 = $2;
  $17 = (_parse_expr($13,$15,$16,1)|0);
  $2 = $17;
  $18 = ($17|0)!=(0|0);
  do {
   if ($18) {
    $19 = $2;
    $20 = (_extra_characters($19)|0);
    $21 = ($20|0)!=(0);
    if ($21) {
     break;
    }
    $22 = $2;
    $0 = $22;
    $27 = $0;
    STACKTOP = sp;return ($27|0);
   }
  } while(0);
 }
 $23 = $1;
 $24 = (2080 + ($23<<2)|0);
 HEAP32[$24>>2] = 0;
 $25 = $1;
 $26 = (2880 + ($25<<2)|0);
 HEAP32[$26>>2] = 0;
 $0 = 0;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _parse_expr($equation,$np,$cp,$allow_space) {
 $equation = $equation|0;
 $np = $np|0;
 $cp = $cp|0;
 $allow_space = $allow_space|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $cp;
 $4 = $allow_space;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $7 = HEAP32[24>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $3;
  _str_tolower($9);
 }
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = (_parse_section($10,$11,$12,$13)|0);
 $3 = $14;
 $15 = $3;
 $0 = $15;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _remove_trailing_spaces($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 $3 = (($2) - 1)|0;
 $i = $3;
 while(1) {
  $4 = $i;
  $5 = ($4|0)>=(0);
  if ($5) {
   $6 = $i;
   $7 = $0;
   $8 = (($7) + ($6)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = (_isspace($10)|0);
   $12 = ($11|0)!=(0);
   $18 = $12;
  } else {
   $18 = 0;
  }
  if (!($18)) {
   break;
  }
  $13 = $i;
  $14 = $0;
  $15 = (($14) + ($13)|0);
  HEAP8[$15>>0] = 0;
  $16 = $i;
  $17 = (($16) + -1)|0;
  $i = $17;
 }
 STACKTOP = sp;return;
}
function _set_error_level($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp1 = 0;
 var $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 HEAP32[41312>>2] = 1;
 $1 = $0;
 $cp1 = $1;
 while(1) {
  $2 = $cp1;
  $3 = (_strpbrk($2,61512)|0);
  $cp1 = $3;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $cp1;
  $6 = $0;
  $7 = ($5>>>0)>($6>>>0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $cp1;
  $9 = (($8) + -1|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(92);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $cp1;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(59);
  if (!($16)) {
   label = 7;
   break;
  }
  HEAP32[41312>>2] = 0;
  $17 = $cp1;
  $18 = (_strlen(($17|0))|0);
  $len = $18;
  $19 = $cp1;
  $20 = (($19) + -1|0);
  $21 = $cp1;
  $22 = $len;
  $23 = (($22) + 1)|0;
  _memmove(($20|0),($21|0),($23|0))|0;
 }
 if ((label|0) == 7) {
  label = 8;
 }
 if ((label|0) == 8) {
 }
 $24 = $cp1;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $cp1;
  HEAP8[$26>>0] = 0;
 }
 $27 = $0;
 _remove_trailing_spaces($27);
 $28 = $0;
 $cp1 = $28;
 while(1) {
  $29 = $cp1;
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)!=(0);
  if (!($31)) {
   break;
  }
  $32 = $cp1;
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  $35 = (_isprint($34)|0);
  $36 = ($35|0)!=(0);
  if (!($36)) {
   HEAP32[41312>>2] = 0;
  }
  $37 = $cp1;
  $38 = (($37) + 1|0);
  $cp1 = $38;
 }
 STACKTOP = sp;return;
}
function _var_is_const($v,$dp) {
 $v = $v|0;
 $dp = $dp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = $dp;
 $3 = $1;
 $4 = ($3|0)==(1);
 do {
  if ($4) {
   $5 = $2;
   $6 = ($5|0)!=(0|0);
   if ($6) {
    $7 = $2;
    HEAPF64[$7>>3] = 2.7182818284590451;
   }
   $0 = 1;
  } else {
   $8 = $1;
   $9 = ($8|0)==(2);
   if (!($9)) {
    $0 = 0;
    break;
   }
   $10 = $2;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    $12 = $2;
    HEAPF64[$12>>3] = 3.1415926535897931;
   }
   $0 = 1;
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _subst_constants($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $i = 0, $modified = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp;
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = $i;
   $12 = $0;
   $13 = (($12) + ($11<<4)|0);
   $14 = (($13) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_var_is_const($15,$d)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $i;
    $19 = $0;
    $20 = (($19) + ($18<<4)|0);
    HEAP32[$20>>2] = 0;
    $21 = +HEAPF64[$d>>3];
    $22 = $i;
    $23 = $0;
    $24 = (($23) + ($22<<4)|0);
    $25 = (($24) + 8|0);
    HEAPF64[$25>>3] = $21;
    $modified = 1;
   }
  }
  $26 = $i;
  $27 = (($26) + 2)|0;
  $i = $27;
 }
 $28 = $modified;
 STACKTOP = sp;return ($28|0);
}
function _my_strlcpy($dest,$src,$n) {
 $dest = $dest|0;
 $src = $src|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $len = 0, $len_src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $src;
 $2 = $n;
 $3 = $1;
 $4 = (_strlen(($3|0))|0);
 $len_src = $4;
 $5 = $2;
 $6 = ($5|0)>(0);
 if (!($6)) {
  $21 = $len_src;
  STACKTOP = sp;return ($21|0);
 }
 $7 = $2;
 $8 = (($7) - 1)|0;
 $9 = $len_src;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = $2;
  $12 = (($11) - 1)|0;
  $14 = $12;
 } else {
  $13 = $len_src;
  $14 = $13;
 }
 $len = $14;
 $15 = $0;
 $16 = $1;
 $17 = $len;
 _memmove(($15|0),($16|0),($17|0))|0;
 $18 = $len;
 $19 = $0;
 $20 = (($19) + ($18)|0);
 HEAP8[$20>>0] = 0;
 $21 = $len_src;
 STACKTOP = sp;return ($21|0);
}
function _version_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, $status_flag = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $cp;
 $rv = 1;
 $status_flag = 0;
 $2 = $1;
 $3 = (_strncasecmp($2,61520,4)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $status_flag = 1;
  $5 = $1;
  $6 = (_skip_param($5)|0);
  $1 = $6;
 }
 $7 = $1;
 $8 = (_extra_characters($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 _free_result_str();
 $10 = (___strdup(61528)|0);
 HEAP32[41320>>2] = $10;
 $11 = $status_flag;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = (_version_report()|0);
  $rv = $13;
 } else {
 }
 $14 = $status_flag;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[41008>>2]|0;
  HEAP32[$vararg_buffer>>2] = 61544;
  (_fprintf(($16|0),(61536|0),($vararg_buffer|0))|0);
 }
 $17 = $rv;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = HEAP32[41320>>2]|0;
  $20 = ($19|0)!=(0|0);
  $22 = $20;
 } else {
  $22 = 0;
 }
 $21 = $22&1;
 $0 = $21;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _version_report() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer52 = sp + 168|0;
 $vararg_buffer50 = sp + 160|0;
 $vararg_buffer48 = sp + 152|0;
 $vararg_buffer46 = sp + 144|0;
 $vararg_buffer44 = sp + 136|0;
 $vararg_buffer42 = sp + 128|0;
 $vararg_buffer39 = sp + 120|0;
 $vararg_buffer36 = sp + 112|0;
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[41008>>2]|0;
 HEAP32[$vararg_buffer>>2] = 61528;
 (_fprintf(($0|0),(61616|0),($vararg_buffer|0))|0);
 $1 = HEAP32[41008>>2]|0;
 $2 = HEAP32[440>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $2;
 (_fprintf(($1|0),(61640|0),($vararg_buffer1|0))|0);
 $3 = HEAP32[440>>2]|0;
 if ((($3|0) == 0)) {
  $4 = HEAP32[41008>>2]|0;
  (_fprintf(($4|0),(61696|0),($vararg_buffer4|0))|0);
 } else {
  $5 = HEAP32[41008>>2]|0;
  (_fprintf(($5|0),(61712|0),($vararg_buffer6|0))|0);
 }
 $6 = HEAP32[41008>>2]|0;
 (_show_status($6)|0);
 $7 = HEAP32[41008>>2]|0;
 (_fprintf(($7|0),(61728|0),($vararg_buffer8|0))|0);
 $8 = HEAP32[41008>>2]|0;
 (_fprintf(($8|0),(61760|0),($vararg_buffer10|0))|0);
 $9 = HEAP32[41008>>2]|0;
 (_fprintf(($9|0),(61768|0),($vararg_buffer12|0))|0);
 $10 = HEAP32[41008>>2]|0;
 HEAP32[$vararg_buffer14>>2] = 4;
 $vararg_ptr17 = (($vararg_buffer14) + 4|0);
 HEAP32[$vararg_ptr17>>2] = 4;
 (_fprintf(($10|0),(61784|0),($vararg_buffer14|0))|0);
 $11 = HEAP32[41008>>2]|0;
 HEAP32[$vararg_buffer18>>2] = 8;
 $vararg_ptr21 = (($vararg_buffer18) + 4|0);
 HEAP32[$vararg_ptr21>>2] = 15;
 (_fprintf(($11|0),(61840|0),($vararg_buffer18|0))|0);
 $12 = HEAP32[41008>>2]|0;
 (_fprintf(($12|0),(61920|0),($vararg_buffer22|0))|0);
 $13 = HEAP32[41008>>2]|0;
 HEAP32[$vararg_buffer24>>2] = 61952;
 (_fprintf(($13|0),(61928|0),($vararg_buffer24|0))|0);
 $14 = HEAP32[41008>>2]|0;
 $15 = HEAP32[464>>2]|0;
 HEAP32[$vararg_buffer27>>2] = $15;
 (_fprintf(($14|0),(61984|0),($vararg_buffer27|0))|0);
 $16 = HEAP32[41008>>2]|0;
 $17 = HEAP32[8>>2]|0;
 HEAP32[$vararg_buffer30>>2] = $17;
 (_fprintf(($16|0),(62032|0),($vararg_buffer30|0))|0);
 $18 = (_max_memory_usage()|0);
 $19 = (($18|0) / 1000)&-1;
 $l = $19;
 $20 = $l;
 $21 = ($20|0)>=(10000);
 if ($21) {
  $22 = HEAP32[41008>>2]|0;
  $23 = $l;
  $24 = (($23|0) / 1000)&-1;
  HEAP32[$vararg_buffer33>>2] = $24;
  (_fprintf(($22|0),(62088|0),($vararg_buffer33|0))|0);
 } else {
  $25 = HEAP32[41008>>2]|0;
  $26 = $l;
  HEAP32[$vararg_buffer36>>2] = $26;
  (_fprintf(($25|0),(62152|0),($vararg_buffer36|0))|0);
 }
 $27 = HEAP32[41008>>2]|0;
 $28 = HEAP32[41288>>2]|0;
 HEAP32[$vararg_buffer39>>2] = $28;
 (_fprintf(($27|0),(62216|0),($vararg_buffer39|0))|0);
 $29 = HEAP32[41288>>2]|0;
 switch ($29|0) {
 case 4:  {
  $34 = HEAP32[41008>>2]|0;
  (_fprintf(($34|0),(62400|0),($vararg_buffer50|0))|0);
  STACKTOP = sp;return 1;
  break;
 }
 case 2: case 1:  {
  $32 = HEAP32[41008>>2]|0;
  (_fprintf(($32|0),(62352|0),($vararg_buffer46|0))|0);
  STACKTOP = sp;return 1;
  break;
 }
 case 0:  {
  $31 = HEAP32[41008>>2]|0;
  (_fprintf(($31|0),(62304|0),($vararg_buffer44|0))|0);
  STACKTOP = sp;return 1;
  break;
 }
 case -1:  {
  $30 = HEAP32[41008>>2]|0;
  (_fprintf(($30|0),(62256|0),($vararg_buffer42|0))|0);
  STACKTOP = sp;return 1;
  break;
 }
 case 3:  {
  $33 = HEAP32[41008>>2]|0;
  (_fprintf(($33|0),(62376|0),($vararg_buffer48|0))|0);
  STACKTOP = sp;return 1;
  break;
 }
 default: {
  $35 = HEAP32[41008>>2]|0;
  (_fprintf(($35|0),(62424|0),($vararg_buffer52|0))|0);
  STACKTOP = sp;return 1;
 }
 }
 return 0|0;
}
function _max_memory_usage() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8>>2]|0;
 $1 = ($0*203)|0;
 $2 = $1<<4;
 $3 = $2<<1;
 STACKTOP = sp;return ($3|0);
}
function _show_status($ofp) {
 $ofp = $ofp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ofp;
 STACKTOP = sp;return 0;
}
function _solve_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $contains_infinity = 0, $cp1 = 0;
 var $cp_start = 0, $did_something = 0, $diff_sign = 0, $i = 0, $j = 0, $k = 0, $last_solve_successful = 0, $once_through = 0, $plural_flag = 0, $pre_v = 0, $rv = 0, $start = 0, $stop = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $verify_flag = 0, $want = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 88|0;
 $vararg_buffer15 = sp + 80|0;
 $vararg_buffer13 = sp + 72|0;
 $vararg_buffer11 = sp + 64|0;
 $vararg_buffer9 = sp + 56|0;
 $vararg_buffer7 = sp + 48|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $1 = sp + 156|0;
 $start = sp + 140|0;
 $stop = sp + 136|0;
 $buf = sp + 168|0;
 $diff_sign = sp + 132|0;
 $want = sp;
 HEAP32[$1>>2] = $cp;
 $verify_flag = 0;
 $did_something = 0;
 $last_solve_successful = 0;
 $rv = 1;
 $2 = HEAP32[$1>>2]|0;
 $cp_start = $2;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_strcmp_tospace($3,62448)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $verify_flag = 1;
  $6 = HEAP32[$1>>2]|0;
  $7 = (_skip_param($6)|0);
  HEAP32[$1>>2] = $7;
 } else {
  $8 = HEAP32[$1>>2]|0;
  $9 = (_strcmp_tospace($8,62456)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $verify_flag = 2;
   $11 = HEAP32[$1>>2]|0;
   $12 = (_skip_param($11)|0);
   HEAP32[$1>>2] = $12;
  }
 }
 $13 = (_get_range($1,$start,$stop)|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  _warning(62472);
  $0 = 0;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 $15 = (_next_espace()|0);
 $i = $15;
 HEAP32[41296>>2] = 1;
 $16 = HEAP32[$1>>2]|0;
 $17 = (_strcmp_tospace($16,62448)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $verify_flag = 1;
  $19 = HEAP32[$1>>2]|0;
  $20 = (_skip_param($19)|0);
  HEAP32[$1>>2] = $20;
 } else {
  $21 = HEAP32[$1>>2]|0;
  $22 = (_strcmp_tospace($21,62456)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $verify_flag = 2;
   $24 = HEAP32[$1>>2]|0;
   $25 = (_skip_param($24)|0);
   HEAP32[$1>>2] = $25;
  }
 }
 $26 = HEAP32[$1>>2]|0;
 $27 = (_strcmp_tospace($26,62496)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = HEAP32[$1>>2]|0;
  $30 = (_skip_param($29)|0);
  $cp1 = $30;
  $31 = $cp1;
  $32 = HEAP8[$31>>0]|0;
  $33 = ($32<<24>>24)!=(0);
  if ($33) {
   $34 = $cp1;
   HEAP32[$1>>2] = $34;
  }
 }
 $35 = HEAP32[$1>>2]|0;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36 << 24 >> 24;
 $38 = ($37|0)==(0);
 do {
  if ($38) {
   (_my_strlcpy(35984,62504,80)|0);
   $39 = (_get_string($buf,4096)|0);
   HEAP32[$1>>2] = $39;
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    $41 = HEAP32[$1>>2]|0;
    $cp_start = $41;
    break;
   }
   $0 = 0;
   $316 = $0;
   STACKTOP = sp;return ($316|0);
  }
 } while(0);
 $42 = HEAP32[$1>>2]|0;
 $43 = $cp_start;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = HEAP32[41240>>2]|0;
 $48 = (($47) + ($46))|0;
 HEAP32[41240>>2] = $48;
 $49 = $i;
 $50 = HEAP32[$1>>2]|0;
 $51 = (_parse_equation($49,$50)|0);
 HEAP32[$1>>2] = $51;
 $52 = ($51|0)==(0|0);
 if ($52) {
  $0 = 0;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 $53 = $verify_flag;
 $54 = ($53|0)!=(0);
 L36: do {
  if ($54) {
   $55 = $i;
   $56 = (2080 + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)!=(1);
   do {
    if (!($58)) {
     $59 = $i;
     $60 = (2880 + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)!=(0);
     if (!($62)) {
      $63 = $i;
      $64 = (480 + ($63<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)!=(1);
      if ($67) {
       $68 = $i;
       $69 = (480 + ($68<<2)|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = HEAP32[$70>>2]|0;
       $72 = ($71|0)!=(0);
       if ($72) {
        break;
       }
       $73 = $i;
       $74 = (480 + ($73<<2)|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (($75) + 8|0);
       $77 = +HEAPF64[$76>>3];
       $78 = $77 != 0.0;
       if ($78) {
        break;
       }
      }
      $79 = $i;
      $80 = (480 + ($79<<2)|0);
      $81 = HEAP32[$80>>2]|0;
      ;HEAP32[$want+0>>2]=HEAP32[$81+0>>2]|0;HEAP32[$want+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$want+8>>2]=HEAP32[$81+8>>2]|0;HEAP32[$want+12>>2]=HEAP32[$81+12>>2]|0;
      label = 31;
      break L36;
     }
    }
   } while(0);
   _error(62536);
  } else {
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   HEAP32[41304>>2] = 0;
   $82 = HEAP32[$start>>2]|0;
   $k = $82;
   L48: while(1) {
    $83 = $k;
    $84 = HEAP32[$stop>>2]|0;
    $85 = ($83|0)<=($84|0);
    if (!($85)) {
     label = 113;
     break;
    }
    $86 = $k;
    $87 = $i;
    $88 = ($86|0)==($87|0);
    L51: do {
     if ($88) {
      label = 36;
     } else {
      $89 = $k;
      $90 = (2080 + ($89<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($91|0)<=(0);
      if ($92) {
       label = 36;
      } else {
       $93 = $k;
       $94 = (2880 + ($93<<2)|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ($95|0)<=(0);
       if ($96) {
        label = 36;
       } else {
        $last_solve_successful = 0;
        $97 = $k;
        HEAP32[472>>2] = $97;
        $did_something = 1;
        $98 = $verify_flag;
        $99 = ($98|0)!=(0);
        if ($99) {
         $pre_v = 0;
         $100 = HEAP32[41008>>2]|0;
         $101 = HEAP32[472>>2]|0;
         $102 = (($101) + 1)|0;
         HEAP32[$vararg_buffer>>2] = $102;
         (_fprintf(($100|0),(62616|0),($vararg_buffer|0))|0);
         (_list_proc($want,1,0)|0);
         $103 = $verify_flag;
         $104 = ($103|0)==(2);
         if ($104) {
          $105 = HEAP32[41008>>2]|0;
          (_fprintf(($105|0),(62648|0),($vararg_buffer1|0))|0);
         } else {
          $106 = HEAP32[41008>>2]|0;
          (_fprintf(($106|0),(62664|0),($vararg_buffer3|0))|0);
         }
         $107 = HEAP32[$want>>2]|0;
         $108 = ($107|0)==(1);
         if ($108) {
          $109 = HEAP32[41008>>2]|0;
          (_fprintf(($109|0),(62672|0),($vararg_buffer5|0))|0);
          $110 = HEAP32[472>>2]|0;
          $111 = (_solved_equation($110)|0);
          $112 = ($111|0)!=(0);
          if ($112) {
           $113 = HEAP32[472>>2]|0;
           $114 = (480 + ($113<<2)|0);
           $115 = HEAP32[$114>>2]|0;
           $116 = (($115) + 8|0);
           $117 = HEAP32[$116>>2]|0;
           $pre_v = $117;
          }
         } else {
          $118 = HEAP32[41008>>2]|0;
          (_fprintf(($118|0),(62696|0),($vararg_buffer7|0))|0);
         }
         $119 = HEAP32[472>>2]|0;
         $120 = $i;
         _copy_espace($119,$120);
         $121 = HEAP32[472>>2]|0;
         $122 = (480 + ($121<<2)|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = HEAP32[472>>2]|0;
         $125 = (2080 + ($124<<2)|0);
         $126 = HEAP32[472>>2]|0;
         $127 = (1280 + ($126<<2)|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = HEAP32[472>>2]|0;
         $130 = (2880 + ($129<<2)|0);
         $131 = (_solve_sub($want,1,$123,$125,$128,$130)|0);
         $132 = ($131|0)>(0);
         if ($132) {
          $133 = HEAP32[472>>2]|0;
          _simpa_repeat($133,1,0);
          $last_solve_successful = 1;
          $134 = HEAP32[472>>2]|0;
          $135 = (_return_result($134)|0);
          $136 = ($135|0)!=(0);
          if (!($136)) {
           label = 48;
           break L48;
          }
          $137 = HEAP32[$want>>2]|0;
          $138 = ($137|0)==(1);
          L71: do {
           if ($138) {
            $139 = HEAP32[472>>2]|0;
            $140 = (_solved_equation($139)|0);
            $141 = ($140|0)!=(0);
            do {
             if ($141) {
              $142 = HEAP32[472>>2]|0;
              $143 = (480 + ($142<<2)|0);
              $144 = HEAP32[$143>>2]|0;
              $145 = (($144) + 8|0);
              $146 = HEAP32[$145>>2]|0;
              $147 = (($want) + 8|0);
              $148 = HEAP32[$147>>2]|0;
              $149 = ($146|0)!=($148|0);
              if ($149) {
               break;
              }
              $150 = $pre_v;
              $151 = ($150|0)!=(0);
              do {
               if ($151) {
                $152 = $pre_v;
                $153 = (($want) + 8|0);
                $154 = HEAP32[$153>>2]|0;
                $155 = ($152|0)==($154|0);
                if (!($155)) {
                 break;
                }
                _warning(62792);
                break L51;
               }
              } while(0);
              break L71;
             }
            } while(0);
            _error(62728);
            break L51;
           } else {
            $156 = HEAP32[472>>2]|0;
            $157 = $i;
            _copy_espace($156,$157);
           }
          } while(0);
          $plural_flag = 0;
          $j = 0;
          while(1) {
           $158 = $j;
           $159 = HEAP32[472>>2]|0;
           $160 = (2880 + ($159<<2)|0);
           $161 = HEAP32[$160>>2]|0;
           $162 = ($158|0)<($161|0);
           if (!($162)) {
            break;
           }
           $163 = $j;
           $164 = HEAP32[472>>2]|0;
           $165 = (1280 + ($164<<2)|0);
           $166 = HEAP32[$165>>2]|0;
           $167 = (($166) + ($163<<4)|0);
           $168 = HEAP32[$167>>2]|0;
           $169 = ($168|0)==(1);
           if ($169) {
            $170 = $j;
            $171 = HEAP32[472>>2]|0;
            $172 = (1280 + ($171<<2)|0);
            $173 = HEAP32[$172>>2]|0;
            $174 = (($173) + ($170<<4)|0);
            $175 = (($174) + 8|0);
            $176 = HEAP32[$175>>2]|0;
            $177 = $176 & 16383;
            $178 = ($177|0)==(4);
            if ($178) {
             label = 62;
             break;
            }
           }
           $179 = $j;
           $180 = (($179) + 2)|0;
           $j = $180;
          }
          if ((label|0) == 62) {
           label = 0;
           $plural_flag = 1;
          }
          $181 = HEAP32[$want>>2]|0;
          $182 = ($181|0)==(1);
          if ($182) {
           $183 = $i;
           $184 = (480 + ($183<<2)|0);
           $185 = HEAP32[$184>>2]|0;
           $186 = $i;
           $187 = (2080 + ($186<<2)|0);
           $188 = HEAP32[472>>2]|0;
           $189 = (1280 + ($188<<2)|0);
           $190 = HEAP32[$189>>2]|0;
           $191 = HEAP32[472>>2]|0;
           $192 = (2880 + ($191<<2)|0);
           $193 = HEAP32[$192>>2]|0;
           $194 = (($want) + 8|0);
           $195 = HEAP32[$194>>2]|0;
           (_subst_var_with_exp($185,$187,$190,$193,$195)|0);
           $196 = $i;
           $197 = (1280 + ($196<<2)|0);
           $198 = HEAP32[$197>>2]|0;
           $199 = $i;
           $200 = (2880 + ($199<<2)|0);
           $201 = HEAP32[472>>2]|0;
           $202 = (1280 + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = HEAP32[472>>2]|0;
           $205 = (2880 + ($204<<2)|0);
           $206 = HEAP32[$205>>2]|0;
           $207 = (($want) + 8|0);
           $208 = HEAP32[$207>>2]|0;
           (_subst_var_with_exp($198,$200,$203,$206,$208)|0);
          }
          $once_through = 0;
          $209 = $i;
          $210 = (480 + ($209<<2)|0);
          $211 = HEAP32[$210>>2]|0;
          $212 = $i;
          $213 = (2080 + ($212<<2)|0);
          _calc_simp($211,$213);
          $214 = $i;
          $215 = (1280 + ($214<<2)|0);
          $216 = HEAP32[$215>>2]|0;
          $217 = $i;
          $218 = (2880 + ($217<<2)|0);
          _calc_simp($216,$218);
          while(1) {
           $219 = $i;
           $220 = (480 + ($219<<2)|0);
           $221 = HEAP32[$220>>2]|0;
           $222 = $i;
           $223 = (2080 + ($222<<2)|0);
           $224 = HEAP32[$223>>2]|0;
           $225 = (_exp_contains_infinity($221,$224)|0);
           $226 = ($225|0)!=(0);
           if ($226) {
            $236 = 1;
           } else {
            $227 = $i;
            $228 = (1280 + ($227<<2)|0);
            $229 = HEAP32[$228>>2]|0;
            $230 = $i;
            $231 = (2880 + ($230<<2)|0);
            $232 = HEAP32[$231>>2]|0;
            $233 = (_exp_contains_infinity($229,$232)|0);
            $234 = ($233|0)!=(0);
            $236 = $234;
           }
           $235 = $236&1;
           $contains_infinity = $235;
           $237 = $i;
           $238 = (480 + ($237<<2)|0);
           $239 = HEAP32[$238>>2]|0;
           $240 = $i;
           $241 = (2080 + ($240<<2)|0);
           $242 = HEAP32[$241>>2]|0;
           $243 = $i;
           $244 = (1280 + ($243<<2)|0);
           $245 = HEAP32[$244>>2]|0;
           $246 = $i;
           $247 = (2880 + ($246<<2)|0);
           $248 = HEAP32[$247>>2]|0;
           $249 = (_se_compare($239,$242,$245,$248,$diff_sign)|0);
           $250 = ($249|0)!=(0);
           if ($250) {
            $251 = HEAP32[$want>>2]|0;
            $252 = ($251|0)!=(1);
            if ($252) {
             label = 73;
             break;
            }
            $253 = HEAP32[$diff_sign>>2]|0;
            $254 = ($253|0)!=(0);
            if (!($254)) {
             label = 73;
             break;
            }
           }
           $266 = $contains_infinity;
           $267 = ($266|0)!=(0);
           if ($267) {
            label = 87;
            break;
           }
           $268 = $once_through;
           $269 = ($268|0)<(2);
           if (!($269)) {
            label = 87;
            break;
           }
           $270 = HEAP32[448>>2]|0;
           HEAP32[41224>>2] = $270;
           $271 = $i;
           $272 = $once_through;
           $273 = ($272|0)!=(0);
           $274 = $273 ? 0 : 1;
           $275 = $once_through;
           $276 = ($275|0)!=(0);
           $277 = $276 ? 1 : 0;
           _simpa_repeat($271,$274,$277);
           HEAP32[41224>>2] = 0;
           $278 = $once_through;
           $279 = (($278) + 1)|0;
           $once_through = $279;
          }
          if ((label|0) == 73) {
           label = 0;
           $255 = HEAP32[$want>>2]|0;
           $256 = ($255|0)!=(1);
           if ($256) {
            $257 = HEAP32[41008>>2]|0;
            (_fprintf(($257|0),(62856|0),($vararg_buffer9|0))|0);
           } else {
            $258 = $plural_flag;
            $259 = ($258|0)!=(0);
            if ($259) {
             $260 = HEAP32[41008>>2]|0;
             (_fprintf(($260|0),(62888|0),($vararg_buffer11|0))|0);
            } else {
             $261 = HEAP32[41008>>2]|0;
             (_fprintf(($261|0),(62920|0),($vararg_buffer13|0))|0);
            }
           }
           $262 = $contains_infinity;
           $263 = ($262|0)!=(0);
           if ($263) {
            _error(62944);
            $264 = $rv;
            $265 = ($264|0)!=(0);
            if ($265) {
             $rv = 2;
            }
           }
          }
          else if ((label|0) == 87) {
           label = 0;
           $280 = $contains_infinity;
           $281 = ($280|0)!=(0);
           if ($281) {
            _error(62944);
           } else {
            $282 = HEAP32[$want>>2]|0;
            $283 = ($282|0)!=(1);
            if ($283) {
             _error(63016);
            } else {
             $284 = $plural_flag;
             $285 = ($284|0)!=(0);
             if ($285) {
              _error(63056);
             } else {
              _error(63088);
             }
            }
           }
           $286 = $verify_flag;
           $287 = ($286|0)==(2);
           if ($287) {
            $rv = 0;
           } else {
            $288 = $rv;
            $289 = ($288|0)!=(0);
            if ($289) {
             $rv = 2;
            }
           }
          }
         } else {
          $290 = HEAP32[472>>2]|0;
          $291 = (($290) + 1)|0;
          HEAP32[$vararg_buffer15>>2] = $291;
          (_printf((63120|0),($vararg_buffer15|0))|0);
          $rv = 0;
         }
        } else {
         $292 = $i;
         $293 = HEAP32[472>>2]|0;
         $294 = (_solve_espace($292,$293)|0);
         $295 = ($294|0)!=(0);
         if ($295) {
          $last_solve_successful = 1;
          $296 = HEAP32[472>>2]|0;
          $297 = (_return_result($296)|0);
          $298 = ($297|0)!=(0);
          if (!($298)) {
           label = 107;
           break L48;
          }
         } else {
          $rv = 0;
         }
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 36) {
     label = 0;
    }
    $299 = $k;
    $300 = (($299) + 1)|0;
    $k = $300;
   }
   if ((label|0) == 48) {
    break;
   }
   else if ((label|0) == 107) {
    break;
   }
   else if ((label|0) == 113) {
    $301 = $did_something;
    $302 = ($301|0)!=(0);
    if ($302) {
     $303 = $last_solve_successful;
     $304 = ($303|0)!=(0);
     if ($304) {
      $305 = $verify_flag;
      $306 = ($305|0)!=(0);
      if ($306) {
      }
     }
    } else {
     (_printf((63160|0),($vararg_buffer18|0))|0);
    }
    $307 = $i;
    $308 = (2080 + ($307<<2)|0);
    HEAP32[$308>>2] = 0;
    $309 = $i;
    $310 = (2880 + ($309<<2)|0);
    HEAP32[$310>>2] = 0;
    $311 = $rv;
    $0 = $311;
    $316 = $0;
    STACKTOP = sp;return ($316|0);
   }
  }
 } while(0);
 $312 = $i;
 $313 = (2080 + ($312<<2)|0);
 HEAP32[$313>>2] = 0;
 $314 = $i;
 $315 = (2880 + ($314<<2)|0);
 HEAP32[$315>>2] = 0;
 $0 = 0;
 $316 = $0;
 STACKTOP = sp;return ($316|0);
}
function _sum_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = (_sum_product($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _sum_product($cp,$current_function) {
 $cp = $cp|0;
 $current_function = $current_function|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $count_down = 0, $cp1 = 0, $dest = 0, $end = 0.0, $i = 0, $n = 0, $ns = 0, $result_equation = 0, $source = 0, $start = 0.0;
 var $step = 0.0, $v = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 48|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $1 = sp + 92|0;
 $v = sp + 80|0;
 $n = sp + 72|0;
 $buf = sp + 104|0;
 HEAP32[$1>>2] = $cp;
 $2 = $current_function;
 HEAP32[$v>>2] = 0;
 $step = 1.0;
 $3 = (_current_not_defined()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $328 = $0;
  STACKTOP = sp;return ($328|0);
 }
 $5 = (_next_espace()|0);
 $result_equation = $5;
 $6 = HEAP32[472>>2]|0;
 $7 = (2880 + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[472>>2]|0;
  $11 = (2880 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $ns = $12;
  $13 = HEAP32[472>>2]|0;
  $14 = (1280 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $source = $15;
  $16 = $result_equation;
  $17 = (1280 + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $dest = $18;
 } else {
  $19 = HEAP32[472>>2]|0;
  $20 = (2080 + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $ns = $21;
  $22 = HEAP32[472>>2]|0;
  $23 = (480 + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $source = $24;
  $25 = $result_equation;
  $26 = (480 + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $dest = $27;
 }
 $28 = HEAP32[$1>>2]|0;
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)!=(0);
 do {
  if ($30) {
   $31 = HEAP32[$1>>2]|0;
   $32 = (_parse_var2($v,$31)|0);
   HEAP32[$1>>2] = $32;
   $33 = HEAP32[$1>>2]|0;
   $34 = ($33|0)==(0|0);
   if (!($34)) {
    break;
   }
   $0 = 0;
   $328 = $0;
   STACKTOP = sp;return ($328|0);
  }
 } while(0);
 $35 = $source;
 $36 = $ns;
 $37 = (_no_vars($35,$36,$v)|0);
 $38 = ($37|0)!=(0);
 if ($38) {
  _error(71456);
  $0 = 0;
  $328 = $0;
  STACKTOP = sp;return ($328|0);
 }
 $39 = HEAP32[$v>>2]|0;
 $40 = ($39|0)==(0);
 do {
  if ($40) {
   $41 = (_prompt_var($v)|0);
   $42 = ($41|0)!=(0);
   if ($42) {
    break;
   }
   $0 = 0;
   $328 = $0;
   STACKTOP = sp;return ($328|0);
  }
 } while(0);
 $43 = $source;
 $44 = $ns;
 $45 = HEAP32[$v>>2]|0;
 $46 = (_found_var($43,$44,$45)|0);
 $47 = ($46|0)!=(0);
 if (!($47)) {
  _error(70512);
  $0 = 0;
  $328 = $0;
  STACKTOP = sp;return ($328|0);
 }
 $48 = HEAP32[$1>>2]|0;
 $49 = HEAP8[$48>>0]|0;
 $50 = ($49<<24>>24)!=(0);
 do {
  if ($50) {
   $51 = HEAP32[$1>>2]|0;
   $52 = HEAP8[$51>>0]|0;
   $53 = $52 << 24 >> 24;
   $54 = ($53|0)==(61);
   if ($54) {
    $55 = HEAP32[$1>>2]|0;
    $56 = (($55) + 1|0);
    HEAP32[$1>>2] = $56;
   }
   $57 = HEAP32[$1>>2]|0;
   $cp1 = $57;
  } else {
   $58 = HEAP32[$v>>2]|0;
   (_list_var($58,0)|0);
   HEAP32[$vararg_buffer>>2] = 35800;
   (_snprintf(35984,80,70224,$vararg_buffer)|0);
   $59 = (_get_string($buf,4096)|0);
   $cp1 = $59;
   $60 = ($59|0)==(0|0);
   if (!($60)) {
    break;
   }
   $0 = 0;
   $328 = $0;
   STACKTOP = sp;return ($328|0);
  }
 } while(0);
 $61 = $cp1;
 $62 = (+_strtod($61,$1));
 $start = $62;
 $63 = $cp1;
 $64 = HEAP32[$1>>2]|0;
 $65 = ($63|0)==($64|0);
 L42: do {
  if (!($65)) {
   do {
    if (0) {
     $66 = $start;
     $67 = $66;
     $68 = (___FLOAT_BITS784($67)|0);
     $69 = $68 & 2147483647;
     $70 = ($69>>>0)<(2139095040);
     if (!($70)) {
      break L42;
     }
    } else {
     if (1) {
      $71 = $start;
      $72 = (___DOUBLE_BITS785($71)|0);
      $73 = tempRet0;
      $74 = $73 & 2147483647;
      $75 = ($74>>>0)<(2146435072);
      $76 = ($74|0)==(2146435072);
      $77 = ($72>>>0)<(0);
      $78 = $76 & $77;
      $79 = $75 | $78;
      if ($79) {
       break;
      } else {
       break L42;
      }
     } else {
      $80 = $start;
      $81 = (___fpclassifyl((+$80))|0);
      $82 = ($81|0)>(1);
      if ($82) {
       break;
      } else {
       break L42;
      }
     }
    }
   } while(0);
   $83 = $start;
   $84 = (+Math_abs((+$83)));
   $85 = $84 >= 1.0E+15;
   if ($85) {
    _error(71528);
    $0 = 0;
    $328 = $0;
    STACKTOP = sp;return ($328|0);
   }
   $86 = HEAP32[$1>>2]|0;
   $87 = (_skip_comma_space($86)|0);
   HEAP32[$1>>2] = $87;
   $88 = HEAP32[$1>>2]|0;
   $89 = (_strcmp_tospace($88,71552)|0);
   $90 = ($89|0)==(0);
   if ($90) {
    $91 = HEAP32[$1>>2]|0;
    $92 = (_skip_param($91)|0);
    HEAP32[$1>>2] = $92;
   }
   $93 = HEAP32[$1>>2]|0;
   $94 = HEAP8[$93>>0]|0;
   $95 = ($94<<24>>24)!=(0);
   do {
    if ($95) {
     $96 = HEAP32[$1>>2]|0;
     $cp1 = $96;
    } else {
     (_my_strlcpy(35984,71560,80)|0);
     $97 = (_get_string($buf,4096)|0);
     $cp1 = $97;
     $98 = ($97|0)==(0|0);
     if (!($98)) {
      break;
     }
     $0 = 0;
     $328 = $0;
     STACKTOP = sp;return ($328|0);
    }
   } while(0);
   $99 = $cp1;
   $100 = (+_strtod($99,$1));
   $end = $100;
   $101 = $cp1;
   $102 = HEAP32[$1>>2]|0;
   $103 = ($101|0)==($102|0);
   L66: do {
    if (!($103)) {
     do {
      if (0) {
       $104 = $end;
       $105 = $104;
       $106 = (___FLOAT_BITS784($105)|0);
       $107 = $106 & 2147483647;
       $108 = ($107>>>0)<(2139095040);
       if (!($108)) {
        break L66;
       }
      } else {
       if (1) {
        $109 = $end;
        $110 = (___DOUBLE_BITS785($109)|0);
        $111 = tempRet0;
        $112 = $111 & 2147483647;
        $113 = ($112>>>0)<(2146435072);
        $114 = ($112|0)==(2146435072);
        $115 = ($110>>>0)<(0);
        $116 = $114 & $115;
        $117 = $113 | $116;
        if ($117) {
         break;
        } else {
         break L66;
        }
       } else {
        $118 = $end;
        $119 = (___fpclassifyl((+$118))|0);
        $120 = ($119|0)>(1);
        if ($120) {
         break;
        } else {
         break L66;
        }
       }
      }
     } while(0);
     $121 = $end;
     $122 = (+Math_abs((+$121)));
     $123 = $122 >= 1.0E+15;
     if ($123) {
      _error(71528);
      $0 = 0;
      $328 = $0;
      STACKTOP = sp;return ($328|0);
     }
     $124 = HEAP32[$1>>2]|0;
     $125 = (_skip_comma_space($124)|0);
     HEAP32[$1>>2] = $125;
     $126 = HEAP32[$1>>2]|0;
     $127 = (_strcmp_tospace($126,71568)|0);
     $128 = ($127|0)==(0);
     if ($128) {
      $129 = HEAP32[$1>>2]|0;
      $130 = (_skip_param($129)|0);
      HEAP32[$1>>2] = $130;
     }
     $131 = HEAP32[$1>>2]|0;
     $132 = HEAP8[$131>>0]|0;
     $133 = ($132<<24>>24)!=(0);
     L82: do {
      if ($133) {
       $134 = HEAP32[$1>>2]|0;
       $cp1 = $134;
       $135 = $cp1;
       $136 = (+_strtod($135,$1));
       $137 = (+Math_abs((+$136)));
       $step = $137;
       $138 = $cp1;
       $139 = HEAP32[$1>>2]|0;
       $140 = ($138|0)==($139|0);
       L84: do {
        if (!($140)) {
         do {
          if (0) {
           $141 = $step;
           $142 = $141;
           $143 = (___FLOAT_BITS784($142)|0);
           $144 = $143 & 2147483647;
           $145 = ($144>>>0)<(2139095040);
           if (!($145)) {
            break L84;
           }
          } else {
           if (1) {
            $146 = $step;
            $147 = (___DOUBLE_BITS785($146)|0);
            $148 = tempRet0;
            $149 = $148 & 2147483647;
            $150 = ($149>>>0)<(2146435072);
            $151 = ($149|0)==(2146435072);
            $152 = ($147>>>0)<(0);
            $153 = $151 & $152;
            $154 = $150 | $153;
            if ($154) {
             break;
            } else {
             break L84;
            }
           } else {
            $155 = $step;
            $156 = (___fpclassifyl((+$155))|0);
            $157 = ($156|0)>(1);
            if ($157) {
             break;
            } else {
             break L84;
            }
           }
          }
         } while(0);
         $158 = $step;
         $159 = $158 <= 0.0;
         if ($159) {
          break;
         }
         $160 = $step;
         $161 = $160 >= 1.0E+15;
         if ($161) {
          break;
         }
         break L82;
        }
       } while(0);
       _error(71576);
       $0 = 0;
       $328 = $0;
       STACKTOP = sp;return ($328|0);
      }
     } while(0);
     $162 = HEAP32[$1>>2]|0;
     $163 = (_extra_characters($162)|0);
     $164 = ($163|0)!=(0);
     if ($164) {
      $0 = 0;
      $328 = $0;
      STACKTOP = sp;return ($328|0);
     }
     $165 = $end;
     $166 = $start;
     $167 = $165 < $166;
     $168 = $167&1;
     $count_down = $168;
     $169 = $start;
     $170 = $end;
     $171 = $169 - $170;
     $172 = (+Math_abs((+$171)));
     $173 = $step;
     $174 = $172 / $173;
     $175 = (+_fmod((+$174),1.0));
     $176 = $175 != 0.0;
     if ($176) {
      _warning(71592);
     }
     $177 = $2;
     $178 = ($177|0)==(1);
     if ($178) {
      $179 = $dest;
      ;HEAP32[$179+0>>2]=HEAP32[3752+0>>2]|0;HEAP32[$179+4>>2]=HEAP32[3752+4>>2]|0;HEAP32[$179+8>>2]=HEAP32[3752+8>>2]|0;HEAP32[$179+12>>2]=HEAP32[3752+12>>2]|0;
     } else {
      $180 = $dest;
      ;HEAP32[$180+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$180+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$180+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$180+12>>2]=HEAP32[3736+12>>2]|0;
     }
     HEAP32[$n>>2] = 1;
     while(1) {
      $181 = $count_down;
      $182 = ($181|0)!=(0);
      if ($182) {
       $183 = $start;
       $184 = $end;
       $185 = $183 >= $184;
       $186 = $185&1;
       $191 = $186;
      } else {
       $187 = $start;
       $188 = $end;
       $189 = $187 <= $188;
       $190 = $189&1;
       $191 = $190;
      }
      $192 = ($191|0)!=(0);
      if (!($192)) {
       break;
      }
      $193 = HEAP32[$n>>2]|0;
      $194 = (($193) + 1)|0;
      $195 = $ns;
      $196 = (($194) + ($195))|0;
      $197 = HEAP32[8>>2]|0;
      $198 = ($196|0)>($197|0);
      if ($198) {
       _error_huge();
      }
      $199 = HEAP32[3680>>2]|0;
      $200 = $source;
      $201 = $ns;
      $202 = $201<<4;
      _memmove(($199|0),($200|0),($202|0))|0;
      $203 = $ns;
      HEAP32[3712>>2] = $203;
      $i = 0;
      while(1) {
       $204 = $i;
       $205 = HEAP32[3712>>2]|0;
       $206 = ($204|0)<($205|0);
       if (!($206)) {
        break;
       }
       $207 = $i;
       $208 = HEAP32[3680>>2]|0;
       $209 = (($208) + ($207<<4)|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = ($210|0)==(1);
       do {
        if ($211) {
         $212 = $i;
         $213 = HEAP32[3680>>2]|0;
         $214 = (($213) + ($212<<4)|0);
         $215 = (($214) + 8|0);
         $216 = HEAP32[$215>>2]|0;
         $217 = HEAP32[$v>>2]|0;
         $218 = ($216|0)==($217|0);
         if (!($218)) {
          break;
         }
         $219 = $i;
         $220 = HEAP32[3680>>2]|0;
         $221 = (($220) + ($219<<4)|0);
         HEAP32[$221>>2] = 0;
         $222 = $start;
         $223 = $i;
         $224 = HEAP32[3680>>2]|0;
         $225 = (($224) + ($223<<4)|0);
         $226 = (($225) + 8|0);
         HEAPF64[$226>>3] = $222;
        }
       } while(0);
       $227 = $i;
       $228 = (($227) + 2)|0;
       $i = $228;
      }
      $229 = $2;
      $230 = ($229|0)!=(2);
      if ($230) {
       $i = 0;
       while(1) {
        $231 = $i;
        $232 = HEAP32[3712>>2]|0;
        $233 = ($231|0)<($232|0);
        if (!($233)) {
         break;
        }
        $234 = $i;
        $235 = HEAP32[3680>>2]|0;
        $236 = (($235) + ($234<<4)|0);
        $237 = (($236) + 4|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$237>>2] = $239;
        $240 = $i;
        $241 = (($240) + 1)|0;
        $i = $241;
       }
       $i = 0;
       while(1) {
        $242 = $i;
        $243 = HEAP32[$n>>2]|0;
        $244 = ($242|0)<($243|0);
        if (!($244)) {
         break;
        }
        $245 = $i;
        $246 = $dest;
        $247 = (($246) + ($245<<4)|0);
        $248 = (($247) + 4|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = (($249) + 1)|0;
        HEAP32[$248>>2] = $250;
        $251 = $i;
        $252 = (($251) + 1)|0;
        $i = $252;
       }
       $253 = HEAP32[$n>>2]|0;
       $254 = $dest;
       $255 = (($254) + ($253<<4)|0);
       HEAP32[$255>>2] = 2;
       $256 = HEAP32[$n>>2]|0;
       $257 = $dest;
       $258 = (($257) + ($256<<4)|0);
       $259 = (($258) + 4|0);
       HEAP32[$259>>2] = 1;
      }
      $260 = $2;
      if ((($260|0) == 1)) {
       $261 = HEAP32[$n>>2]|0;
       $262 = $dest;
       $263 = (($262) + ($261<<4)|0);
       $264 = (($263) + 8|0);
       HEAP32[$264>>2] = 4;
       $265 = HEAP32[$n>>2]|0;
       $266 = (($265) + 1)|0;
       HEAP32[$n>>2] = $266;
      } else if ((($260|0) == 0)) {
       $267 = HEAP32[$n>>2]|0;
       $268 = $dest;
       $269 = (($268) + ($267<<4)|0);
       $270 = (($269) + 8|0);
       HEAP32[$270>>2] = 1;
       $271 = HEAP32[$n>>2]|0;
       $272 = (($271) + 1)|0;
       HEAP32[$n>>2] = $272;
      } else if ((($260|0) == 2)) {
       HEAP32[$n>>2] = 0;
      }
      $273 = HEAP32[$n>>2]|0;
      $274 = $dest;
      $275 = (($274) + ($273<<4)|0);
      $276 = HEAP32[3680>>2]|0;
      $277 = HEAP32[3712>>2]|0;
      $278 = $277<<4;
      _memmove(($275|0),($276|0),($278|0))|0;
      $279 = HEAP32[3712>>2]|0;
      $280 = HEAP32[$n>>2]|0;
      $281 = (($280) + ($279))|0;
      HEAP32[$n>>2] = $281;
      $282 = $dest;
      _calc_simp($282,$n);
      $283 = $2;
      $284 = ($283|0)==(2);
      if ($284) {
       $285 = HEAP32[$v>>2]|0;
       (_list_var($285,0)|0);
       $286 = HEAP32[41008>>2]|0;
       $287 = HEAP32[16>>2]|0;
       $288 = $start;
       HEAP32[$vararg_buffer1>>2] = 35800;
       $vararg_ptr4 = (($vararg_buffer1) + 4|0);
       HEAP32[$vararg_ptr4>>2] = $287;
       $vararg_ptr5 = (($vararg_buffer1) + 8|0);
       HEAPF64[tempDoublePtr>>3]=$288;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
       (_fprintf(($286|0),(71616|0),($vararg_buffer1|0))|0);
       $289 = $dest;
       (_list_factor($289,$n,0)|0);
       $290 = HEAP32[41008>>2]|0;
       (_fprintf(($290|0),(64256|0),($vararg_buffer6|0))|0);
      } else {
      }
      $291 = $count_down;
      $292 = ($291|0)!=(0);
      if ($292) {
       $293 = $step;
       $294 = $start;
       $295 = $294 - $293;
       $start = $295;
      } else {
       $296 = $step;
       $297 = $start;
       $298 = $297 + $296;
       $start = $298;
      }
     }
     $299 = $2;
     $300 = ($299|0)==(2);
     if ($300) {
      $0 = 1;
      $328 = $0;
      STACKTOP = sp;return ($328|0);
     }
     $301 = HEAP32[472>>2]|0;
     $302 = (2880 + ($301<<2)|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = ($303|0)!=(0);
     if ($304) {
      $305 = HEAP32[$n>>2]|0;
      $306 = $result_equation;
      $307 = (2880 + ($306<<2)|0);
      HEAP32[$307>>2] = $305;
      $308 = $result_equation;
      $309 = (480 + ($308<<2)|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = HEAP32[472>>2]|0;
      $312 = (480 + ($311<<2)|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = HEAP32[472>>2]|0;
      $315 = (2080 + ($314<<2)|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = $316<<4;
      _memmove(($310|0),($313|0),($317|0))|0;
      $318 = HEAP32[472>>2]|0;
      $319 = (2080 + ($318<<2)|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = $result_equation;
      $322 = (2080 + ($321<<2)|0);
      HEAP32[$322>>2] = $320;
     } else {
      $323 = HEAP32[$n>>2]|0;
      $324 = $result_equation;
      $325 = (2080 + ($324<<2)|0);
      HEAP32[$325>>2] = $323;
     }
     $326 = $result_equation;
     $327 = (_return_result($326)|0);
     $0 = $327;
     $328 = $0;
     STACKTOP = sp;return ($328|0);
    }
   } while(0);
   _error(71504);
   $0 = 0;
   $328 = $0;
   STACKTOP = sp;return ($328|0);
  }
 } while(0);
 _error(71504);
 $0 = 0;
 $328 = $0;
 STACKTOP = sp;return ($328|0);
}
function _product_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = (_sum_product($1,1)|0);
 STACKTOP = sp;return ($2|0);
}
function _for_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = (_sum_product($1,2)|0);
 STACKTOP = sp;return ($2|0);
}
function _optimize_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $diff_sign = 0, $flag = 0, $i = 0, $i1 = 0, $j = 0, $k = 0, $rv = 0, $skip_flag = 0;
 var $start = 0, $start_en = 0, $stop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 44|0;
 $start = sp + 24|0;
 $stop = sp + 20|0;
 $diff_sign = sp;
 HEAP32[$1>>2] = $cp;
 $rv = 0;
 $2 = (_get_range_eol($1,$start,$stop)|0);
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = 0;
  $271 = $0;
  STACKTOP = sp;return ($271|0);
 }
 HEAP32[63176>>2] = -1;
 $start_en = 0;
 $4 = HEAP32[$start>>2]|0;
 $i = $4;
 $j = $4;
 while(1) {
  $5 = $i;
  $6 = HEAP32[$stop>>2]|0;
  $7 = ($5|0)<=($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = (2080 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $i;
   $j = $12;
   $13 = $i;
   _simp_equation($13);
  }
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 $16 = $j;
 HEAP32[$stop>>2] = $16;
 while(1) {
  $flag = 0;
  $17 = HEAP32[$start>>2]|0;
  $i = $17;
  while(1) {
   $18 = $i;
   $19 = HEAP32[$stop>>2]|0;
   $20 = ($18|0)<=($19|0);
   if (!($20)) {
    break;
   }
   $21 = HEAP32[$start>>2]|0;
   $j = $21;
   while(1) {
    $22 = $j;
    $23 = HEAP32[$stop>>2]|0;
    $24 = ($22|0)<=($23|0);
    if (!($24)) {
     break;
    }
    $25 = $i;
    $26 = $j;
    $27 = ($25|0)!=($26|0);
    if ($27) {
     while(1) {
      $28 = $i;
      $29 = (1280 + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $i;
      $32 = (2880 + ($31<<2)|0);
      $33 = $j;
      $34 = (_find_more($30,$32,$33)|0);
      $35 = ($34|0)!=(0);
      if (!($35)) {
       break;
      }
      $flag = 1;
      $rv = 1;
     }
    }
    $36 = $j;
    $37 = (($36) + 1)|0;
    $j = $37;
   }
   $38 = $i;
   $39 = (($38) + 1)|0;
   $i = $39;
  }
  $40 = $flag;
  $41 = ($40|0)!=(0);
  if (!($41)) {
   break;
  }
 }
 $42 = HEAP32[$start>>2]|0;
 $i = $42;
 while(1) {
  $43 = $i;
  $44 = HEAP32[$stop>>2]|0;
  $45 = ($43|0)<=($44|0);
  if (!($45)) {
   break;
  }
  $46 = $i;
  $47 = (2080 + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0);
  if ($49) {
  } else {
   while(1) {
    $flag = 0;
    $50 = $i;
    _simp_equation($50);
    $j = 0;
    while(1) {
     $51 = $j;
     $52 = (63176 + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)>=(0);
     if (!($54)) {
      break;
     }
     $55 = $i;
     $56 = $j;
     $57 = (63176 + ($56<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($55|0)!=($58|0);
     if ($59) {
      $60 = $j;
      $61 = (63176 + ($60<<2)|0);
      $62 = HEAP32[$61>>2]|0;
      _simp_equation($62);
      while(1) {
       $63 = $i;
       $64 = (480 + ($63<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $i;
       $67 = (2080 + ($66<<2)|0);
       $68 = $j;
       $69 = (63176 + ($68<<2)|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (_find_more($65,$67,$70)|0);
       $72 = ($71|0)!=(0);
       if (!($72)) {
        break;
       }
       $flag = 1;
      }
      while(1) {
       $73 = $i;
       $74 = (1280 + ($73<<2)|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = $i;
       $77 = (2880 + ($76<<2)|0);
       $78 = $j;
       $79 = (63176 + ($78<<2)|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (_find_more($75,$77,$80)|0);
       $82 = ($81|0)!=(0);
       if (!($82)) {
        break;
       }
       $flag = 1;
      }
     }
     $83 = $j;
     $84 = (($83) + 1)|0;
     $j = $84;
    }
    $85 = $flag;
    $86 = ($85|0)!=(0);
    if (!($86)) {
     break;
    }
   }
   while(1) {
    $87 = $i;
    $88 = (480 + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $i;
    $91 = (2080 + ($90<<2)|0);
    $92 = (_opt_es($89,$91)|0);
    $93 = ($92|0)!=(0);
    if (!($93)) {
     break;
    }
    $rv = 1;
   }
   while(1) {
    $94 = $i;
    $95 = (1280 + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $i;
    $98 = (2880 + ($97<<2)|0);
    $99 = (_opt_es($96,$98)|0);
    $100 = ($99|0)!=(0);
    if (!($100)) {
     break;
    }
    $rv = 1;
   }
   $101 = $rv;
   $102 = ($101|0)!=(0);
   if ($102) {
    $103 = $start_en;
    $i1 = $103;
    while(1) {
     $104 = $i1;
     $105 = (63176 + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)>=(0);
     if (!($107)) {
      break;
     }
     $108 = $start_en;
     $j = $108;
     while(1) {
      $109 = $j;
      $110 = (63176 + ($109<<2)|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = ($111|0)>=(0);
      if (!($112)) {
       break;
      }
      $113 = $j;
      $114 = (($113) + 1)|0;
      $k = $114;
      while(1) {
       $115 = $k;
       $116 = (63176 + ($115<<2)|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($117|0)>=(0);
       if (!($118)) {
        break;
       }
       while(1) {
        $119 = $k;
        $120 = (63176 + ($119<<2)|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (1280 + ($121<<2)|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = $k;
        $125 = (63176 + ($124<<2)|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (2880 + ($126<<2)|0);
        $128 = $j;
        $129 = (63176 + ($128<<2)|0);
        $130 = HEAP32[$129>>2]|0;
        $131 = (_find_more($123,$127,$130)|0);
        $132 = ($131|0)!=(0);
        if (!($132)) {
         break;
        }
       }
       while(1) {
        $133 = $j;
        $134 = (63176 + ($133<<2)|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = (1280 + ($135<<2)|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = $j;
        $139 = (63176 + ($138<<2)|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (2880 + ($140<<2)|0);
        $142 = $k;
        $143 = (63176 + ($142<<2)|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (_find_more($137,$141,$144)|0);
        $146 = ($145|0)!=(0);
        if (!($146)) {
         break;
        }
       }
       $147 = $k;
       $148 = (($147) + 1)|0;
       $k = $148;
      }
      $149 = $j;
      $150 = (($149) + 1)|0;
      $j = $150;
     }
     while(1) {
      $151 = $i1;
      $152 = (63176 + ($151<<2)|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (1280 + ($153<<2)|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = $i1;
      $157 = (63176 + ($156<<2)|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = (2880 + ($158<<2)|0);
      $160 = (_opt_es($155,$159)|0);
      $161 = ($160|0)!=(0);
      if (!($161)) {
       break;
      }
     }
     $162 = $i1;
     $163 = (($162) + 1)|0;
     $i1 = $163;
    }
    while(1) {
     $164 = $start_en;
     $165 = (63176 + ($164<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = ($166|0)>=(0);
     if (!($167)) {
      break;
     }
     $168 = $start_en;
     $169 = (63176 + ($168<<2)|0);
     $170 = HEAP32[$169>>2]|0;
     $k = $170;
     $171 = $k;
     $172 = (480 + ($171<<2)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $k;
     $175 = (2080 + ($174<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $k;
     $178 = (1280 + ($177<<2)|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $k;
     $181 = (2880 + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (_se_compare($173,$176,$179,$182,$diff_sign)|0);
     $184 = ($183|0)!=(0);
     if ($184) {
      $185 = HEAP32[$diff_sign>>2]|0;
      $186 = ($185|0)!=(0);
      if ($186) {
       label = 77;
      } else {
       $187 = $k;
       $188 = (2080 + ($187<<2)|0);
       HEAP32[$188>>2] = 0;
       $189 = $k;
       $190 = (2880 + ($189<<2)|0);
       HEAP32[$190>>2] = 0;
      }
     } else {
      label = 77;
     }
     if ((label|0) == 77) {
      label = 0;
      $191 = $k;
      (_list_sub($191)|0);
     }
     $192 = $start_en;
     $193 = (($192) + 1)|0;
     $start_en = $193;
    }
    $194 = $i;
    $195 = (480 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = $i;
    $198 = (2080 + ($197<<2)|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = $i;
    $201 = (1280 + ($200<<2)|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $i;
    $204 = (2880 + ($203<<2)|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (_se_compare($196,$199,$202,$205,$diff_sign)|0);
    $207 = ($206|0)!=(0);
    if ($207) {
     $208 = HEAP32[$diff_sign>>2]|0;
     $209 = ($208|0)!=(0);
     if (!($209)) {
      $210 = $i;
      $211 = (2080 + ($210<<2)|0);
      HEAP32[$211>>2] = 0;
      $212 = $i;
      $213 = (2880 + ($212<<2)|0);
      HEAP32[$213>>2] = 0;
     }
    }
   }
  }
  $214 = $i;
  $215 = (($214) + 1)|0;
  $i = $215;
 }
 $216 = $rv;
 $217 = ($216|0)!=(0);
 if ($217) {
  $218 = HEAP32[$start>>2]|0;
  $i = $218;
  while(1) {
   $219 = $i;
   $220 = HEAP32[$stop>>2]|0;
   $221 = ($219|0)<=($220|0);
   if (!($221)) {
    break;
   }
   $222 = $i;
   $223 = (2080 + ($222<<2)|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ($224|0)==(0);
   if ($225) {
   } else {
    $skip_flag = 0;
    while(1) {
     $flag = 0;
     $226 = $i;
     _simp_equation($226);
     $j = 0;
     while(1) {
      $227 = $j;
      $228 = (63176 + ($227<<2)|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = ($229|0)>=(0);
      if (!($230)) {
       break;
      }
      $231 = $i;
      $232 = $j;
      $233 = (63176 + ($232<<2)|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ($231|0)!=($234|0);
      if ($235) {
       $236 = $j;
       $237 = (63176 + ($236<<2)|0);
       $238 = HEAP32[$237>>2]|0;
       _simp_equation($238);
       while(1) {
        $239 = $i;
        $240 = (480 + ($239<<2)|0);
        $241 = HEAP32[$240>>2]|0;
        $242 = $i;
        $243 = (2080 + ($242<<2)|0);
        $244 = $j;
        $245 = (63176 + ($244<<2)|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = (_find_more($241,$243,$246)|0);
        $248 = ($247|0)!=(0);
        if (!($248)) {
         break;
        }
        $flag = 1;
       }
       while(1) {
        $249 = $i;
        $250 = (1280 + ($249<<2)|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = $i;
        $253 = (2880 + ($252<<2)|0);
        $254 = $j;
        $255 = (63176 + ($254<<2)|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = (_find_more($251,$253,$256)|0);
        $258 = ($257|0)!=(0);
        if (!($258)) {
         break;
        }
        $flag = 1;
       }
      } else {
       $skip_flag = 1;
      }
      $259 = $j;
      $260 = (($259) + 1)|0;
      $j = $260;
     }
     $261 = $flag;
     $262 = ($261|0)!=(0);
     if (!($262)) {
      break;
     }
    }
    $263 = $skip_flag;
    $264 = ($263|0)!=(0);
    if (!($264)) {
     $265 = $i;
     (_list_sub($265)|0);
    }
   }
   $266 = $i;
   $267 = (($266) + 1)|0;
   $i = $267;
  }
 }
 $268 = $rv;
 $269 = ($268|0)!=(0);
 if (!($269)) {
  _error(63984);
 }
 $270 = $rv;
 $0 = $270;
 $271 = $0;
 STACKTOP = sp;return ($271|0);
}
function _find_more($equation,$np,$en) {
 $equation = $equation|0;
 $np = $np|0;
 $en = $en|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $diff_sign = 0, $found_se = 0, $i = 0, $j = 0, $k = 0, $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff_sign = sp + 4|0;
 $1 = $equation;
 $2 = $np;
 $3 = $en;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<=(0);
 if (!($6)) {
  $7 = $3;
  $8 = (_solved_equation($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $level = 1;
   $found_se = 1;
   L4: while(1) {
    $10 = $found_se;
    $11 = ($10|0)!=(0);
    if (!($11)) {
     label = 25;
     break;
    }
    $i = 1;
    $found_se = 0;
    while(1) {
     $12 = $i;
     $13 = $2;
     $14 = HEAP32[$13>>2]|0;
     $15 = ($12|0)<($14|0);
     if (!($15)) {
      break;
     }
     $16 = $i;
     $j = $16;
     while(1) {
      $17 = $j;
      $18 = $2;
      $19 = HEAP32[$18>>2]|0;
      $20 = ($17|0)<($19|0);
      if ($20) {
       $21 = $j;
       $22 = $1;
       $23 = (($22) + ($21<<4)|0);
       $24 = (($23) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = $level;
       $27 = ($25|0)>=($26|0);
       $139 = $27;
      } else {
       $139 = 0;
      }
      if (!($139)) {
       break;
      }
      $28 = $j;
      $29 = (($28) + 2)|0;
      $j = $29;
     }
     $30 = $j;
     $31 = $i;
     $32 = ($30|0)==($31|0);
     if ($32) {
     } else {
      $found_se = 1;
      $33 = $i;
      $34 = (($33) - 1)|0;
      $k = $34;
      $35 = $k;
      $36 = $1;
      $37 = (($36) + ($35<<4)|0);
      $38 = $j;
      $39 = $k;
      $40 = (($38) - ($39))|0;
      $41 = $3;
      $42 = (1280 + ($41<<2)|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $3;
      $45 = (2880 + ($44<<2)|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (_se_compare($37,$40,$43,$46,$diff_sign)|0);
      $48 = ($47|0)!=(0);
      if ($48) {
       break L4;
      }
     }
     $134 = $j;
     $135 = (($134) + 2)|0;
     $i = $135;
    }
    $136 = $level;
    $137 = (($136) + 1)|0;
    $level = $137;
   }
   if ((label|0) == 25) {
    $0 = 0;
    $138 = $0;
    STACKTOP = sp;return ($138|0);
   }
   $49 = HEAP32[$diff_sign>>2]|0;
   $50 = ($49|0)!=(0);
   if ($50) {
    $51 = $i;
    $52 = (($51) + 2)|0;
    $53 = $1;
    $54 = (($53) + ($52<<4)|0);
    $55 = $j;
    $56 = $1;
    $57 = (($56) + ($55<<4)|0);
    $58 = $2;
    $59 = HEAP32[$58>>2]|0;
    $60 = $j;
    $61 = (($59) - ($60))|0;
    $62 = $61<<4;
    _memmove(($54|0),($57|0),($62|0))|0;
    $63 = $j;
    $64 = $i;
    $65 = (($64) + 2)|0;
    $66 = (($63) - ($65))|0;
    $67 = $2;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) - ($66))|0;
    HEAP32[$67>>2] = $69;
    $70 = $level;
    $71 = (($70) + 1)|0;
    $level = $71;
    $72 = $level;
    $73 = $k;
    $74 = $1;
    $75 = (($74) + ($73<<4)|0);
    $76 = (($75) + 4|0);
    HEAP32[$76>>2] = $72;
    $77 = $k;
    $78 = $1;
    $79 = (($78) + ($77<<4)|0);
    HEAP32[$79>>2] = 0;
    $80 = $k;
    $81 = $1;
    $82 = (($81) + ($80<<4)|0);
    $83 = (($82) + 8|0);
    HEAPF64[$83>>3] = -1.0;
    $84 = $k;
    $85 = (($84) + 1)|0;
    $k = $85;
    $86 = $level;
    $87 = $k;
    $88 = $1;
    $89 = (($88) + ($87<<4)|0);
    $90 = (($89) + 4|0);
    HEAP32[$90>>2] = $86;
    $91 = $k;
    $92 = $1;
    $93 = (($92) + ($91<<4)|0);
    HEAP32[$93>>2] = 2;
    $94 = $k;
    $95 = $1;
    $96 = (($95) + ($94<<4)|0);
    $97 = (($96) + 8|0);
    HEAP32[$97>>2] = 4;
    $98 = $k;
    $99 = (($98) + 1)|0;
    $k = $99;
   } else {
    $100 = $i;
    $101 = $1;
    $102 = (($101) + ($100<<4)|0);
    $103 = $j;
    $104 = $1;
    $105 = (($104) + ($103<<4)|0);
    $106 = $2;
    $107 = HEAP32[$106>>2]|0;
    $108 = $j;
    $109 = (($107) - ($108))|0;
    $110 = $109<<4;
    _memmove(($102|0),($105|0),($110|0))|0;
    $111 = $j;
    $112 = $i;
    $113 = (($111) - ($112))|0;
    $114 = $2;
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) - ($113))|0;
    HEAP32[$114>>2] = $116;
   }
   $117 = $level;
   $118 = $k;
   $119 = $1;
   $120 = (($119) + ($118<<4)|0);
   $121 = (($120) + 4|0);
   HEAP32[$121>>2] = $117;
   $122 = $k;
   $123 = $1;
   $124 = (($123) + ($122<<4)|0);
   HEAP32[$124>>2] = 1;
   $125 = $3;
   $126 = (480 + ($125<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + 8|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $k;
   $131 = $1;
   $132 = (($131) + ($130<<4)|0);
   $133 = (($132) + 8|0);
   HEAP32[$133>>2] = $129;
   $0 = 1;
   $138 = $0;
   STACKTOP = sp;return ($138|0);
  }
 }
 $0 = 0;
 $138 = $0;
 STACKTOP = sp;return ($138|0);
}
function _opt_es($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $diff_sign = 0, $found_se = 0, $found_se1 = 0, $i = 0, $i1 = 0, $i2 = 0, $j = 0, $jj1 = 0, $k = 0, $k1 = 0, $level = 0, $level1 = 0, $v = 0, $var_name_buf = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $diff_sign = sp + 16|0;
 $v = sp + 4|0;
 $var_name_buf = sp + 68|0;
 $1 = $equation;
 $2 = $np;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(0);
 if ($5) {
  $0 = 0;
  $263 = $0;
  STACKTOP = sp;return ($263|0);
 }
 $level = 1;
 $found_se = 1;
 L5: while(1) {
  $6 = $found_se;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   label = 59;
   break;
  }
  $i = 1;
  $found_se = 0;
  while(1) {
   $8 = $i;
   $9 = $2;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)<($10|0);
   if (!($11)) {
    break;
   }
   $12 = $i;
   $j = $12;
   while(1) {
    $13 = $j;
    $14 = $2;
    $15 = HEAP32[$14>>2]|0;
    $16 = ($13|0)<($15|0);
    if ($16) {
     $17 = $j;
     $18 = $1;
     $19 = (($18) + ($17<<4)|0);
     $20 = (($19) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = $level;
     $23 = ($21|0)>($22|0);
     $264 = $23;
    } else {
     $264 = 0;
    }
    if (!($264)) {
     break;
    }
    $24 = $j;
    $25 = (($24) + 2)|0;
    $j = $25;
   }
   $26 = $j;
   $27 = $i;
   $28 = ($26|0)==($27|0);
   do {
    if ($28) {
    } else {
     $found_se = 1;
     $29 = $i;
     $30 = (($29) - 1)|0;
     $k = $30;
     $31 = $j;
     $32 = $k;
     $33 = (($31) - ($32))|0;
     $34 = ($33|0)<(7);
     if ($34) {
      break;
     }
     $found_se1 = 1;
     $level1 = 1;
     while(1) {
      $35 = $found_se1;
      $36 = ($35|0)!=(0);
      if (!($36)) {
       break;
      }
      $i1 = 1;
      $found_se1 = 0;
      while(1) {
       $37 = $i1;
       $38 = $2;
       $39 = HEAP32[$38>>2]|0;
       $40 = ($37|0)<($39|0);
       if (!($40)) {
        break;
       }
       $41 = $i1;
       $jj1 = $41;
       while(1) {
        $42 = $jj1;
        $43 = $2;
        $44 = HEAP32[$43>>2]|0;
        $45 = ($42|0)<($44|0);
        if ($45) {
         $46 = $jj1;
         $47 = $1;
         $48 = (($47) + ($46<<4)|0);
         $49 = (($48) + 4|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = $level1;
         $52 = ($50|0)>($51|0);
         $265 = $52;
        } else {
         $265 = 0;
        }
        if (!($265)) {
         break;
        }
        $53 = $jj1;
        $54 = (($53) + 2)|0;
        $jj1 = $54;
       }
       $55 = $jj1;
       $56 = $i1;
       $57 = ($55|0)==($56|0);
       do {
        if ($57) {
        } else {
         $found_se1 = 1;
         $58 = $i1;
         $59 = $j;
         $60 = ($58|0)<=($59|0);
         if ($60) {
          break;
         }
         $61 = $i1;
         $62 = (($61) - 1)|0;
         $k1 = $62;
         $63 = $jj1;
         $64 = $k1;
         $65 = (($63) - ($64))|0;
         $66 = ($65|0)>=(7);
         if ($66) {
          $67 = $k;
          $68 = $1;
          $69 = (($68) + ($67<<4)|0);
          $70 = $j;
          $71 = $k;
          $72 = (($70) - ($71))|0;
          $73 = $k1;
          $74 = $1;
          $75 = (($74) + ($73<<4)|0);
          $76 = $jj1;
          $77 = $k1;
          $78 = (($76) - ($77))|0;
          $79 = (_se_compare($69,$72,$75,$78,$diff_sign)|0);
          $80 = ($79|0)!=(0);
          if ($80) {
           break L5;
          }
         }
        }
       } while(0);
       $255 = $jj1;
       $256 = (($255) + 2)|0;
       $i1 = $256;
      }
      $257 = $level1;
      $258 = (($257) + 1)|0;
      $level1 = $258;
     }
    }
   } while(0);
   $259 = $j;
   $260 = (($259) + 2)|0;
   $i = $260;
  }
  $261 = $level;
  $262 = (($261) + 1)|0;
  $level = $262;
 }
 if ((label|0) == 59) {
  $0 = 0;
  $263 = $0;
  STACKTOP = sp;return ($263|0);
 }
 $81 = HEAP32[71416>>2]|0;
 HEAP32[$vararg_buffer>>2] = $81;
 (_snprintf($var_name_buf,100,71400,$vararg_buffer)|0);
 $82 = (_parse_var($v,$var_name_buf)|0);
 $83 = ($82|0)==(0|0);
 if ($83) {
  $0 = 0;
  $263 = $0;
  STACKTOP = sp;return ($263|0);
 }
 $84 = HEAP32[71416>>2]|0;
 $85 = (($84) + 1)|0;
 HEAP32[71416>>2] = $85;
 $86 = HEAP32[71416>>2]|0;
 $87 = ($86|0)<(0);
 if ($87) {
  HEAP32[71416>>2] = 0;
 }
 $88 = (_next_espace()|0);
 $i2 = $88;
 $89 = $i2;
 $90 = (480 + ($89<<2)|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + 4|0);
 HEAP32[$92>>2] = 1;
 $93 = $i2;
 $94 = (480 + ($93<<2)|0);
 $95 = HEAP32[$94>>2]|0;
 HEAP32[$95>>2] = 1;
 $96 = HEAP32[$v>>2]|0;
 $97 = $i2;
 $98 = (480 + ($97<<2)|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + 8|0);
 HEAP32[$100>>2] = $96;
 $101 = $i2;
 $102 = (2080 + ($101<<2)|0);
 HEAP32[$102>>2] = 1;
 $103 = $i2;
 $104 = (1280 + ($103<<2)|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $k;
 $107 = $1;
 $108 = (($107) + ($106<<4)|0);
 $109 = $j;
 $110 = $k;
 $111 = (($109) - ($110))|0;
 $112 = $111<<4;
 _memmove(($105|0),($108|0),($112|0))|0;
 $113 = $j;
 $114 = $k;
 $115 = (($113) - ($114))|0;
 $116 = $i2;
 $117 = (2880 + ($116<<2)|0);
 HEAP32[$117>>2] = $115;
 $118 = HEAP32[$diff_sign>>2]|0;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $i1;
  $121 = (($120) + 2)|0;
  $122 = $1;
  $123 = (($122) + ($121<<4)|0);
  $124 = $jj1;
  $125 = $1;
  $126 = (($125) + ($124<<4)|0);
  $127 = $2;
  $128 = HEAP32[$127>>2]|0;
  $129 = $jj1;
  $130 = (($128) - ($129))|0;
  $131 = $130<<4;
  _memmove(($123|0),($126|0),($131|0))|0;
  $132 = $jj1;
  $133 = $i1;
  $134 = (($133) + 2)|0;
  $135 = (($132) - ($134))|0;
  $136 = $2;
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) - ($135))|0;
  HEAP32[$136>>2] = $138;
  $139 = $level1;
  $140 = (($139) + 1)|0;
  $level1 = $140;
  $141 = $level1;
  $142 = $k1;
  $143 = $1;
  $144 = (($143) + ($142<<4)|0);
  $145 = (($144) + 4|0);
  HEAP32[$145>>2] = $141;
  $146 = $k1;
  $147 = $1;
  $148 = (($147) + ($146<<4)|0);
  HEAP32[$148>>2] = 0;
  $149 = $k1;
  $150 = $1;
  $151 = (($150) + ($149<<4)|0);
  $152 = (($151) + 8|0);
  HEAPF64[$152>>3] = -1.0;
  $153 = $k1;
  $154 = (($153) + 1)|0;
  $k1 = $154;
  $155 = $level1;
  $156 = $k1;
  $157 = $1;
  $158 = (($157) + ($156<<4)|0);
  $159 = (($158) + 4|0);
  HEAP32[$159>>2] = $155;
  $160 = $k1;
  $161 = $1;
  $162 = (($161) + ($160<<4)|0);
  HEAP32[$162>>2] = 2;
  $163 = $k1;
  $164 = $1;
  $165 = (($164) + ($163<<4)|0);
  $166 = (($165) + 8|0);
  HEAP32[$166>>2] = 4;
  $167 = $k1;
  $168 = (($167) + 1)|0;
  $k1 = $168;
 } else {
  $169 = $i1;
  $170 = $1;
  $171 = (($170) + ($169<<4)|0);
  $172 = $jj1;
  $173 = $1;
  $174 = (($173) + ($172<<4)|0);
  $175 = $2;
  $176 = HEAP32[$175>>2]|0;
  $177 = $jj1;
  $178 = (($176) - ($177))|0;
  $179 = $178<<4;
  _memmove(($171|0),($174|0),($179|0))|0;
  $180 = $jj1;
  $181 = $i1;
  $182 = (($180) - ($181))|0;
  $183 = $2;
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) - ($182))|0;
  HEAP32[$183>>2] = $185;
 }
 $186 = $level1;
 $187 = $k1;
 $188 = $1;
 $189 = (($188) + ($187<<4)|0);
 $190 = (($189) + 4|0);
 HEAP32[$190>>2] = $186;
 $191 = $k1;
 $192 = $1;
 $193 = (($192) + ($191<<4)|0);
 HEAP32[$193>>2] = 1;
 $194 = HEAP32[$v>>2]|0;
 $195 = $k1;
 $196 = $1;
 $197 = (($196) + ($195<<4)|0);
 $198 = (($197) + 8|0);
 HEAP32[$198>>2] = $194;
 $199 = $i;
 $200 = $1;
 $201 = (($200) + ($199<<4)|0);
 $202 = $j;
 $203 = $1;
 $204 = (($203) + ($202<<4)|0);
 $205 = $2;
 $206 = HEAP32[$205>>2]|0;
 $207 = $j;
 $208 = (($206) - ($207))|0;
 $209 = $208<<4;
 _memmove(($201|0),($204|0),($209|0))|0;
 $210 = $j;
 $211 = $i;
 $212 = (($210) - ($211))|0;
 $213 = $2;
 $214 = HEAP32[$213>>2]|0;
 $215 = (($214) - ($212))|0;
 HEAP32[$213>>2] = $215;
 $216 = $level;
 $217 = $k;
 $218 = $1;
 $219 = (($218) + ($217<<4)|0);
 $220 = (($219) + 4|0);
 HEAP32[$220>>2] = $216;
 $221 = $k;
 $222 = $1;
 $223 = (($222) + ($221<<4)|0);
 HEAP32[$223>>2] = 1;
 $224 = HEAP32[$v>>2]|0;
 $225 = $k;
 $226 = $1;
 $227 = (($226) + ($225<<4)|0);
 $228 = (($227) + 8|0);
 HEAP32[$228>>2] = $224;
 while(1) {
  $229 = $1;
  $230 = $2;
  $231 = $i2;
  $232 = (_find_more($229,$230,$231)|0);
  $233 = ($232|0)!=(0);
  if (!($233)) {
   break;
  }
 }
 $234 = $i2;
 $235 = (1280 + ($234<<2)|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = $i2;
 $238 = (2880 + ($237<<2)|0);
 (_simp_loop($236,$238)|0);
 $239 = $1;
 $240 = $2;
 (_simp_loop($239,$240)|0);
 $i = 0;
 while(1) {
  $241 = $i;
  $242 = ($241|0)>=(200);
  if ($242) {
   _error_bug(71424);
  }
  $243 = $i;
  $244 = (63176 + ($243<<2)|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = ($245|0)<(0);
  if ($246) {
   break;
  }
  $247 = $i;
  $248 = (($247) + 1)|0;
  $i = $248;
 }
 $249 = $i2;
 $250 = $i;
 $251 = (63176 + ($250<<2)|0);
 HEAP32[$251>>2] = $249;
 $252 = $i;
 $253 = (($252) + 1)|0;
 $254 = (63176 + ($253<<2)|0);
 HEAP32[$254>>2] = -1;
 $0 = 1;
 $263 = $0;
 STACKTOP = sp;return ($263|0);
}
function _output_current_directory($ofp) {
 $ofp = $ofp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 16|0;
 $1 = $ofp;
 $2 = HEAP32[41288>>2]|0;
 $3 = ($2|0)<(3);
 do {
  if ($3) {
   $4 = $1;
   $5 = ($4|0)!=(0|0);
   if ($5) {
    $6 = (_getcwd(($buf|0),4096)|0);
    $7 = ($6|0)!=(0|0);
    if ($7) {
     $8 = $1;
     HEAP32[$vararg_buffer>>2] = $buf;
     (_fprintf(($8|0),(64032|0),($vararg_buffer|0))|0);
     $0 = 1;
     $9 = $0;
     STACKTOP = sp;return ($9|0);
    } else {
     _perror((0|0));
     break;
    }
   }
  }
 } while(0);
 $0 = 0;
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _output_options($ofp,$all_set_options) {
 $ofp = $ofp|0;
 $all_set_options = $all_set_options|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0;
 var $vararg_buffer60 = 0, $vararg_buffer62 = 0, $vararg_buffer64 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer85 = sp + 328|0;
 $vararg_buffer83 = sp + 320|0;
 $vararg_buffer81 = sp + 312|0;
 $vararg_buffer79 = sp + 304|0;
 $vararg_buffer76 = sp + 296|0;
 $vararg_buffer74 = sp + 288|0;
 $vararg_buffer72 = sp + 280|0;
 $vararg_buffer70 = sp + 272|0;
 $vararg_buffer68 = sp + 264|0;
 $vararg_buffer66 = sp + 256|0;
 $vararg_buffer64 = sp + 248|0;
 $vararg_buffer62 = sp + 240|0;
 $vararg_buffer60 = sp + 232|0;
 $vararg_buffer58 = sp + 224|0;
 $vararg_buffer56 = sp + 216|0;
 $vararg_buffer54 = sp + 208|0;
 $vararg_buffer52 = sp + 200|0;
 $vararg_buffer50 = sp + 192|0;
 $vararg_buffer48 = sp + 184|0;
 $vararg_buffer45 = sp + 176|0;
 $vararg_buffer42 = sp + 168|0;
 $vararg_buffer40 = sp + 160|0;
 $vararg_buffer38 = sp + 152|0;
 $vararg_buffer36 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $ofp;
 $1 = $all_set_options;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = HEAP32[16>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 (_fprintf(($4|0),(64048|0),($vararg_buffer|0))|0);
 $6 = HEAP32[96>>2]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = $0;
  (_fprintf(($8|0),(64072|0),($vararg_buffer1|0))|0);
 }
 $9 = $0;
 (_fprintf(($9|0),(64080|0),($vararg_buffer3|0))|0);
 $10 = HEAP32[104>>2]|0;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = $0;
  (_fprintf(($12|0),(64072|0),($vararg_buffer5|0))|0);
 }
 $13 = $0;
 (_fprintf(($13|0),(64096|0),($vararg_buffer7|0))|0);
 $14 = HEAP32[112>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = $0;
  (_fprintf(($16|0),(64072|0),($vararg_buffer9|0))|0);
 }
 $17 = $0;
 (_fprintf(($17|0),(64112|0),($vararg_buffer11|0))|0);
 $18 = HEAP32[120>>2]|0;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = $0;
  (_fprintf(($20|0),(64072|0),($vararg_buffer13|0))|0);
 }
 $21 = $0;
 (_fprintf(($21|0),(64128|0),($vararg_buffer15|0))|0);
 $22 = HEAP32[24>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $24 = $0;
  (_fprintf(($24|0),(64072|0),($vararg_buffer17|0))|0);
 }
 $25 = $0;
 (_fprintf(($25|0),(64144|0),($vararg_buffer19|0))|0);
 $26 = $1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = HEAP32[3792>>2]|0;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = HEAP32[3792>>2]|0;
   $31 = ($30|0)==(2);
   if ($31) {
    $32 = $0;
    (_fprintf(($32|0),(64160|0),($vararg_buffer21|0))|0);
   } else {
    $33 = $0;
    (_fprintf(($33|0),(64176|0),($vararg_buffer23|0))|0);
   }
  }
 }
 $34 = HEAP32[392>>2]|0;
 $35 = ($34|0)==(2);
 if ($35) {
  $36 = $0;
  (_fprintf(($36|0),(64184|0),($vararg_buffer25|0))|0);
 }
 $37 = HEAP32[400>>2]|0;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = HEAP32[392>>2]|0;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $0;
   (_fprintf(($41|0),(64200|0),($vararg_buffer27|0))|0);
  } else {
   label = 24;
  }
 } else {
  label = 24;
 }
 if ((label|0) == 24) {
  $42 = HEAP32[392>>2]|0;
  $43 = ($42|0)!=(0);
  if ($43) {
   $45 = $0;
   (_fprintf(($45|0),(64232|0),($vararg_buffer31|0))|0);
  } else {
   $44 = $0;
   (_fprintf(($44|0),(64216|0),($vararg_buffer29|0))|0);
  }
 }
 $46 = HEAP32[408>>2]|0;
 $47 = ($46|0)>=(0);
 if ($47) {
  $48 = $0;
  $49 = HEAP32[408>>2]|0;
  HEAP32[$vararg_buffer33>>2] = $49;
  (_fprintf(($48|0),(64248|0),($vararg_buffer33|0))|0);
 }
 $50 = $0;
 (_fprintf(($50|0),(64256|0),($vararg_buffer36|0))|0);
 $51 = HEAP32[32>>2]|0;
 $52 = ($51|0)!=(0);
 if (!($52)) {
  $53 = $0;
  (_fprintf(($53|0),(64072|0),($vararg_buffer38|0))|0);
 }
 $54 = $0;
 (_fprintf(($54|0),(64264|0),($vararg_buffer40|0))|0);
 $55 = $1;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $0;
  $58 = HEAP32[72>>2]|0;
  HEAP32[$vararg_buffer42>>2] = $58;
  (_fprintf(($57|0),(64280|0),($vararg_buffer42|0))|0);
  $59 = $0;
  $60 = HEAP32[80>>2]|0;
  HEAP32[$vararg_buffer45>>2] = $60;
  (_fprintf(($59|0),(64296|0),($vararg_buffer45|0))|0);
 }
 $61 = $0;
 (_fprintf(($61|0),(64312|0),($vararg_buffer48|0))|0);
 $62 = HEAP32[40>>2]|0;
 if ((($62|0) == 0)) {
  $63 = $0;
  (_fprintf(($63|0),(64344|0),($vararg_buffer50|0))|0);
 } else if ((($62|0) == 2)) {
  $64 = $0;
  (_fprintf(($64|0),(64352|0),($vararg_buffer52|0))|0);
 } else {
  $65 = $0;
  (_fprintf(($65|0),(64360|0),($vararg_buffer54|0))|0);
 }
 $66 = HEAP32[41208>>2]|0;
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = $0;
  (_fprintf(($68|0),(64072|0),($vararg_buffer56|0))|0);
 }
 $69 = $0;
 (_fprintf(($69|0),(64368|0),($vararg_buffer58|0))|0);
 $70 = HEAP32[56>>2]|0;
 $71 = ($70|0)!=(0);
 if (!($71)) {
  $72 = $0;
  (_fprintf(($72|0),(64072|0),($vararg_buffer60|0))|0);
 }
 $73 = $0;
 (_fprintf(($73|0),(64376|0),($vararg_buffer62|0))|0);
 $74 = $0;
 (_fprintf(($74|0),(64408|0),($vararg_buffer64|0))|0);
 $75 = HEAP32[64>>2]|0;
 if ((($75|0) == 2)) {
  $78 = $0;
  (_fprintf(($78|0),(64440|0),($vararg_buffer70|0))|0);
 } else if ((($75|0) == 0)) {
  $76 = $0;
  (_fprintf(($76|0),(64424|0),($vararg_buffer66|0))|0);
 } else if ((($75|0) == 1)) {
  $77 = $0;
  (_fprintf(($77|0),(64432|0),($vararg_buffer68|0))|0);
 } else {
  $79 = $0;
  (_fprintf(($79|0),(64448|0),($vararg_buffer72|0))|0);
 }
 $80 = HEAP32[88>>2]|0;
 $81 = ($80|0)<(0);
 if ($81) {
  $82 = $0;
  (_fprintf(($82|0),(64464|0),($vararg_buffer74|0))|0);
 } else {
  $83 = $0;
  $84 = HEAP32[88>>2]|0;
  HEAP32[$vararg_buffer76>>2] = $84;
  (_fprintf(($83|0),(64480|0),($vararg_buffer76|0))|0);
 }
 $85 = HEAP32[3768>>2]|0;
 $86 = ($85|0)!=(0);
 if (!($86)) {
  $87 = $0;
  (_fprintf(($87|0),(64072|0),($vararg_buffer79|0))|0);
 }
 $88 = $0;
 (_fprintf(($88|0),(64504|0),($vararg_buffer81|0))|0);
 $89 = HEAP32[3776>>2]|0;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $0;
  (_fprintf(($91|0),(64528|0),($vararg_buffer83|0))|0);
 }
 $92 = $0;
 HEAP32[$vararg_buffer85>>2] = 128;
 (_fprintf(($92|0),(64560|0),($vararg_buffer85|0))|0);
 STACKTOP = sp;return;
}
function _skip_no($cpp) {
 $cpp = $cpp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cpp;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strcmp_tospace($3,64600)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = (_strcmp_tospace($7,64608)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = $1;
   $11 = HEAP32[$10>>2]|0;
   $12 = (_strcmp_tospace($11,64616)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = $1;
    $15 = HEAP32[$14>>2]|0;
    $16 = (_strcmp_tospace($15,64624)|0);
    $17 = ($16|0)==(0);
    if (!($17)) {
     $22 = $1;
     $23 = HEAP32[$22>>2]|0;
     $24 = (_strcmp_tospace($23,64632)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      label = 9;
     } else {
      $26 = $1;
      $27 = HEAP32[$26>>2]|0;
      $28 = (_strcmp_tospace($27,64640)|0);
      $29 = ($28|0)==(0);
      if ($29) {
       label = 9;
      } else {
       $30 = $1;
       $31 = HEAP32[$30>>2]|0;
       $32 = (_strcmp_tospace($31,64648)|0);
       $33 = ($32|0)==(0);
       if ($33) {
        label = 9;
       }
      }
     }
     if ((label|0) == 9) {
      $34 = $1;
      $35 = HEAP32[$34>>2]|0;
      $36 = (_skip_param($35)|0);
      $37 = $1;
      HEAP32[$37>>2] = $36;
     }
     $0 = 0;
     $38 = $0;
     STACKTOP = sp;return ($38|0);
    }
   }
  }
 }
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = (_skip_param($19)|0);
 $21 = $1;
 HEAP32[$21>>2] = $20;
 $0 = 1;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _save_set_options($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $pre_existing = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $cp;
 $2 = HEAP8[36064>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(0);
 if ($4) {
  _error(64656);
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $5 = (_access((36064|0),0)|0);
 $6 = ($5|0)==(0);
 $7 = $6&1;
 $pre_existing = $7;
 $8 = (_fopen((36064|0),(64720|0))|0);
 $fp = $8;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _perror((36064|0));
  _error(64728);
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $10 = $fp;
 (_fprintf(($10|0),(64776|0),($vararg_buffer|0))|0);
 $11 = $fp;
 (_fprintf(($11|0),(64824|0),($vararg_buffer1|0))|0);
 $12 = $fp;
 (_fprintf(($12|0),(64864|0),($vararg_buffer3|0))|0);
 $13 = $1;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $1;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $fp;
   $20 = $1;
   HEAP32[$vararg_buffer5>>2] = $20;
   (_fprintf(($19|0),(61536|0),($vararg_buffer5|0))|0);
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $21 = $fp;
  _output_options($21,0);
 }
 $22 = $fp;
 $23 = (_fclose(($22|0))|0);
 $24 = ($23|0)==(0);
 if (!($24)) {
  _perror((36064|0));
  _error(65008);
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $25 = $pre_existing;
 $26 = ($25|0)!=(0);
 if ($26) {
  HEAP32[$vararg_buffer7>>2] = 36064;
  (_printf((64904|0),($vararg_buffer7|0))|0);
 } else {
  HEAP32[$vararg_buffer10>>2] = 36064;
  (_printf((64960|0),($vararg_buffer10|0))|0);
 }
 $0 = 1;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _set_options($cp,$loading_startup_file) {
 $cp = $cp|0;
 $loading_startup_file = $loading_startup_file|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp1 = 0, $i = 0, $negate = 0, $option_string = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer54 = sp + 208|0;
 $vararg_buffer52 = sp + 200|0;
 $vararg_buffer50 = sp + 192|0;
 $vararg_buffer48 = sp + 184|0;
 $vararg_buffer45 = sp + 176|0;
 $vararg_buffer43 = sp + 168|0;
 $vararg_buffer41 = sp + 160|0;
 $vararg_buffer39 = sp + 152|0;
 $vararg_buffer37 = sp + 144|0;
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer33 = sp + 128|0;
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer29 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 232|0;
 $cp1 = sp + 216|0;
 HEAP32[$1>>2] = $cp;
 $2 = $loading_startup_file;
 HEAP32[$cp1>>2] = 0;
 HEAP32[41304>>2] = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = (_skip_comma_space($3)|0);
  HEAP32[$1>>2] = $4;
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
   break;
  }
  $9 = HEAP32[$1>>2]|0;
  $10 = (_strncasecmp($9,65040,3)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   label = 5;
   break;
  }
  $30 = (_skip_no($1)|0);
  $negate = $30;
  $31 = HEAP32[$1>>2]|0;
  $option_string = $31;
  $32 = HEAP32[$1>>2]|0;
  $33 = (_skip_param($32)|0);
  HEAP32[$1>>2] = $33;
  $34 = $option_string;
  $35 = (_strncasecmp($34,65216,7)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   label = 15;
   break;
  }
  $54 = $option_string;
  $55 = (_strncasecmp($54,65288,3)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   $57 = $negate;
   $58 = ($57|0)!=(0);
   if ($58) {
    HEAP32[80>>2] = 0;
   } else {
    $59 = HEAP32[$1>>2]|0;
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = ($61|0)==(0);
    if ($62) {
     label = 29;
     break;
    }
    $64 = HEAP32[$1>>2]|0;
    $65 = (_decstrtol($64,$cp1)|0);
    $i = $65;
    $66 = $i;
    $67 = ($66|0)<(0);
    if ($67) {
     label = 33;
     break;
    }
    $68 = HEAP32[$cp1>>2]|0;
    $69 = ($68|0)==(0|0);
    if ($69) {
     label = 33;
     break;
    }
    $70 = HEAP32[$1>>2]|0;
    $71 = HEAP32[$cp1>>2]|0;
    $72 = ($70|0)==($71|0);
    if ($72) {
     label = 33;
     break;
    }
    $73 = HEAP32[$cp1>>2]|0;
    HEAP32[$1>>2] = $73;
    $74 = $i;
    HEAP32[80>>2] = $74;
   }
   continue;
  }
  $75 = $option_string;
  $76 = (_strncasecmp($75,65392,6)|0);
  $77 = ($76|0)==(0);
  if ($77) {
   $78 = $negate;
   $79 = ($78|0)!=(0);
   if ($79) {
    HEAP32[72>>2] = 0;
   } else {
    $80 = HEAP32[$1>>2]|0;
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $83 = ($82|0)==(0);
    if ($83) {
     label = 40;
     break;
    }
    $86 = HEAP32[$1>>2]|0;
    $87 = (_decstrtol($86,$cp1)|0);
    $i = $87;
    $88 = $i;
    $89 = ($88|0)<(0);
    if ($89) {
     label = 46;
     break;
    }
    $90 = HEAP32[$cp1>>2]|0;
    $91 = ($90|0)==(0|0);
    if ($91) {
     label = 46;
     break;
    }
    $92 = HEAP32[$1>>2]|0;
    $93 = HEAP32[$cp1>>2]|0;
    $94 = ($92|0)==($93|0);
    if ($94) {
     label = 46;
     break;
    }
    $95 = HEAP32[$cp1>>2]|0;
    HEAP32[$1>>2] = $95;
    $96 = $i;
    HEAP32[72>>2] = $96;
   }
   continue;
  }
  $97 = $option_string;
  $98 = (_strncasecmp($97,65496,4)|0);
  $99 = ($98|0)==(0);
  if ($99) {
   $100 = $negate;
   $101 = ($100|0)!=(0);
   if ($101) {
    $102 = (_get_screen_size()|0);
    $103 = ($102|0)!=(0);
    if (!($103)) {
     label = 53;
     break;
    }
    $104 = HEAP32[72>>2]|0;
    $105 = ($104|0)==(0);
    if ($105) {
     label = 53;
     break;
    }
   } else {
    HEAP32[72>>2] = 0;
    HEAP32[80>>2] = 0;
   }
   continue;
  }
  $106 = $option_string;
  $107 = (_strncasecmp($106,65504,4)|0);
  $108 = ($107|0)==(0);
  if ($108) {
   label = 58;
   break;
  }
  $121 = $option_string;
  $122 = (_strcmp_tospace($121,65584)|0);
  $123 = ($122|0)==(0);
  if ($123) {
   $124 = $negate;
   $125 = ($124|0)!=(0);
   $126 = $125 ^ 1;
   $127 = $126&1;
   HEAP32[120>>2] = $127;
   HEAP32[104>>2] = $127;
   HEAP32[96>>2] = $127;
   continue;
  }
  $128 = $option_string;
  $129 = (_strncasecmp($128,65592,9)|0);
  $130 = ($129|0)==(0);
  if ($130) {
   $131 = $negate;
   $132 = ($131|0)!=(0);
   $133 = $132 ^ 1;
   $134 = $133&1;
   HEAP32[96>>2] = $134;
   continue;
  }
  $135 = $option_string;
  $136 = (_strncasecmp($135,65608,8)|0);
  $137 = ($136|0)==(0);
  if ($137) {
   $138 = $negate;
   $139 = ($138|0)!=(0);
   $140 = $139 ^ 1;
   $141 = $140&1;
   HEAP32[104>>2] = $141;
   continue;
  }
  $142 = $option_string;
  $143 = (_strncasecmp($142,65624,7)|0);
  $144 = ($143|0)==(0);
  if ($144) {
   $145 = $negate;
   $146 = ($145|0)!=(0);
   $147 = $146 ^ 1;
   $148 = $147&1;
   HEAP32[112>>2] = $148;
   continue;
  }
  $149 = $option_string;
  $150 = (_strncasecmp($149,65640,10)|0);
  $151 = ($150|0)==(0);
  if ($151) {
   $152 = $negate;
   $153 = ($152|0)!=(0);
   $154 = $153 ^ 1;
   $155 = $154&1;
   HEAP32[120>>2] = $155;
   continue;
  }
  $156 = $option_string;
  $157 = (_strncasecmp($156,65656,4)|0);
  $158 = ($157|0)==(0);
  if ($158) {
   $159 = $negate;
   $160 = ($159|0)!=(0);
   $161 = $160 ^ 1;
   $162 = $161&1;
   HEAP32[24>>2] = $162;
   continue;
  }
  $163 = $option_string;
  $164 = (_strncasecmp($163,65664,7)|0);
  $165 = ($164|0)==(0);
  if ($165) {
   $166 = $negate;
   $167 = ($166|0)!=(0);
   $168 = $167 ^ 1;
   $169 = $168&1;
   HEAP32[32>>2] = $169;
   continue;
  }
  $170 = $option_string;
  $171 = (_strncasecmp($170,65680,4)|0);
  $172 = ($171|0)==(0);
  if ($172) {
   $173 = $negate;
   $174 = ($173|0)!=(0);
   if ($174) {
    HEAP32[40>>2] = 0;
   } else {
    $175 = HEAP32[$1>>2]|0;
    $176 = (_decstrtol($175,$cp1)|0);
    $i = $176;
    $177 = HEAP32[$1>>2]|0;
    $178 = HEAP32[$cp1>>2]|0;
    $179 = ($177|0)==($178|0);
    if ($179) {
     $180 = HEAP32[$1>>2]|0;
     $181 = (_strcmp_tospace($180,65696)|0);
     $182 = ($181|0)==(0);
     if ($182) {
      $183 = HEAP32[$1>>2]|0;
      $184 = (_skip_param($183)|0);
      HEAP32[$cp1>>2] = $184;
      $i = 0;
     } else {
      $185 = HEAP32[$1>>2]|0;
      $186 = (_strcmp_tospace($185,65704)|0);
      $187 = ($186|0)==(0);
      if ($187) {
       $188 = HEAP32[$1>>2]|0;
       $189 = (_skip_param($188)|0);
       HEAP32[$cp1>>2] = $189;
       $i = 1;
      } else {
       $190 = HEAP32[$1>>2]|0;
       $191 = (_strcmp_tospace($190,65712)|0);
       $192 = ($191|0)==(0);
       if ($192) {
        $193 = HEAP32[$1>>2]|0;
        $194 = (_skip_param($193)|0);
        HEAP32[$cp1>>2] = $194;
        $i = 2;
       }
      }
     }
    }
    $195 = HEAP32[$cp1>>2]|0;
    $196 = ($195|0)==(0|0);
    if ($196) {
     label = 95;
     break;
    }
    $197 = HEAP32[$1>>2]|0;
    $198 = HEAP32[$cp1>>2]|0;
    $199 = ($197|0)==($198|0);
    if ($199) {
     label = 95;
     break;
    }
    $200 = $i;
    $201 = ($200|0)<(0);
    if ($201) {
     label = 95;
     break;
    }
    $202 = $i;
    $203 = ($202|0)>(2);
    if ($203) {
     label = 95;
     break;
    }
    $205 = HEAP32[$cp1>>2]|0;
    HEAP32[$1>>2] = $205;
    $206 = $i;
    HEAP32[40>>2] = $206;
   }
   continue;
  }
  $207 = $option_string;
  $208 = (_strncasecmp($207,65984,6)|0);
  $209 = ($208|0)==(0);
  if ($209) {
   $210 = $negate;
   HEAP32[41208>>2] = $210;
   continue;
  }
  $211 = $option_string;
  $212 = (_strncasecmp($211,65992,4)|0);
  $213 = ($212|0)==(0);
  if ($213) {
   $214 = $negate;
   $215 = ($214|0)!=(0);
   $216 = $215 ^ 1;
   $217 = $216&1;
   HEAP32[41200>>2] = $217;
   continue;
  }
  $218 = $option_string;
  $219 = (_strncasecmp($218,66000,4)|0);
  $220 = ($219|0)==(0);
  if ($220) {
   $221 = HEAP32[41288>>2]|0;
   $222 = ($221|0)>(0);
   if ($222) {
    label = 104;
    break;
   }
   _reset_attr();
   $223 = HEAP32[$1>>2]|0;
   $224 = (_is_all($223)|0);
   $225 = ($224|0)!=(0);
   if ($225) {
    $226 = HEAP32[$1>>2]|0;
    $227 = (_skip_param($226)|0);
    HEAP32[$1>>2] = $227;
    $228 = $negate;
    $229 = ($228|0)!=(0);
    if ($229) {
     HEAP32[3792>>2] = 0;
    } else {
     HEAP32[3792>>2] = 2;
    }
   } else {
    $230 = $negate;
    $231 = ($230|0)!=(0);
    $232 = $231 ^ 1;
    $233 = $232&1;
    HEAP32[3792>>2] = $233;
   }
   continue;
  }
  $234 = $option_string;
  $235 = (_strncasecmp($234,66008,13)|0);
  $236 = ($235|0)==(0);
  if ($236) {
   $237 = $negate;
   $238 = ($237|0)!=(0);
   $239 = $238 ^ 1;
   $240 = $239&1;
   HEAP32[48>>2] = $240;
   continue;
  }
  $241 = $option_string;
  $242 = (_strncasecmp($241,66024,11)|0);
  $243 = ($242|0)==(0);
  if ($243) {
   $244 = $negate;
   $245 = ($244|0)!=(0);
   $246 = $245 ^ 1;
   $247 = $246&1;
   HEAP32[56>>2] = $247;
   continue;
  }
  $248 = $option_string;
  $249 = (_strncasecmp($248,66040,3)|0);
  $250 = ($249|0)==(0);
  if ($250) {
   $251 = $negate;
   $252 = ($251|0)!=(0);
   if ($252) {
    label = 118;
    break;
   }
   $253 = HEAP32[$1>>2]|0;
   $254 = (_decstrtol($253,$cp1)|0);
   $i = $254;
   $255 = HEAP32[$1>>2]|0;
   $256 = HEAP32[$cp1>>2]|0;
   $257 = ($255|0)==($256|0);
   if ($257) {
    $258 = HEAP32[$1>>2]|0;
    $259 = (_strcmp_tospace($258,66096)|0);
    $260 = ($259|0)==(0);
    do {
     if ($260) {
      label = 122;
     } else {
      $261 = HEAP32[$1>>2]|0;
      $262 = (_strcmp_tospace($261,66104)|0);
      $263 = ($262|0)==(0);
      if ($263) {
       label = 122;
       break;
      }
      $266 = HEAP32[$1>>2]|0;
      $267 = (_strcmp_tospace($266,66112)|0);
      $268 = ($267|0)==(0);
      if ($268) {
       $269 = HEAP32[$1>>2]|0;
       $270 = (_skip_param($269)|0);
       HEAP32[$cp1>>2] = $270;
       $i = 1;
      } else {
       $271 = HEAP32[$1>>2]|0;
       $272 = (_strcmp_tospace($271,66120)|0);
       $273 = ($272|0)==(0);
       if ($273) {
        label = 127;
       } else {
        $274 = HEAP32[$1>>2]|0;
        $275 = (_strcmp_tospace($274,66136)|0);
        $276 = ($275|0)==(0);
        if ($276) {
         label = 127;
        }
       }
       if ((label|0) == 127) {
        label = 0;
        $277 = HEAP32[$1>>2]|0;
        $278 = (_skip_param($277)|0);
        HEAP32[$cp1>>2] = $278;
        $i = 2;
       }
      }
     }
    } while(0);
    if ((label|0) == 122) {
     label = 0;
     $264 = HEAP32[$1>>2]|0;
     $265 = (_skip_param($264)|0);
     HEAP32[$cp1>>2] = $265;
     $i = 0;
    }
   }
   $279 = HEAP32[$cp1>>2]|0;
   $280 = ($279|0)==(0|0);
   if ($280) {
    label = 135;
    break;
   }
   $281 = HEAP32[$1>>2]|0;
   $282 = HEAP32[$cp1>>2]|0;
   $283 = ($281|0)==($282|0);
   if ($283) {
    label = 135;
    break;
   }
   $284 = $i;
   $285 = ($284|0)<(0);
   if ($285) {
    label = 135;
    break;
   }
   $286 = $i;
   $287 = ($286|0)>(2);
   if ($287) {
    label = 135;
    break;
   }
   $290 = HEAP32[$cp1>>2]|0;
   HEAP32[$1>>2] = $290;
   $291 = $i;
   HEAP32[64>>2] = $291;
   continue;
  }
  $292 = $option_string;
  $293 = (_strncasecmp($292,66648,5)|0);
  $294 = ($293|0)==(0);
  if ($294) {
   _reset_attr();
   $295 = HEAP32[392>>2]|0;
   $296 = ($295|0)!=(2);
   if ($296) {
    label = 146;
   } else {
    $297 = $negate;
    $298 = ($297|0)!=(0);
    if ($298) {
     label = 146;
    }
   }
   if ((label|0) == 146) {
    label = 0;
    $299 = $negate;
    $300 = ($299|0)!=(0);
    $301 = $300 ^ 1;
    $302 = $301&1;
    HEAP32[392>>2] = $302;
   }
   $303 = HEAP32[$1>>2]|0;
   $304 = (_decstrtol($303,$cp1)|0);
   $i = $304;
   $305 = HEAP32[$cp1>>2]|0;
   $306 = ($305|0)!=(0|0);
   do {
    if ($306) {
     $307 = HEAP32[$1>>2]|0;
     $308 = HEAP32[$cp1>>2]|0;
     $309 = ($307|0)!=($308|0);
     if (!($309)) {
      label = 150;
      break;
     }
     $310 = $i;
     HEAP32[408>>2] = $310;
     $311 = HEAP32[$cp1>>2]|0;
     HEAP32[$1>>2] = $311;
    } else {
     label = 150;
    }
   } while(0);
   if ((label|0) == 150) {
    label = 0;
    HEAP32[408>>2] = -1;
   }
   continue;
  }
  $312 = $option_string;
  $313 = (_strncasecmp($312,66656,3)|0);
  $314 = ($313|0)==(0);
  if ($314) {
   _reset_attr();
   $315 = $negate;
   $316 = ($315|0)!=(0);
   $317 = $316 ^ 1;
   $318 = $317&1;
   $319 = (($318) + 1)|0;
   HEAP32[392>>2] = $319;
   continue;
  }
  $320 = $option_string;
  $321 = (_strncasecmp($320,66672,4)|0);
  $322 = ($321|0)==(0);
  if ($322) {
   _reset_attr();
   $323 = $negate;
   $324 = ($323|0)!=(0);
   $325 = $324 ^ 1;
   $326 = $325&1;
   HEAP32[400>>2] = $326;
   continue;
  }
  $327 = $option_string;
  $328 = (_strncasecmp($327,66680,3)|0);
  $329 = ($328|0)==(0);
  if (!($329)) {
   $351 = $option_string;
   $352 = (_strncasecmp($351,66880,6)|0);
   $353 = ($352|0)==(0);
   if ($353) {
    $354 = $negate;
    $355 = ($354|0)!=(0);
    $356 = $355 ^ 1;
    $357 = $356&1;
    HEAP32[3768>>2] = $357;
    continue;
   }
   $358 = $option_string;
   $359 = (_strncasecmp($358,66896,5)|0);
   $360 = ($359|0)==(0);
   if ($360) {
    $361 = $negate;
    $362 = ($361|0)!=(0);
    $363 = $362 ^ 1;
    $364 = $363&1;
    HEAP32[3776>>2] = $364;
    continue;
   }
   $365 = $option_string;
   $366 = (_strcmp_tospace($365,66920)|0);
   $367 = ($366|0)==(0);
   if ($367) {
    label = 178;
    break;
   }
   $381 = $option_string;
   $382 = (_strcmp_tospace($381,67032)|0);
   $383 = ($382|0)==(0);
   if ($383) {
    label = 190;
    break;
   }
   $406 = $option_string;
   $407 = (_strcmp_tospace($406,67392)|0);
   $408 = ($407|0)==(0);
   if (!($408)) {
    label = 212;
    break;
   }
   $409 = $negate;
   $410 = ($409|0)!=(0);
   if ($410) {
    label = 211;
    break;
   }
   continue;
  }
  $330 = $negate;
  $331 = ($330|0)!=(0);
  if ($331) {
   HEAP32[88>>2] = -1;
  } else {
   $332 = HEAP32[$1>>2]|0;
   $333 = (_decstrtol($332,$cp1)|0);
   $i = $333;
   $334 = HEAP32[$cp1>>2]|0;
   $335 = ($334|0)==(0|0);
   if ($335) {
    label = 160;
    break;
   }
   $336 = HEAP32[$1>>2]|0;
   $337 = HEAP32[$cp1>>2]|0;
   $338 = ($336|0)==($337|0);
   if ($338) {
    $339 = HEAP32[$cp1>>2]|0;
    $340 = HEAP8[$339>>0]|0;
    $341 = $340 << 24 >> 24;
    $342 = ($341|0)==(0);
    if (!($342)) {
     label = 164;
     break;
    }
    $i = 2;
   }
   $343 = $i;
   $344 = ($343|0)<(-1);
   if ($344) {
    label = 168;
    break;
   }
   $345 = $i;
   $346 = ($345|0)>(100);
   if ($346) {
    label = 168;
    break;
   }
   $347 = $i;
   $348 = ($347|0)==(0);
   if ($348) {
    _warning(66840);
   }
   $349 = HEAP32[$cp1>>2]|0;
   HEAP32[$1>>2] = $349;
   $350 = $i;
   HEAP32[88>>2] = $350;
  }
 }
 switch (label|0) {
  case 3: {
   $0 = 1;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 5: {
   $12 = HEAP32[$1>>2]|0;
   $13 = (_skip_param($12)|0);
   HEAP32[$1>>2] = $13;
   $14 = HEAP32[41288>>2]|0;
   $15 = ($14|0)<(3);
   if (!($15)) {
    _error(65176);
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   $16 = HEAP32[$1>>2]|0;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)==(0);
   do {
    if ($19) {
     $20 = (_getenv((65056|0))|0);
     HEAP32[$cp1>>2] = $20;
     $21 = HEAP32[$cp1>>2]|0;
     $22 = ($21|0)==(0|0);
     if (!($22)) {
      $23 = HEAP32[$cp1>>2]|0;
      HEAP32[$1>>2] = $23;
      break;
     }
     _error(65064);
     $0 = 0;
     $413 = $0;
     STACKTOP = sp;return ($413|0);
    }
   } while(0);
   $24 = HEAP32[$1>>2]|0;
   $25 = (_chdir(($24|0))|0);
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = HEAP32[$1>>2]|0;
    _perror(($27|0));
    _error(65104);
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   } else {
    (_printf((65136|0),($vararg_buffer|0))|0);
    $28 = HEAP32[_stdout>>2]|0;
    $29 = (_output_current_directory($28)|0);
    $0 = $29;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   break;
  }
  case 15: {
   $37 = $negate;
   $38 = ($37|0)!=(0);
   do {
    if ($38) {
     HEAP8[128>>0] = 0;
    } else {
     $i = 0;
     while(1) {
      $39 = $i;
      $40 = HEAP32[$1>>2]|0;
      $41 = (($40) + ($39)|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = ($42<<24>>24)!=(0);
      if (!($43)) {
       label = 23;
       break;
      }
      $44 = $i;
      $45 = HEAP32[$1>>2]|0;
      $46 = (($45) + ($44)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47 << 24 >> 24;
      $49 = (_is_mathomatic_operator($48)|0);
      $50 = ($49|0)!=(0);
      if ($50) {
       break;
      }
      $51 = $i;
      $52 = (($51) + 1)|0;
      $i = $52;
     }
     if ((label|0) == 23) {
      $53 = HEAP32[$1>>2]|0;
      (_my_strlcpy(128,$53,256)|0);
      break;
     }
     _error(65224);
     $0 = 0;
     $413 = $0;
     STACKTOP = sp;return ($413|0);
    }
   } while(0);
   $0 = 1;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 29: {
   $63 = HEAP32[80>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $63;
   (_printf((65296|0),($vararg_buffer1|0))|0);
   label = 213;
   break;
  }
  case 33: {
   _error(65328);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 40: {
   $84 = (_get_screen_size()|0);
   $85 = ($84|0)!=(0);
   if ($85) {
    label = 213;
    break;
   }
   _error(65400);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 46: {
   _error(65440);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 53: {
   _error(65400);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 58: {
   $109 = HEAP32[$1>>2]|0;
   $110 = (_decstrtol($109,$cp1)|0);
   $i = $110;
   $111 = $i;
   $112 = ($111|0)<(0);
   if (!($112)) {
    $113 = $i;
    $114 = ($113|0)>(15);
    if (!($114)) {
     $115 = HEAP32[$cp1>>2]|0;
     $116 = ($115|0)==(0|0);
     if (!($116)) {
      $117 = HEAP32[$1>>2]|0;
      $118 = HEAP32[$cp1>>2]|0;
      $119 = ($117|0)==($118|0);
      if (!($119)) {
       $120 = $i;
       HEAP32[16>>2] = $120;
       $0 = 1;
       $413 = $0;
       STACKTOP = sp;return ($413|0);
      }
     }
    }
   }
   _error(65520);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 95: {
   _error(65720);
   (_printf((65784|0),($vararg_buffer3|0))|0);
   (_printf((65840|0),($vararg_buffer5|0))|0);
   (_printf((65896|0),($vararg_buffer7|0))|0);
   $204 = HEAP32[40>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $204;
   (_printf((65960|0),($vararg_buffer9|0))|0);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 104: {
   _error(65176);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 118: {
   _error(66056);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 135: {
   _error(66144);
   (_printf((66200|0),($vararg_buffer12|0))|0);
   (_printf((66248|0),($vararg_buffer14|0))|0);
   (_printf((66336|0),($vararg_buffer16|0))|0);
   (_printf((66384|0),($vararg_buffer18|0))|0);
   (_printf((66448|0),($vararg_buffer20|0))|0);
   (_printf((66512|0),($vararg_buffer22|0))|0);
   $288 = HEAP32[64>>2]|0;
   HEAP32[$vararg_buffer24>>2] = $288;
   (_printf((66584|0),($vararg_buffer24|0))|0);
   $289 = HEAP32[64>>2]|0;
   if ((($289|0) == 1)) {
    (_printf((66616|0),($vararg_buffer29|0))|0);
   } else if ((($289|0) == 2)) {
    (_printf((66136|0),($vararg_buffer31|0))|0);
   } else if ((($289|0) == 0)) {
    (_printf((66096|0),($vararg_buffer27|0))|0);
   } else {
    (_printf((66624|0),($vararg_buffer33|0))|0);
   }
   (_printf((66632|0),($vararg_buffer35|0))|0);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 160: {
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 164: {
   _error(66688);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 168: {
   _error(66760);
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
   break;
  }
  case 178: {
   $368 = $negate;
   $369 = ($368|0)!=(0);
   if ($369) {
    (_printf((66928|0),($vararg_buffer37|0))|0);
    $0 = 1;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   $370 = $2;
   $371 = ($370|0)!=(0);
   if ($371) {
    (_printf((66944|0),($vararg_buffer39|0))|0);
    $0 = 1;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   $372 = HEAP32[$1>>2]|0;
   $373 = (_extra_characters($372)|0);
   $374 = ($373|0)!=(0);
   if ($374) {
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   $375 = HEAP32[41288>>2]|0;
   $376 = ($375|0)<=(3);
   if (!($376)) {
    _error(65176);
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   $377 = HEAP32[41008>>2]|0;
   $378 = (_load_rc(0,$377)|0);
   $379 = ($378|0)!=(0);
   if ($379) {
    $380 = HEAP32[41008>>2]|0;
    (_fprintf(($380|0),(66976|0),($vararg_buffer41|0))|0);
    $0 = 1;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   } else {
    _error(66992);
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   break;
  }
  case 190: {
   $384 = HEAP32[41288>>2]|0;
   $385 = ($384|0)<(2);
   if (!($385)) {
    _error(65176);
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   $386 = HEAP8[36064>>0]|0;
   $387 = $386 << 24 >> 24;
   $388 = ($387|0)==(0);
   if ($388) {
    _error(64656);
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   $389 = $2;
   $390 = ($389|0)!=(0);
   if ($390) {
    (_printf((67040|0),($vararg_buffer43|0))|0);
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   $391 = $negate;
   $392 = ($391|0)!=(0);
   if ($392) {
    $393 = HEAP32[$1>>2]|0;
    $394 = (_extra_characters($393)|0);
    $395 = ($394|0)!=(0);
    if ($395) {
     $0 = 0;
     $413 = $0;
     STACKTOP = sp;return ($413|0);
    }
    $396 = (_unlink((36064|0))|0);
    $397 = ($396|0)==(0);
    if ($397) {
     HEAP32[$vararg_buffer45>>2] = 36064;
     (_printf((67104|0),($vararg_buffer45|0))|0);
     (_printf((67144|0),($vararg_buffer48|0))|0);
     $0 = 1;
     $413 = $0;
     STACKTOP = sp;return ($413|0);
    } else {
     _perror((36064|0));
     _error(67216);
     $0 = 0;
     $413 = $0;
     STACKTOP = sp;return ($413|0);
    }
   } else {
    $398 = HEAP32[$1>>2]|0;
    $399 = (_save_set_options($398)|0);
    $400 = ($399|0)!=(0);
    do {
     if ($400) {
      $401 = HEAP32[41008>>2]|0;
      $402 = (_load_rc(0,$401)|0);
      $403 = ($402|0)!=(0);
      if ($403) {
       $404 = HEAP32[41008>>2]|0;
       (_fprintf(($404|0),(67264|0),($vararg_buffer50|0))|0);
       $0 = 1;
       $413 = $0;
       STACKTOP = sp;return ($413|0);
      } else {
       _error(67304);
       $405 = HEAP32[41008>>2]|0;
       (_fprintf(($405|0),(67344|0),($vararg_buffer52|0))|0);
       break;
      }
     }
    } while(0);
    $0 = 0;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
   break;
  }
  case 211: {
   label = 212;
   break;
  }
 }
 if ((label|0) == 212) {
  $411 = $option_string;
  HEAP32[$vararg_buffer54>>2] = $411;
  (_printf((67400|0),($vararg_buffer54|0))|0);
  _error(67440);
  $0 = 0;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 else if ((label|0) == 213) {
  $412 = HEAP32[$1>>2]|0;
  (_extra_characters($412)|0);
  $0 = 1;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 return 0|0;
}
function _set_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $cp;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[41008>>2]|0;
  (_fprintf(($6|0),(67464|0),($vararg_buffer|0))|0);
  $7 = HEAP32[41008>>2]|0;
  _output_options($7,1);
  $8 = HEAP32[41008>>2]|0;
  (_output_current_directory($8)|0);
  $0 = 1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 $9 = $1;
 $10 = (_set_options($9,0)|0);
 $rv = $10;
 $11 = $rv;
 $12 = ($11|0)!=(0);
 if ($12) {
 }
 $13 = $rv;
 $0 = $13;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _echo_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $height = 0, $i = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $cp;
 $len = 0;
 $1 = HEAP32[41296>>2]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  $31 = HEAP32[41008>>2]|0;
  $32 = $0;
  HEAP32[$vararg_buffer5>>2] = $32;
  (_fprintf(($31|0),(61536|0),($vararg_buffer5|0))|0);
  STACKTOP = sp;return 1;
 }
 $3 = $0;
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  $6 = HEAP32[72>>2]|0;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = HEAP32[72>>2]|0;
   $width = $8;
  } else {
   $width = 80;
  }
  while(1) {
   $9 = $len;
   $10 = $0;
   $11 = (_strlen(($10|0))|0);
   $12 = (($9) + ($11))|0;
   $13 = $width;
   $14 = ($12>>>0)<($13>>>0);
   if (!($14)) {
    break;
   }
   $15 = HEAP32[41008>>2]|0;
   $16 = $0;
   HEAP32[$vararg_buffer>>2] = $16;
   (_fprintf(($15|0),(67496|0),($vararg_buffer|0))|0);
   $17 = $0;
   $18 = (_strlen(($17|0))|0);
   $19 = $len;
   $20 = (($19) + ($18))|0;
   $len = $20;
  }
  $21 = HEAP32[41008>>2]|0;
  (_fprintf(($21|0),(64256|0),($vararg_buffer1|0))|0);
 } else {
  $22 = HEAP32[80>>2]|0;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = HEAP32[80>>2]|0;
   $height = $24;
  } else {
   $height = 24;
  }
  $i = 0;
  while(1) {
   $25 = $i;
   $26 = $height;
   $27 = ($25|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = HEAP32[41008>>2]|0;
   (_fprintf(($28|0),(64256|0),($vararg_buffer3|0))|0);
   $29 = $i;
   $30 = (($29) + 1)|0;
   $i = $30;
  }
 }
 STACKTOP = sp;return 1;
}
function _pause_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 STACKTOP = sp;return 1;
}
function _copy_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp1 = 0, $exists = 0, $i = 0, $i1 = 0, $j = 0, $k = 0, $select_flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $i = sp + 20|0;
 $j = sp + 16|0;
 $exists = sp + 32|0;
 HEAP32[$1>>2] = $cp;
 $select_flag = 0;
 _memset(($exists|0),0,200)|0;
 $i1 = 0;
 while(1) {
  $2 = $i1;
  $3 = HEAP32[464>>2]|0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $i1;
  $6 = (2080 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(0);
  if ($8) {
   $9 = $i1;
   $10 = (($exists) + ($9)|0);
   HEAP8[$10>>0] = 1;
  }
  $11 = $i1;
  $12 = (($11) + 1)|0;
  $i1 = $12;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_strncasecmp($13,67504,3)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $select_flag = 1;
  $16 = HEAP32[$1>>2]|0;
  $17 = (_skip_param($16)|0);
  HEAP32[$1>>2] = $17;
 }
 L12: while(1) {
  $18 = HEAP32[$1>>2]|0;
  $cp1 = $18;
  $19 = (_get_range($1,$i,$j)|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   label = 11;
   break;
  }
  $21 = HEAP32[$1>>2]|0;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = HEAP32[$1>>2]|0;
   $26 = $cp1;
   $27 = ($25|0)==($26|0);
   if ($27) {
    label = 14;
    break;
   }
  }
  $28 = HEAP32[$i>>2]|0;
  $i1 = $28;
  while(1) {
   $29 = $i1;
   $30 = HEAP32[$j>>2]|0;
   $31 = ($29|0)<=($30|0);
   if (!($31)) {
    break;
   }
   $32 = $i1;
   $33 = (($exists) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = ($34<<24>>24)!=(0);
   if ($35) {
    $36 = (_next_espace()|0);
    $k = $36;
    $37 = $i1;
    $38 = $k;
    _copy_espace($37,$38);
    $39 = $k;
    $40 = (_return_result($39)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     label = 19;
     break L12;
    }
    $42 = $select_flag;
    $43 = ($42|0)!=(0);
    if ($43) {
     $44 = $k;
     HEAP32[472>>2] = $44;
     $select_flag = 0;
    }
   }
   $45 = $i1;
   $46 = (($45) + 1)|0;
   $i1 = $46;
  }
  $47 = HEAP32[$1>>2]|0;
  $48 = HEAP8[$47>>0]|0;
  $49 = ($48<<24>>24)!=(0);
  if (!($49)) {
   label = 27;
   break;
  }
 }
 if ((label|0) == 11) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 14) {
  _error(67512);
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 19) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 27) {
  $0 = 1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return 0|0;
}
function _real_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = (_complex_func($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _complex_func($cp,$imag_flag) {
 $cp = $cp|0;
 $imag_flag = $imag_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $beg = 0, $dest = 0, $found_imag = 0, $has_imag = 0, $has_real = 0, $i = 0, $j = 0;
 var $k = 0, $n1 = 0, $np = 0, $nps = 0, $solved = 0, $source = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n1 = sp + 12|0;
 $v = sp;
 $1 = $cp;
 $2 = $imag_flag;
 HEAP32[$v>>2] = 3;
 $3 = (_current_not_defined()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $172 = $0;
  STACKTOP = sp;return ($172|0);
 }
 $5 = HEAP32[472>>2]|0;
 $6 = (_solved_equation($5)|0);
 $solved = $6;
 $7 = HEAP32[472>>2]|0;
 $i = $7;
 $8 = (_next_espace()|0);
 $j = $8;
 $9 = $i;
 $10 = (2880 + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $i;
  $14 = (1280 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $source = $15;
  $16 = $i;
  $17 = (2880 + ($16<<2)|0);
  $nps = $17;
  $18 = $j;
  $19 = (1280 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $dest = $20;
  $21 = $j;
  $22 = (2880 + ($21<<2)|0);
  $np = $22;
 } else {
  $23 = $i;
  $24 = (480 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $source = $25;
  $26 = $i;
  $27 = (2080 + ($26<<2)|0);
  $nps = $27;
  $28 = $j;
  $29 = (480 + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $dest = $30;
  $31 = $j;
  $32 = (2080 + ($31<<2)|0);
  $np = $32;
 }
 $33 = $1;
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)!=(0);
 do {
  if ($35) {
   $36 = $1;
   $37 = (_parse_var2($v,$36)|0);
   $1 = $37;
   $38 = $1;
   $39 = ($38|0)==(0|0);
   if ($39) {
    $0 = 0;
    $172 = $0;
    STACKTOP = sp;return ($172|0);
   }
   $40 = $1;
   $41 = (_extra_characters($40)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    break;
   }
   $0 = 0;
   $172 = $0;
   STACKTOP = sp;return ($172|0);
  }
 } while(0);
 $43 = $source;
 $44 = $nps;
 (_simp_loop($43,$44)|0);
 $45 = $source;
 $46 = $nps;
 _uf_simp($45,$46);
 $47 = $source;
 $48 = $nps;
 $49 = HEAP32[$v>>2]|0;
 _factorv($47,$48,$49);
 HEAP32[41216>>2] = 0;
 $50 = $source;
 $51 = $nps;
 _uf_simp($50,$51);
 HEAP32[41216>>2] = 1;
 HEAP32[$n1>>2] = 1;
 $52 = $dest;
 ;HEAP32[$52+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$52+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$52+12>>2]=HEAP32[3736+12>>2]|0;
 $has_real = 0;
 $has_imag = 0;
 $k = 0;
 $beg = 0;
 while(1) {
  $53 = $beg;
  $54 = $nps;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)<($55|0);
  if (!($56)) {
   break;
  }
  $found_imag = 0;
  while(1) {
   $57 = $k;
   $58 = $nps;
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)<($59|0);
   if (!($60)) {
    break;
   }
   $61 = $k;
   $62 = $source;
   $63 = (($62) + ($61<<4)|0);
   $64 = (($63) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==(1);
   if ($66) {
    $67 = $k;
    $68 = $source;
    $69 = (($68) + ($67<<4)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(2);
    if ($71) {
     $72 = $k;
     $73 = $source;
     $74 = (($73) + ($72<<4)|0);
     $75 = (($74) + 8|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)==(1);
     if ($77) {
      label = 20;
      break;
     }
     $78 = $k;
     $79 = $source;
     $80 = (($79) + ($78<<4)|0);
     $81 = (($80) + 8|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)==(2);
     if ($83) {
      label = 20;
      break;
     }
    }
   }
   $84 = $k;
   $85 = $source;
   $86 = (($85) + ($84<<4)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(1);
   if ($88) {
    $89 = $k;
    $90 = $source;
    $91 = (($90) + ($89<<4)|0);
    $92 = (($91) + 8|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = HEAP32[$v>>2]|0;
    $95 = ($93|0)==($94|0);
    if ($95) {
     $found_imag = 1;
    }
   }
   $96 = $k;
   $97 = (($96) + 1)|0;
   $k = $97;
  }
  if ((label|0) == 20) {
   label = 0;
  }
  $98 = $found_imag;
  $99 = ($98|0)!=(0);
  if ($99) {
   $has_imag = 1;
  } else {
   $has_real = 1;
  }
  $100 = $found_imag;
  $101 = $2;
  $102 = ($100|0)==($101|0);
  if ($102) {
   $103 = $beg;
   $104 = ($103|0)==(0);
   if ($104) {
    HEAP32[$n1>>2] = 0;
   }
   $105 = HEAP32[$n1>>2]|0;
   $106 = $dest;
   $107 = (($106) + ($105<<4)|0);
   $108 = $beg;
   $109 = $source;
   $110 = (($109) + ($108<<4)|0);
   $111 = $k;
   $112 = $beg;
   $113 = (($111) - ($112))|0;
   $114 = $113<<4;
   _memmove(($107|0),($110|0),($114|0))|0;
   $115 = $k;
   $116 = $beg;
   $117 = (($115) - ($116))|0;
   $118 = HEAP32[$n1>>2]|0;
   $119 = (($118) + ($117))|0;
   HEAP32[$n1>>2] = $119;
  }
  $120 = $k;
  $beg = $120;
  $121 = $k;
  $122 = (($121) + 1)|0;
  $k = $122;
 }
 $123 = $has_imag;
 $124 = ($123|0)!=(0);
 if ($124) {
  $125 = $has_real;
  $126 = ($125|0)!=(0);
  if (!($126)) {
   label = 37;
  }
 } else {
  label = 37;
 }
 if ((label|0) == 37) {
  _warning(71352);
 }
 while(1) {
  $127 = $dest;
  (_simp_loop($127,$n1)|0);
  $128 = $dest;
  $129 = HEAP32[$v>>2]|0;
  $130 = (_factor_plus($128,$n1,$129,0.0)|0);
  $131 = ($130|0)!=(0);
  if (!($131)) {
   break;
  }
 }
 $132 = $dest;
 _simp_divide($132,$n1);
 $133 = $i;
 $134 = (2880 + ($133<<2)|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = $j;
  $138 = (480 + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $i;
  $141 = (480 + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $i;
  $144 = (2080 + ($143<<2)|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145<<4;
  _memmove(($139|0),($142|0),($146|0))|0;
  $147 = $i;
  $148 = (2080 + ($147<<2)|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $j;
  $151 = (2080 + ($150<<2)|0);
  HEAP32[$151>>2] = $149;
  $152 = $solved;
  $153 = ($152|0)!=(0);
  if ($153) {
   $154 = $j;
   $155 = (480 + ($154<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (_list_var($158,0)|0);
   $160 = ($159|0)<(95);
   if ($160) {
    $161 = $2;
    $162 = ($161|0)!=(0);
    if ($162) {
     (_strcat((35800|0),(71384|0))|0);
    } else {
     (_strcat((35800|0),(71392|0))|0);
    }
    $163 = $j;
    $164 = (480 + ($163<<2)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($165) + 8|0);
    (_parse_var($166,35800)|0);
   }
  }
 }
 $167 = HEAP32[$n1>>2]|0;
 $168 = $np;
 HEAP32[$168>>2] = $167;
 $169 = $j;
 HEAP32[472>>2] = $169;
 $170 = HEAP32[472>>2]|0;
 $171 = (_return_result($170)|0);
 $0 = $171;
 $172 = $0;
 STACKTOP = sp;return ($172|0);
}
function _imaginary_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cp;
 $1 = $0;
 $2 = (_complex_func($1,1)|0);
 STACKTOP = sp;return ($2|0);
}
function _clear_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp1 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 12|0;
 $i = sp + 8|0;
 $j = sp + 4|0;
 HEAP32[$1>>2] = $cp;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $cp1 = $2;
  $3 = HEAP32[$1>>2]|0;
  $4 = (_is_all($3)|0);
  $5 = ($4|0)!=(0);
  if ($5) {
   label = 3;
   break;
  }
  $6 = (_get_range($1,$i,$j)|0);
  $7 = ($6|0)!=(0);
  if (!($7)) {
   label = 5;
   break;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = $cp1;
   $14 = ($12|0)==($13|0);
   if ($14) {
    label = 8;
    break;
   }
  }
  while(1) {
   $15 = HEAP32[$i>>2]|0;
   $16 = HEAP32[$j>>2]|0;
   $17 = ($15|0)<=($16|0);
   if (!($17)) {
    break;
   }
   $18 = HEAP32[$i>>2]|0;
   $19 = (2080 + ($18<<2)|0);
   HEAP32[$19>>2] = 0;
   $20 = HEAP32[$i>>2]|0;
   $21 = (2880 + ($20<<2)|0);
   HEAP32[$21>>2] = 0;
   $22 = HEAP32[$i>>2]|0;
   $23 = (($22) + 1)|0;
   HEAP32[$i>>2] = $23;
  }
  $24 = HEAP32[$1>>2]|0;
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)!=(0);
  if (!($26)) {
   label = 16;
   break;
  }
 }
 if ((label|0) == 3) {
  _clear_all();
  $0 = 1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 5) {
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 8) {
  _error(67544);
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 16) {
  $0 = 1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return 0|0;
}
function _compare_es($i,$j) {
 $i = $i|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $diff_sign_lhs = 0, $diff_sign_rhs = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff_sign_lhs = sp + 4|0;
 $diff_sign_rhs = sp;
 $1 = $i;
 $2 = $j;
 $3 = $1;
 $4 = (2080 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = $2;
  $8 = (2080 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = $1;
   $12 = (2880 + ($11<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   $15 = $14&1;
   $16 = $2;
   $17 = (2880 + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   $20 = $19&1;
   $21 = ($15|0)!=($20|0);
   if ($21) {
    $0 = 0;
    $66 = $0;
    STACKTOP = sp;return ($66|0);
   }
   HEAP32[41248>>2] = 1;
   $22 = $1;
   $23 = (480 + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $1;
   $26 = (2080 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $2;
   $29 = (480 + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $2;
   $32 = (2080 + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_se_compare($24,$27,$30,$33,$diff_sign_lhs)|0);
   $rv = $34;
   HEAP32[41248>>2] = 0;
   $35 = $rv;
   $36 = ($35|0)!=(0);
   if (!($36)) {
    $0 = 0;
    $66 = $0;
    STACKTOP = sp;return ($66|0);
   }
   $37 = $1;
   $38 = (2880 + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = $2;
    $42 = (2880 + ($41<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = HEAP32[$diff_sign_lhs>>2]|0;
     $46 = ($45|0)!=(0);
     if ($46) {
      $0 = -1;
      $66 = $0;
      STACKTOP = sp;return ($66|0);
     } else {
      $0 = 1;
      $66 = $0;
      STACKTOP = sp;return ($66|0);
     }
    }
   }
   HEAP32[41248>>2] = 1;
   $47 = $1;
   $48 = (1280 + ($47<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $1;
   $51 = (2880 + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $2;
   $54 = (1280 + ($53<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $2;
   $57 = (2880 + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (_se_compare($49,$52,$55,$58,$diff_sign_rhs)|0);
   $rv = $59;
   HEAP32[41248>>2] = 0;
   $60 = $rv;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = HEAP32[$diff_sign_lhs>>2]|0;
    $63 = HEAP32[$diff_sign_rhs>>2]|0;
    $64 = ($62|0)==($63|0);
    $65 = $64&1;
    $0 = $65;
    $66 = $0;
    STACKTOP = sp;return ($66|0);
   } else {
    $0 = 0;
    $66 = $0;
    STACKTOP = sp;return ($66|0);
   }
  }
 }
 $0 = 0;
 $66 = $0;
 STACKTOP = sp;return ($66|0);
}
function _compare_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $approx = 0, $diff_sign = 0, $i = 0, $j = 0, $symb = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer34 = sp + 136|0;
 $vararg_buffer32 = sp + 128|0;
 $vararg_buffer30 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 160|0;
 $diff_sign = sp + 148|0;
 HEAP32[$1>>2] = $cp;
 $symb = 0;
 $approx = 0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = (_strncasecmp($2,67600,4)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $symb = 1;
  } else {
   $5 = HEAP32[$1>>2]|0;
   $6 = (_strncasecmp($5,67616,4)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    break;
   }
   $approx = 1;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = (_skip_param($8)|0);
  HEAP32[$1>>2] = $9;
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = (_strcmp_tospace($10,67632)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = (_skip_param($13)|0);
  HEAP32[$1>>2] = $14;
 }
 $15 = HEAP32[$1>>2]|0;
 $16 = (_decstrtol($15,$1)|0);
 $17 = (($16) - 1)|0;
 $i = $17;
 $18 = $i;
 $19 = (_not_defined($18)|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  $0 = 0;
  $388 = $0;
  STACKTOP = sp;return ($388|0);
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (_strcmp_tospace($21,67632)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = HEAP32[$1>>2]|0;
  $25 = (_skip_param($24)|0);
  HEAP32[$1>>2] = $25;
 }
 $26 = HEAP32[$1>>2]|0;
 $27 = (_get_default_en($26)|0);
 $j = $27;
 $28 = ($27|0)<(0);
 if ($28) {
  $0 = 0;
  $388 = $0;
  STACKTOP = sp;return ($388|0);
 }
 $29 = $i;
 $30 = $j;
 $31 = ($29|0)==($30|0);
 if ($31) {
  _error(67640);
  $0 = 0;
  $388 = $0;
  STACKTOP = sp;return ($388|0);
 }
 HEAP32[41304>>2] = 0;
 $32 = HEAP32[41008>>2]|0;
 $33 = $i;
 $34 = (($33) + 1)|0;
 $35 = $j;
 $36 = (($35) + 1)|0;
 HEAP32[$vararg_buffer>>2] = $34;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $36;
 (_fprintf(($32|0),(67688|0),($vararg_buffer|0))|0);
 $37 = $i;
 _simp_equation($37);
 $38 = $j;
 _simp_equation($38);
 $39 = $i;
 $40 = (2880 + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0);
 if (!($42)) {
  $43 = $j;
  $44 = (2880 + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0);
  if (!($46)) {
   $129 = $i;
   $130 = $j;
   $131 = (_compare_es($129,$130)|0);
   $132 = ($131|0)>(0);
   if ($132) {
    $133 = HEAP32[41008>>2]|0;
    (_fprintf(($133|0),(67872|0),($vararg_buffer12|0))|0);
    $0 = 1;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   $134 = $i;
   $135 = (_solved_equation($134)|0);
   $136 = ($135|0)!=(0);
   L35: do {
    if ($136) {
     $137 = $j;
     $138 = (_solved_equation($137)|0);
     $139 = ($138|0)!=(0);
     if ($139) {
      $140 = $i;
      $141 = $j;
      $142 = (_compare_rhs($140,$141,$diff_sign)|0);
      $143 = ($142|0)!=(0);
      L38: do {
       if ($143) {
       } else {
        $144 = $approx;
        $145 = ($144|0)!=(0);
        do {
         if ($145) {
          $146 = $i;
          $147 = (1280 + ($146<<2)|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = $i;
          $150 = (2880 + ($149<<2)|0);
          _approximate($148,$150);
          $151 = $j;
          $152 = (1280 + ($151<<2)|0);
          $153 = HEAP32[$152>>2]|0;
          $154 = $j;
          $155 = (2880 + ($154<<2)|0);
          _approximate($153,$155);
          $156 = $i;
          $157 = $j;
          $158 = (_compare_rhs($156,$157,$diff_sign)|0);
          $159 = ($158|0)!=(0);
          if ($159) {
           break L38;
          } else {
           break;
          }
         }
        } while(0);
        $160 = $symb;
        HEAP32[41224>>2] = $160;
        $161 = $i;
        $162 = (1280 + ($161<<2)|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = $i;
        $165 = (2880 + ($164<<2)|0);
        _simpa_repeat_side($163,$165,0,1);
        $166 = $j;
        $167 = (1280 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = $j;
        $170 = (2880 + ($169<<2)|0);
        _simpa_repeat_side($168,$170,0,1);
        HEAP32[41224>>2] = 0;
        $171 = $approx;
        $172 = ($171|0)!=(0);
        if ($172) {
         $173 = $i;
         $174 = (1280 + ($173<<2)|0);
         $175 = HEAP32[$174>>2]|0;
         $176 = $i;
         $177 = (2880 + ($176<<2)|0);
         _approximate($175,$177);
         $178 = $j;
         $179 = (1280 + ($178<<2)|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = $j;
         $182 = (2880 + ($181<<2)|0);
         _approximate($180,$182);
        }
        $183 = $i;
        $184 = $j;
        $185 = (_compare_rhs($183,$184,$diff_sign)|0);
        $186 = ($185|0)!=(0);
        if ($186) {
         break;
        }
        $187 = $i;
        $188 = (1280 + ($187<<2)|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = $i;
        $191 = (2880 + ($190<<2)|0);
        _uf_simp($189,$191);
        $192 = $j;
        $193 = (1280 + ($192<<2)|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = $j;
        $196 = (2880 + ($195<<2)|0);
        _uf_simp($194,$196);
        $197 = $approx;
        $198 = ($197|0)!=(0);
        if ($198) {
         $199 = $i;
         $200 = (1280 + ($199<<2)|0);
         $201 = HEAP32[$200>>2]|0;
         $202 = $i;
         $203 = (2880 + ($202<<2)|0);
         _approximate($201,$203);
         $204 = $j;
         $205 = (1280 + ($204<<2)|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = $j;
         $208 = (2880 + ($207<<2)|0);
         _approximate($206,$208);
        }
        $209 = $i;
        $210 = $j;
        $211 = (_compare_rhs($209,$210,$diff_sign)|0);
        $212 = ($211|0)!=(0);
        if ($212) {
         break;
        } else {
         break L35;
        }
       }
      } while(0);
      $354 = HEAP32[$diff_sign>>2]|0;
      $355 = ($354|0)!=(0);
      if (!($355)) {
       $356 = $i;
       $357 = (480 + ($356<<2)|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = (($358) + 8|0);
       $360 = HEAP32[$359>>2]|0;
       $361 = $j;
       $362 = (480 + ($361<<2)|0);
       $363 = HEAP32[$362>>2]|0;
       $364 = (($363) + 8|0);
       $365 = HEAP32[$364>>2]|0;
       $366 = ($360|0)==($365|0);
       if ($366) {
        $367 = HEAP32[41008>>2]|0;
        (_fprintf(($367|0),(67872|0),($vararg_buffer26|0))|0);
        $0 = 1;
        $388 = $0;
        STACKTOP = sp;return ($388|0);
       }
      }
      $368 = HEAP32[41008>>2]|0;
      (_fprintf(($368|0),(67928|0),($vararg_buffer28|0))|0);
      $369 = $i;
      $370 = (480 + ($369<<2)|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = $i;
      $373 = (2080 + ($372<<2)|0);
      $374 = HEAP32[$373>>2]|0;
      (_list_proc($371,$374,0)|0);
      $375 = HEAP32[41008>>2]|0;
      (_fprintf(($375|0),(67944|0),($vararg_buffer30|0))|0);
      $376 = HEAP32[$diff_sign>>2]|0;
      $377 = ($376|0)!=(0);
      if ($377) {
       $378 = HEAP32[41008>>2]|0;
       (_fprintf(($378|0),(67984|0),($vararg_buffer32|0))|0);
      }
      $379 = $j;
      $380 = (480 + ($379<<2)|0);
      $381 = HEAP32[$380>>2]|0;
      $382 = $j;
      $383 = (2080 + ($382<<2)|0);
      $384 = HEAP32[$383>>2]|0;
      (_list_proc($381,$384,0)|0);
      $385 = HEAP32[41008>>2]|0;
      (_fprintf(($385|0),(67992|0),($vararg_buffer34|0))|0);
      $386 = HEAP32[$diff_sign>>2]|0;
      $387 = ($386|0)!=(0);
      if ($387) {
       _error(68024);
      } else {
       _error(68048);
      }
      $0 = 0;
      $388 = $0;
      STACKTOP = sp;return ($388|0);
     }
    }
   } while(0);
   $213 = $i;
   $214 = (480 + ($213<<2)|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = $i;
   $217 = (2080 + ($216<<2)|0);
   $218 = $i;
   $219 = (1280 + ($218<<2)|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $i;
   $222 = (2880 + ($221<<2)|0);
   $223 = (_solve_sub(3736,1,$215,$217,$220,$222)|0);
   $224 = ($223|0)<=(0);
   if ($224) {
    $0 = 0;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   $225 = $j;
   $226 = (480 + ($225<<2)|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = $j;
   $229 = (2080 + ($228<<2)|0);
   $230 = $j;
   $231 = (1280 + ($230<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $j;
   $234 = (2880 + ($233<<2)|0);
   $235 = (_solve_sub(3736,1,$227,$229,$232,$234)|0);
   $236 = ($235|0)<=(0);
   if ($236) {
    $0 = 0;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   $237 = $i;
   $238 = $j;
   $239 = (_compare_rhs($237,$238,$diff_sign)|0);
   $240 = ($239|0)!=(0);
   if ($240) {
    $241 = HEAP32[41008>>2]|0;
    (_fprintf(($241|0),(67872|0),($vararg_buffer14|0))|0);
    $0 = 1;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   $242 = $i;
   $243 = (1280 + ($242<<2)|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $i;
   $246 = (2880 + ($245<<2)|0);
   _uf_simp($244,$246);
   $247 = $j;
   $248 = (1280 + ($247<<2)|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $j;
   $251 = (2880 + ($250<<2)|0);
   _uf_simp($249,$251);
   $252 = $i;
   $253 = $j;
   $254 = (_compare_rhs($252,$253,$diff_sign)|0);
   $255 = ($254|0)!=(0);
   if ($255) {
    $256 = HEAP32[41008>>2]|0;
    (_fprintf(($256|0),(67872|0),($vararg_buffer16|0))|0);
    $0 = 1;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   $257 = $approx;
   $258 = ($257|0)!=(0);
   do {
    if ($258) {
     $259 = $i;
     $260 = (1280 + ($259<<2)|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = $i;
     $263 = (2880 + ($262<<2)|0);
     _approximate($261,$263);
     $264 = $j;
     $265 = (1280 + ($264<<2)|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = $j;
     $268 = (2880 + ($267<<2)|0);
     _approximate($266,$268);
     $269 = $i;
     $270 = $j;
     $271 = (_compare_rhs($269,$270,$diff_sign)|0);
     $272 = ($271|0)!=(0);
     if (!($272)) {
      break;
     }
     $273 = HEAP32[41008>>2]|0;
     (_fprintf(($273|0),(67872|0),($vararg_buffer18|0))|0);
     $0 = 1;
     $388 = $0;
     STACKTOP = sp;return ($388|0);
    }
   } while(0);
   $274 = $symb;
   HEAP32[41224>>2] = $274;
   $275 = $i;
   $276 = (1280 + ($275<<2)|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = $i;
   $279 = (2880 + ($278<<2)|0);
   _simpa_repeat_side($277,$279,0,0);
   $280 = $j;
   $281 = (1280 + ($280<<2)|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = $j;
   $284 = (2880 + ($283<<2)|0);
   _simpa_repeat_side($282,$284,0,0);
   HEAP32[41224>>2] = 0;
   $285 = $approx;
   $286 = ($285|0)!=(0);
   if ($286) {
    $287 = $i;
    $288 = (1280 + ($287<<2)|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = $i;
    $291 = (2880 + ($290<<2)|0);
    _approximate($289,$291);
    $292 = $j;
    $293 = (1280 + ($292<<2)|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $j;
    $296 = (2880 + ($295<<2)|0);
    _approximate($294,$296);
   }
   $297 = $i;
   $298 = $j;
   $299 = (_compare_rhs($297,$298,$diff_sign)|0);
   $300 = ($299|0)!=(0);
   if ($300) {
    $301 = HEAP32[41008>>2]|0;
    (_fprintf(($301|0),(67872|0),($vararg_buffer20|0))|0);
    $0 = 1;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   $302 = $i;
   $303 = (480 + ($302<<2)|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = $i;
   $306 = (2080 + ($305<<2)|0);
   $307 = $i;
   $308 = (1280 + ($307<<2)|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = $i;
   $311 = (2880 + ($310<<2)|0);
   $312 = (_solve_sub(3736,1,$304,$306,$309,$311)|0);
   $313 = ($312|0)<=(0);
   if ($313) {
    $0 = 0;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   $314 = $j;
   $315 = (480 + ($314<<2)|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $j;
   $318 = (2080 + ($317<<2)|0);
   $319 = $j;
   $320 = (1280 + ($319<<2)|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = $j;
   $323 = (2880 + ($322<<2)|0);
   $324 = (_solve_sub(3736,1,$316,$318,$321,$323)|0);
   $325 = ($324|0)<=(0);
   if ($325) {
    $0 = 0;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   $326 = $i;
   $327 = (1280 + ($326<<2)|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = $i;
   $330 = (2880 + ($329<<2)|0);
   _uf_simp($328,$330);
   $331 = $j;
   $332 = (1280 + ($331<<2)|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = $j;
   $335 = (2880 + ($334<<2)|0);
   _uf_simp($333,$335);
   $336 = $approx;
   $337 = ($336|0)!=(0);
   if ($337) {
    $338 = $i;
    $339 = (1280 + ($338<<2)|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = $i;
    $342 = (2880 + ($341<<2)|0);
    _approximate($340,$342);
    $343 = $j;
    $344 = (1280 + ($343<<2)|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = $j;
    $347 = (2880 + ($346<<2)|0);
    _approximate($345,$347);
   }
   $348 = $i;
   $349 = $j;
   $350 = (_compare_rhs($348,$349,$diff_sign)|0);
   $351 = ($350|0)!=(0);
   if ($351) {
    $352 = HEAP32[41008>>2]|0;
    (_fprintf(($352|0),(67872|0),($vararg_buffer22|0))|0);
    $0 = 1;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   } else {
    $353 = HEAP32[41008>>2]|0;
    (_fprintf(($353|0),(67904|0),($vararg_buffer24|0))|0);
    $0 = 0;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
  }
 }
 $47 = $i;
 $48 = (2880 + ($47<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 if ($50) {
  $51 = $j;
  $52 = (2880 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0);
  if ($54) {
   $55 = $i;
   $56 = $j;
   $57 = (_compare_es($55,$56)|0);
   if ((($57|0) == 1)) {
    $58 = HEAP32[41008>>2]|0;
    (_fprintf(($58|0),(67720|0),($vararg_buffer2|0))|0);
    $0 = 1;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   } else if ((($57|0) == -1)) {
    _error(67752);
    $0 = 0;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   } else {
    $59 = $approx;
    $60 = ($59|0)!=(0);
    do {
     if ($60) {
      $61 = $i;
      $62 = (480 + ($61<<2)|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = $i;
      $65 = (2080 + ($64<<2)|0);
      _approximate($63,$65);
      $66 = $j;
      $67 = (480 + ($66<<2)|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $j;
      $70 = (2080 + ($69<<2)|0);
      _approximate($68,$70);
      $71 = $i;
      $72 = $j;
      $73 = (_compare_es($71,$72)|0);
      if ((($73|0) == 1)) {
       $74 = HEAP32[41008>>2]|0;
       (_fprintf(($74|0),(67720|0),($vararg_buffer4|0))|0);
       $0 = 1;
       $388 = $0;
       STACKTOP = sp;return ($388|0);
      } else if ((($73|0) == -1)) {
       _error(67752);
       $0 = 0;
       $388 = $0;
       STACKTOP = sp;return ($388|0);
      } else {
       break;
      }
     }
    } while(0);
    $75 = $symb;
    HEAP32[41224>>2] = $75;
    $76 = $i;
    $77 = (480 + ($76<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $i;
    $80 = (2080 + ($79<<2)|0);
    _simpa_repeat_side($78,$80,0,1);
    $81 = $j;
    $82 = (480 + ($81<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $j;
    $85 = (2080 + ($84<<2)|0);
    _simpa_repeat_side($83,$85,0,1);
    HEAP32[41224>>2] = 0;
    $86 = $approx;
    $87 = ($86|0)!=(0);
    if ($87) {
     $88 = $i;
     $89 = (480 + ($88<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $i;
     $92 = (2080 + ($91<<2)|0);
     _approximate($90,$92);
     $93 = $j;
     $94 = (480 + ($93<<2)|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $j;
     $97 = (2080 + ($96<<2)|0);
     _approximate($95,$97);
    }
    $98 = $i;
    $99 = $j;
    $100 = (_compare_es($98,$99)|0);
    if ((($100|0) == 1)) {
     $101 = HEAP32[41008>>2]|0;
     (_fprintf(($101|0),(67720|0),($vararg_buffer6|0))|0);
     $0 = 1;
     $388 = $0;
     STACKTOP = sp;return ($388|0);
    } else if ((($100|0) == -1)) {
     _error(67752);
     $0 = 0;
     $388 = $0;
     STACKTOP = sp;return ($388|0);
    } else {
     $102 = $i;
     $103 = (480 + ($102<<2)|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = $i;
     $106 = (2080 + ($105<<2)|0);
     _uf_simp($104,$106);
     $107 = $j;
     $108 = (480 + ($107<<2)|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $j;
     $111 = (2080 + ($110<<2)|0);
     _uf_simp($109,$111);
     $112 = $approx;
     $113 = ($112|0)!=(0);
     if ($113) {
      $114 = $i;
      $115 = (480 + ($114<<2)|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $i;
      $118 = (2080 + ($117<<2)|0);
      _approximate($116,$118);
      $119 = $j;
      $120 = (480 + ($119<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $j;
      $123 = (2080 + ($122<<2)|0);
      _approximate($121,$123);
     }
     $124 = $i;
     $125 = $j;
     $126 = (_compare_es($124,$125)|0);
     if ((($126|0) == -1)) {
      _error(67752);
      $0 = 0;
      $388 = $0;
      STACKTOP = sp;return ($388|0);
     } else if ((($126|0) == 1)) {
      $127 = HEAP32[41008>>2]|0;
      (_fprintf(($127|0),(67720|0),($vararg_buffer8|0))|0);
      $0 = 1;
      $388 = $0;
      STACKTOP = sp;return ($388|0);
     } else {
      $128 = HEAP32[41008>>2]|0;
      (_fprintf(($128|0),(67800|0),($vararg_buffer10|0))|0);
      $0 = 0;
      $388 = $0;
      STACKTOP = sp;return ($388|0);
     }
    }
   }
  }
 }
 _error(67824);
 $0 = 0;
 $388 = $0;
 STACKTOP = sp;return ($388|0);
}
function _compare_rhs($i,$j,$diff_signp) {
 $i = $i|0;
 $j = $j|0;
 $diff_signp = $diff_signp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $2 = $j;
 $3 = $diff_signp;
 $4 = $1;
 $5 = (1280 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (2880 + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (1280 + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (2880 + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = (_se_compare($6,$9,$12,$15,$16)|0);
 $rv = $17;
 $18 = $rv;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   HEAP32[41248>>2] = 1;
   $23 = $1;
   $24 = (1280 + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $1;
   $27 = (2880 + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $2;
   $30 = (1280 + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $2;
   $33 = (2880 + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $3;
   $36 = (_se_compare($25,$28,$31,$34,$35)|0);
   $rv = $36;
   HEAP32[41248>>2] = 0;
   $37 = $rv;
   $0 = $37;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
 }
 _error(71320);
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _display_fraction($value) {
 $value = +$value;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $d4 = 0, $d5 = 0, $rv = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer8 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 64|0;
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 24|0;
 $d4 = sp + 8|0;
 $d5 = sp;
 $0 = $value;
 $rv = 0;
 $1 = $0;
 (_f_to_fraction($1,$d4,$d5)|0);
 $2 = HEAP32[41008>>2]|0;
 $3 = HEAP32[16>>2]|0;
 $4 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$4;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_fprintf(($2|0),(68104|0),($vararg_buffer|0))|0);
 $5 = +HEAPF64[$d5>>3];
 $6 = $5 != 1.0;
 if (!($6)) {
  $12 = HEAP32[41008>>2]|0;
  (_fprintf(($12|0),(64256|0),($vararg_buffer8|0))|0);
  $13 = $rv;
  STACKTOP = sp;return ($13|0);
 }
 $7 = HEAP32[41008>>2]|0;
 $8 = HEAP32[16>>2]|0;
 $9 = +HEAPF64[$d4>>3];
 $10 = HEAP32[16>>2]|0;
 $11 = +HEAPF64[$d5>>3];
 HEAP32[$vararg_buffer2>>2] = $8;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$9;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr6 = (($vararg_buffer2) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $10;
 $vararg_ptr7 = (($vararg_buffer2) + 16|0);
 HEAPF64[tempDoublePtr>>3]=$11;HEAP32[$vararg_ptr7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr7+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_fprintf(($7|0),(68112|0),($vararg_buffer2|0))|0);
 $rv = 1;
 $12 = HEAP32[41008>>2]|0;
 (_fprintf(($12|0),(64256|0),($vararg_buffer8|0))|0);
 $13 = $rv;
 STACKTOP = sp;return ($13|0);
}
function _divide_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c1 = 0, $c1$byval_copy = 0, $c2 = 0, $c2$byval_copy = 0, $c3 = 0, $cp_start = 0, $d1 = 0, $d2 = 0, $d3 = 0.0, $d4 = 0.0, $d5 = 0, $i = 0, $j = 0, $lcm = 0.0, $nleft = 0, $nright = 0, $v = 0, $v_tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer28 = 0, $vararg_buffer36 = 0, $vararg_buffer4 = 0, $vararg_buffer44 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0;
 var $vararg_buffer82 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer96 = 0, $vararg_buffer99 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0;
 var $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr61 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c2$byval_copy = sp + 528|0;
 $c1$byval_copy = sp + 512|0;
 $vararg_buffer99 = sp + 504|0;
 $vararg_buffer96 = sp + 496|0;
 $vararg_buffer93 = sp + 488|0;
 $vararg_buffer91 = sp + 480|0;
 $vararg_buffer89 = sp + 472|0;
 $vararg_buffer87 = sp + 464|0;
 $vararg_buffer84 = sp + 456|0;
 $vararg_buffer82 = sp + 448|0;
 $vararg_buffer79 = sp + 440|0;
 $vararg_buffer76 = sp + 432|0;
 $vararg_buffer73 = sp + 424|0;
 $vararg_buffer71 = sp + 416|0;
 $vararg_buffer69 = sp + 408|0;
 $vararg_buffer67 = sp + 400|0;
 $vararg_buffer64 = sp + 392|0;
 $vararg_buffer58 = sp + 368|0;
 $vararg_buffer56 = sp + 360|0;
 $vararg_buffer54 = sp + 352|0;
 $vararg_buffer52 = sp + 344|0;
 $vararg_buffer50 = sp + 336|0;
 $vararg_buffer44 = sp + 312|0;
 $vararg_buffer36 = sp + 272|0;
 $vararg_buffer28 = sp + 232|0;
 $vararg_buffer22 = sp + 208|0;
 $vararg_buffer16 = sp + 184|0;
 $vararg_buffer8 = sp + 144|0;
 $vararg_buffer6 = sp + 136|0;
 $vararg_buffer4 = sp + 128|0;
 $vararg_buffer1 = sp + 120|0;
 $vararg_buffer = sp + 112|0;
 $v = sp + 568|0;
 $v_tmp = sp + 564|0;
 $nleft = sp + 552|0;
 $nright = sp + 548|0;
 $d1 = sp + 96|0;
 $d2 = sp + 88|0;
 $d5 = sp + 64|0;
 $c1 = sp + 48|0;
 $c2 = sp + 32|0;
 $c3 = sp + 16|0;
 $2 = sp;
 $1 = $cp;
 HEAP32[$v>>2] = 0;
 HEAP32[$nleft>>2] = 0;
 HEAP32[$nright>>2] = 0;
 $3 = $1;
 $cp_start = $3;
 HEAP32[41280>>2] = -1;
 $4 = $1;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $1;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = (_isvarchar($10)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $1;
   $14 = (_parse_var($v,$13)|0);
   $1 = $14;
   $15 = $1;
   $16 = ($15|0)==(0|0);
   do {
    if ($16) {
     label = 7;
    } else {
     $17 = $1;
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = ($19|0)!=(0);
     if ($20) {
      $21 = $1;
      $22 = HEAP8[$21>>0]|0;
      $23 = $22 << 24 >> 24;
      $24 = (_isspace($23)|0);
      $25 = ($24|0)!=(0);
      if (!($25)) {
       $26 = $1;
       $27 = HEAP8[$26>>0]|0;
       $28 = $27 << 24 >> 24;
       $29 = ($28|0)!=(44);
       if ($29) {
        label = 7;
        break;
       }
      }
     }
     $33 = $1;
     $34 = (_skip_comma_space($33)|0);
     $1 = $34;
     $35 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer>>2] = 68128;
     (_fprintf(($35|0),(61536|0),($vararg_buffer|0))|0);
     $36 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer1>>2] = 68168;
     (_fprintf(($36|0),(61536|0),($vararg_buffer1|0))|0);
     HEAP32[41312>>2] = 0;
    }
   } while(0);
   if ((label|0) == 7) {
    $30 = $1;
    $31 = ($30|0)==(0|0);
    if ($31) {
     _reset_error();
    }
    $32 = $cp_start;
    $1 = $32;
    HEAP32[$v>>2] = 0;
   }
  }
 }
 $37 = (_next_espace()|0);
 $i = $37;
 $38 = $1;
 $39 = HEAP8[$38>>0]|0;
 $40 = ($39<<24>>24)!=(0);
 do {
  if ($40) {
   $41 = $1;
   $42 = $cp_start;
   $43 = $41;
   $44 = $42;
   $45 = (($43) - ($44))|0;
   $46 = HEAP32[41240>>2]|0;
   $47 = (($46) + ($45))|0;
   HEAP32[41240>>2] = $47;
   $48 = $i;
   $49 = (1280 + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $1;
   $52 = (_parse_expr($50,$nright,$51,0)|0);
   $1 = $52;
   $53 = $1;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    $55 = HEAP32[$nright>>2]|0;
    $56 = ($55|0)<=(0);
    if (!($56)) {
     break;
    }
   }
   $0 = 0;
   $359 = $0;
   STACKTOP = sp;return ($359|0);
  }
 } while(0);
 $57 = $1;
 $58 = HEAP8[$57>>0]|0;
 $59 = ($58<<24>>24)!=(0);
 do {
  if ($59) {
   $60 = $1;
   $cp_start = $60;
   $61 = $1;
   $62 = (_skip_comma_space($61)|0);
   $1 = $62;
   $63 = $1;
   $64 = $cp_start;
   $65 = $63;
   $66 = $64;
   $67 = (($65) - ($66))|0;
   $68 = HEAP32[41240>>2]|0;
   $69 = (($68) + ($67))|0;
   HEAP32[41240>>2] = $69;
   $70 = $i;
   $71 = (480 + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = (_parse_expr($72,$nleft,$73,0)|0);
   $1 = $74;
   $75 = $1;
   $76 = ($75|0)==(0|0);
   if (!($76)) {
    $77 = $1;
    $78 = (_extra_characters($77)|0);
    $79 = ($78|0)!=(0);
    if (!($79)) {
     $80 = HEAP32[$nleft>>2]|0;
     $81 = ($80|0)<=(0);
     if (!($81)) {
      break;
     }
    }
   }
   $0 = 0;
   $359 = $0;
   STACKTOP = sp;return ($359|0);
  }
 } while(0);
 L34: while(1) {
  (_my_strlcpy(35984,68224,80)|0);
  $82 = HEAP32[$nright>>2]|0;
  $83 = ($82|0)==(0);
  if ($83) {
   $84 = $i;
   $85 = (1280 + ($84<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (_get_expr($86,$nright)|0);
   $88 = ($87|0)!=(0);
   if (!($88)) {
    label = 26;
    break;
   }
  }
  (_my_strlcpy(35984,68248,80)|0);
  $90 = HEAP32[$nleft>>2]|0;
  $91 = ($90|0)==(0);
  if ($91) {
   $92 = $i;
   $93 = (480 + ($92<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (_get_expr($94,$nleft)|0);
   $96 = ($95|0)!=(0);
   if (!($96)) {
    label = 29;
    break;
   }
  }
  $98 = HEAP32[41008>>2]|0;
  (_fprintf(($98|0),(64256|0),($vararg_buffer4|0))|0);
  $99 = $i;
  $100 = (1280 + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  (_simp_loop($101,$nright)|0);
  $102 = $i;
  $103 = (1280 + ($102<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  _uf_simp($104,$nright);
  $105 = $i;
  $106 = (480 + ($105<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  (_simp_loop($107,$nleft)|0);
  $108 = $i;
  $109 = (480 + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  _uf_simp($110,$nleft);
  $111 = $i;
  $112 = (480 + ($111<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = HEAP32[$nleft>>2]|0;
  $115 = (_get_constant($113,$114,$d2)|0);
  $116 = ($115|0)!=(0);
  if ($116) {
   $117 = +HEAPF64[$d2>>3];
   (_check_divide_by_zero($117)|0);
  }
  $118 = $i;
  $119 = (1280 + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = HEAP32[$nright>>2]|0;
  $122 = (_get_constant($120,$121,$d1)|0);
  $123 = ($122|0)!=(0);
  do {
   if ($123) {
    $124 = $i;
    $125 = (480 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = HEAP32[$nleft>>2]|0;
    $128 = (_get_constant($126,$127,$d2)|0);
    $129 = ($128|0)!=(0);
    if ($129) {
     $130 = HEAP32[41008>>2]|0;
     (_fprintf(($130|0),(68264|0),($vararg_buffer6|0))|0);
     $131 = +HEAPF64[$d1>>3];
     $132 = +HEAPF64[$d2>>3];
     $133 = (+_gcd_verified($131,$132));
     $d3 = $133;
     $134 = +HEAPF64[$d1>>3];
     $135 = +HEAPF64[$d2>>3];
     $136 = $134 / $135;
     $137 = (+_modf((+$136),($d5|0)));
     $d4 = $137;
     $138 = HEAP32[41008>>2]|0;
     $139 = HEAP32[16>>2]|0;
     $140 = +HEAPF64[$d1>>3];
     $141 = HEAP32[16>>2]|0;
     $142 = +HEAPF64[$d2>>3];
     $143 = HEAP32[16>>2]|0;
     $144 = +HEAPF64[$d1>>3];
     $145 = +HEAPF64[$d2>>3];
     $146 = $144 / $145;
     HEAP32[$vararg_buffer8>>2] = $139;
     $vararg_ptr11 = (($vararg_buffer8) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$140;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr12 = (($vararg_buffer8) + 12|0);
     HEAP32[$vararg_ptr12>>2] = $141;
     $vararg_ptr13 = (($vararg_buffer8) + 16|0);
     HEAPF64[tempDoublePtr>>3]=$142;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr14 = (($vararg_buffer8) + 24|0);
     HEAP32[$vararg_ptr14>>2] = $143;
     $vararg_ptr15 = (($vararg_buffer8) + 28|0);
     HEAPF64[tempDoublePtr>>3]=$146;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_fprintf(($138|0),(68296|0),($vararg_buffer8|0))|0);
     $147 = $d3;
     $148 = $147 != 0.0;
     if ($148) {
      $149 = $d3;
      $150 = $149 != 1.0;
      if ($150) {
       $151 = +HEAPF64[$d2>>3];
       $152 = $d3;
       $153 = $151 / $152;
       $154 = $153 != 1.0;
       if ($154) {
        $155 = +HEAPF64[$d1>>3];
        $156 = +HEAPF64[$d2>>3];
        $157 = $155 / $156;
        $158 = $157 < 0.0;
        if ($158) {
         $159 = HEAP32[41008>>2]|0;
         $160 = HEAP32[16>>2]|0;
         $161 = +HEAPF64[$d1>>3];
         $162 = $d3;
         $163 = $161 / $162;
         $164 = (+Math_abs((+$163)));
         $165 = HEAP32[16>>2]|0;
         $166 = +HEAPF64[$d2>>3];
         $167 = $d3;
         $168 = $166 / $167;
         $169 = (+Math_abs((+$168)));
         HEAP32[$vararg_buffer16>>2] = $160;
         $vararg_ptr19 = (($vararg_buffer16) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$164;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
         $vararg_ptr20 = (($vararg_buffer16) + 12|0);
         HEAP32[$vararg_ptr20>>2] = $165;
         $vararg_ptr21 = (($vararg_buffer16) + 16|0);
         HEAPF64[tempDoublePtr>>3]=$169;HEAP32[$vararg_ptr21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr21+4>>2]=HEAP32[tempDoublePtr+4>>2];
         (_fprintf(($159|0),(68320|0),($vararg_buffer16|0))|0);
        } else {
         $170 = HEAP32[41008>>2]|0;
         $171 = HEAP32[16>>2]|0;
         $172 = +HEAPF64[$d1>>3];
         $173 = $d3;
         $174 = $172 / $173;
         $175 = (+Math_abs((+$174)));
         $176 = HEAP32[16>>2]|0;
         $177 = +HEAPF64[$d2>>3];
         $178 = $d3;
         $179 = $177 / $178;
         $180 = (+Math_abs((+$179)));
         HEAP32[$vararg_buffer22>>2] = $171;
         $vararg_ptr25 = (($vararg_buffer22) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$175;HEAP32[$vararg_ptr25>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr25+4>>2]=HEAP32[tempDoublePtr+4>>2];
         $vararg_ptr26 = (($vararg_buffer22) + 12|0);
         HEAP32[$vararg_ptr26>>2] = $176;
         $vararg_ptr27 = (($vararg_buffer22) + 16|0);
         HEAPF64[tempDoublePtr>>3]=$180;HEAP32[$vararg_ptr27>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr27+4>>2]=HEAP32[tempDoublePtr+4>>2];
         (_fprintf(($170|0),(68112|0),($vararg_buffer22|0))|0);
        }
       }
      }
     }
     $181 = $d3;
     $182 = $181 != 0.0;
     if ($182) {
      $183 = $d4;
      $184 = $183 != 0.0;
      if ($184) {
       $185 = +HEAPF64[$d5>>3];
       $186 = $185 != 0.0;
       if ($186) {
        $187 = +HEAPF64[$d1>>3];
        $188 = +HEAPF64[$d2>>3];
        $189 = $187 / $188;
        $190 = $189 < 0.0;
        if ($190) {
         $191 = HEAP32[41008>>2]|0;
         $192 = HEAP32[16>>2]|0;
         $193 = +HEAPF64[$d5>>3];
         $194 = (+Math_abs((+$193)));
         $195 = HEAP32[16>>2]|0;
         $196 = $d4;
         $197 = +HEAPF64[$d2>>3];
         $198 = $d3;
         $199 = $197 / $198;
         $200 = $196 * $199;
         $201 = (+Math_abs((+$200)));
         $202 = HEAP32[16>>2]|0;
         $203 = +HEAPF64[$d2>>3];
         $204 = $d3;
         $205 = $203 / $204;
         $206 = (+Math_abs((+$205)));
         HEAP32[$vararg_buffer28>>2] = $192;
         $vararg_ptr31 = (($vararg_buffer28) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$194;HEAP32[$vararg_ptr31>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr31+4>>2]=HEAP32[tempDoublePtr+4>>2];
         $vararg_ptr32 = (($vararg_buffer28) + 12|0);
         HEAP32[$vararg_ptr32>>2] = $195;
         $vararg_ptr33 = (($vararg_buffer28) + 16|0);
         HEAPF64[tempDoublePtr>>3]=$201;HEAP32[$vararg_ptr33>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr33+4>>2]=HEAP32[tempDoublePtr+4>>2];
         $vararg_ptr34 = (($vararg_buffer28) + 24|0);
         HEAP32[$vararg_ptr34>>2] = $202;
         $vararg_ptr35 = (($vararg_buffer28) + 28|0);
         HEAPF64[tempDoublePtr>>3]=$206;HEAP32[$vararg_ptr35>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr35+4>>2]=HEAP32[tempDoublePtr+4>>2];
         (_fprintf(($191|0),(68336|0),($vararg_buffer28|0))|0);
        } else {
         $207 = HEAP32[41008>>2]|0;
         $208 = HEAP32[16>>2]|0;
         $209 = +HEAPF64[$d5>>3];
         $210 = (+Math_abs((+$209)));
         $211 = HEAP32[16>>2]|0;
         $212 = $d4;
         $213 = +HEAPF64[$d2>>3];
         $214 = $d3;
         $215 = $213 / $214;
         $216 = $212 * $215;
         $217 = (+Math_abs((+$216)));
         $218 = HEAP32[16>>2]|0;
         $219 = +HEAPF64[$d2>>3];
         $220 = $d3;
         $221 = $219 / $220;
         $222 = (+Math_abs((+$221)));
         HEAP32[$vararg_buffer36>>2] = $208;
         $vararg_ptr39 = (($vararg_buffer36) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$210;HEAP32[$vararg_ptr39>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr39+4>>2]=HEAP32[tempDoublePtr+4>>2];
         $vararg_ptr40 = (($vararg_buffer36) + 12|0);
         HEAP32[$vararg_ptr40>>2] = $211;
         $vararg_ptr41 = (($vararg_buffer36) + 16|0);
         HEAPF64[tempDoublePtr>>3]=$217;HEAP32[$vararg_ptr41>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr41+4>>2]=HEAP32[tempDoublePtr+4>>2];
         $vararg_ptr42 = (($vararg_buffer36) + 24|0);
         HEAP32[$vararg_ptr42>>2] = $218;
         $vararg_ptr43 = (($vararg_buffer36) + 28|0);
         HEAPF64[tempDoublePtr>>3]=$222;HEAP32[$vararg_ptr43>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr43+4>>2]=HEAP32[tempDoublePtr+4>>2];
         (_fprintf(($207|0),(68368|0),($vararg_buffer36|0))|0);
        }
       }
      }
     }
     $223 = HEAP32[41008>>2]|0;
     $224 = HEAP32[16>>2]|0;
     $225 = +HEAPF64[$d5>>3];
     $226 = HEAP32[16>>2]|0;
     $227 = $d4;
     $228 = +HEAPF64[$d2>>3];
     $229 = $227 * $228;
     HEAP32[$vararg_buffer44>>2] = $224;
     $vararg_ptr47 = (($vararg_buffer44) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$225;HEAP32[$vararg_ptr47>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr47+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $vararg_ptr48 = (($vararg_buffer44) + 12|0);
     HEAP32[$vararg_ptr48>>2] = $226;
     $vararg_ptr49 = (($vararg_buffer44) + 16|0);
     HEAPF64[tempDoublePtr>>3]=$229;HEAP32[$vararg_ptr49>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr49+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_fprintf(($223|0),(68392|0),($vararg_buffer44|0))|0);
     $230 = +HEAPF64[$d1>>3];
     $231 = (+Math_abs((+$230)));
     HEAPF64[$d1>>3] = $231;
     $232 = +HEAPF64[$d2>>3];
     $233 = (+Math_abs((+$232)));
     HEAPF64[$d2>>3] = $233;
     $234 = $d3;
     $235 = $234 == 0.0;
     if ($235) {
      $236 = HEAP32[41008>>2]|0;
      (_fprintf(($236|0),(68432|0),($vararg_buffer50|0))|0);
      $237 = HEAP32[41296>>2]|0;
      $238 = ($237|0)!=(0);
      if (!($238)) {
       label = 51;
       break L34;
      }
      break;
     }
     $239 = HEAP32[41008>>2]|0;
     (_fprintf(($239|0),(68448|0),($vararg_buffer52|0))|0);
     $240 = $d3;
     $241 = $240 >= 4.0;
     if ($241) {
      $242 = $d3;
      $243 = (_factor_one($242)|0);
      $244 = ($243|0)!=(0);
      if ($244) {
       $245 = (_is_prime()|0);
       $246 = ($245|0)!=(0);
       if ($246) {
        label = 56;
       } else {
        (_display_unique()|0);
       }
      } else {
       label = 56;
      }
     } else {
      label = 56;
     }
     if ((label|0) == 56) {
      label = 0;
      $247 = $d3;
      (_display_fraction($247)|0);
     }
     $248 = +HEAPF64[$d1>>3];
     $249 = +HEAPF64[$d2>>3];
     $250 = $248 * $249;
     $251 = $d3;
     $252 = $250 / $251;
     $lcm = $252;
     $253 = HEAP32[41008>>2]|0;
     (_fprintf(($253|0),(68456|0),($vararg_buffer54|0))|0);
     $254 = $lcm;
     $255 = $254 >= 4.0;
     if ($255) {
      $256 = $lcm;
      $257 = (_factor_one($256)|0);
      $258 = ($257|0)!=(0);
      if ($258) {
       $259 = (_is_prime()|0);
       $260 = ($259|0)!=(0);
       if ($260) {
        label = 61;
       } else {
        (_display_unique()|0);
       }
      } else {
       label = 61;
      }
     } else {
      label = 61;
     }
     if ((label|0) == 61) {
      label = 0;
      $261 = $lcm;
      (_display_fraction($261)|0);
     }
     $262 = HEAP32[41296>>2]|0;
     $263 = ($262|0)!=(0);
     if (!($263)) {
      label = 64;
      break L34;
     }
    } else {
     label = 65;
    }
   } else {
    label = 65;
   }
  } while(0);
  do {
   if ((label|0) == 65) {
    label = 0;
    $264 = $i;
    $265 = (1280 + ($264<<2)|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = HEAP32[$nright>>2]|0;
    $268 = (_parse_complex($266,$267,$c1)|0);
    $269 = ($268|0)!=(0);
    if ($269) {
     $270 = $i;
     $271 = (480 + ($270<<2)|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = HEAP32[$nleft>>2]|0;
     $274 = (_parse_complex($272,$273,$c2)|0);
     $275 = ($274|0)!=(0);
     if ($275) {
      $276 = HEAP32[41008>>2]|0;
      (_fprintf(($276|0),(68464|0),($vararg_buffer56|0))|0);
      ;HEAP32[$c1$byval_copy+0>>2]=HEAP32[$c1+0>>2]|0;HEAP32[$c1$byval_copy+4>>2]=HEAP32[$c1+4>>2]|0;HEAP32[$c1$byval_copy+8>>2]=HEAP32[$c1+8>>2]|0;HEAP32[$c1$byval_copy+12>>2]=HEAP32[$c1+12>>2]|0;
      ;HEAP32[$c2$byval_copy+0>>2]=HEAP32[$c2+0>>2]|0;HEAP32[$c2$byval_copy+4>>2]=HEAP32[$c2+4>>2]|0;HEAP32[$c2$byval_copy+8>>2]=HEAP32[$c2+8>>2]|0;HEAP32[$c2$byval_copy+12>>2]=HEAP32[$c2+12>>2]|0;
      _complex_div($2,$c1$byval_copy,$c2$byval_copy);
      ;HEAP32[$c3+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$c3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$c3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$c3+12>>2]=HEAP32[$2+12>>2]|0;
      $277 = HEAP32[41008>>2]|0;
      $278 = HEAP32[16>>2]|0;
      $279 = +HEAPF64[$c3>>3];
      $280 = HEAP32[16>>2]|0;
      $281 = (($c3) + 8|0);
      $282 = +HEAPF64[$281>>3];
      HEAP32[$vararg_buffer58>>2] = $278;
      $vararg_ptr61 = (($vararg_buffer58) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$279;HEAP32[$vararg_ptr61>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr61+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $vararg_ptr62 = (($vararg_buffer58) + 12|0);
      HEAP32[$vararg_ptr62>>2] = $280;
      $vararg_ptr63 = (($vararg_buffer58) + 16|0);
      HEAPF64[tempDoublePtr>>3]=$282;HEAP32[$vararg_ptr63>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr63+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_fprintf(($277|0),(68504|0),($vararg_buffer58|0))|0);
      $283 = HEAP32[41296>>2]|0;
      $284 = ($283|0)!=(0);
      if (!($284)) {
       label = 69;
       break L34;
      }
      break;
     }
    }
    $285 = HEAP32[$v>>2]|0;
    HEAP32[$v_tmp>>2] = $285;
    $286 = $i;
    $287 = (1280 + ($286<<2)|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = HEAP32[$nright>>2]|0;
    $290 = $i;
    $291 = (480 + ($290<<2)|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = HEAP32[$nleft>>2]|0;
    $294 = (_poly_div($288,$289,$292,$293,$v_tmp)|0);
    $295 = ($294|0)!=(0);
    if ($295) {
     $296 = HEAP32[3680>>2]|0;
     _simp_divide($296,3712);
     $297 = HEAP32[3688>>2]|0;
     _simp_divide($297,3720);
     $298 = HEAP32[$v_tmp>>2]|0;
     (_list_var($298,0)|0);
     $299 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer64>>2] = 35800;
     (_fprintf(($299|0),(68520|0),($vararg_buffer64|0))|0);
     $300 = HEAP32[41008>>2]|0;
     (_fprintf(($300|0),(68576|0),($vararg_buffer67|0))|0);
     $301 = HEAP32[3680>>2]|0;
     (_fractions_and_group($301,3712)|0);
     $302 = HEAP32[3680>>2]|0;
     (_list_factor($302,3712,0)|0);
     $303 = HEAP32[41008>>2]|0;
     (_fprintf(($303|0),(68600|0),($vararg_buffer69|0))|0);
     $304 = HEAP32[3688>>2]|0;
     (_fractions_and_group($304,3720)|0);
     $305 = HEAP32[3688>>2]|0;
     (_list_factor($305,3720,0)|0);
     $306 = HEAP32[41008>>2]|0;
     (_fprintf(($306|0),(64256|0),($vararg_buffer71|0))|0);
    } else {
     $307 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer73>>2] = 68624;
     (_fprintf(($307|0),(61536|0),($vararg_buffer73|0))|0);
     $308 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer76>>2] = 68656;
     (_fprintf(($308|0),(61536|0),($vararg_buffer76|0))|0);
     $309 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer79>>2] = 68728;
     (_fprintf(($309|0),(61536|0),($vararg_buffer79|0))|0);
    }
    $310 = HEAP32[41008>>2]|0;
    (_fprintf(($310|0),(64256|0),($vararg_buffer82|0))|0);
    $311 = $i;
    $312 = (1280 + ($311<<2)|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = HEAP32[$nright>>2]|0;
    $315 = $i;
    $316 = (480 + ($315<<2)|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = HEAP32[$nleft>>2]|0;
    $319 = HEAP32[$v>>2]|0;
    $320 = (_poly_gcd($313,$314,$317,$318,$319)|0);
    $j = $320;
    $321 = $j;
    $322 = ($321|0)==(0);
    if ($322) {
     $323 = $i;
     $324 = (480 + ($323<<2)|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = HEAP32[$nleft>>2]|0;
     $327 = $i;
     $328 = (1280 + ($327<<2)|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = HEAP32[$nright>>2]|0;
     $331 = HEAP32[$v>>2]|0;
     $332 = (_poly_gcd($325,$326,$329,$330,$331)|0);
     $j = $332;
    }
    $333 = $j;
    $334 = ($333|0)>(0);
    if ($334) {
     $335 = HEAP32[3688>>2]|0;
     _simp_divide($335,3720);
     $336 = HEAP32[41008>>2]|0;
     $337 = $j;
     HEAP32[$vararg_buffer84>>2] = $337;
     (_fprintf(($336|0),(68776|0),($vararg_buffer84|0))|0);
     $338 = HEAP32[3688>>2]|0;
     (_fractions_and_group($338,3720)|0);
     $339 = HEAP32[3688>>2]|0;
     (_list_factor($339,3720,0)|0);
     $340 = HEAP32[41008>>2]|0;
     (_fprintf(($340|0),(64256|0),($vararg_buffer87|0))|0);
     $341 = HEAP32[3696>>2]|0;
     $342 = HEAP32[3688>>2]|0;
     $343 = HEAP32[3720>>2]|0;
     $344 = $343<<4;
     _memmove(($341|0),($342|0),($344|0))|0;
     $345 = HEAP32[3720>>2]|0;
     HEAP32[3728>>2] = $345;
     $346 = HEAP32[3696>>2]|0;
     $347 = (_poly_factor($346,3728,1)|0);
     $348 = ($347|0)!=(0);
     if ($348) {
      $349 = HEAP32[3696>>2]|0;
      (_simp_loop($349,3728)|0);
      $350 = HEAP32[41008>>2]|0;
      (_fprintf(($350|0),(68840|0),($vararg_buffer89|0))|0);
      $351 = HEAP32[3696>>2]|0;
      (_fractions_and_group($351,3728)|0);
      $352 = HEAP32[3696>>2]|0;
      (_list_factor($352,3728,0)|0);
      $353 = HEAP32[41008>>2]|0;
      (_fprintf(($353|0),(64256|0),($vararg_buffer91|0))|0);
     }
    } else {
     $354 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer93>>2] = 68896;
     (_fprintf(($354|0),(61536|0),($vararg_buffer93|0))|0);
     $355 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer96>>2] = 68944;
     (_fprintf(($355|0),(61536|0),($vararg_buffer96|0))|0);
     $356 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer99>>2] = 69008;
     (_fprintf(($356|0),(61536|0),($vararg_buffer99|0))|0);
    }
    $357 = HEAP32[41296>>2]|0;
    $358 = ($357|0)!=(0);
    if (!($358)) {
     label = 82;
     break L34;
    }
   }
  } while(0);
  HEAP32[$nright>>2] = 0;
  HEAP32[$nleft>>2] = 0;
 }
 if ((label|0) == 26) {
  $89 = HEAP32[41296>>2]|0;
  $0 = $89;
  $359 = $0;
  STACKTOP = sp;return ($359|0);
 }
 else if ((label|0) == 29) {
  $97 = HEAP32[41296>>2]|0;
  $0 = $97;
  $359 = $0;
  STACKTOP = sp;return ($359|0);
 }
 else if ((label|0) == 51) {
  $0 = 1;
  $359 = $0;
  STACKTOP = sp;return ($359|0);
 }
 else if ((label|0) == 64) {
  $0 = 1;
  $359 = $0;
  STACKTOP = sp;return ($359|0);
 }
 else if ((label|0) == 69) {
  $0 = 1;
  $359 = $0;
  STACKTOP = sp;return ($359|0);
 }
 else if ((label|0) == 82) {
  $0 = 1;
  $359 = $0;
  STACKTOP = sp;return ($359|0);
 }
 return 0|0;
}
function _eliminate_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf = 0, $cp_start = 0, $did_something = 0, $i = 0, $last_v = 0, $n = 0, $success_flag = 0, $used = 0, $using_flag = 0, $v = 0, $v1 = 0, $va = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 4044|0;
 $v = sp + 4040|0;
 $va = sp + 32|0;
 $used = sp + 8152|0;
 $buf = sp + 4056|0;
 HEAP32[$1>>2] = $cp;
 $vc = 0;
 $i = 0;
 $success_flag = 0;
 $did_something = 0;
 _memset(($used|0),0,200)|0;
 $2 = (_current_not_defined()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $0 = 0;
  $202 = $0;
  STACKTOP = sp;return ($202|0);
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   (_my_strlcpy(35984,69064,80)|0);
   $8 = (_get_string($buf,4096)|0);
   HEAP32[$1>>2] = $8;
   $9 = HEAP32[$1>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = HEAP32[$1>>2]|0;
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($13|0)==(0);
    if (!($14)) {
     break;
    }
   }
   $0 = 0;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
 } while(0);
 $15 = HEAP32[$1>>2]|0;
 $cp_start = $15;
 L13: while(1) {
  $16 = $vc;
  $17 = ($16|0)!=(0);
  do {
   if ($17) {
    $18 = $vc;
    $19 = (($18) + -1)|0;
    $vc = $19;
    $20 = (($va) + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[$v>>2] = $21;
   } else {
    $22 = HEAP32[$1>>2]|0;
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)!=(0);
    if (!($24)) {
     $128 = HEAP32[41296>>2]|0;
     $129 = ($128|0)!=(0);
     if (!($129)) {
      break L13;
     }
     $130 = $success_flag;
     $131 = ($130|0)!=(0);
     if (!($131)) {
      label = 48;
      break L13;
     }
     $success_flag = 0;
     $132 = $cp_start;
     HEAP32[$1>>2] = $132;
     continue L13;
    }
    $25 = HEAP32[$1>>2]|0;
    $26 = (_is_all($25)|0);
    $27 = ($26|0)!=(0);
    if (!($27)) {
     $124 = HEAP32[$1>>2]|0;
     $125 = (_parse_var2($v,$124)|0);
     HEAP32[$1>>2] = $125;
     $126 = HEAP32[$1>>2]|0;
     $127 = ($126|0)==(0|0);
     if ($127) {
      label = 43;
      break L13;
     }
     break;
    }
    $28 = HEAP32[$1>>2]|0;
    $29 = (_skip_param($28)|0);
    HEAP32[$1>>2] = $29;
    $vc = 0;
    $last_v = 0;
    while(1) {
     $v1 = -1;
     $i = 0;
     while(1) {
      $30 = $i;
      $31 = HEAP32[472>>2]|0;
      $32 = (2080 + ($31<<2)|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($30|0)<($33|0);
      if (!($34)) {
       break;
      }
      $35 = $i;
      $36 = HEAP32[472>>2]|0;
      $37 = (480 + ($36<<2)|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38) + ($35<<4)|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(1);
      if ($41) {
       $42 = $i;
       $43 = HEAP32[472>>2]|0;
       $44 = (480 + ($43<<2)|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (($45) + ($42<<4)|0);
       $47 = (($46) + 8|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = $last_v;
       $50 = ($48|0)>($49|0);
       if ($50) {
        $51 = $v1;
        $52 = ($51|0)==(-1);
        if ($52) {
         label = 20;
        } else {
         $53 = $i;
         $54 = HEAP32[472>>2]|0;
         $55 = (480 + ($54<<2)|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = (($56) + ($53<<4)|0);
         $58 = (($57) + 8|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = $v1;
         $61 = ($59|0)<($60|0);
         if ($61) {
          label = 20;
         }
        }
        if ((label|0) == 20) {
         label = 0;
         $62 = $i;
         $63 = HEAP32[472>>2]|0;
         $64 = (480 + ($63<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = (($65) + ($62<<4)|0);
         $67 = (($66) + 8|0);
         $68 = HEAP32[$67>>2]|0;
         $v1 = $68;
        }
       }
      }
      $69 = $i;
      $70 = (($69) + 2)|0;
      $i = $70;
     }
     $i = 0;
     while(1) {
      $71 = $i;
      $72 = HEAP32[472>>2]|0;
      $73 = (2880 + ($72<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($71|0)<($74|0);
      if (!($75)) {
       break;
      }
      $76 = $i;
      $77 = HEAP32[472>>2]|0;
      $78 = (1280 + ($77<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($79) + ($76<<4)|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)==(1);
      if ($82) {
       $83 = $i;
       $84 = HEAP32[472>>2]|0;
       $85 = (1280 + ($84<<2)|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (($86) + ($83<<4)|0);
       $88 = (($87) + 8|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = $last_v;
       $91 = ($89|0)>($90|0);
       if ($91) {
        $92 = $v1;
        $93 = ($92|0)==(-1);
        if ($93) {
         label = 30;
        } else {
         $94 = $i;
         $95 = HEAP32[472>>2]|0;
         $96 = (1280 + ($95<<2)|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = (($97) + ($94<<4)|0);
         $99 = (($98) + 8|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = $v1;
         $102 = ($100|0)<($101|0);
         if ($102) {
          label = 30;
         }
        }
        if ((label|0) == 30) {
         label = 0;
         $103 = $i;
         $104 = HEAP32[472>>2]|0;
         $105 = (1280 + ($104<<2)|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = (($106) + ($103<<4)|0);
         $108 = (($107) + 8|0);
         $109 = HEAP32[$108>>2]|0;
         $v1 = $109;
        }
       }
      }
      $110 = $i;
      $111 = (($110) + 2)|0;
      $i = $111;
     }
     $112 = $v1;
     $113 = ($112|0)==(-1);
     if ($113) {
      label = 35;
      break;
     }
     $114 = $v1;
     $last_v = $114;
     $115 = $v1;
     $116 = $115 & 16383;
     $117 = ($116|0)>(4);
     if ($117) {
      $118 = $vc;
      $119 = ($118|0)>=(1000);
      if ($119) {
       label = 38;
       break;
      }
      $120 = $v1;
      $121 = $vc;
      $122 = (($121) + 1)|0;
      $vc = $122;
      $123 = (($va) + ($121<<2)|0);
      HEAP32[$123>>2] = $120;
     }
    }
    if ((label|0) == 35) {
     label = 0;
    }
    else if ((label|0) == 38) {
     label = 0;
    }
    continue L13;
   }
  } while(0);
  $138 = HEAP32[$1>>2]|0;
  $139 = (_strcmp_tospace($138,69120)|0);
  $140 = ($139|0)==(0);
  $141 = $140&1;
  $using_flag = $141;
  $142 = $using_flag;
  $143 = ($142|0)!=(0);
  if ($143) {
   $144 = HEAP32[$1>>2]|0;
   $145 = (_skip_param($144)|0);
   HEAP32[$1>>2] = $145;
   $146 = HEAP32[$1>>2]|0;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147 << 24 >> 24;
   $149 = ($148|0)==(35);
   if ($149) {
    $150 = HEAP32[$1>>2]|0;
    $151 = (($150) + 1|0);
    HEAP32[$1>>2] = $151;
   }
   $152 = HEAP32[$1>>2]|0;
   $153 = (_decstrtol($152,$1)|0);
   $154 = (($153) - 1)|0;
   $i = $154;
   $155 = $i;
   $156 = (_not_defined($155)|0);
   $157 = ($156|0)!=(0);
   if ($157) {
    label = 58;
    break;
   }
  }
  $158 = HEAP32[472>>2]|0;
  $159 = HEAP32[$v>>2]|0;
  $160 = (_var_in_equation($158,$159)|0);
  $161 = ($160|0)!=(0);
  if (!($161)) {
   continue;
  }
  $162 = $using_flag;
  $163 = ($162|0)!=(0);
  do {
   if ($163) {
    $164 = $i;
    $165 = HEAP32[$v>>2]|0;
    $166 = (_elim_sub($164,$165)|0);
    $167 = ($166|0)!=(0);
    if ($167) {
     break;
    } else {
     continue L13;
    }
   } else {
    $n = 1;
    $168 = HEAP32[472>>2]|0;
    $i = $168;
    while(1) {
     $169 = $n;
     $170 = HEAP32[464>>2]|0;
     $171 = ($169|0)>=($170|0);
     if ($171) {
      label = 68;
      break;
     }
     $172 = $i;
     $173 = ($172|0)<=(0);
     if ($173) {
      $174 = HEAP32[464>>2]|0;
      $175 = (($174) - 1)|0;
      $i = $175;
     } else {
      $176 = $i;
      $177 = (($176) + -1)|0;
      $i = $177;
     }
     $178 = $i;
     $179 = (($used) + ($178)|0);
     $180 = HEAP8[$179>>0]|0;
     $181 = ($180<<24>>24)!=(0);
     if ($181) {
     } else {
      $182 = $i;
      $183 = (2080 + ($182<<2)|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = ($184|0)!=(0);
      if ($185) {
       $186 = $i;
       $187 = (2880 + ($186<<2)|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)!=(0);
       if ($189) {
        $190 = $i;
        $191 = HEAP32[$v>>2]|0;
        $192 = (_var_in_equation($190,$191)|0);
        $193 = ($192|0)!=(0);
        if ($193) {
         $194 = $i;
         $195 = HEAP32[$v>>2]|0;
         $196 = (_elim_sub($194,$195)|0);
         $197 = ($196|0)!=(0);
         if ($197) {
          break;
         }
        }
       }
      }
     }
     $198 = $n;
     $199 = (($198) + 1)|0;
     $n = $199;
    }
    if ((label|0) == 68) {
     label = 0;
     continue L13;
    }
   }
  } while(0);
  $success_flag = 1;
  $did_something = 1;
  $200 = $i;
  $201 = (($used) + ($200)|0);
  HEAP8[$201>>0] = 1;
 }
 if ((label|0) == 43) {
  $0 = 0;
  $202 = $0;
  STACKTOP = sp;return ($202|0);
 }
 else if ((label|0) == 48) {
 }
 else if ((label|0) == 58) {
  $0 = 0;
  $202 = $0;
  STACKTOP = sp;return ($202|0);
 }
 $133 = $did_something;
 $134 = ($133|0)!=(0);
 if ($134) {
  $135 = HEAP32[472>>2]|0;
  $136 = (_return_result($135)|0);
  $did_something = $136;
 } else {
  _error(69096);
 }
 $137 = $did_something;
 $0 = $137;
 $202 = $0;
 STACKTOP = sp;return ($202|0);
}
function _elim_sub($i,$v) {
 $i = $i|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $solved = 0, $want = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $want = sp;
 $1 = $i;
 $2 = $v;
 $3 = $1;
 $4 = HEAP32[472>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  _error(71256);
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 $6 = $1;
 $7 = (_solved_equation($6)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = (480 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = ($13|0)==($14|0);
  $17 = $15;
 } else {
  $17 = 0;
 }
 $16 = $17&1;
 $solved = $16;
 $18 = $solved;
 $19 = ($18|0)!=(0);
 do {
  if (!($19)) {
   $20 = (($want) + 4|0);
   HEAP32[$20>>2] = 1;
   HEAP32[$want>>2] = 1;
   $21 = $2;
   $22 = (($want) + 8|0);
   HEAP32[$22>>2] = $21;
   $23 = $1;
   $24 = (480 + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $1;
   $27 = (2080 + ($26<<2)|0);
   $28 = $1;
   $29 = (1280 + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $1;
   $32 = (2880 + ($31<<2)|0);
   $33 = (_solve_sub($want,1,$25,$27,$30,$32)|0);
   $34 = ($33|0)<=(0);
   if (!($34)) {
    break;
   }
   _error(71304);
   $0 = 0;
   $60 = $0;
   STACKTOP = sp;return ($60|0);
  }
 } while(0);
 $35 = HEAP32[472>>2]|0;
 $36 = (1280 + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[472>>2]|0;
 $39 = (2880 + ($38<<2)|0);
 $40 = $1;
 $41 = (1280 + ($40<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $1;
 $44 = (2880 + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $2;
 (_subst_var_with_exp($37,$39,$42,$45,$46)|0);
 $47 = HEAP32[472>>2]|0;
 $48 = (480 + ($47<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[472>>2]|0;
 $51 = (2080 + ($50<<2)|0);
 $52 = $1;
 $53 = (1280 + ($52<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $1;
 $56 = (2880 + ($55<<2)|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $2;
 (_subst_var_with_exp($49,$51,$54,$57,$58)|0);
 $59 = HEAP32[472>>2]|0;
 _simp_equation($59);
 $0 = 1;
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function _display_cmd($cp) {
 $cp = $cp|0;
 var $$0 = 0, $$reg2mem56$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $displayed$0 = 0, $displayed$1 = 0, $displayed$2 = 0, $displayed$2$phi = 0, $displayed$3 = 0, $displayed$4 = 0, $displayed$5 = 0, $displayed$6 = 0, $factor_flag$0 = 0, $factor_flag$1 = 0, $factor_flag$2 = 0, $factor_flag$3 = 0, $factor_flag$4 = 0, $factor_flag$4$phi = 0, $factor_flag$5 = 0;
 var $factor_flag$6 = 0, $i = 0, $j = 0, $new_fractions_display_mode$0 = 0, $new_fractions_display_mode$1 = 0, $new_fractions_display_mode$2 = 0, $new_fractions_display_mode$3 = 0, $new_fractions_display_mode$4 = 0, $new_fractions_display_mode$4$phi = 0, $new_fractions_display_mode$5 = 0, $new_fractions_display_mode$6 = 0, $save_save = 0, $vararg_buffer = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $0 = sp + 168|0;
 $i = sp + 164|0;
 $j = sp + 160|0;
 $save_save = sp + 4|0;
 HEAP32[$0>>2] = $cp;
 $1 = HEAP32[40>>2]|0;
 $factor_flag$0 = 0;$new_fractions_display_mode$0 = $1;
 L1: while(1) {
  $2 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  $3 = (invoke_iiii(45,($2|0),(69128|0),4)|0);
  $4 = __THREW__; __THREW__ = 0;
  if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = threwValue; } else { $5 = -1; };
  $6 = tempRet0;
  if ((($5|0) == 1)) {
   $$reg2mem56$0 = $6;$displayed$2 = 0;$factor_flag$4 = $factor_flag$0;$new_fractions_display_mode$4 = $new_fractions_display_mode$0;
   label = 27;
   break;
  }
  $7 = ($3|0)==(0);
  do {
   if ($7) {
    $factor_flag$1 = 1;$new_fractions_display_mode$1 = $new_fractions_display_mode$0;
   } else {
    $8 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    $9 = (invoke_iiii(45,($8|0),(65704|0),4)|0);
    $10 = __THREW__; __THREW__ = 0;
    if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
    $12 = tempRet0;
    if ((($11|0) == 1)) {
     $$reg2mem56$0 = $12;$displayed$2 = 0;$factor_flag$4 = $factor_flag$0;$new_fractions_display_mode$4 = $new_fractions_display_mode$0;
     label = 27;
     break L1;
    }
    $13 = ($9|0)==(0);
    if ($13) {
     $factor_flag$1 = $factor_flag$0;$new_fractions_display_mode$1 = 1;
     break;
    }
    $14 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iiii(45,($14|0),(65712|0),3)|0);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
    $18 = tempRet0;
    if ((($17|0) == 1)) {
     $$reg2mem56$0 = $18;$displayed$2 = 0;$factor_flag$4 = $factor_flag$0;$new_fractions_display_mode$4 = $new_fractions_display_mode$0;
     label = 27;
     break L1;
    }
    $19 = ($15|0)==(0);
    if (!($19)) {
     label = 11;
     break L1;
    }
    $factor_flag$1 = $factor_flag$0;$new_fractions_display_mode$1 = 2;
   }
  } while(0);
  $20 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  $21 = (invoke_ii(46,($20|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  if ((($22|0) != 0) & ((threwValue|0) != 0)) { $23 = _testSetjmp(HEAP32[$22>>2]|0, _setjmpTable)|0; if (($23|0) == 0) { _longjmp($22|0, threwValue|0); } tempRet0 = threwValue; } else { $23 = -1; };
  $24 = tempRet0;
  if ((($23|0) == 1)) {
   $$reg2mem56$0 = $24;$displayed$2 = 0;$factor_flag$4 = $factor_flag$1;$new_fractions_display_mode$4 = $new_fractions_display_mode$1;
   label = 27;
   break;
  }
  HEAP32[$0>>2] = $21;
  $factor_flag$0 = $factor_flag$1;$new_fractions_display_mode$0 = $new_fractions_display_mode$1;
 }
 if ((label|0) == 11) {
  $displayed$0 = 0;$factor_flag$2 = $factor_flag$0;$new_fractions_display_mode$2 = $new_fractions_display_mode$0;
  label = 15;
 }
 L18: while(1) {
  do {
   if ((label|0) == 15) {
    label = 0;
    $25 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    $26 = (invoke_iiii(47,($0|0),($i|0),($j|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = threwValue; } else { $28 = -1; };
    $29 = tempRet0;
    if ((($28|0) == 1)) {
     $$reg2mem56$0 = $29;$displayed$2 = $displayed$0;$factor_flag$4 = $factor_flag$2;$new_fractions_display_mode$4 = $new_fractions_display_mode$2;
     label = 27;
     continue L18;
    }
    $30 = ($26|0)!=(0);
    if (!($30)) {
     label = 17;
     break L18;
    }
    $31 = HEAP32[$0>>2]|0;
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = ($33|0)!=(0);
    if ($34) {
     $35 = HEAP32[$0>>2]|0;
     $36 = ($35|0)==($25|0);
     if ($36) {
      __THREW__ = 0;
      invoke_vi(39,(67544|0));
      $37 = __THREW__; __THREW__ = 0;
      if ((($37|0) != 0) & ((threwValue|0) != 0)) { $38 = _testSetjmp(HEAP32[$37>>2]|0, _setjmpTable)|0; if (($38|0) == 0) { _longjmp($37|0, threwValue|0); } tempRet0 = threwValue; } else { $38 = -1; };
      $39 = tempRet0;
      if ((($38|0) == 1)) {
       $$reg2mem56$0 = $39;$displayed$2 = $displayed$0;$factor_flag$4 = $factor_flag$2;$new_fractions_display_mode$4 = $new_fractions_display_mode$2;
       label = 27;
       continue L18;
      } else {
       label = 21;
       break L18;
      }
     }
    }
    $displayed$1 = $displayed$0;$factor_flag$3 = $factor_flag$2;$new_fractions_display_mode$3 = $new_fractions_display_mode$2;
    label = 23;
   }
   else if ((label|0) == 27) {
    label = 0;
    $50 = ($$reg2mem56$0|0)!=(0);
    if ($50) {
     HEAP32[40>>2] = $1;
     _memmove((41032|0),($save_save|0),156)|0;
     $51 = HEAP32[$i>>2]|0;
     $52 = (($51) + 1)|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = $52;
     (invoke_iii(40,(69136|0),($vararg_buffer|0))|0);
     $53 = __THREW__; __THREW__ = 0;
     if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = threwValue; } else { $54 = -1; };
     $55 = tempRet0;
     if ((($54|0) == 1)) {
      $new_fractions_display_mode$4$phi = $new_fractions_display_mode$4;$factor_flag$4$phi = $factor_flag$4;$displayed$2$phi = $displayed$2;$$reg2mem56$0 = $55;$new_fractions_display_mode$4 = $new_fractions_display_mode$4$phi;$factor_flag$4 = $factor_flag$4$phi;$displayed$2 = $displayed$2$phi;
      label = 27;
      continue L18;
     }
     $displayed$6 = $displayed$2;$factor_flag$6 = $factor_flag$4;$new_fractions_display_mode$6 = $new_fractions_display_mode$4;
     label = 49;
     break;
    }
    HEAP32[40>>2] = $new_fractions_display_mode$4;
    $56 = HEAP32[$i>>2]|0;
    __THREW__ = 0;
    (invoke_ii(48,($56|0))|0);
    $57 = __THREW__; __THREW__ = 0;
    if ((($57|0) != 0) & ((threwValue|0) != 0)) { $58 = _testSetjmp(HEAP32[$57>>2]|0, _setjmpTable)|0; if (($58|0) == 0) { _longjmp($57|0, threwValue|0); } tempRet0 = threwValue; } else { $58 = -1; };
    $59 = tempRet0;
    if ((($58|0) == 1)) {
     $new_fractions_display_mode$4$phi = $new_fractions_display_mode$4;$factor_flag$4$phi = $factor_flag$4;$displayed$2$phi = $displayed$2;$$reg2mem56$0 = $59;$new_fractions_display_mode$4 = $new_fractions_display_mode$4$phi;$factor_flag$4 = $factor_flag$4$phi;$displayed$2 = $displayed$2$phi;
     label = 27;
     continue L18;
    }
    HEAP32[40>>2] = $1;
    $60 = ($factor_flag$4|0)!=(0);
    if ($60) {
     label = 33;
    } else {
     $61 = HEAP32[3768>>2]|0;
     $62 = ($61|0)!=(0);
     if ($62) {
      label = 33;
     }
    }
    if ((label|0) == 33) {
     label = 0;
     $63 = HEAP32[$i>>2]|0;
     __THREW__ = 0;
     (invoke_ii(49,($63|0))|0);
     $64 = __THREW__; __THREW__ = 0;
     if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = threwValue; } else { $65 = -1; };
     $66 = tempRet0;
     if ((($65|0) == 1)) {
      $new_fractions_display_mode$4$phi = $new_fractions_display_mode$4;$factor_flag$4$phi = $factor_flag$4;$displayed$2$phi = $displayed$2;$$reg2mem56$0 = $66;$new_fractions_display_mode$4 = $new_fractions_display_mode$4$phi;$factor_flag$4 = $factor_flag$4$phi;$displayed$2 = $displayed$2$phi;
      label = 27;
      continue L18;
     }
    }
    _memmove((41032|0),($save_save|0),156)|0;
    __THREW__ = 0;
    invoke_v(50);
    $67 = __THREW__; __THREW__ = 0;
    if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = threwValue; } else { $68 = -1; };
    $69 = tempRet0;
    if ((($68|0) == 1)) {
     $new_fractions_display_mode$4$phi = $new_fractions_display_mode$4;$factor_flag$4$phi = $factor_flag$4;$displayed$2$phi = $displayed$2;$$reg2mem56$0 = $69;$new_fractions_display_mode$4 = $new_fractions_display_mode$4$phi;$factor_flag$4 = $factor_flag$4$phi;$displayed$2 = $displayed$2$phi;
     label = 27;
     continue L18;
    }
    $70 = HEAP32[$i>>2]|0;
    __THREW__ = 0;
    $71 = (invoke_ii(51,($70|0))|0);
    $72 = __THREW__; __THREW__ = 0;
    if ((($72|0) != 0) & ((threwValue|0) != 0)) { $73 = _testSetjmp(HEAP32[$72>>2]|0, _setjmpTable)|0; if (($73|0) == 0) { _longjmp($72|0, threwValue|0); } tempRet0 = threwValue; } else { $73 = -1; };
    $74 = tempRet0;
    if ((($73|0) == 1)) {
     $new_fractions_display_mode$4$phi = $new_fractions_display_mode$4;$factor_flag$4$phi = $factor_flag$4;$displayed$2$phi = $displayed$2;$$reg2mem56$0 = $74;$new_fractions_display_mode$4 = $new_fractions_display_mode$4$phi;$factor_flag$4 = $factor_flag$4$phi;$displayed$2 = $displayed$2$phi;
     label = 27;
     continue L18;
    }
    HEAP32[41320>>2] = $71;
    $75 = HEAP32[41320>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $77 = HEAP32[$i>>2]|0;
     __THREW__ = 0;
     $78 = (invoke_iii(52,($77|0),0)|0);
     $79 = __THREW__; __THREW__ = 0;
     if ((($79|0) != 0) & ((threwValue|0) != 0)) { $80 = _testSetjmp(HEAP32[$79>>2]|0, _setjmpTable)|0; if (($80|0) == 0) { _longjmp($79|0, threwValue|0); } tempRet0 = threwValue; } else { $80 = -1; };
     $81 = tempRet0;
     if ((($80|0) == 1)) {
      $new_fractions_display_mode$4$phi = $new_fractions_display_mode$4;$factor_flag$4$phi = $factor_flag$4;$displayed$2$phi = $displayed$2;$$reg2mem56$0 = $81;$new_fractions_display_mode$4 = $new_fractions_display_mode$4$phi;$factor_flag$4 = $factor_flag$4$phi;$displayed$2 = $displayed$2$phi;
      label = 27;
      continue L18;
     }
     HEAP32[41320>>2] = $78;
    }
    $82 = HEAP32[41320>>2]|0;
    $83 = ($82|0)!=(0|0);
    if ($83) {
     $84 = HEAP32[$i>>2]|0;
     HEAP32[456>>2] = $84;
    }
    $85 = HEAP32[41008>>2]|0;
    $86 = HEAP32[_stdout>>2]|0;
    $87 = ($85|0)!=($86|0);
    if ($87) {
     $88 = HEAP32[$i>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii(53,($88|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     if ((($90|0) != 0) & ((threwValue|0) != 0)) { $91 = _testSetjmp(HEAP32[$90>>2]|0, _setjmpTable)|0; if (($91|0) == 0) { _longjmp($90|0, threwValue|0); } tempRet0 = threwValue; } else { $91 = -1; };
     $92 = tempRet0;
     if ((($91|0) == 1)) {
      $new_fractions_display_mode$4$phi = $new_fractions_display_mode$4;$factor_flag$4$phi = $factor_flag$4;$displayed$2$phi = $displayed$2;$$reg2mem56$0 = $92;$new_fractions_display_mode$4 = $new_fractions_display_mode$4$phi;$factor_flag$4 = $factor_flag$4$phi;$displayed$2 = $displayed$2$phi;
      label = 27;
      continue L18;
     }
     $93 = ($89|0)>(0);
     if ($93) {
      $94 = (($displayed$2) + 1)|0;
      $displayed$3 = $94;
     } else {
      $displayed$3 = $displayed$2;
     }
     $displayed$4 = $displayed$3;
    } else {
     $displayed$4 = $displayed$2;
    }
    $displayed$5 = $displayed$4;$factor_flag$5 = $factor_flag$4;$new_fractions_display_mode$5 = $new_fractions_display_mode$4;
    label = 48;
   }
  } while(0);
  while(1) {
   if ((label|0) == 23) {
    label = 0;
    $40 = HEAP32[$i>>2]|0;
    $41 = HEAP32[$j>>2]|0;
    $42 = ($40|0)<=($41|0);
    if (!($42)) {
     label = 50;
     break;
    }
    $43 = HEAP32[$i>>2]|0;
    $44 = (2080 + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)>(0);
    if ($46) {
     label = 25;
     break;
    } else {
     $displayed$5 = $displayed$1;$factor_flag$5 = $factor_flag$3;$new_fractions_display_mode$5 = $new_fractions_display_mode$3;
     label = 48;
     continue;
    }
   }
   else if ((label|0) == 48) {
    label = 0;
    $displayed$6 = $displayed$5;$factor_flag$6 = $factor_flag$5;$new_fractions_display_mode$6 = $new_fractions_display_mode$5;
    label = 49;
    continue;
   }
   else if ((label|0) == 49) {
    label = 0;
    $95 = HEAP32[$i>>2]|0;
    $96 = (($95) + 1)|0;
    HEAP32[$i>>2] = $96;
    $displayed$1 = $displayed$6;$factor_flag$3 = $factor_flag$6;$new_fractions_display_mode$3 = $new_fractions_display_mode$6;
    label = 23;
    continue;
   }
  }
  if ((label|0) == 25) {
   label = 0;
   _memmove(($save_save|0),(41032|0),156)|0;
   _saveSetjmp(41032,1,_setjmpTable|0)|0;
   __THREW__ = 0;
   $47 = __THREW__; __THREW__ = 0;
   if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = threwValue; } else { $48 = -1; };
   $49 = tempRet0;
   if ((($48|0) == 1)) {
    $$reg2mem56$0 = $49;$displayed$2 = $displayed$1;$factor_flag$4 = $factor_flag$3;$new_fractions_display_mode$4 = $new_fractions_display_mode$3;
    label = 27;
    continue;
   }
   $$reg2mem56$0 = 0;$displayed$2 = $displayed$1;$factor_flag$4 = $factor_flag$3;$new_fractions_display_mode$4 = $new_fractions_display_mode$3;
   label = 27;
   continue;
  }
  else if ((label|0) == 50) {
   label = 0;
   $97 = HEAP32[$0>>2]|0;
   $98 = HEAP8[$97>>0]|0;
   $99 = ($98<<24>>24)!=(0);
   if ($99) {
    $displayed$0 = $displayed$1;$factor_flag$2 = $factor_flag$3;$new_fractions_display_mode$2 = $new_fractions_display_mode$3;
    label = 15;
    continue;
   } else {
    label = 52;
    break;
   }
  }
 }
 if ((label|0) == 17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 52) {
  $100 = HEAP32[41320>>2]|0;
  $101 = ($100|0)!=(0|0);
  $102 = $101&1;
  $$0 = $102;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _list_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp1 = 0, $export_flag = 0, $first = 0;
 var $k = 0, $last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 20|0;
 $first = sp + 12|0;
 $last = sp + 8|0;
 HEAP32[$1>>2] = $cp;
 $export_flag = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strncasecmp($2,69168,3)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $export_flag = 3;
  $5 = HEAP32[$1>>2]|0;
  $6 = (_skip_param($5)|0);
  HEAP32[$1>>2] = $6;
 } else {
  $7 = HEAP32[$1>>2]|0;
  $8 = (_strncasecmp($7,69176,3)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $export_flag = 2;
   $10 = HEAP32[$1>>2]|0;
   $11 = (_skip_param($10)|0);
   HEAP32[$1>>2] = $11;
  } else {
   $12 = HEAP32[$1>>2]|0;
   $13 = (_strncasecmp($12,69184,3)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $export_flag = 1;
    $15 = HEAP32[$1>>2]|0;
    $16 = (_skip_param($15)|0);
    HEAP32[$1>>2] = $16;
   } else {
    $17 = HEAP32[$1>>2]|0;
    $18 = (_strncasecmp($17,69192,3)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $export_flag = 4;
     $20 = HEAP32[$1>>2]|0;
     $21 = (_skip_param($20)|0);
     HEAP32[$1>>2] = $21;
    }
   }
  }
 }
 L16: while(1) {
  $22 = HEAP32[$1>>2]|0;
  $cp1 = $22;
  $23 = (_get_range($1,$first,$last)|0);
  $24 = ($23|0)!=(0);
  if (!($24)) {
   label = 14;
   break;
  }
  $25 = HEAP32[$1>>2]|0;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = HEAP32[$1>>2]|0;
   $30 = $cp1;
   $31 = ($29|0)==($30|0);
   if ($31) {
    label = 17;
    break;
   }
  }
  $32 = HEAP32[$first>>2]|0;
  $k = $32;
  while(1) {
   $33 = $k;
   $34 = HEAP32[$last>>2]|0;
   $35 = ($33|0)<=($34|0);
   if (!($35)) {
    break;
   }
   $36 = $k;
   $37 = (2080 + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)<=(0);
   do {
    if ($39) {
    } else {
     _free_result_str();
     $40 = $k;
     $41 = $export_flag;
     $42 = (_list_equation($40,$41)|0);
     HEAP32[41320>>2] = $42;
     $43 = HEAP32[41320>>2]|0;
     $44 = ($43|0)!=(0|0);
     if (!($44)) {
      label = 24;
      break L16;
     }
     $45 = $k;
     HEAP32[456>>2] = $45;
     $46 = HEAP32[41008>>2]|0;
     $47 = HEAP32[_stdout>>2]|0;
     $48 = ($46|0)==($47|0);
     if ($48) {
      break;
     } else {
      $49 = $k;
      $50 = $export_flag;
      (_list1_sub($49,$50)|0);
      break;
     }
    }
   } while(0);
   $51 = $k;
   $52 = (($51) + 1)|0;
   $k = $52;
  }
  $53 = HEAP32[$1>>2]|0;
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)!=(0);
  if (!($55)) {
   label = 31;
   break;
  }
 }
 if ((label|0) == 14) {
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 17) {
  _error(67544);
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 24) {
  $0 = 0;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 31) {
  $0 = 1;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 return 0|0;
}
function _code_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp1 = 0, $displayed = 0, $i = 0, $int_flag = 0, $j = 0, $k = 0, $language = 0, $li = 0, $ri = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 36|0;
 $i = sp + 32|0;
 $j = sp + 28|0;
 HEAP32[$1>>2] = $cp;
 $language = 1;
 $int_flag = 0;
 $displayed = 0;
 L1: while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = (_strcmp_tospace($2,69208)|0);
  $4 = ($3|0)==(0);
  do {
   if ($4) {
    label = 4;
   } else {
    $5 = HEAP32[$1>>2]|0;
    $6 = (_strcmp_tospace($5,69216)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     label = 4;
    } else {
     $8 = HEAP32[$1>>2]|0;
     $9 = (_strcmp_tospace($8,66104)|0);
     $10 = ($9|0)==(0);
     if ($10) {
      $language = 2;
      break;
     }
     $11 = HEAP32[$1>>2]|0;
     $12 = (_strcmp_tospace($11,66112)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $language = 3;
      break;
     }
     $14 = HEAP32[$1>>2]|0;
     $15 = (_strncasecmp($14,69224,3)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      break L1;
     }
     $int_flag = 1;
    }
   }
  } while(0);
  if ((label|0) == 4) {
   label = 0;
   $language = 1;
  }
  $17 = HEAP32[$1>>2]|0;
  $18 = (_skip_param($17)|0);
  HEAP32[$1>>2] = $18;
 }
 L18: while(1) {
  $19 = HEAP32[$1>>2]|0;
  $cp1 = $19;
  $20 = (_get_range($1,$i,$j)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   label = 15;
   break;
  }
  $22 = HEAP32[$1>>2]|0;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = HEAP32[$1>>2]|0;
   $27 = $cp1;
   $28 = ($26|0)==($27|0);
   if ($28) {
    label = 18;
    break;
   }
  }
  $29 = HEAP32[$i>>2]|0;
  $k = $29;
  while(1) {
   $30 = $k;
   $31 = HEAP32[$j>>2]|0;
   $32 = ($30|0)<=($31|0);
   if (!($32)) {
    break;
   }
   $33 = $k;
   $34 = (2080 + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)<=(0);
   do {
    if ($36) {
    } else {
     $37 = $k;
     $38 = (2880 + ($37<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0);
     if ($40) {
      label = 26;
     } else {
      $41 = $k;
      $42 = (2080 + ($41<<2)|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)!=(1);
      if ($44) {
       label = 26;
      } else {
       $45 = $k;
       $46 = (480 + ($45<<2)|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = HEAP32[$47>>2]|0;
       $49 = ($48|0)!=(1);
       if ($49) {
        label = 26;
       } else {
        $50 = $k;
        $51 = (_solved_equation($50)|0);
        $52 = ($51|0)!=(0);
        if (!($52)) {
         _warning(69304);
        }
       }
      }
     }
     if ((label|0) == 26) {
      label = 0;
      _warning(69232);
     }
     $53 = $k;
     $54 = (480 + ($53<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $k;
     $57 = (2080 + ($56<<2)|0);
     (_simp_i($55,$57)|0);
     $58 = $int_flag;
     $59 = ($58|0)!=(0);
     if ($59) {
      while(1) {
       $60 = $k;
       $61 = (480 + ($60<<2)|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $k;
       $64 = (2080 + ($63<<2)|0);
       (_simp_loop($62,$64)|0);
       $65 = $k;
       $66 = (480 + ($65<<2)|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = $k;
       $69 = (2080 + ($68<<2)|0);
       $70 = (_factor_constants($67,$69,6)|0);
       $71 = ($70|0)!=(0);
       if (!($71)) {
        break;
       }
      }
      $72 = $k;
      $73 = (480 + ($72<<2)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = $k;
      $76 = (2080 + ($75<<2)|0);
      _uf_repeat_always($74,$76);
     }
     $77 = $k;
     $78 = (2880 + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)>(0);
     if ($80) {
      $81 = $k;
      $82 = (1280 + ($81<<2)|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $k;
      $85 = (2880 + ($84<<2)|0);
      (_simp_i($83,$85)|0);
      $86 = $int_flag;
      $87 = ($86|0)!=(0);
      if ($87) {
       while(1) {
        $88 = $k;
        $89 = (1280 + ($88<<2)|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = $k;
        $92 = (2880 + ($91<<2)|0);
        (_simp_loop($90,$92)|0);
        $93 = $k;
        $94 = (1280 + ($93<<2)|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = $k;
        $97 = (2880 + ($96<<2)|0);
        $98 = (_factor_constants($95,$97,6)|0);
        $99 = ($98|0)!=(0);
        if (!($99)) {
         break;
        }
       }
       $100 = $k;
       $101 = (1280 + ($100<<2)|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $k;
       $104 = (2880 + ($103<<2)|0);
       _uf_repeat_always($102,$104);
      }
     }
     $105 = $k;
     (_make_fractions_and_group($105)|0);
     $106 = $int_flag;
     $107 = ($106|0)!=(0);
     if ($107) {
      $108 = $k;
      $109 = (480 + ($108<<2)|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = $k;
      $112 = (2080 + ($111<<2)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (_int_expr($110,$113)|0);
      $li = $114;
      $115 = ($114|0)!=(0);
      if ($115) {
       $116 = $k;
       $117 = (1280 + ($116<<2)|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = $k;
       $120 = (2880 + ($119<<2)|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = (_int_expr($118,$121)|0);
       $ri = $122;
       $123 = ($122|0)!=(0);
       if ($123) {
        $124 = $li;
        $125 = ($124|0)<(0);
        if ($125) {
         label = 48;
        } else {
         $126 = $ri;
         $127 = ($126|0)<(0);
         if ($127) {
          label = 48;
         }
        }
        if ((label|0) == 48) {
         label = 0;
         _warning(69424);
        }
       } else {
        label = 45;
       }
      } else {
       label = 45;
      }
      if ((label|0) == 45) {
       label = 0;
       _warning(69352);
      }
     }
     _free_result_str();
     $128 = $k;
     $129 = $language;
     $130 = $int_flag;
     $131 = (_string_code_equation($128,$129,$130)|0);
     HEAP32[41320>>2] = $131;
     $132 = HEAP32[41320>>2]|0;
     $133 = ($132|0)!=(0|0);
     if (!($133)) {
      label = 53;
      break L18;
     }
     $134 = $k;
     HEAP32[456>>2] = $134;
     $135 = HEAP32[41008>>2]|0;
     $136 = HEAP32[_stdout>>2]|0;
     $137 = ($135|0)==($136|0);
     if ($137) {
      $displayed = 1;
      break;
     }
     $138 = $k;
     $139 = $language;
     $140 = $int_flag;
     $141 = (_list_code_equation($138,$139,$140)|0);
     $142 = ($141|0)>(0);
     if ($142) {
      $displayed = 1;
     }
    }
   } while(0);
   $143 = $k;
   $144 = (($143) + 1)|0;
   $k = $144;
  }
  $145 = HEAP32[$1>>2]|0;
  $146 = HEAP8[$145>>0]|0;
  $147 = ($146<<24>>24)!=(0);
  if (!($147)) {
   label = 62;
   break;
  }
 }
 if ((label|0) == 15) {
  $0 = 0;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 else if ((label|0) == 18) {
  _error(67544);
  $0 = 0;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 else if ((label|0) == 53) {
  $0 = 0;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 else if ((label|0) == 62) {
  $148 = $displayed;
  $0 = $148;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 return 0|0;
}
function _variables_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $array_element_flag = 0, $cnt = 0, $count_flag = 0, $cp1 = 0, $i1 = 0, $imag_array = 0, $imag_flag = 0, $int_flag = 0;
 var $k = 0, $lang_code = 0, $last_v = 0, $n1 = 0, $n_tabs = 0, $not_complex = 0, $p1 = 0, $range_start = 0, $rv = 0, $start = 0, $stop = 0, $v1 = 0, $va = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 8160|0;
 $start = sp + 8156|0;
 $stop = sp + 8152|0;
 $va = sp + 128|0;
 $imag_array = sp + 8168|0;
 HEAP32[$1>>2] = $cp;
 $lang_code = 0;
 $int_flag = 0;
 $imag_flag = 0;
 $count_flag = 0;
 $not_complex = 0;
 $array_element_flag = 0;
 $rv = 0;
 $n_tabs = 0;
 _memset(($imag_array|0),0,200)|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strncasecmp($2,69480,5)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (_skip_param($5)|0);
  HEAP32[$1>>2] = $6;
  $count_flag = 1;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (_strcmp_tospace($7,69208)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  label = 5;
 } else {
  $10 = HEAP32[$1>>2]|0;
  $11 = (_strcmp_tospace($10,69216)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 5;
  } else {
   $15 = HEAP32[$1>>2]|0;
   $16 = (_strcmp_tospace($15,66104)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = HEAP32[$1>>2]|0;
    $19 = (_skip_param($18)|0);
    HEAP32[$1>>2] = $19;
    $lang_code = 2;
   } else {
    $20 = HEAP32[$1>>2]|0;
    $21 = (_strncasecmp($20,69224,3)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = HEAP32[$1>>2]|0;
     $24 = (_skip_param($23)|0);
     HEAP32[$1>>2] = $24;
     $lang_code = 1;
     $int_flag = 1;
    }
   }
  }
 }
 if ((label|0) == 5) {
  $13 = HEAP32[$1>>2]|0;
  $14 = (_skip_param($13)|0);
  HEAP32[$1>>2] = $14;
  $lang_code = 1;
 }
 $25 = HEAP32[$1>>2]|0;
 $26 = (_strncasecmp($25,69480,5)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = HEAP32[$1>>2]|0;
  $29 = (_skip_param($28)|0);
  HEAP32[$1>>2] = $29;
  $count_flag = 1;
 }
 $30 = HEAP32[$1>>2]|0;
 $range_start = $30;
 while(1) {
  $31 = HEAP32[$1>>2]|0;
  $cp1 = $31;
  $32 = (_get_range($1,$start,$stop)|0);
  $33 = ($32|0)!=(0);
  if (!($33)) {
   label = 16;
   break;
  }
  $34 = HEAP32[$1>>2]|0;
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = HEAP32[$1>>2]|0;
   $39 = $cp1;
   $40 = ($38|0)==($39|0);
   if ($40) {
    label = 19;
    break;
   }
  }
  $41 = HEAP32[$start>>2]|0;
  $k = $41;
  while(1) {
   $42 = $k;
   $43 = HEAP32[$stop>>2]|0;
   $44 = ($42|0)<=($43|0);
   if (!($44)) {
    break;
   }
   $45 = $k;
   $46 = (2080 + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)<=(0);
   if ($48) {
   } else {
    $49 = $k;
    $50 = (2880 + ($49<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)>(0);
    if ($52) {
     $53 = $k;
     $54 = (1280 + ($53<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $p1 = $55;
     $56 = $k;
     $57 = (2880 + ($56<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $n1 = $58;
    } else {
     $59 = $k;
     $60 = (480 + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $p1 = $61;
     $62 = $k;
     $63 = (2080 + ($62<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $n1 = $64;
    }
    $i1 = 0;
    while(1) {
     $65 = $i1;
     $66 = $n1;
     $67 = ($65|0)<($66|0);
     if (!($67)) {
      break;
     }
     $68 = $i1;
     $69 = $p1;
     $70 = (($69) + ($68<<4)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)==(1);
     if ($72) {
      $73 = $i1;
      $74 = $p1;
      $75 = (($74) + ($73<<4)|0);
      $76 = (($75) + 8|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($77|0)==(3);
      if ($78) {
       label = 31;
       break;
      }
     }
     $81 = $i1;
     $82 = (($81) + 2)|0;
     $i1 = $82;
    }
    if ((label|0) == 31) {
     label = 0;
     $imag_flag = 1;
     $79 = $k;
     $80 = (($imag_array) + ($79)|0);
     HEAP8[$80>>0] = 1;
    }
   }
   $83 = $k;
   $84 = (($83) + 1)|0;
   $k = $84;
  }
  $85 = HEAP32[$1>>2]|0;
  $86 = HEAP8[$85>>0]|0;
  $87 = ($86<<24>>24)!=(0);
  if (!($87)) {
   label = 38;
   break;
  }
 }
 if ((label|0) == 16) {
  $0 = 0;
  $331 = $0;
  STACKTOP = sp;return ($331|0);
 }
 else if ((label|0) == 19) {
  _error(67544);
  $0 = 0;
  $331 = $0;
  STACKTOP = sp;return ($331|0);
 }
 else if ((label|0) == 38) {
  HEAP32[41304>>2] = 0;
  $last_v = 0;
  $vc = 0;
  L55: while(1) {
   $88 = $vc;
   $89 = ($88|0)>=(1000);
   if ($89) {
    label = 40;
    break;
   }
   $cnt = 0;
   $v1 = -1;
   $90 = $range_start;
   HEAP32[$1>>2] = $90;
   while(1) {
    $91 = HEAP32[$1>>2]|0;
    $cp1 = $91;
    $92 = (_get_range($1,$start,$stop)|0);
    $93 = ($92|0)!=(0);
    if (!($93)) {
     label = 43;
     break L55;
    }
    $94 = HEAP32[$start>>2]|0;
    $k = $94;
    while(1) {
     $95 = $k;
     $96 = HEAP32[$stop>>2]|0;
     $97 = ($95|0)<=($96|0);
     if (!($97)) {
      break;
     }
     $98 = $k;
     $99 = (2080 + ($98<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)<=(0);
     if ($101) {
     } else {
      $102 = $k;
      $103 = (480 + ($102<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $p1 = $104;
      $105 = $k;
      $106 = (2080 + ($105<<2)|0);
      $107 = HEAP32[$106>>2]|0;
      $n1 = $107;
      $i1 = 0;
      while(1) {
       $108 = $i1;
       $109 = $n1;
       $110 = ($108|0)<($109|0);
       if (!($110)) {
        break;
       }
       $111 = $i1;
       $112 = $p1;
       $113 = (($112) + ($111<<4)|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = ($114|0)==(1);
       if ($115) {
        $116 = $i1;
        $117 = $p1;
        $118 = (($117) + ($116<<4)|0);
        $119 = (($118) + 8|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = $last_v;
        $122 = ($120|0)>($121|0);
        if ($122) {
         $123 = $v1;
         $124 = ($123|0)==(-1);
         if ($124) {
          label = 54;
         } else {
          $125 = $i1;
          $126 = $p1;
          $127 = (($126) + ($125<<4)|0);
          $128 = (($127) + 8|0);
          $129 = HEAP32[$128>>2]|0;
          $130 = $v1;
          $131 = ($129|0)<($130|0);
          if ($131) {
           label = 54;
          } else {
           $137 = $i1;
           $138 = $p1;
           $139 = (($138) + ($137<<4)|0);
           $140 = (($139) + 8|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = $v1;
           $143 = ($141|0)==($142|0);
           if ($143) {
            $144 = $cnt;
            $145 = (($144) + 1)|0;
            $cnt = $145;
           }
          }
         }
         if ((label|0) == 54) {
          label = 0;
          $132 = $i1;
          $133 = $p1;
          $134 = (($133) + ($132<<4)|0);
          $135 = (($134) + 8|0);
          $136 = HEAP32[$135>>2]|0;
          $v1 = $136;
          $cnt = 1;
         }
        }
       }
       $146 = $i1;
       $147 = (($146) + 2)|0;
       $i1 = $147;
      }
      $148 = $k;
      $149 = (1280 + ($148<<2)|0);
      $150 = HEAP32[$149>>2]|0;
      $p1 = $150;
      $151 = $k;
      $152 = (2880 + ($151<<2)|0);
      $153 = HEAP32[$152>>2]|0;
      $n1 = $153;
      $i1 = 0;
      while(1) {
       $154 = $i1;
       $155 = $n1;
       $156 = ($154|0)<($155|0);
       if (!($156)) {
        break;
       }
       $157 = $i1;
       $158 = $p1;
       $159 = (($158) + ($157<<4)|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160|0)==(1);
       if ($161) {
        $162 = $i1;
        $163 = $p1;
        $164 = (($163) + ($162<<4)|0);
        $165 = (($164) + 8|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = $last_v;
        $168 = ($166|0)>($167|0);
        if ($168) {
         $169 = $v1;
         $170 = ($169|0)==(-1);
         if ($170) {
          label = 67;
         } else {
          $171 = $i1;
          $172 = $p1;
          $173 = (($172) + ($171<<4)|0);
          $174 = (($173) + 8|0);
          $175 = HEAP32[$174>>2]|0;
          $176 = $v1;
          $177 = ($175|0)<($176|0);
          if ($177) {
           label = 67;
          } else {
           $183 = $i1;
           $184 = $p1;
           $185 = (($184) + ($183<<4)|0);
           $186 = (($185) + 8|0);
           $187 = HEAP32[$186>>2]|0;
           $188 = $v1;
           $189 = ($187|0)==($188|0);
           if ($189) {
            $190 = $cnt;
            $191 = (($190) + 1)|0;
            $cnt = $191;
           }
          }
         }
         if ((label|0) == 67) {
          label = 0;
          $178 = $i1;
          $179 = $p1;
          $180 = (($179) + ($178<<4)|0);
          $181 = (($180) + 8|0);
          $182 = HEAP32[$181>>2]|0;
          $v1 = $182;
          $cnt = 1;
         }
        }
       }
       $192 = $i1;
       $193 = (($192) + 2)|0;
       $i1 = $193;
      }
     }
     $194 = $k;
     $195 = (($194) + 1)|0;
     $k = $195;
    }
    $196 = HEAP32[$1>>2]|0;
    $197 = HEAP8[$196>>0]|0;
    $198 = ($197<<24>>24)!=(0);
    if (!($198)) {
     break;
    }
   }
   $199 = $v1;
   $200 = ($199|0)==(-1);
   if ($200) {
    label = 79;
    break;
   }
   $201 = $v1;
   $last_v = $201;
   $202 = $v1;
   $203 = $vc;
   $204 = (($va) + ($203<<3)|0);
   HEAP32[$204>>2] = $202;
   $205 = $cnt;
   $206 = $vc;
   $207 = (($va) + ($206<<3)|0);
   $208 = (($207) + 4|0);
   HEAP32[$208>>2] = $205;
   $209 = $vc;
   $210 = (($209) + 1)|0;
   $vc = $210;
  }
  if ((label|0) == 40) {
   _error(69488);
   $0 = 0;
   $331 = $0;
   STACKTOP = sp;return ($331|0);
  }
  else if ((label|0) == 43) {
   $0 = 0;
   $331 = $0;
   STACKTOP = sp;return ($331|0);
  }
  else if ((label|0) == 79) {
   $211 = $vc;
   $212 = ($211|0)<=(0);
   if ($212) {
    $213 = $lang_code;
    $214 = ($213|0)==(0);
    if ($214) {
     _error(69520);
     $0 = 0;
     $331 = $0;
     STACKTOP = sp;return ($331|0);
    } else {
     $0 = 1;
     $331 = $0;
     STACKTOP = sp;return ($331|0);
    }
   }
   $215 = $vc;
   _qsort($va,$215,8,54);
   $i1 = 0;
   while(1) {
    $216 = $i1;
    $217 = $vc;
    $218 = ($216|0)<($217|0);
    if (!($218)) {
     break;
    }
    $219 = $lang_code;
    $220 = ($219|0)!=(0);
    if ($220) {
     $221 = $i1;
     $222 = (($va) + ($221<<3)|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ($223|0)<(4);
     if ($224) {
     } else {
      label = 90;
     }
    } else {
     label = 90;
    }
    if ((label|0) == 90) {
     label = 0;
     $225 = $i1;
     $226 = (($va) + ($225<<3)|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $227 & 16383;
     $229 = ($228|0)>=(4);
     if ($229) {
      $rv = 1;
     }
     $230 = $i1;
     $231 = (($va) + ($230<<3)|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = $lang_code;
     $234 = ($233|0)!=(0);
     if ($234) {
      $235 = $lang_code;
      $236 = $235;
     } else {
      $236 = -5;
     }
     $237 = (_list_var($232,$236)|0);
     $n_tabs = $237;
     $238 = $lang_code;
     $239 = ($238|0)!=(0);
     if ($239) {
      $240 = (_strpbrk(35800,69576)|0);
      $241 = ($240|0)!=(0|0);
      if ($241) {
       $array_element_flag = 1;
      }
      $242 = $imag_flag;
      $243 = ($242|0)!=(0);
      if ($243) {
       $k = 0;
       L146: while(1) {
        $244 = $k;
        $245 = HEAP32[464>>2]|0;
        $246 = ($244|0)>=($245|0);
        if ($246) {
         label = 101;
         break;
        }
        $247 = $k;
        $248 = (($imag_array) + ($247)|0);
        $249 = HEAP8[$248>>0]|0;
        $250 = $249 << 24 >> 24;
        $251 = ($250|0)!=(0);
        do {
         if ($251) {
          $252 = $k;
          $253 = (2080 + ($252<<2)|0);
          $254 = HEAP32[$253>>2]|0;
          $255 = ($254|0)==(1);
          if (!($255)) {
           break;
          }
          $256 = $k;
          $257 = (480 + ($256<<2)|0);
          $258 = HEAP32[$257>>2]|0;
          $259 = HEAP32[$258>>2]|0;
          $260 = ($259|0)==(1);
          if (!($260)) {
           break;
          }
          $261 = $k;
          $262 = (480 + ($261<<2)|0);
          $263 = HEAP32[$262>>2]|0;
          $264 = (($263) + 8|0);
          $265 = HEAP32[$264>>2]|0;
          $266 = $i1;
          $267 = (($va) + ($266<<3)|0);
          $268 = HEAP32[$267>>2]|0;
          $269 = ($265|0)==($268|0);
          if ($269) {
           label = 106;
           break L146;
          }
         }
        } while(0);
        $273 = $k;
        $274 = (($273) + 1)|0;
        $k = $274;
       }
       if ((label|0) == 101) {
        label = 0;
        $not_complex = 1;
       }
       else if ((label|0) == 106) {
        label = 0;
        $270 = HEAP32[41008>>2]|0;
        (_fprintf(($270|0),(69584|0),($vararg_buffer|0))|0);
        $271 = $n_tabs;
        $272 = (($271) + 8)|0;
        $n_tabs = $272;
       }
      }
      $275 = $int_flag;
      $276 = ($275|0)!=(0);
      if ($276) {
       label = 113;
      } else {
       $277 = $i1;
       $278 = (($va) + ($277<<3)|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = (_is_integer_var($279)|0);
       $281 = ($280|0)!=(0);
       if ($281) {
        label = 113;
       } else {
        $282 = $i1;
        $283 = (($va) + ($282<<3)|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & 16383;
        $286 = ($285|0)==(4);
        if ($286) {
         label = 113;
        } else {
         $293 = HEAP32[41008>>2]|0;
         $294 = $n_tabs;
         $295 = (($294) + 1)|0;
         $296 = (($295|0) / 8)&-1;
         $297 = ($296|0)!=(0);
         $298 = $297 ? 69616 : 69624;
         HEAP32[$vararg_buffer4>>2] = $298;
         $vararg_ptr7 = (($vararg_buffer4) + 4|0);
         HEAP32[$vararg_ptr7>>2] = 35800;
         (_fprintf(($293|0),(69632|0),($vararg_buffer4|0))|0);
        }
       }
      }
      if ((label|0) == 113) {
       label = 0;
       $287 = HEAP32[41008>>2]|0;
       $288 = $n_tabs;
       $289 = (($288) + 1)|0;
       $290 = (($289|0) / 8)&-1;
       $291 = ($290|0)!=(0);
       $292 = $291 ? 69616 : 69624;
       HEAP32[$vararg_buffer1>>2] = $292;
       $vararg_ptr3 = (($vararg_buffer1) + 4|0);
       HEAP32[$vararg_ptr3>>2] = 35800;
       (_fprintf(($287|0),(69600|0),($vararg_buffer1|0))|0);
      }
      $299 = $n_tabs;
      $300 = ($299|0)>=(7);
      if ($300) {
       $301 = $n_tabs;
       $302 = (($301) - 7)|0;
       $n_tabs = $302;
      }
     } else {
      $303 = HEAP32[41008>>2]|0;
      HEAP32[$vararg_buffer8>>2] = 35800;
      (_fprintf(($303|0),(67496|0),($vararg_buffer8|0))|0);
     }
     $304 = $count_flag;
     $305 = ($304|0)!=(0);
     if ($305) {
      $306 = $n_tabs;
      $307 = (($306|0) / 8)&-1;
      $308 = ($307|0)==(0);
      if ($308) {
       $309 = HEAP32[41008>>2]|0;
       (_fprintf(($309|0),(69616|0),($vararg_buffer11|0))|0);
      }
      $310 = HEAP32[41008>>2]|0;
      $311 = $i1;
      $312 = (($va) + ($311<<3)|0);
      $313 = (($312) + 4|0);
      $314 = HEAP32[$313>>2]|0;
      HEAP32[$vararg_buffer13>>2] = $314;
      (_fprintf(($310|0),(69648|0),($vararg_buffer13|0))|0);
     } else {
      $315 = HEAP32[41008>>2]|0;
      (_fprintf(($315|0),(64256|0),($vararg_buffer16|0))|0);
     }
    }
    $316 = $i1;
    $317 = (($316) + 1)|0;
    $i1 = $317;
   }
   $318 = $lang_code;
   $319 = ($318|0)!=(0);
   if ($319) {
    $320 = $imag_flag;
    $321 = ($320|0)!=(0);
    if ($321) {
     $322 = $not_complex;
     $323 = ($322|0)!=(0);
     if ($323) {
      $324 = $rv;
      $325 = ($324|0)!=(0);
      if ($325) {
       (_printf((64256|0),($vararg_buffer18|0))|0);
       _warning(69672);
       (_printf((69736|0),($vararg_buffer20|0))|0);
       (_printf((69776|0),($vararg_buffer22|0))|0);
      }
     }
    }
   }
   $326 = $rv;
   $327 = ($326|0)!=(0);
   if (!($327)) {
    _error(69832);
   }
   $328 = $array_element_flag;
   $329 = ($328|0)!=(0);
   if ($329) {
    _warning(69888);
    $rv = 0;
   }
   $330 = $rv;
   $0 = $330;
   $331 = $0;
   STACKTOP = sp;return ($331|0);
  }
 }
 return 0|0;
}
function _vcmp($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $p2;
 $3 = $2;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($8|0);
 do {
  if ($9) {
   $10 = $1;
   $11 = HEAP32[$10>>2]|0;
   $12 = $2;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)<($13|0);
   if ($14) {
    $0 = -1;
    break;
   }
   $15 = $1;
   $16 = HEAP32[$15>>2]|0;
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  } else {
   $20 = $2;
   $21 = (($20) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($22) - ($25))|0;
   $0 = $26;
  }
 } while(0);
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _approximate_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cp1 = 0, $k = 0, $start = 0, $stop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 16|0;
 $start = sp + 12|0;
 $stop = sp + 8|0;
 HEAP32[$1>>2] = $cp;
 L1: while(1) {
  $2 = HEAP32[$1>>2]|0;
  $cp1 = $2;
  $3 = (_get_range($1,$start,$stop)|0);
  $4 = ($3|0)!=(0);
  if (!($4)) {
   label = 3;
   break;
  }
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = HEAP32[$1>>2]|0;
   $10 = $cp1;
   $11 = ($9|0)==($10|0);
   if ($11) {
    label = 6;
    break;
   }
  }
  $12 = HEAP32[$start>>2]|0;
  $k = $12;
  while(1) {
   $13 = $k;
   $14 = HEAP32[$stop>>2]|0;
   $15 = ($13|0)<=($14|0);
   if (!($15)) {
    break;
   }
   $16 = $k;
   $17 = (2080 + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $k;
    $21 = (480 + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $k;
    $24 = (2080 + ($23<<2)|0);
    _approximate($22,$24);
    $25 = $k;
    $26 = (2880 + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)!=(0);
    if ($28) {
     $29 = $k;
     $30 = (1280 + ($29<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $k;
     $33 = (2880 + ($32<<2)|0);
     _approximate($31,$33);
    }
    $34 = $k;
    $35 = (_return_result($34)|0);
    $36 = ($35|0)!=(0);
    if (!($36)) {
     label = 13;
     break L1;
    }
   }
   $37 = $k;
   $38 = (($37) + 1)|0;
   $k = $38;
  }
  $39 = HEAP32[$1>>2]|0;
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)!=(0);
  if (!($41)) {
   label = 19;
   break;
  }
 }
 if ((label|0) == 3) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 6) {
  _error(67544);
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 19) {
  $0 = 1;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return 0|0;
}
function _replace_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp1 = 0, $cp_start = 0, $diff_sign = 0, $found = 0, $i = 0, $j = 0, $last_v = 0, $v = 0;
 var $va = 0, $value_entered = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $va = sp + 48|0;
 $diff_sign = sp + 20|0;
 $1 = $cp;
 $2 = $1;
 $cp_start = $2;
 $3 = (_current_not_defined()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $291 = $0;
  STACKTOP = sp;return ($291|0);
 }
 $5 = HEAP32[472>>2]|0;
 $i = $5;
 $vc = 0;
 while(1) {
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = (_strcmp_tospace($9,67632)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $vc;
   $13 = ($12|0)!=(0);
   if ($13) {
    label = 7;
    break;
   }
  }
  $14 = $vc;
  $15 = ($14|0)>=(1000);
  if ($15) {
   label = 10;
   break;
  }
  $16 = $vc;
  $17 = (($va) + ($16<<2)|0);
  $18 = $1;
  $19 = (_parse_var2($17,$18)|0);
  $1 = $19;
  $20 = $1;
  $21 = ($20|0)==(0|0);
  if ($21) {
   label = 12;
   break;
  }
  $22 = $i;
  $23 = $vc;
  $24 = (($va) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_var_in_equation($22,$25)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   label = 14;
   break;
  }
  $28 = $vc;
  $29 = (($28) + 1)|0;
  $vc = $29;
 }
 if ((label|0) == 7) {
  HEAP32[41296>>2] = 0;
 }
 else if ((label|0) == 10) {
  _error(69976);
  $0 = 0;
  $291 = $0;
  STACKTOP = sp;return ($291|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $291 = $0;
  STACKTOP = sp;return ($291|0);
 }
 else if ((label|0) == 14) {
  _error(70008);
  $0 = 0;
  $291 = $0;
  STACKTOP = sp;return ($291|0);
 }
 L25: while(1) {
  $30 = $i;
  $31 = (2080 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[3712>>2] = $32;
  $33 = HEAP32[3680>>2]|0;
  $34 = $i;
  $35 = (480 + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[3712>>2]|0;
  $38 = $37<<4;
  _memmove(($33|0),($36|0),($38|0))|0;
  $39 = $i;
  $40 = (2880 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[3720>>2] = $41;
  $42 = HEAP32[3688>>2]|0;
  $43 = $i;
  $44 = (1280 + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[3720>>2]|0;
  $47 = $46<<4;
  _memmove(($42|0),($45|0),($47|0))|0;
  $value_entered = 0;
  $last_v = 0;
  L27: while(1) {
   $v = -1;
   $j = 0;
   while(1) {
    $48 = $j;
    $49 = $i;
    $50 = (2080 + ($49<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($48|0)<($51|0);
    if (!($52)) {
     break;
    }
    $53 = $j;
    $54 = $i;
    $55 = (480 + ($54<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + ($53<<4)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)==(1);
    if ($59) {
     $60 = $j;
     $61 = $i;
     $62 = (480 + ($61<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + ($60<<4)|0);
     $65 = (($64) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $last_v;
     $68 = ($66|0)>($67|0);
     do {
      if ($68) {
       $69 = $v;
       $70 = ($69|0)==(-1);
       if (!($70)) {
        $71 = $j;
        $72 = $i;
        $73 = (480 + ($72<<2)|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = (($74) + ($71<<4)|0);
        $76 = (($75) + 8|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = $v;
        $79 = ($77|0)<($78|0);
        if (!($79)) {
         break;
        }
       }
       $80 = $j;
       $81 = $i;
       $82 = (480 + ($81<<2)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($83) + ($80<<4)|0);
       $85 = (($84) + 8|0);
       $86 = HEAP32[$85>>2]|0;
       $v = $86;
      }
     } while(0);
    }
    $87 = $j;
    $88 = (($87) + 2)|0;
    $j = $88;
   }
   $j = 0;
   while(1) {
    $89 = $j;
    $90 = $i;
    $91 = (2880 + ($90<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($89|0)<($92|0);
    if (!($93)) {
     break;
    }
    $94 = $j;
    $95 = $i;
    $96 = (1280 + ($95<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + ($94<<4)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(1);
    if ($100) {
     $101 = $j;
     $102 = $i;
     $103 = (1280 + ($102<<2)|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($104) + ($101<<4)|0);
     $106 = (($105) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $last_v;
     $109 = ($107|0)>($108|0);
     do {
      if ($109) {
       $110 = $v;
       $111 = ($110|0)==(-1);
       if (!($111)) {
        $112 = $j;
        $113 = $i;
        $114 = (1280 + ($113<<2)|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (($115) + ($112<<4)|0);
        $117 = (($116) + 8|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = $v;
        $120 = ($118|0)<($119|0);
        if (!($120)) {
         break;
        }
       }
       $121 = $j;
       $122 = $i;
       $123 = (1280 + ($122<<2)|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = (($124) + ($121<<4)|0);
       $126 = (($125) + 8|0);
       $127 = HEAP32[$126>>2]|0;
       $v = $127;
      }
     } while(0);
    }
    $128 = $j;
    $129 = (($128) + 2)|0;
    $j = $129;
   }
   $130 = $v;
   $131 = ($130|0)==(-1);
   if ($131) {
    break;
   }
   $132 = $v;
   $last_v = $132;
   $133 = $vc;
   $134 = ($133|0)!=(0);
   do {
    if ($134) {
     $found = 0;
     $j = 0;
     while(1) {
      $135 = $j;
      $136 = $vc;
      $137 = ($135|0)<($136|0);
      if (!($137)) {
       break;
      }
      $138 = $v;
      $139 = $j;
      $140 = (($va) + ($139<<2)|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($138|0)==($141|0);
      if ($142) {
       $found = 1;
      }
      $143 = $j;
      $144 = (($143) + 1)|0;
      $j = $144;
     }
     $145 = $found;
     $146 = ($145|0)!=(0);
     if (!($146)) {
      continue L27;
     }
     $147 = $1;
     $148 = HEAP8[$147>>0]|0;
     $149 = ($148<<24>>24)!=(0);
     if (!($149)) {
      label = 58;
      break;
     }
     $150 = $1;
     $151 = (_strcmp_tospace($150,67632)|0);
     $152 = ($151|0)!=(0);
     if ($152) {
      label = 52;
      break L25;
     }
     $153 = $1;
     $154 = (_skip_param($153)|0);
     $cp1 = $154;
     $155 = $cp1;
     $156 = $cp_start;
     $157 = $155;
     $158 = $156;
     $159 = (($157) - ($158))|0;
     $160 = HEAP32[41240>>2]|0;
     $161 = (($160) + ($159))|0;
     HEAP32[41240>>2] = $161;
     $162 = HEAP32[3696>>2]|0;
     $163 = $cp1;
     $164 = (_parse_expr($162,3728,$163,1)|0);
     $cp1 = $164;
     $165 = ($164|0)==(0|0);
     if ($165) {
      label = 55;
      break L25;
     }
     $166 = HEAP32[3728>>2]|0;
     $167 = ($166|0)<=(0);
     if ($167) {
      label = 55;
      break L25;
     }
    } else {
     label = 58;
    }
   } while(0);
   do {
    if ((label|0) == 58) {
     label = 0;
     $168 = $v;
     (_list_var($168,0)|0);
     HEAP32[$vararg_buffer>>2] = 35800;
     (_snprintf(35984,80,70032,$vararg_buffer)|0);
     $169 = HEAP32[3696>>2]|0;
     $170 = (_get_expr($169,3728)|0);
     $171 = ($170|0)!=(0);
     if ($171) {
      $value_entered = 1;
      break;
     } else {
      continue L27;
     }
    }
   } while(0);
   $j = 0;
   while(1) {
    $172 = $j;
    $173 = HEAP32[3728>>2]|0;
    $174 = ($172|0)<($173|0);
    if (!($174)) {
     break;
    }
    $175 = $j;
    $176 = HEAP32[3696>>2]|0;
    $177 = (($176) + ($175<<4)|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(1);
    if ($179) {
     $180 = $j;
     $181 = HEAP32[3696>>2]|0;
     $182 = (($181) + ($180<<4)|0);
     $183 = (($182) + 8|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (0 - ($184))|0;
     $186 = $j;
     $187 = HEAP32[3696>>2]|0;
     $188 = (($187) + ($186<<4)|0);
     $189 = (($188) + 8|0);
     HEAP32[$189>>2] = $185;
    }
    $190 = $j;
    $191 = (($190) + 2)|0;
    $j = $191;
   }
   $192 = HEAP32[3680>>2]|0;
   $193 = HEAP32[3696>>2]|0;
   $194 = HEAP32[3728>>2]|0;
   $195 = $v;
   (_subst_var_with_exp($192,3712,$193,$194,$195)|0);
   $196 = HEAP32[3688>>2]|0;
   $197 = HEAP32[3696>>2]|0;
   $198 = HEAP32[3728>>2]|0;
   $199 = $v;
   (_subst_var_with_exp($196,3720,$197,$198,$199)|0);
  }
  $j = 0;
  while(1) {
   $200 = $j;
   $201 = HEAP32[3712>>2]|0;
   $202 = ($200|0)<($201|0);
   if (!($202)) {
    break;
   }
   $203 = $j;
   $204 = HEAP32[3680>>2]|0;
   $205 = (($204) + ($203<<4)|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($206|0)==(1);
   if ($207) {
    $208 = $j;
    $209 = HEAP32[3680>>2]|0;
    $210 = (($209) + ($208<<4)|0);
    $211 = (($210) + 8|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ($212|0)<(0);
    if ($213) {
     $214 = $j;
     $215 = HEAP32[3680>>2]|0;
     $216 = (($215) + ($214<<4)|0);
     $217 = (($216) + 8|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = (0 - ($218))|0;
     $220 = $j;
     $221 = HEAP32[3680>>2]|0;
     $222 = (($221) + ($220<<4)|0);
     $223 = (($222) + 8|0);
     HEAP32[$223>>2] = $219;
    }
   }
   $224 = $j;
   $225 = (($224) + 2)|0;
   $j = $225;
  }
  $j = 0;
  while(1) {
   $226 = $j;
   $227 = HEAP32[3720>>2]|0;
   $228 = ($226|0)<($227|0);
   if (!($228)) {
    break;
   }
   $229 = $j;
   $230 = HEAP32[3688>>2]|0;
   $231 = (($230) + ($229<<4)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ($232|0)==(1);
   if ($233) {
    $234 = $j;
    $235 = HEAP32[3688>>2]|0;
    $236 = (($235) + ($234<<4)|0);
    $237 = (($236) + 8|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ($238|0)<(0);
    if ($239) {
     $240 = $j;
     $241 = HEAP32[3688>>2]|0;
     $242 = (($241) + ($240<<4)|0);
     $243 = (($242) + 8|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = (0 - ($244))|0;
     $246 = $j;
     $247 = HEAP32[3688>>2]|0;
     $248 = (($247) + ($246<<4)|0);
     $249 = (($248) + 8|0);
     HEAP32[$249>>2] = $245;
    }
   }
   $250 = $j;
   $251 = (($250) + 2)|0;
   $j = $251;
  }
  $252 = HEAP32[41296>>2]|0;
  $253 = ($252|0)!=(0);
  if (!($253)) {
   label = 91;
   break;
  }
  $254 = HEAP32[3680>>2]|0;
  _calc_simp($254,3712);
  $255 = HEAP32[3720>>2]|0;
  $256 = ($255|0)!=(0);
  if ($256) {
   $257 = HEAP32[3688>>2]|0;
   _calc_simp($257,3720);
   $258 = HEAP32[3680>>2]|0;
   $259 = HEAP32[3712>>2]|0;
   $260 = HEAP32[3688>>2]|0;
   $261 = HEAP32[3720>>2]|0;
   $262 = (_se_compare($258,$259,$260,$261,$diff_sign)|0);
   $263 = ($262|0)!=(0);
   if ($263) {
    $264 = HEAP32[$diff_sign>>2]|0;
    $265 = ($264|0)!=(0);
    if (!($265)) {
     $266 = HEAP32[41008>>2]|0;
     (_fprintf(($266|0),(70048|0),($vararg_buffer1|0))|0);
    }
   }
  }
  $267 = $value_entered;
  $268 = ($267|0)!=(0);
  if (!($268)) {
   label = 90;
   break;
  }
  $269 = HEAP32[41008>>2]|0;
  (_fprintf(($269|0),(70080|0),($vararg_buffer3|0))|0);
 }
 if ((label|0) == 52) {
  $0 = 0;
  $291 = $0;
  STACKTOP = sp;return ($291|0);
 }
 else if ((label|0) == 55) {
  $0 = 0;
  $291 = $0;
  STACKTOP = sp;return ($291|0);
 }
 else if ((label|0) == 90) {
  $0 = 1;
  $291 = $0;
  STACKTOP = sp;return ($291|0);
 }
 else if ((label|0) == 91) {
  $270 = HEAP32[3712>>2]|0;
  $271 = $i;
  $272 = (2080 + ($271<<2)|0);
  HEAP32[$272>>2] = $270;
  $273 = $i;
  $274 = (480 + ($273<<2)|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = HEAP32[3680>>2]|0;
  $277 = HEAP32[3712>>2]|0;
  $278 = $277<<4;
  _memmove(($275|0),($276|0),($278|0))|0;
  $279 = HEAP32[3720>>2]|0;
  $280 = $i;
  $281 = (2880 + ($280<<2)|0);
  HEAP32[$281>>2] = $279;
  $282 = $i;
  $283 = (1280 + ($282<<2)|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = HEAP32[3688>>2]|0;
  $286 = HEAP32[3720>>2]|0;
  $287 = $286<<4;
  _memmove(($284|0),($285|0),($287|0))|0;
  $288 = $i;
  _simp_equation($288);
  $289 = $i;
  $290 = (_return_result($289)|0);
  $0 = $290;
  $291 = $0;
  STACKTOP = sp;return ($291|0);
 }
 return 0|0;
}
function _simplify_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $counter = 0, $counter_max = 0, $cp1 = 0, $first = 0, $frac_flag = 0, $i = 0, $i1 = 0, $k = 0, $k1 = 0, $last = 0, $number_simplified = 0, $previous_solution_number = 0, $quick_flag = 0;
 var $quickest_flag = 0, $sa_mark = 0, $sa_value = 0, $sign_flag = 0, $symb = 0, $total_number_of_solutions = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr21 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 936|0;
 $first = sp + 924|0;
 $last = sp + 920|0;
 $previous_solution_number = sp + 96|0;
 $sa_mark = sp + 1008|0;
 $sa_value = sp + 944|0;
 HEAP32[$1>>2] = $cp;
 $number_simplified = 0;
 $sign_flag = 0;
 $quick_flag = 0;
 $quickest_flag = 0;
 $symb = 0;
 $frac_flag = 0;
 L1: while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = (_strncasecmp($2,70096,4)|0);
  $4 = ($3|0)==(0);
  do {
   if ($4) {
    $sign_flag = 1;
   } else {
    $5 = HEAP32[$1>>2]|0;
    $6 = (_strncasecmp($5,67600,4)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     $symb = 1;
     break;
    }
    $8 = HEAP32[$1>>2]|0;
    $9 = (_strcmp_tospace($8,70104)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $quickest_flag = 1;
     break;
    }
    $11 = HEAP32[$1>>2]|0;
    $12 = (_strcmp_tospace($11,70120)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $quick_flag = 1;
     break;
    }
    $14 = HEAP32[$1>>2]|0;
    $15 = (_strncasecmp($14,70128,4)|0);
    $16 = ($15|0)==(0);
    if (!($16)) {
     break L1;
    }
    $frac_flag = 1;
   }
  } while(0);
  $17 = HEAP32[$1>>2]|0;
  $18 = (_skip_param($17)|0);
  HEAP32[$1>>2] = $18;
 }
 L19: while(1) {
  $19 = HEAP32[$1>>2]|0;
  $cp1 = $19;
  $20 = (_get_range($1,$first,$last)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   label = 16;
   break;
  }
  $22 = HEAP32[$1>>2]|0;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = HEAP32[$1>>2]|0;
   $27 = $cp1;
   $28 = ($26|0)==($27|0);
   if ($28) {
    label = 19;
    break;
   }
  }
  $29 = HEAP32[$first>>2]|0;
  $i = $29;
  while(1) {
   $30 = $i;
   $31 = HEAP32[$last>>2]|0;
   $32 = ($30|0)<=($31|0);
   if (!($32)) {
    break;
   }
   $33 = $i;
   $34 = (2080 + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)<=(0);
   do {
    if ($36) {
    } else {
     $37 = $number_simplified;
     $38 = (($37) + 1)|0;
     $number_simplified = $38;
     $39 = $symb;
     HEAP32[41224>>2] = $39;
     $40 = $quickest_flag;
     $41 = ($40|0)!=(0);
     if ($41) {
      $42 = $i;
      _simp_equation($42);
     } else {
      $43 = $i;
      $44 = $quick_flag;
      $45 = $frac_flag;
      _simpa_repeat($43,$44,$45);
     }
     HEAP32[41224>>2] = 0;
     $46 = $i;
     $47 = (_return_result($46)|0);
     $48 = ($47|0)!=(0);
     if (!($48)) {
      label = 28;
      break L19;
     }
     $49 = $sign_flag;
     $50 = ($49|0)!=(0);
     if (!($50)) {
      break;
     }
     _memset(($previous_solution_number|0),0,800)|0;
     dest=$sa_mark+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
     $k1 = 0;
     while(1) {
      $51 = $k1;
      $52 = $i;
      $53 = (2080 + ($52<<2)|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($51|0)<($54|0);
      if (!($55)) {
       break;
      }
      $56 = $k1;
      $57 = $i;
      $58 = (480 + ($57<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) + ($56<<4)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(1);
      if ($62) {
       $63 = $k1;
       $64 = $i;
       $65 = (480 + ($64<<2)|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($66) + ($63<<4)|0);
       $68 = (($67) + 8|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = $69 & 16383;
       $71 = ($70|0)==(4);
       if ($71) {
        $72 = $k1;
        $73 = $i;
        $74 = (480 + ($73<<2)|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = (($75) + ($72<<4)|0);
        $77 = (($76) + 8|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = $78 >> 14;
        $80 = $79 & 63;
        $81 = (($sa_mark) + ($80)|0);
        HEAP8[$81>>0] = 1;
       }
      }
      $82 = $k1;
      $83 = (($82) + 2)|0;
      $k1 = $83;
     }
     $k1 = 0;
     while(1) {
      $84 = $k1;
      $85 = $i;
      $86 = (2880 + ($85<<2)|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($84|0)<($87|0);
      if (!($88)) {
       break;
      }
      $89 = $k1;
      $90 = $i;
      $91 = (1280 + ($90<<2)|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($92) + ($89<<4)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($94|0)==(1);
      if ($95) {
       $96 = $k1;
       $97 = $i;
       $98 = (1280 + ($97<<2)|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (($99) + ($96<<4)|0);
       $101 = (($100) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $102 & 16383;
       $104 = ($103|0)==(4);
       if ($104) {
        $105 = $k1;
        $106 = $i;
        $107 = (1280 + ($106<<2)|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = (($108) + ($105<<4)|0);
        $110 = (($109) + 8|0);
        $111 = HEAP32[$110>>2]|0;
        $112 = $111 >> 14;
        $113 = $112 & 63;
        $114 = (($sa_mark) + ($113)|0);
        HEAP8[$114>>0] = 1;
       }
      }
      $115 = $k1;
      $116 = (($115) + 2)|0;
      $k1 = $116;
     }
     $k1 = 0;
     $k = 0;
     while(1) {
      $117 = $k1;
      $118 = ($117|0)<(64);
      if (!($118)) {
       break;
      }
      $119 = $k1;
      $120 = (($sa_mark) + ($119)|0);
      $121 = HEAP8[$120>>0]|0;
      $122 = ($121<<24>>24)!=(0);
      if ($122) {
       $123 = $k;
       $124 = (($123) + 1)|0;
       $k = $124;
      }
      $125 = $k1;
      $126 = (($125) + 1)|0;
      $k1 = $126;
     }
     $127 = $k;
     $128 = ($127|0)==(0);
     if ($128) {
      break;
     }
     $129 = $k;
     $130 = 1 << $129;
     $131 = (($130) - 1)|0;
     $counter_max = $131;
     $132 = $counter_max;
     $133 = ($132|0)!=(0);
     if ($133) {
      $134 = HEAP32[41008>>2]|0;
      $135 = $counter_max;
      $136 = (($135) + 1)|0;
      HEAP32[$vararg_buffer>>2] = $136;
      (_fprintf(($134|0),(70144|0),($vararg_buffer|0))|0);
     }
     $counter = 0;
     while(1) {
      $137 = $counter;
      $138 = $counter_max;
      $139 = ($137|0)<=($138|0);
      if (!($139)) {
       break;
      }
      $140 = (_next_espace()|0);
      $i1 = $140;
      $141 = $i;
      $142 = $i1;
      _copy_espace($141,$142);
      $k1 = 0;
      $k = 0;
      while(1) {
       $143 = $k1;
       $144 = ($143|0)<(64);
       if (!($144)) {
        break;
       }
       $145 = $k1;
       $146 = (($sa_mark) + ($145)|0);
       $147 = HEAP8[$146>>0]|0;
       $148 = ($147<<24>>24)!=(0);
       if ($148) {
        $149 = $k;
        $150 = 1 << $149;
        $151 = $counter;
        $152 = $150 & $151;
        $153 = ($152|0)!=(0);
        $154 = $153&1;
        $155 = $154&255;
        $156 = $k1;
        $157 = (($sa_value) + ($156)|0);
        HEAP8[$157>>0] = $155;
        $158 = $k;
        $159 = (($158) + 1)|0;
        $k = $159;
       }
       $160 = $k1;
       $161 = (($160) + 1)|0;
       $k1 = $161;
      }
      $k1 = 0;
      while(1) {
       $162 = $k1;
       $163 = $i1;
       $164 = (2080 + ($163<<2)|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($162|0)<($165|0);
       if (!($166)) {
        break;
       }
       $167 = $k1;
       $168 = $i1;
       $169 = (480 + ($168<<2)|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = (($170) + ($167<<4)|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = ($172|0)==(1);
       if ($173) {
        $174 = $k1;
        $175 = $i1;
        $176 = (480 + ($175<<2)|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = (($177) + ($174<<4)|0);
        $179 = (($178) + 8|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = $180 & 16383;
        $182 = ($181|0)==(4);
        if ($182) {
         $183 = $k1;
         $184 = $i1;
         $185 = (480 + ($184<<2)|0);
         $186 = HEAP32[$185>>2]|0;
         $187 = (($186) + ($183<<4)|0);
         $188 = (($187) + 8|0);
         $189 = HEAP32[$188>>2]|0;
         $190 = $189 >> 14;
         $191 = $190 & 63;
         $192 = (($sa_value) + ($191)|0);
         $193 = HEAP8[$192>>0]|0;
         $194 = ($193<<24>>24)!=(0);
         if ($194) {
          $195 = $k1;
          $196 = $i1;
          $197 = (480 + ($196<<2)|0);
          $198 = HEAP32[$197>>2]|0;
          $199 = (($198) + ($195<<4)|0);
          HEAP32[$199>>2] = 0;
          $200 = $k1;
          $201 = $i1;
          $202 = (480 + ($201<<2)|0);
          $203 = HEAP32[$202>>2]|0;
          $204 = (($203) + ($200<<4)|0);
          $205 = (($204) + 8|0);
          HEAPF64[$205>>3] = -1.0;
         } else {
          $206 = $k1;
          $207 = $i1;
          $208 = (480 + ($207<<2)|0);
          $209 = HEAP32[$208>>2]|0;
          $210 = (($209) + ($206<<4)|0);
          HEAP32[$210>>2] = 0;
          $211 = $k1;
          $212 = $i1;
          $213 = (480 + ($212<<2)|0);
          $214 = HEAP32[$213>>2]|0;
          $215 = (($214) + ($211<<4)|0);
          $216 = (($215) + 8|0);
          HEAPF64[$216>>3] = 1.0;
         }
        }
       }
       $217 = $k1;
       $218 = (($217) + 2)|0;
       $k1 = $218;
      }
      $k1 = 0;
      while(1) {
       $219 = $k1;
       $220 = $i1;
       $221 = (2880 + ($220<<2)|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ($219|0)<($222|0);
       if (!($223)) {
        break;
       }
       $224 = $k1;
       $225 = $i1;
       $226 = (1280 + ($225<<2)|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = (($227) + ($224<<4)|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($229|0)==(1);
       if ($230) {
        $231 = $k1;
        $232 = $i1;
        $233 = (1280 + ($232<<2)|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = (($234) + ($231<<4)|0);
        $236 = (($235) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = $237 & 16383;
        $239 = ($238|0)==(4);
        if ($239) {
         $240 = $k1;
         $241 = $i1;
         $242 = (1280 + ($241<<2)|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = (($243) + ($240<<4)|0);
         $245 = (($244) + 8|0);
         $246 = HEAP32[$245>>2]|0;
         $247 = $246 >> 14;
         $248 = $247 & 63;
         $249 = (($sa_value) + ($248)|0);
         $250 = HEAP8[$249>>0]|0;
         $251 = ($250<<24>>24)!=(0);
         if ($251) {
          $252 = $k1;
          $253 = $i1;
          $254 = (1280 + ($253<<2)|0);
          $255 = HEAP32[$254>>2]|0;
          $256 = (($255) + ($252<<4)|0);
          HEAP32[$256>>2] = 0;
          $257 = $k1;
          $258 = $i1;
          $259 = (1280 + ($258<<2)|0);
          $260 = HEAP32[$259>>2]|0;
          $261 = (($260) + ($257<<4)|0);
          $262 = (($261) + 8|0);
          HEAPF64[$262>>3] = -1.0;
         } else {
          $263 = $k1;
          $264 = $i1;
          $265 = (1280 + ($264<<2)|0);
          $266 = HEAP32[$265>>2]|0;
          $267 = (($266) + ($263<<4)|0);
          HEAP32[$267>>2] = 0;
          $268 = $k1;
          $269 = $i1;
          $270 = (1280 + ($269<<2)|0);
          $271 = HEAP32[$270>>2]|0;
          $272 = (($271) + ($268<<4)|0);
          $273 = (($272) + 8|0);
          HEAPF64[$273>>3] = 1.0;
         }
        }
       }
       $274 = $k1;
       $275 = (($274) + 2)|0;
       $k1 = $275;
      }
      $k1 = 0;
      $k = 0;
      while(1) {
       $276 = $k1;
       $277 = ($276|0)<(64);
       if (!($277)) {
        break;
       }
       $278 = $k1;
       $279 = (($sa_mark) + ($278)|0);
       $280 = HEAP8[$279>>0]|0;
       $281 = ($280<<24>>24)!=(0);
       if ($281) {
        $282 = $k;
        $283 = ($282|0)!=(0);
        if ($283) {
         $284 = HEAP32[41008>>2]|0;
         (_fprintf(($284|0),(70184|0),($vararg_buffer1|0))|0);
        } else {
         $285 = HEAP32[41008>>2]|0;
         $286 = $counter;
         $287 = (($286) + 1)|0;
         HEAP32[$vararg_buffer3>>2] = $287;
         (_fprintf(($285|0),(70192|0),($vararg_buffer3|0))|0);
        }
        $288 = $k1;
        $289 = $288 << 14;
        $290 = (4 + ($289))|0;
        (_list_var($290,0)|0);
        $291 = HEAP32[41008>>2]|0;
        HEAP32[$vararg_buffer6>>2] = 35800;
        (_fprintf(($291|0),(70224|0),($vararg_buffer6|0))|0);
        $292 = $k1;
        $293 = (($sa_value) + ($292)|0);
        $294 = HEAP8[$293>>0]|0;
        $295 = ($294<<24>>24)!=(0);
        if ($295) {
         $296 = HEAP32[41008>>2]|0;
         (_fprintf(($296|0),(70232|0),($vararg_buffer9|0))|0);
        } else {
         $297 = HEAP32[41008>>2]|0;
         (_fprintf(($297|0),(70240|0),($vararg_buffer11|0))|0);
        }
        $k = 1;
       }
       $298 = $k1;
       $299 = (($298) + 1)|0;
       $k1 = $299;
      }
      $300 = $k;
      $301 = ($300|0)!=(0);
      if ($301) {
       $302 = HEAP32[41008>>2]|0;
       (_fprintf(($302|0),(70248|0),($vararg_buffer13|0))|0);
      }
      $303 = $symb;
      HEAP32[41224>>2] = $303;
      $304 = $quickest_flag;
      $305 = ($304|0)!=(0);
      if ($305) {
       $306 = $i1;
       _simp_equation($306);
      } else {
       $307 = $i1;
       $308 = $quick_flag;
       $309 = $frac_flag;
       _simpa_repeat($307,$308,$309);
      }
      HEAP32[41224>>2] = 0;
      $k1 = 0;
      while(1) {
       $310 = $k1;
       $311 = ($310|0)<(200);
       if (!($311)) {
        break;
       }
       $312 = $k1;
       $313 = (($previous_solution_number) + ($312<<2)|0);
       $314 = HEAP32[$313>>2]|0;
       $315 = ($314|0)!=(0);
       if ($315) {
        $316 = $k1;
        $317 = $i1;
        $318 = (_compare_es($316,$317)|0);
        $319 = ($318|0)>(0);
        if ($319) {
         label = 104;
         break;
        }
       }
       $328 = $k1;
       $329 = (($328) + 1)|0;
       $k1 = $329;
      }
      if ((label|0) == 104) {
       label = 0;
       $320 = $i1;
       $321 = (2080 + ($320<<2)|0);
       HEAP32[$321>>2] = 0;
       $322 = $i1;
       $323 = (2880 + ($322<<2)|0);
       HEAP32[$323>>2] = 0;
       $324 = HEAP32[41008>>2]|0;
       $325 = $k1;
       $326 = (($previous_solution_number) + ($325<<2)|0);
       $327 = HEAP32[$326>>2]|0;
       HEAP32[$vararg_buffer15>>2] = $327;
       (_fprintf(($324|0),(70256|0),($vararg_buffer15|0))|0);
      }
      $330 = $i1;
      $331 = (2080 + ($330<<2)|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ($332|0)!=(0);
      if ($333) {
       $334 = $i1;
       (_list_sub($334)|0);
       $335 = $counter;
       $336 = (($335) + 1)|0;
       $337 = $i1;
       $338 = (($previous_solution_number) + ($337<<2)|0);
       HEAP32[$338>>2] = $336;
      }
      $339 = $counter;
      $340 = (($339) + 1)|0;
      $counter = $340;
     }
     $total_number_of_solutions = 0;
     $k1 = 0;
     while(1) {
      $341 = $k1;
      $342 = ($341|0)<(200);
      if (!($342)) {
       break;
      }
      $343 = $k1;
      $344 = (($previous_solution_number) + ($343<<2)|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = ($345|0)!=(0);
      if ($346) {
       $347 = $total_number_of_solutions;
       $348 = (($347) + 1)|0;
       $total_number_of_solutions = $348;
      }
      $349 = $k1;
      $350 = (($349) + 1)|0;
      $k1 = $350;
     }
     $351 = $total_number_of_solutions;
     $352 = ($351|0)>(0);
     if ($352) {
      $353 = $total_number_of_solutions;
      $354 = $number_simplified;
      $355 = (($354) + ($353))|0;
      $number_simplified = $355;
      $356 = HEAP32[41008>>2]|0;
      $357 = $total_number_of_solutions;
      $358 = $i;
      $359 = (($358) + 1)|0;
      HEAP32[$vararg_buffer18>>2] = $357;
      $vararg_ptr21 = (($vararg_buffer18) + 4|0);
      HEAP32[$vararg_ptr21>>2] = $359;
      (_fprintf(($356|0),(70296|0),($vararg_buffer18|0))|0);
     }
    }
   } while(0);
   $360 = $i;
   $361 = (($360) + 1)|0;
   $i = $361;
  }
  $362 = HEAP32[$1>>2]|0;
  $363 = HEAP8[$362>>0]|0;
  $364 = ($363<<24>>24)!=(0);
  if (!($364)) {
   label = 124;
   break;
  }
 }
 if ((label|0) == 16) {
  $0 = 0;
  $366 = $0;
  STACKTOP = sp;return ($366|0);
 }
 else if ((label|0) == 19) {
  _error(67544);
  $0 = 0;
  $366 = $0;
  STACKTOP = sp;return ($366|0);
 }
 else if ((label|0) == 28) {
  $0 = 0;
  $366 = $0;
  STACKTOP = sp;return ($366|0);
 }
 else if ((label|0) == 124) {
  $365 = $number_simplified;
  $0 = $365;
  $366 = $0;
  STACKTOP = sp;return ($366|0);
 }
 return 0|0;
}
function _factor_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count_down = 0, $cp1 = 0, $cp2 = 0, $cp_start = 0, $d = 0.0, $ed = 0.0, $first = 0;
 var $found = 0, $i1 = 0, $last = 0, $power_flag = 0, $rv = 0, $v = 0, $valid_range = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $1 = sp + 68|0;
 $first = sp + 64|0;
 $last = sp + 60|0;
 $v = sp + 44|0;
 HEAP32[$1>>2] = $cp;
 $rv = 1;
 $valid_range = 0;
 $power_flag = 0;
 $2 = HEAP32[$1>>2]|0;
 $cp_start = $2;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_strcmp_tospace($3,70376)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = (_skip_param($6)|0);
  HEAP32[$1>>2] = $7;
 } else {
  $8 = HEAP32[$1>>2]|0;
  $9 = (_strcmp_tospace($8,70384)|0);
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    HEAP32[41296>>2] = 1;
    $11 = HEAP32[$1>>2]|0;
    $12 = (_skip_param($11)|0);
    HEAP32[$1>>2] = $12;
   } else {
    $13 = HEAP32[$1>>2]|0;
    $14 = (_strcmp_tospace($13,70392)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $power_flag = 1;
     $16 = HEAP32[$1>>2]|0;
     $17 = (_skip_param($16)|0);
     HEAP32[$1>>2] = $17;
    }
    $18 = (_get_range($1,$first,$last)|0);
    $valid_range = $18;
    $19 = $valid_range;
    $20 = ($19|0)!=(0);
    if ($20) {
     break;
    }
    $0 = 0;
    $292 = $0;
    STACKTOP = sp;return ($292|0);
   }
  } while(0);
 }
 $21 = $valid_range;
 $22 = ($21|0)!=(0);
 if ($22) {
  $202 = $power_flag;
  $203 = ($202|0)!=(0);
  do {
   if ($203) {
    $204 = HEAP32[$1>>2]|0;
    $205 = (_extra_characters($204)|0);
    $206 = ($205|0)!=(0);
    if ($206) {
     $0 = 0;
     $292 = $0;
     STACKTOP = sp;return ($292|0);
    }
    $207 = HEAP32[$first>>2]|0;
    $i1 = $207;
    while(1) {
     $208 = $i1;
     $209 = HEAP32[$last>>2]|0;
     $210 = ($208|0)<=($209|0);
     if (!($210)) {
      label = 97;
      break;
     }
     $211 = $i1;
     $212 = (2080 + ($211<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)!=(0);
     if ($214) {
      while(1) {
       $215 = $i1;
       $216 = (480 + ($215<<2)|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $i1;
       $219 = (2080 + ($218<<2)|0);
       (_simp_loop($217,$219)|0);
       $220 = $i1;
       $221 = (480 + ($220<<2)|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = $i1;
       $224 = (2080 + ($223<<2)|0);
       $225 = (_factor_power($222,$224)|0);
       $226 = ($225|0)!=(0);
       if (!($226)) {
        break;
       }
      }
      $227 = $i1;
      $228 = (2880 + ($227<<2)|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = ($229|0)!=(0);
      if ($230) {
       while(1) {
        $231 = $i1;
        $232 = (1280 + ($231<<2)|0);
        $233 = HEAP32[$232>>2]|0;
        $234 = $i1;
        $235 = (2880 + ($234<<2)|0);
        (_simp_loop($233,$235)|0);
        $236 = $i1;
        $237 = (1280 + ($236<<2)|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = $i1;
        $240 = (2880 + ($239<<2)|0);
        $241 = (_factor_power($238,$240)|0);
        $242 = ($241|0)!=(0);
        if (!($242)) {
         break;
        }
       }
      }
      $243 = $i1;
      $244 = (_return_result($243)|0);
      $245 = ($244|0)!=(0);
      if (!($245)) {
       break;
      }
     }
     $246 = $i1;
     $247 = (($246) + 1)|0;
     $i1 = $247;
    }
    if ((label|0) == 97) {
     break;
    }
    $0 = 0;
    $292 = $0;
    STACKTOP = sp;return ($292|0);
   } else {
    while(1) {
     HEAP32[$v>>2] = 0;
     $248 = HEAP32[$1>>2]|0;
     $249 = HEAP8[$248>>0]|0;
     $250 = ($249<<24>>24)!=(0);
     if ($250) {
      $251 = HEAP32[$1>>2]|0;
      $252 = (_parse_var2($v,$251)|0);
      HEAP32[$1>>2] = $252;
      $253 = ($252|0)==(0|0);
      if ($253) {
       label = 101;
       break;
      }
     }
     $254 = HEAP32[$v>>2]|0;
     $255 = ($254|0)!=(0);
     if ($255) {
      $found = 0;
      $256 = HEAP32[$first>>2]|0;
      $i1 = $256;
      while(1) {
       $257 = $i1;
       $258 = HEAP32[$last>>2]|0;
       $259 = ($257|0)<=($258|0);
       if (!($259)) {
        break;
       }
       $260 = $i1;
       $261 = HEAP32[$v>>2]|0;
       $262 = (_var_in_equation($260,$261)|0);
       $263 = ($262|0)!=(0);
       if ($263) {
        label = 107;
        break;
       }
       $264 = $i1;
       $265 = (($264) + 1)|0;
       $i1 = $265;
      }
      if ((label|0) == 107) {
       label = 0;
       $found = 1;
      }
      $266 = $found;
      $267 = ($266|0)!=(0);
      if (!($267)) {
       _warning(70512);
      }
     }
     $268 = HEAP32[$first>>2]|0;
     $i1 = $268;
     while(1) {
      $269 = $i1;
      $270 = HEAP32[$last>>2]|0;
      $271 = ($269|0)<=($270|0);
      if (!($271)) {
       break;
      }
      $272 = $i1;
      $273 = HEAP32[$v>>2]|0;
      _simpv_equation($272,$273);
      $274 = $i1;
      $275 = (($274) + 1)|0;
      $i1 = $275;
     }
     $276 = HEAP32[$1>>2]|0;
     $277 = HEAP8[$276>>0]|0;
     $278 = ($277<<24>>24)!=(0);
     if (!($278)) {
      break;
     }
    }
    if ((label|0) == 101) {
     $0 = 0;
     $292 = $0;
     STACKTOP = sp;return ($292|0);
    }
    $279 = HEAP32[$first>>2]|0;
    $i1 = $279;
    while(1) {
     $280 = $i1;
     $281 = HEAP32[$last>>2]|0;
     $282 = ($280|0)<=($281|0);
     if (!($282)) {
      label = 127;
      break;
     }
     $283 = $i1;
     $284 = (2080 + ($283<<2)|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ($285|0)!=(0);
     if ($286) {
      $287 = $i1;
      $288 = (_return_result($287)|0);
      $289 = ($288|0)!=(0);
      if (!($289)) {
       break;
      }
     }
     $290 = $i1;
     $291 = (($290) + 1)|0;
     $i1 = $291;
    }
    if ((label|0) == 127) {
     break;
    }
    $0 = 0;
    $292 = $0;
    STACKTOP = sp;return ($292|0);
   }
  } while(0);
  $0 = 1;
  $292 = $0;
  STACKTOP = sp;return ($292|0);
 }
 HEAP32[41296>>2] = 0;
 L93: while(1) {
  $23 = HEAP32[$1>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(0);
  if ($26) {
   label = 14;
   break;
  }
  $27 = HEAP32[$1>>2]|0;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = ($29|0)==(0);
  if ($30) {
   label = 17;
   break;
  }
  $rv = 1;
  while(1) {
   $31 = HEAP32[$1>>2]|0;
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)!=(0);
   if (!($33)) {
    break;
   }
   $34 = HEAP32[$1>>2]|0;
   $35 = (_skip_space($34)|0);
   HEAP32[$1>>2] = $35;
   $cp1 = $35;
   $36 = (___errno_location()|0);
   HEAP32[$36>>2] = 0;
   $37 = HEAP32[$1>>2]|0;
   $38 = (+_strtod($37,$1));
   $d = $38;
   $ed = $38;
   $39 = HEAP32[$1>>2]|0;
   $40 = $cp1;
   $41 = ($39|0)==($40|0);
   L100: do {
    if ($41) {
     label = 27;
    } else {
     $42 = (___errno_location()|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)!=(0);
     if ($44) {
      label = 27;
     } else {
      do {
       if (0) {
        $45 = $d;
        $46 = $45;
        $47 = (___FLOAT_BITS784($46)|0);
        $48 = $47 & 2147483647;
        $49 = ($48>>>0)<(2139095040);
        if (!($49)) {
         label = 27;
         break L100;
        }
       } else {
        if (1) {
         $50 = $d;
         $51 = (___DOUBLE_BITS785($50)|0);
         $52 = tempRet0;
         $53 = $52 & 2147483647;
         $54 = ($53>>>0)<(2146435072);
         $55 = ($53|0)==(2146435072);
         $56 = ($51>>>0)<(0);
         $57 = $55 & $56;
         $58 = $54 | $57;
         if ($58) {
          break;
         } else {
          label = 27;
          break L100;
         }
        } else {
         $59 = $d;
         $60 = (___fpclassifyl((+$59))|0);
         $61 = ($60|0)>(1);
         if ($61) {
          break;
         } else {
          label = 27;
          break L100;
         }
        }
       }
      } while(0);
      $62 = HEAP32[$1>>2]|0;
      $63 = (_skip_space($62)|0);
      HEAP32[$1>>2] = $63;
      $64 = HEAP32[$1>>2]|0;
      $65 = HEAP8[$64>>0]|0;
      $66 = $65 << 24 >> 24;
      $67 = ($66|0)!=(0);
      if ($67) {
       $68 = HEAP32[$1>>2]|0;
       $69 = HEAP8[$68>>0]|0;
       $70 = $69 << 24 >> 24;
       $71 = (_isdigit($70)|0);
       $72 = ($71|0)!=(0);
       if (!($72)) {
        $73 = HEAP32[$1>>2]|0;
        $74 = HEAP8[$73>>0]|0;
        $75 = $74 << 24 >> 24;
        $76 = ($75|0)==(45);
        if (!($76)) {
         label = 44;
         break;
        }
        $77 = HEAP32[$1>>2]|0;
        $78 = (($77) + 1|0);
        HEAP32[$1>>2] = $78;
        $79 = (_skip_space($78)|0);
        HEAP32[$1>>2] = $79;
        $cp2 = $79;
        $80 = (___errno_location()|0);
        HEAP32[$80>>2] = 0;
        $81 = HEAP32[$1>>2]|0;
        $82 = (+_strtod($81,$1));
        $ed = $82;
        $83 = HEAP32[$1>>2]|0;
        $84 = $cp2;
        $85 = ($83|0)==($84|0);
        L115: do {
         if (!($85)) {
          $86 = (___errno_location()|0);
          $87 = HEAP32[$86>>2]|0;
          $88 = ($87|0)!=(0);
          if (!($88)) {
           do {
            if (0) {
             $89 = $ed;
             $90 = $89;
             $91 = (___FLOAT_BITS784($90)|0);
             $92 = $91 & 2147483647;
             $93 = ($92>>>0)<(2139095040);
             if (!($93)) {
              break L115;
             }
            } else {
             if (1) {
              $94 = $ed;
              $95 = (___DOUBLE_BITS785($94)|0);
              $96 = tempRet0;
              $97 = $96 & 2147483647;
              $98 = ($97>>>0)<(2146435072);
              $99 = ($97|0)==(2146435072);
              $100 = ($95>>>0)<(0);
              $101 = $99 & $100;
              $102 = $98 | $101;
              if ($102) {
               break;
              } else {
               break L115;
              }
             } else {
              $103 = $ed;
              $104 = (___fpclassifyl((+$103))|0);
              $105 = ($104|0)>(1);
              if ($105) {
               break;
              } else {
               break L115;
              }
             }
            }
           } while(0);
           $106 = HEAP32[$1>>2]|0;
           $107 = HEAP8[$106>>0]|0;
           $108 = $107 << 24 >> 24;
           $109 = ($108|0)!=(0);
           do {
            if ($109) {
             $110 = HEAP32[$1>>2]|0;
             $111 = HEAP8[$110>>0]|0;
             $112 = $111 << 24 >> 24;
             $113 = ($112|0)!=(44);
             if (!($113)) {
              break;
             }
             $114 = HEAP32[$1>>2]|0;
             $115 = HEAP8[$114>>0]|0;
             $116 = $115 << 24 >> 24;
             $117 = (_isspace($116)|0);
             $118 = ($117|0)!=(0);
             if (!($118)) {
              break L115;
             }
            }
           } while(0);
           label = 57;
           break L100;
          }
         }
        } while(0);
        label = 44;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 27) {
    label = 0;
    label = 44;
   }
   if ((label|0) == 44) {
    label = 0;
    $119 = $cp1;
    $120 = $cp_start;
    $121 = $119;
    $122 = $120;
    $123 = (($121) - ($122))|0;
    $124 = HEAP32[41240>>2]|0;
    $125 = (($124) + ($123))|0;
    HEAP32[41240>>2] = $125;
    $126 = HEAP32[3696>>2]|0;
    $127 = $cp1;
    $128 = (_parse_expr($126,3728,$127,0)|0);
    HEAP32[$1>>2] = $128;
    $129 = HEAP32[$1>>2]|0;
    $130 = ($129|0)==(0|0);
    if ($130) {
     label = 45;
     break L93;
    }
    $131 = HEAP32[$1>>2]|0;
    $cp_start = $131;
    $132 = HEAP32[3728>>2]|0;
    $133 = ($132|0)<=(0);
    if ($133) {
     label = 47;
     break L93;
    }
    $135 = HEAP32[3696>>2]|0;
    _calc_simp($135,3728);
    $136 = HEAP32[3728>>2]|0;
    $137 = ($136|0)!=(1);
    if ($137) {
     label = 55;
     break L93;
    }
    $138 = HEAP32[3696>>2]|0;
    $139 = HEAP32[$138>>2]|0;
    $140 = ($139|0)!=(0);
    if ($140) {
     label = 55;
     break L93;
    }
    do {
     if (0) {
      $141 = HEAP32[3696>>2]|0;
      $142 = (($141) + 8|0);
      $143 = +HEAPF64[$142>>3];
      $144 = $143;
      $145 = (___FLOAT_BITS784($144)|0);
      $146 = $145 & 2147483647;
      $147 = ($146>>>0)<(2139095040);
      if (!($147)) {
       label = 55;
       break L93;
      }
     } else {
      if (1) {
       $148 = HEAP32[3696>>2]|0;
       $149 = (($148) + 8|0);
       $150 = +HEAPF64[$149>>3];
       $151 = (___DOUBLE_BITS785($150)|0);
       $152 = tempRet0;
       $153 = $152 & 2147483647;
       $154 = ($153>>>0)<(2146435072);
       $155 = ($153|0)==(2146435072);
       $156 = ($151>>>0)<(0);
       $157 = $155 & $156;
       $158 = $154 | $157;
       if ($158) {
        break;
       } else {
        label = 55;
        break L93;
       }
      } else {
       $159 = HEAP32[3696>>2]|0;
       $160 = (($159) + 8|0);
       $161 = +HEAPF64[$160>>3];
       $162 = (___fpclassifyl((+$161))|0);
       $163 = ($162|0)>(1);
       if ($163) {
        break;
       } else {
        label = 55;
        break L93;
       }
      }
     }
    } while(0);
    $164 = HEAP32[3696>>2]|0;
    $165 = (($164) + 8|0);
    $166 = +HEAPF64[$165>>3];
    $d = $166;
    $ed = $166;
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
   }
   $167 = HEAP32[$1>>2]|0;
   $168 = (_skip_comma_space($167)|0);
   HEAP32[$1>>2] = $168;
   $169 = $ed;
   $170 = $d;
   $171 = $169 < $170;
   $172 = $171&1;
   $count_down = $172;
   while(1) {
    $173 = $count_down;
    $174 = ($173|0)!=(0);
    if ($174) {
     $175 = $d;
     $176 = $ed;
     $177 = $175 >= $176;
     $178 = $177&1;
     $183 = $178;
    } else {
     $179 = $d;
     $180 = $ed;
     $181 = $179 <= $180;
     $182 = $181&1;
     $183 = $182;
    }
    $184 = ($183|0)!=(0);
    if (!($184)) {
     break;
    }
    $185 = $d;
    $186 = $185 == 0.0;
    if ($186) {
     $187 = HEAP32[41008>>2]|0;
     (_fprintf(($187|0),(70424|0),($vararg_buffer|0))|0);
    } else {
     $188 = $d;
     $189 = (_factor_one($188)|0);
     $190 = ($189|0)!=(0);
     if (!($190)) {
      label = 66;
      break;
     }
     $191 = (_display_unique()|0);
     $192 = ($191|0)!=(0);
     if (!($192)) {
      $rv = 0;
     }
    }
    $193 = $count_down;
    $194 = ($193|0)!=(0);
    if ($194) {
     $195 = $d;
     $196 = $195 - 1.0;
     $d = $196;
    } else {
     $197 = $d;
     $198 = $197 + 1.0;
     $d = $198;
    }
   }
   if ((label|0) == 66) {
    label = 0;
    _error(70464);
    $rv = 0;
   }
  }
  $199 = HEAP32[41296>>2]|0;
  $200 = ($199|0)!=(0);
  if (!($200)) {
   label = 77;
   break;
  }
 }
 if ((label|0) == 14) {
 }
 else if ((label|0) == 17) {
  $0 = 1;
  $292 = $0;
  STACKTOP = sp;return ($292|0);
 }
 else if ((label|0) == 45) {
 }
 else if ((label|0) == 47) {
  $134 = $rv;
  $0 = $134;
  $292 = $0;
  STACKTOP = sp;return ($292|0);
 }
 else if ((label|0) == 55) {
  _error(70400);
 }
 else if ((label|0) == 77) {
  $201 = $rv;
  $0 = $201;
  $292 = $0;
  STACKTOP = sp;return ($292|0);
 }
 $0 = 0;
 $292 = $0;
 STACKTOP = sp;return ($292|0);
}
function ___FLOAT_BITS784($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS785($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _display_term_count($en) {
 $en = $en|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left_count = 0;
 var $right_count = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $en;
 $left_count = 0;
 $right_count = 0;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $1;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $11 = $1;
    $12 = (480 + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $1;
    $15 = (2080 + ($14<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (_level1_plus_count($13,$16)|0);
    $18 = (($17) + 1)|0;
    $left_count = $18;
    $19 = $1;
    $20 = (2880 + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)!=(0);
    if ($22) {
     $23 = $1;
     $24 = (1280 + ($23<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $1;
     $27 = (2880 + ($26<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (_level1_plus_count($25,$28)|0);
     $30 = (($29) + 1)|0;
     $right_count = $30;
     $31 = HEAP32[41008>>2]|0;
     $32 = $1;
     $33 = (($32) + 1)|0;
     $34 = $left_count;
     $35 = $left_count;
     $36 = ($35|0)==(1);
     $37 = $36 ? 70584 : 70592;
     HEAP32[$vararg_buffer>>2] = $33;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $34;
     $vararg_ptr2 = (($vararg_buffer) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $37;
     (_fprintf(($31|0),(70544|0),($vararg_buffer|0))|0);
     $38 = HEAP32[41008>>2]|0;
     $39 = $right_count;
     $40 = $right_count;
     $41 = ($40|0)==(1);
     $42 = $41 ? 70584 : 70592;
     HEAP32[$vararg_buffer3>>2] = $39;
     $vararg_ptr6 = (($vararg_buffer3) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $42;
     (_fprintf(($38|0),(70600|0),($vararg_buffer3|0))|0);
    } else {
     $43 = HEAP32[41008>>2]|0;
     $44 = $1;
     $45 = (($44) + 1)|0;
     HEAP32[$vararg_buffer7>>2] = $45;
     (_fprintf(($43|0),(70632|0),($vararg_buffer7|0))|0);
    }
    $46 = HEAP32[41008>>2]|0;
    $47 = $left_count;
    $48 = $right_count;
    $49 = (($47) + ($48))|0;
    $50 = $left_count;
    $51 = $right_count;
    $52 = (($50) + ($51))|0;
    $53 = ($52|0)==(1);
    $54 = $53 ? 70584 : 70592;
    HEAP32[$vararg_buffer10>>2] = $49;
    $vararg_ptr13 = (($vararg_buffer10) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $54;
    (_fprintf(($46|0),(70640|0),($vararg_buffer10|0))|0);
    $55 = $left_count;
    $56 = $right_count;
    $57 = (($55) + ($56))|0;
    $0 = $57;
    $58 = $0;
    STACKTOP = sp;return ($58|0);
   }
  }
 }
 $0 = 0;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _unfactor_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count_flag = 0, $first = 0, $fraction_flag = 0, $k = 0, $last = 0, $power_flag = 0, $quick_flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 28|0;
 $first = sp + 24|0;
 $last = sp + 20|0;
 HEAP32[$1>>2] = $cp;
 $quick_flag = 0;
 $fraction_flag = 0;
 $power_flag = 0;
 $count_flag = 0;
 L1: while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = (_strncasecmp($2,70120,4)|0);
  $4 = ($3|0)==(0);
  do {
   if ($4) {
    $quick_flag = 1;
   } else {
    $5 = HEAP32[$1>>2]|0;
    $6 = (_strncasecmp($5,70128,4)|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (_strncasecmp($8,70688,4)|0);
     $10 = ($9|0)==(0);
     if (!($10)) {
      $11 = HEAP32[$1>>2]|0;
      $12 = (_strncasecmp($11,70392,4)|0);
      $13 = ($12|0)==(0);
      if ($13) {
       $power_flag = 1;
       break;
      }
      $14 = HEAP32[$1>>2]|0;
      $15 = (_strncasecmp($14,70696,4)|0);
      $16 = ($15|0)==(0);
      if (!($16)) {
       break L1;
      }
      $count_flag = 1;
      break;
     }
    }
    $fraction_flag = 1;
   }
  } while(0);
  $17 = HEAP32[$1>>2]|0;
  $18 = (_skip_param($17)|0);
  HEAP32[$1>>2] = $18;
 }
 $19 = (_get_range_eol($1,$first,$last)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $0 = 0;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $21 = $fraction_flag;
 $22 = ($21|0)!=(0);
 $23 = $22 ^ 1;
 $24 = $23&1;
 HEAP32[41216>>2] = $24;
 $25 = $power_flag;
 $26 = ($25|0)!=(0);
 do {
  if ($26) {
   $27 = HEAP32[$first>>2]|0;
   $k = $27;
   while(1) {
    $28 = $k;
    $29 = HEAP32[$last>>2]|0;
    $30 = ($28|0)<=($29|0);
    if (!($30)) {
     label = 34;
     break;
    }
    $31 = $k;
    $32 = (2080 + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)<=(0);
    if ($34) {
    } else {
     $35 = $quick_flag;
     $36 = ($35|0)!=(0);
     if ($36) {
      $37 = $k;
      $38 = (480 + ($37<<2)|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $k;
      $41 = (2080 + ($40<<2)|0);
      (_uf_power($39,$41)|0);
     } else {
      $42 = $k;
      $43 = (480 + ($42<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = $k;
      $46 = (2080 + ($45<<2)|0);
      _uf_allpower($44,$46);
     }
     $47 = $k;
     $48 = (480 + ($47<<2)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $k;
     $51 = (2080 + ($50<<2)|0);
     _elim_loop($49,$51);
     $52 = $k;
     $53 = (2880 + ($52<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)!=(0);
     if ($55) {
      $56 = $quick_flag;
      $57 = ($56|0)!=(0);
      if ($57) {
       $58 = $k;
       $59 = (1280 + ($58<<2)|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = $k;
       $62 = (2880 + ($61<<2)|0);
       (_uf_power($60,$62)|0);
      } else {
       $63 = $k;
       $64 = (1280 + ($63<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $k;
       $67 = (2880 + ($66<<2)|0);
       _uf_allpower($65,$67);
      }
      $68 = $k;
      $69 = (1280 + ($68<<2)|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $k;
      $72 = (2880 + ($71<<2)|0);
      _elim_loop($70,$72);
     }
     $73 = $k;
     $74 = (_return_result($73)|0);
     $75 = ($74|0)!=(0);
     if (!($75)) {
      break;
     }
     $76 = $count_flag;
     $77 = ($76|0)!=(0);
     if ($77) {
      $78 = $k;
      (_display_term_count($78)|0);
     }
    }
    $79 = $k;
    $80 = (($79) + 1)|0;
    $k = $80;
   }
   if ((label|0) == 34) {
    break;
   }
   HEAP32[41216>>2] = 1;
   $0 = 0;
   $127 = $0;
   STACKTOP = sp;return ($127|0);
  } else {
   $81 = HEAP32[$first>>2]|0;
   $k = $81;
   while(1) {
    $82 = $k;
    $83 = HEAP32[$last>>2]|0;
    $84 = ($82|0)<=($83|0);
    if (!($84)) {
     label = 52;
     break;
    }
    $85 = $k;
    $86 = (2080 + ($85<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)<=(0);
    if ($88) {
    } else {
     $89 = $quick_flag;
     $90 = ($89|0)!=(0);
     if ($90) {
      $91 = $k;
      $92 = (480 + ($91<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $k;
      $95 = (2080 + ($94<<2)|0);
      (_uf_tsimp($93,$95)|0);
      $96 = $k;
      $97 = (2880 + ($96<<2)|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)!=(0);
      if ($99) {
       $100 = $k;
       $101 = (1280 + ($100<<2)|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $k;
       $104 = (2880 + ($103<<2)|0);
       (_uf_tsimp($102,$104)|0);
      }
     } else {
      $105 = $k;
      $106 = (480 + ($105<<2)|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = $k;
      $109 = (2080 + ($108<<2)|0);
      _uf_simp($107,$109);
      $110 = $k;
      $111 = (2880 + ($110<<2)|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($112|0)!=(0);
      if ($113) {
       $114 = $k;
       $115 = (1280 + ($114<<2)|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = $k;
       $118 = (2880 + ($117<<2)|0);
       _uf_simp($116,$118);
      }
     }
     $119 = $k;
     $120 = (_return_result($119)|0);
     $121 = ($120|0)!=(0);
     if (!($121)) {
      break;
     }
     $122 = $count_flag;
     $123 = ($122|0)!=(0);
     if ($123) {
      $124 = $k;
      (_display_term_count($124)|0);
     }
    }
    $125 = $k;
    $126 = (($125) + 1)|0;
    $k = $126;
   }
   if ((label|0) == 52) {
    break;
   }
   HEAP32[41216>>2] = 1;
   $0 = 0;
   $127 = $0;
   STACKTOP = sp;return ($127|0);
  }
 } while(0);
 HEAP32[41216>>2] = 1;
 $0 = 1;
 $127 = $0;
 STACKTOP = sp;return ($127|0);
}
function _div_loc_find($expression,$n) {
 $expression = $expression|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div_loc = 0, $k = 0, $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $expression;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 $4 = (_min_level($2,$3)|0);
 $level = $4;
 $k = 1;
 $div_loc = -1;
 while(1) {
  $5 = $k;
  $6 = $1;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $k;
  $9 = $0;
  $10 = (($9) + ($8<<4)|0);
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $level;
  $14 = ($12|0)==($13|0);
  if ($14) {
   $15 = $k;
   $16 = $0;
   $17 = (($16) + ($15<<4)|0);
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(5);
   if ($20) {
    $21 = $div_loc;
    $22 = ($21|0)>=(0);
    if ($22) {
     _error_bug(70704);
    }
    $23 = $k;
    $div_loc = $23;
   }
  }
  $24 = $k;
  $25 = (($24) + 2)|0;
  $k = $25;
 }
 $26 = $div_loc;
 STACKTOP = sp;return ($26|0);
}
function _fraction_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $den_flag = 0, $div_loc = 0, $first = 0, $i = 0, $last = 0, $num_flag = 0, $was_fraction = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 28|0;
 $first = sp + 16|0;
 $last = sp + 12|0;
 HEAP32[$1>>2] = $cp;
 $num_flag = 0;
 $den_flag = 0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = (_strncasecmp($2,70728,3)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $num_flag = 1;
  } else {
   $5 = HEAP32[$1>>2]|0;
   $6 = (_strncasecmp($5,70744,3)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    break;
   }
   $den_flag = 1;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = (_skip_param($8)|0);
  HEAP32[$1>>2] = $9;
 }
 $10 = (_get_range_eol($1,$first,$last)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $0 = 0;
  $131 = $0;
  STACKTOP = sp;return ($131|0);
 }
 HEAP32[41304>>2] = 0;
 $12 = HEAP32[$first>>2]|0;
 $i = $12;
 while(1) {
  $13 = $i;
  $14 = HEAP32[$last>>2]|0;
  $15 = ($13|0)<=($14|0);
  if (!($15)) {
   label = 44;
   break;
  }
  $16 = $i;
  $17 = (2080 + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  if ($19) {
   $was_fraction = 0;
   $20 = $i;
   $21 = (480 + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $i;
   $24 = (2080 + ($23<<2)|0);
   _simple_frac_repeat_side($22,$24);
   $25 = $i;
   $26 = (480 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $i;
   $29 = (2080 + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_div_loc_find($27,$30)|0);
   $div_loc = $31;
   $32 = $div_loc;
   $33 = ($32|0)>(0);
   if ($33) {
    $was_fraction = 1;
    $34 = $num_flag;
    $35 = ($34|0)!=(0);
    if ($35) {
     $36 = $den_flag;
     $37 = ($36|0)!=(0);
     if ($37) {
      label = 17;
     } else {
      $38 = $div_loc;
      $39 = $i;
      $40 = (2080 + ($39<<2)|0);
      HEAP32[$40>>2] = $38;
     }
    } else {
     label = 17;
    }
    if ((label|0) == 17) {
     label = 0;
     $41 = $den_flag;
     $42 = ($41|0)!=(0);
     if ($42) {
      $43 = $num_flag;
      $44 = ($43|0)!=(0);
      if (!($44)) {
       $45 = $i;
       $46 = (480 + ($45<<2)|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = $div_loc;
       $49 = (($48) + 1)|0;
       $50 = $i;
       $51 = (480 + ($50<<2)|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($52) + ($49<<4)|0);
       $54 = $i;
       $55 = (2080 + ($54<<2)|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $div_loc;
       $58 = (($57) + 1)|0;
       $59 = (($56) - ($58))|0;
       $60 = $59<<4;
       _memmove(($47|0),($53|0),($60|0))|0;
       $61 = $div_loc;
       $62 = (($61) + 1)|0;
       $63 = $i;
       $64 = (2080 + ($63<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) - ($62))|0;
       HEAP32[$64>>2] = $66;
      }
     }
    }
   }
   $67 = $i;
   $68 = (2880 + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $i;
    $72 = (1280 + ($71<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $i;
    $75 = (2880 + ($74<<2)|0);
    _simple_frac_repeat_side($73,$75);
    $76 = $i;
    $77 = (1280 + ($76<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $i;
    $80 = (2880 + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (_div_loc_find($78,$81)|0);
    $div_loc = $82;
    $83 = $div_loc;
    $84 = ($83|0)>(0);
    if ($84) {
     $was_fraction = 1;
     $85 = $num_flag;
     $86 = ($85|0)!=(0);
     if ($86) {
      $87 = $den_flag;
      $88 = ($87|0)!=(0);
      if ($88) {
       label = 27;
      } else {
       $89 = $div_loc;
       $90 = $i;
       $91 = (2880 + ($90<<2)|0);
       HEAP32[$91>>2] = $89;
      }
     } else {
      label = 27;
     }
     if ((label|0) == 27) {
      label = 0;
      $92 = $den_flag;
      $93 = ($92|0)!=(0);
      if ($93) {
       $94 = $num_flag;
       $95 = ($94|0)!=(0);
       if (!($95)) {
        $96 = $i;
        $97 = (1280 + ($96<<2)|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = $div_loc;
        $100 = (($99) + 1)|0;
        $101 = $i;
        $102 = (1280 + ($101<<2)|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = (($103) + ($100<<4)|0);
        $105 = $i;
        $106 = (2880 + ($105<<2)|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = $div_loc;
        $109 = (($108) + 1)|0;
        $110 = (($107) - ($109))|0;
        $111 = $110<<4;
        _memmove(($98|0),($104|0),($111|0))|0;
        $112 = $div_loc;
        $113 = (($112) + 1)|0;
        $114 = $i;
        $115 = (2880 + ($114<<2)|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = (($116) - ($113))|0;
        HEAP32[$115>>2] = $117;
       }
      }
     }
    }
   }
   $118 = $num_flag;
   $119 = ($118|0)!=(0);
   if ($119) {
    label = 35;
   } else {
    $120 = $den_flag;
    $121 = ($120|0)!=(0);
    if ($121) {
     label = 35;
    }
   }
   if ((label|0) == 35) {
    label = 0;
    $122 = $was_fraction;
    $123 = ($122|0)!=(0);
    if (!($123)) {
     _warning(70760);
     $124 = $den_flag;
     $125 = ($124|0)!=(0);
     if ($125) {
      label = 37;
      break;
     }
    }
   }
   $126 = $i;
   $127 = (_return_result($126)|0);
   $128 = ($127|0)!=(0);
   if (!($128)) {
    label = 40;
    break;
   }
  }
  $129 = $i;
  $130 = (($129) + 1)|0;
  $i = $130;
 }
 if ((label|0) == 37) {
  _error(70808);
  $0 = 0;
  $131 = $0;
  STACKTOP = sp;return ($131|0);
 }
 else if ((label|0) == 40) {
  $0 = 0;
  $131 = $0;
  STACKTOP = sp;return ($131|0);
 }
 else if ((label|0) == 44) {
  $0 = 1;
  $131 = $0;
  STACKTOP = sp;return ($131|0);
 }
 return 0|0;
}
function _read_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cp;
 $2 = HEAP32[41288>>2]|0;
 $3 = ($2|0)>=(3);
 do {
  if ($3) {
   HEAP32[41304>>2] = 0;
   _error(70840);
   $0 = 0;
  } else {
   $4 = HEAP32[41296>>2]|0;
   $5 = ($4|0)!=(0);
   if ($5) {
    $6 = $1;
    $7 = HEAP8[$6>>0]|0;
    $8 = $7 << 24 >> 24;
    $9 = ($8|0)==(0);
    if (!($9)) {
     while(1) {
      $12 = $1;
      $13 = (_read_file($12)|0);
      $rv = $13;
      $14 = $rv;
      $15 = ($14|0)!=(0);
      if (!($15)) {
       break;
      }
     }
     $16 = $rv;
     $0 = $16;
     break;
    }
   }
   $10 = $1;
   $11 = (_read_file($10)|0);
   $0 = $11;
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _read_file($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $fp = 0, $rv = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $1 = $cp;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(0);
 if ($5) {
  _error(70880);
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $6 = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $7 = (_snprintf($buf,4096,70904,$vararg_buffer)|0);
 $8 = ($7>>>0)>=(4096);
 if ($8) {
  _error(70912);
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $9 = (_fopen(($buf|0),(70936|0))|0);
 $fp = $9;
 $10 = $fp;
 $11 = ($10|0)==(0|0);
 do {
  if ($11) {
   $12 = $1;
   $13 = (_strlen(($12|0))|0);
   $14 = (($buf) + ($13)|0);
   HEAP8[$14>>0] = 0;
   $15 = (_fopen(($buf|0),(70936|0))|0);
   $fp = $15;
   $16 = $fp;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    break;
   }
   $18 = (_chdir(($buf|0))|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    _error(70944);
    $0 = 0;
    $33 = $0;
    STACKTOP = sp;return ($33|0);
   } else {
    (_printf((65136|0),($vararg_buffer1|0))|0);
    $20 = HEAP32[_stdout>>2]|0;
    $21 = (_output_current_directory($20)|0);
    $0 = $21;
    $33 = $0;
    STACKTOP = sp;return ($33|0);
   }
  }
 } while(0);
 $22 = $fp;
 $23 = (_read_sub($22,$buf)|0);
 $rv = $23;
 HEAP32[41304>>2] = 0;
 $24 = $fp;
 $25 = (_fclose(($24|0))|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  _perror(($buf|0));
  $rv = 1;
 }
 $27 = $rv;
 $28 = ($27|0)==(100);
 if ($28) {
  $0 = 1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $29 = $rv;
  $30 = ($29|0)!=(0);
  $31 = $30 ^ 1;
  $32 = $31&1;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return 0|0;
}
function _read_sub($fp,$filename) {
 $fp = $fp|0;
 $filename = $filename|0;
 var $$0 = 0, $$reg2mem35$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv$0 = 0, $rv$1 = 0, $rv$2 = 0, $save_save = 0, $something_there$0 = 0, $something_there$0$phi = 0, $something_there$1 = 0, $something_there$2 = 0, $vararg_buffer = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $save_save = sp + 4|0;
 $0 = ($fp|0)==(0|0);
 if ($0) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 _memmove(($save_save|0),(41032|0),156)|0;
 _saveSetjmp(41032,1,_setjmpTable|0)|0;
 __THREW__ = 0;
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = threwValue; } else { $2 = -1; };
 $3 = tempRet0;
 if ((($2|0) == 1)) {
  $$reg2mem35$0 = $3;$something_there$0 = 0;
 } else {
  $$reg2mem35$0 = 0;$something_there$0 = 0;
 }
 L7: while(1) {
  $4 = ($$reg2mem35$0|0)!=(0);
  if ($4) {
   __THREW__ = 0;
   invoke_v(41);
   $5 = __THREW__; __THREW__ = 0;
   if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = threwValue; } else { $6 = -1; };
   $7 = tempRet0;
   if ((($6|0) == 1)) {
    $something_there$0$phi = $something_there$0;$$reg2mem35$0 = $7;$something_there$0 = $something_there$0$phi;
    continue;
   }
   $8 = ($$reg2mem35$0|0)==(14);
   if (!($8)) {
    label = 10;
    break;
   }
   __THREW__ = 0;
   invoke_vi(39,(71008|0));
   $9 = __THREW__; __THREW__ = 0;
   if ((($9|0) != 0) & ((threwValue|0) != 0)) { $10 = _testSetjmp(HEAP32[$9>>2]|0, _setjmpTable)|0; if (($10|0) == 0) { _longjmp($9|0, threwValue|0); } tempRet0 = threwValue; } else { $10 = -1; };
   $11 = tempRet0;
   if ((($10|0) == 1)) {
    $something_there$0$phi = $something_there$0;$$reg2mem35$0 = $11;$something_there$0 = $something_there$0$phi;
    continue;
   } else {
    label = 9;
    break;
   }
  }
  $something_there$1 = $something_there$0;
  while(1) {
   $12 = HEAP32[3680>>2]|0;
   $13 = HEAP32[8>>2]|0;
   $14 = $13<<4;
   __THREW__ = 0;
   $15 = (invoke_iiii(55,($12|0),($14|0),($fp|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
   $18 = tempRet0;
   if ((($17|0) == 1)) {
    $$reg2mem35$0 = $18;$something_there$0 = $something_there$1;
    continue L7;
   }
   $19 = ($15|0)!=(0|0);
   if (!($19)) {
    break;
   }
   $20 = HEAP8[$15>>0]|0;
   $21 = ($20<<24>>24)!=(0);
   if ($21) {
    $something_there$2 = 1;
   } else {
    $something_there$2 = $something_there$1;
   }
   __THREW__ = 0;
   $22 = (invoke_ii(56,($15|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
   $25 = tempRet0;
   if ((($24|0) == 1)) {
    $$reg2mem35$0 = $25;$something_there$0 = $something_there$2;
    continue L7;
   }
   $26 = ($22|0)!=(0);
   if (!($26)) {
    label = 18;
    break;
   }
   $something_there$1 = $something_there$2;
  }
  if ((label|0) == 18) {
   label = 0;
   __THREW__ = 0;
   invoke_vii(57,(41032|0),3);
   $27 = __THREW__; __THREW__ = 0;
   if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = threwValue; } else { $28 = -1; };
   $29 = tempRet0;
   if ((($28|0) == 1)) {
    $$reg2mem35$0 = $29;$something_there$0 = $something_there$2;
    continue;
   } else {
    label = 19;
    break;
   }
  }
  $30 = ($something_there$1|0)!=(0);
  if ($30) {
   $rv$1 = $$reg2mem35$0;
   label = 30;
   break;
  }
  __THREW__ = 0;
  $31 = (invoke_ii(58,($filename|0))|0);
  $32 = __THREW__; __THREW__ = 0;
  if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = threwValue; } else { $33 = -1; };
  $34 = tempRet0;
  if ((($33|0) == 1)) {
   $$reg2mem35$0 = $34;$something_there$0 = $something_there$1;
   continue;
  }
  $35 = ($31|0)!=(0);
  if ($35) {
   __THREW__ = 0;
   invoke_vi(39,(71032|0));
   $36 = __THREW__; __THREW__ = 0;
   if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = threwValue; } else { $37 = -1; };
   $38 = tempRet0;
   if ((($37|0) == 1)) {
    $$reg2mem35$0 = $38;$something_there$0 = $something_there$1;
    continue;
   } else {
    label = 25;
    break;
   }
  }
  __THREW__ = 0;
  (invoke_iii(40,(71064|0),($vararg_buffer|0))|0);
  $39 = __THREW__; __THREW__ = 0;
  if ((($39|0) != 0) & ((threwValue|0) != 0)) { $40 = _testSetjmp(HEAP32[$39>>2]|0, _setjmpTable)|0; if (($40|0) == 0) { _longjmp($39|0, threwValue|0); } tempRet0 = threwValue; } else { $40 = -1; };
  $41 = tempRet0;
  if ((($40|0) == 1)) {
   $$reg2mem35$0 = $41;$something_there$0 = $something_there$1;
   continue;
  }
  $42 = HEAP32[_stdout>>2]|0;
  __THREW__ = 0;
  (invoke_ii(59,($42|0))|0);
  $43 = __THREW__; __THREW__ = 0;
  if ((($43|0) != 0) & ((threwValue|0) != 0)) { $44 = _testSetjmp(HEAP32[$43>>2]|0, _setjmpTable)|0; if (($44|0) == 0) { _longjmp($43|0, threwValue|0); } tempRet0 = threwValue; } else { $44 = -1; };
  $45 = tempRet0;
  if ((($44|0) == 1)) {
   $$reg2mem35$0 = $45;$something_there$0 = $something_there$1;
  } else {
   label = 28;
   break;
  }
 }
 if ((label|0) == 9) {
  label = 10;
 }
 else if ((label|0) == 19) {
  // unreachable;
 }
 else if ((label|0) == 25) {
  $rv$0 = 1;
  label = 29;
 }
 else if ((label|0) == 28) {
  $rv$0 = 100;
  label = 29;
 }
 if ((label|0) == 10) {
  HEAP32[440>>2] = 0;
  $rv$2 = $$reg2mem35$0;
 }
 else if ((label|0) == 29) {
  $rv$1 = $rv$0;
  label = 30;
 }
 if ((label|0) == 30) {
  $rv$2 = $rv$1;
 }
 _memmove((41032|0),($save_save|0),156)|0;
 $$0 = $rv$2;
 STACKTOP = sp;return ($$0|0);
}
function _save_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp1 = 0;
 var $error_flag = 0, $fp = 0, $rv = 0, $space_flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cp;
 $space_flag = 0;
 $2 = HEAP32[41288>>2]|0;
 $3 = ($2|0)>=(2);
 if ($3) {
  HEAP32[41304>>2] = 0;
  _error(70840);
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 _clean_up();
 $4 = $1;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(0);
 if ($7) {
  _error(71096);
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $8 = $1;
 $cp1 = $8;
 while(1) {
  $9 = $cp1;
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)!=(0);
  if (!($11)) {
   break;
  }
  $12 = $cp1;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (_isspace($14)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   $space_flag = 1;
  }
  $17 = $cp1;
  $18 = (($17) + 1|0);
  $cp1 = $18;
 }
 $19 = $1;
 $20 = (_fopen(($19|0),(64720|0))|0);
 $fp = $20;
 $21 = $fp;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $1;
  _perror(($23|0));
  _error(71144);
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $24 = $fp;
 HEAP32[41008>>2] = $24;
 HEAP32[41232>>2] = 1;
 $25 = (_list_cmd(71200)|0);
 $rv = $25;
 HEAP32[41232>>2] = 0;
 $26 = HEAP32[41000>>2]|0;
 HEAP32[41008>>2] = $26;
 $27 = $fp;
 $28 = (_ferror(($27|0))|0);
 $error_flag = $28;
 $29 = $fp;
 $30 = (_fclose(($29|0))|0);
 $31 = ($30|0)!=(0);
 if ($31) {
  label = 15;
 } else {
  $32 = $error_flag;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $rv = 0;
  $34 = $1;
  _perror(($34|0));
 }
 $35 = $rv;
 $36 = ($35|0)!=(0);
 if ($36) {
 } else {
  _error(71208);
 }
 $37 = $rv;
 $0 = $37;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _organize($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $equation;
 $1 = $np;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  label = 3;
 } else {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 1;
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  (_printf((71632|0),($vararg_buffer|0))|0);
  _error_bug(71664);
 }
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[8>>2]|0;
 $14 = ($12|0)>($13|0);
 if (!($14)) {
  $15 = $0;
  $16 = $1;
  (_org_recurse($15,$16,0,1,0)|0);
  STACKTOP = sp;return;
 }
 _error_bug(71728);
 $15 = $0;
 $16 = $1;
 (_org_recurse($15,$16,0,1,0)|0);
 STACKTOP = sp;return;
}
function _org_recurse($equation,$np,$loc,$level,$elocp) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 $elocp = $elocp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bp = 0, $eloc = 0, $ep = 0, $i = 0, $invert = 0, $min1 = 0, $op = 0, $p1 = 0, $sub_eloc = 0, $sub_op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sub_eloc = sp + 8|0;
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $5 = $elocp;
 $6 = $3;
 $7 = $1;
 $8 = (($7) + ($6<<4)|0);
 $bp = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = (($11) + ($10<<4)|0);
 $ep = $12;
 $13 = $bp;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $min1 = $15;
 $16 = $bp;
 $17 = (($16) + 16|0);
 $p1 = $17;
 while(1) {
  $18 = $p1;
  $19 = $ep;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $p1;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $min1;
  $25 = ($23|0)<($24|0);
  if ($25) {
   $26 = $p1;
   $27 = (($26) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $4;
   $30 = ($28|0)<($29|0);
   if ($30) {
    label = 5;
    break;
   }
   $31 = $p1;
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $min1 = $33;
  }
  $34 = $p1;
  $35 = (($34) + 32|0);
  $p1 = $35;
 }
 if ((label|0) == 5) {
 }
 $36 = $p1;
 $ep = $36;
 $37 = $ep;
 $38 = $1;
 $39 = $37;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = (($41|0) / 16)&-1;
 $43 = (($42) - 1)|0;
 $eloc = $43;
 $44 = $5;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $eloc;
  $47 = $5;
  HEAP32[$47>>2] = $46;
 }
 $48 = $eloc;
 $49 = $3;
 $50 = ($48|0)==($49|0);
 if ($50) {
  $51 = $4;
  $52 = (($51) - 1)|0;
  $53 = ($52|0)>(1);
  if ($53) {
   $54 = $4;
   $55 = (($54) - 1)|0;
   $58 = $55;
  } else {
   $58 = 1;
  }
  $56 = $bp;
  $57 = (($56) + 4|0);
  HEAP32[$57>>2] = $58;
  $0 = 0;
  $162 = $0;
  STACKTOP = sp;return ($162|0);
 }
 $59 = $min1;
 $60 = $4;
 $61 = ($59|0)>($60|0);
 if ($61) {
  $62 = $bp;
  $p1 = $62;
  while(1) {
   $63 = $p1;
   $64 = $ep;
   $65 = ($63>>>0)<($64>>>0);
   if (!($65)) {
    break;
   }
   $66 = $min1;
   $67 = $4;
   $68 = (($66) - ($67))|0;
   $69 = $p1;
   $70 = (($69) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) - ($68))|0;
   HEAP32[$70>>2] = $72;
   $73 = $p1;
   $74 = (($73) + 16|0);
   $p1 = $74;
  }
 }
 $op = 0;
 $75 = $bp;
 $76 = (($75) + 16|0);
 $p1 = $76;
 while(1) {
  $77 = $p1;
  $78 = $ep;
  $79 = ($77>>>0)<($78>>>0);
  if (!($79)) {
   break;
  }
  $80 = $p1;
  $81 = (($80) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $4;
  $84 = ($82|0)==($83|0);
  if ($84) {
   label = 25;
   break;
  }
  $88 = $p1;
  $89 = (($88) + 32|0);
  $p1 = $89;
 }
 if ((label|0) == 25) {
  $85 = $p1;
  $86 = (($85) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $op = $87;
 }
 $90 = $3;
 $i = $90;
 while(1) {
  $91 = $i;
  $92 = $eloc;
  $93 = ($91|0)<=($92|0);
  if (!($93)) {
   break;
  }
  $94 = $i;
  $95 = $1;
  $96 = (($95) + ($94<<4)|0);
  $97 = (($96) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $4;
  $100 = ($98|0)>($99|0);
  if ($100) {
   $101 = $1;
   $102 = $2;
   $103 = $i;
   $104 = $4;
   $105 = (($104) + 1)|0;
   $106 = (_org_recurse($101,$102,$103,$105,$sub_eloc)|0);
   $sub_op = $106;
   $107 = $sub_op;
   do {
    if ((($107|0) == 2) | (($107|0) == 1)) {
     $108 = $op;
     $109 = ($108|0)!=(1);
     if ($109) {
      $110 = $op;
      $111 = ($110|0)!=(2);
      if ($111) {
       break;
      }
     }
     $112 = $i;
     $113 = (($112) - 1)|0;
     $114 = $3;
     $115 = ($113|0)>=($114|0);
     if ($115) {
      $116 = $i;
      $117 = (($116) - 1)|0;
      $118 = $1;
      $119 = (($118) + ($117<<4)|0);
      $120 = (($119) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(2);
      $124 = $122;
     } else {
      $124 = 0;
     }
     $123 = $124&1;
     $invert = $123;
     $125 = $i;
     $126 = $1;
     $127 = (($126) + ($125<<4)|0);
     $128 = HEAP32[$sub_eloc>>2]|0;
     $129 = $1;
     $130 = (($129) + ($128<<4)|0);
     $131 = $4;
     $132 = $invert;
     _org_up_level($127,$130,$131,$132);
    } else if ((($107|0) == 5) | (($107|0) == 4)) {
     $133 = $op;
     $134 = ($133|0)!=(4);
     if ($134) {
      $135 = $op;
      $136 = ($135|0)!=(5);
      if ($136) {
       break;
      }
     }
     $137 = $i;
     $138 = (($137) - 1)|0;
     $139 = $3;
     $140 = ($138|0)>=($139|0);
     if ($140) {
      $141 = $i;
      $142 = (($141) - 1)|0;
      $143 = $1;
      $144 = (($143) + ($142<<4)|0);
      $145 = (($144) + 8|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==(5);
      $149 = $147;
     } else {
      $149 = 0;
     }
     $148 = $149&1;
     $invert = $148;
     $150 = $i;
     $151 = $1;
     $152 = (($151) + ($150<<4)|0);
     $153 = HEAP32[$sub_eloc>>2]|0;
     $154 = $1;
     $155 = (($154) + ($153<<4)|0);
     $156 = $4;
     $157 = $invert;
     _org_up_level($152,$155,$156,$157);
    }
   } while(0);
   $158 = HEAP32[$sub_eloc>>2]|0;
   $i = $158;
  }
  $159 = $i;
  $160 = (($159) + 2)|0;
  $i = $160;
 }
 $161 = $op;
 $0 = $161;
 $162 = $0;
 STACKTOP = sp;return ($162|0);
}
function _elim_loop($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = HEAP32[41272>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  HEAP32[41272>>2] = 0;
  _longjmp((41032|0),13);
  // unreachable;
 }
 while(1) {
  while(1) {
   while(1) {
    $4 = $0;
    $5 = $1;
    _organize($4,$5);
    $6 = $0;
    $7 = $1;
    $8 = (_combine_constants($6,$7,1)|0);
    $9 = ($8|0)!=(0);
    if (!($9)) {
     break;
    }
   }
   $10 = $0;
   $11 = $1;
   $12 = (_elim_k($10,$11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
  }
  $14 = $0;
  $15 = $1;
  $16 = (_simp_pp($14,$15)|0);
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
 }
 $18 = $0;
 $19 = $1;
 $20 = (_reorder($18,$19)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $22 = $0;
  $23 = $1;
  _organize($22,$23);
  $24 = $0;
  $25 = $1;
  $26 = (_elim_k($24,$25)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _combine_constants($equation,$np,$iflag) {
 $equation = $equation|0;
 $np = $np|0;
 $iflag = $iflag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $iflag;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_const_recurse($3,$4,0,1,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _elim_k($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0.0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0, $636 = 0.0, $637 = 0.0, $638 = 0.0;
 var $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0.0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0.0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0.0;
 var $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0.0, $denominator = 0, $ep = 0, $flag = 0, $level = 0, $modified = 0, $numerator = 0, $p1 = 0, $p2 = 0, $p3 = 0, $p4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numerator = sp + 8|0;
 $denominator = sp;
 $1 = $equation;
 $2 = $np;
 $modified = 0;
 $3 = $1;
 $4 = (($3) + 16|0);
 $p1 = $4;
 L1: while(1) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = (($7) + ($6<<4)|0);
  $ep = $8;
  $9 = $p1;
  $10 = $ep;
  $11 = ($9>>>0)>=($10>>>0);
  if ($11) {
   label = 3;
   break;
  }
  $12 = $p1;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(2);
  if ($14) {
   $15 = $p1;
   $16 = (($15) + 16|0);
   $p1 = $16;
   continue;
  }
  $17 = $p1;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $level = $19;
  $20 = $p1;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  if ((($22|0) == 2) | (($22|0) == 1)) {
   $23 = $p1;
   $24 = (($23) + 16|0);
   $p2 = $24;
   $25 = $p1;
   $26 = (($25) + 32|0);
   $27 = $ep;
   $28 = ($26>>>0)<($27>>>0);
   do {
    if ($28) {
     $29 = $p1;
     $30 = (($29) + 32|0);
     $31 = (($30) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $level;
     $34 = (($33) + 1)|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = $p1;
      $37 = (($36) + 32|0);
      $38 = (($37) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==(4);
      if (!($40)) {
       $41 = $p1;
       $42 = (($41) + 32|0);
       $43 = (($42) + 8|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ($44|0)==(5);
       if (!($45)) {
        break;
       }
      }
      $46 = $p2;
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0);
      if ($48) {
       $49 = $p2;
       $50 = (($49) + 8|0);
       $51 = +HEAPF64[$50>>3];
       $52 = $51 < 0.0;
       if ($52) {
        $53 = $p1;
        $54 = (($53) + 8|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)==(1);
        if ($56) {
         $57 = $p1;
         $58 = (($57) + 8|0);
         HEAP32[$58>>2] = 2;
        } else {
         $59 = $p1;
         $60 = (($59) + 8|0);
         HEAP32[$60>>2] = 1;
        }
        $61 = $p2;
        $62 = (($61) + 8|0);
        $63 = +HEAPF64[$62>>3];
        $64 = -$63;
        $65 = $p2;
        $66 = (($65) + 8|0);
        HEAPF64[$66>>3] = $64;
       }
      }
     }
    }
   } while(0);
   $67 = $p2;
   $68 = (($67) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $level;
   $71 = ($69|0)==($70|0);
   do {
    if ($71) {
     $72 = $p2;
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(0);
     if ($74) {
      $75 = $p2;
      $76 = (($75) + 8|0);
      $77 = +HEAPF64[$76>>3];
      $78 = $77 < 0.0;
      if ($78) {
       $79 = $p1;
       $80 = (($79) + 8|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==(1);
       if ($82) {
        $83 = $p1;
        $84 = (($83) + 8|0);
        HEAP32[$84>>2] = 2;
       } else {
        $85 = $p1;
        $86 = (($85) + 8|0);
        HEAP32[$86>>2] = 1;
       }
       $87 = $p2;
       $88 = (($87) + 8|0);
       $89 = +HEAPF64[$88>>3];
       $90 = -$89;
       $91 = $p2;
       $92 = (($91) + 8|0);
       HEAPF64[$92>>3] = $90;
      }
      $93 = $p2;
      $94 = (($93) + 8|0);
      $95 = +HEAPF64[$94>>3];
      $96 = $95 == 0.0;
      if ($96) {
       $97 = $p1;
       $98 = $p1;
       $99 = (($98) + 32|0);
       $100 = $ep;
       $101 = $p1;
       $102 = (($101) + 32|0);
       $103 = $100;
       $104 = $102;
       $105 = (($103) - ($104))|0;
       _memmove(($97|0),($99|0),($105|0))|0;
       $106 = $2;
       $107 = HEAP32[$106>>2]|0;
       $108 = (($107) - 2)|0;
       HEAP32[$106>>2] = $108;
       $modified = 1;
       continue L1;
      } else {
       break;
      }
     }
    }
   } while(0);
   $109 = $p1;
   $110 = (($109) + -16|0);
   $111 = (($110) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $level;
   $114 = ($112|0)==($113|0);
   L36: do {
    if ($114) {
     $115 = $p1;
     $116 = (($115) + -16|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)==(0);
     if ($118) {
      do {
       if (0) {
        $119 = $p1;
        $120 = (($119) + -16|0);
        $121 = (($120) + 8|0);
        $122 = +HEAPF64[$121>>3];
        $123 = $122;
        $124 = (___FLOAT_BITS834($123)|0);
        $125 = $124 & 2147483647;
        $126 = ($125|0)==(2139095040);
        if (!($126)) {
         break L36;
        }
       } else {
        if (1) {
         $127 = $p1;
         $128 = (($127) + -16|0);
         $129 = (($128) + 8|0);
         $130 = +HEAPF64[$129>>3];
         $131 = (___DOUBLE_BITS835($130)|0);
         $132 = tempRet0;
         $133 = $132 & 2147483647;
         $134 = ($131|0)==(0);
         $135 = ($133|0)==(2146435072);
         $136 = $134 & $135;
         if ($136) {
          break;
         } else {
          break L36;
         }
        } else {
         $137 = $p1;
         $138 = (($137) + -16|0);
         $139 = (($138) + 8|0);
         $140 = +HEAPF64[$139>>3];
         $141 = (___fpclassifyl((+$140))|0);
         $142 = ($141|0)==(1);
         if ($142) {
          break;
         } else {
          break L36;
         }
        }
       }
      } while(0);
      $143 = $p1;
      $144 = (($143) + -16|0);
      $p2 = $144;
     }
    }
   } while(0);
   $145 = $p2;
   $146 = (($145) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $level;
   $149 = ($147|0)==($148|0);
   L47: do {
    if ($149) {
     $150 = $p2;
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==(0);
     if ($152) {
      do {
       if (0) {
        $153 = $p2;
        $154 = (($153) + 8|0);
        $155 = +HEAPF64[$154>>3];
        $156 = $155;
        $157 = (___FLOAT_BITS834($156)|0);
        $158 = $157 & 2147483647;
        $159 = ($158|0)==(2139095040);
        if (!($159)) {
         break L47;
        }
       } else {
        if (1) {
         $160 = $p2;
         $161 = (($160) + 8|0);
         $162 = +HEAPF64[$161>>3];
         $163 = (___DOUBLE_BITS835($162)|0);
         $164 = tempRet0;
         $165 = $164 & 2147483647;
         $166 = ($163|0)==(0);
         $167 = ($165|0)==(2146435072);
         $168 = $166 & $167;
         if ($168) {
          break;
         } else {
          break L47;
         }
        } else {
         $169 = $p2;
         $170 = (($169) + 8|0);
         $171 = +HEAPF64[$170>>3];
         $172 = (___fpclassifyl((+$171))|0);
         $173 = ($172|0)==(1);
         if ($173) {
          break;
         } else {
          break L47;
         }
        }
       }
      } while(0);
      $flag = 0;
      $174 = $p1;
      $p3 = $174;
      while(1) {
       $175 = $p3;
       $176 = (($175) + 4|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = $level;
       $179 = ($177|0)<($178|0);
       if ($179) {
        label = 44;
        break;
       }
       $182 = $p3;
       $183 = HEAP32[$182>>2]|0;
       $184 = ($183|0)==(0);
       L60: do {
        if ($184) {
         $185 = $p3;
         $186 = $p2;
         $187 = ($185|0)!=($186|0);
         if ($187) {
          do {
           if (0) {
            $188 = $p3;
            $189 = (($188) + 8|0);
            $190 = +HEAPF64[$189>>3];
            $191 = $190;
            $192 = (___FLOAT_BITS834($191)|0);
            $193 = $192 & 2147483647;
            $194 = ($193>>>0)<(2139095040);
            if ($194) {
             break L60;
            }
           } else {
            if (1) {
             $195 = $p3;
             $196 = (($195) + 8|0);
             $197 = +HEAPF64[$196>>3];
             $198 = (___DOUBLE_BITS835($197)|0);
             $199 = tempRet0;
             $200 = $199 & 2147483647;
             $201 = ($200>>>0)<(2146435072);
             $202 = ($200|0)==(2146435072);
             $203 = ($198>>>0)<(0);
             $204 = $202 & $203;
             $205 = $201 | $204;
             if ($205) {
              break L60;
             } else {
              break;
             }
            } else {
             $206 = $p3;
             $207 = (($206) + 8|0);
             $208 = +HEAPF64[$207>>3];
             $209 = (___fpclassifyl((+$208))|0);
             $210 = ($209|0)>(1);
             if ($210) {
              break L60;
             } else {
              break;
             }
            }
           }
          } while(0);
          $flag = 1;
         }
        }
       } while(0);
       $211 = $p3;
       $212 = $1;
       $213 = ($211|0)==($212|0);
       if ($213) {
        label = 54;
        break;
       }
       $214 = $p3;
       $215 = (($214) + -16|0);
       $p3 = $215;
      }
      if ((label|0) == 44) {
       label = 0;
       $180 = $p3;
       $181 = (($180) + 16|0);
       $p3 = $181;
      }
      else if ((label|0) == 54) {
       label = 0;
      }
      $216 = $p1;
      $p4 = $216;
      while(1) {
       $217 = $p4;
       $218 = $ep;
       $219 = ($217>>>0)<($218>>>0);
       if ($219) {
        $220 = $p4;
        $221 = (($220) + 4|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = $level;
        $224 = ($222|0)>=($223|0);
        $803 = $224;
       } else {
        $803 = 0;
       }
       if (!($803)) {
        break;
       }
       $225 = $p4;
       $226 = HEAP32[$225>>2]|0;
       $227 = ($226|0)==(0);
       L83: do {
        if ($227) {
         $228 = $p4;
         $229 = $p2;
         $230 = ($228|0)!=($229|0);
         if ($230) {
          do {
           if (0) {
            $231 = $p4;
            $232 = (($231) + 8|0);
            $233 = +HEAPF64[$232>>3];
            $234 = $233;
            $235 = (___FLOAT_BITS834($234)|0);
            $236 = $235 & 2147483647;
            $237 = ($236>>>0)<(2139095040);
            if ($237) {
             break L83;
            }
           } else {
            if (1) {
             $238 = $p4;
             $239 = (($238) + 8|0);
             $240 = +HEAPF64[$239>>3];
             $241 = (___DOUBLE_BITS835($240)|0);
             $242 = tempRet0;
             $243 = $242 & 2147483647;
             $244 = ($243>>>0)<(2146435072);
             $245 = ($243|0)==(2146435072);
             $246 = ($241>>>0)<(0);
             $247 = $245 & $246;
             $248 = $244 | $247;
             if ($248) {
              break L83;
             } else {
              break;
             }
            } else {
             $249 = $p4;
             $250 = (($249) + 8|0);
             $251 = +HEAPF64[$250>>3];
             $252 = (___fpclassifyl((+$251))|0);
             $253 = ($252|0)>(1);
             if ($253) {
              break L83;
             } else {
              break;
             }
            }
           }
          } while(0);
          $flag = 1;
         }
        }
       } while(0);
       $254 = $p4;
       $255 = (($254) + 16|0);
       $p4 = $255;
      }
      $256 = $flag;
      $257 = ($256|0)!=(0);
      if (!($257)) {
       break L1;
      }
     }
    }
   } while(0);
  }
  $310 = $p1;
  $311 = (($310) + -16|0);
  $p2 = $311;
  $312 = $p1;
  $313 = (($312) + 8|0);
  $314 = HEAP32[$313>>2]|0;
  L99: do {
   switch ($314|0) {
   case 1:  {
    $315 = $p2;
    $316 = (($315) + 4|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = $level;
    $319 = ($317|0)==($318|0);
    if ($319) {
     $320 = $p2;
     $321 = HEAP32[$320>>2]|0;
     $322 = ($321|0)==(0);
     if ($322) {
      $323 = $p2;
      $324 = (($323) + 8|0);
      $325 = +HEAPF64[$324>>3];
      $326 = $325 == 0.0;
      if ($326) {
       $327 = $p2;
       $328 = $p1;
       $329 = (($328) + 16|0);
       $330 = $ep;
       $331 = $p1;
       $332 = (($331) + 16|0);
       $333 = $330;
       $334 = $332;
       $335 = (($333) - ($334))|0;
       _memmove(($327|0),($329|0),($335|0))|0;
       $336 = $2;
       $337 = HEAP32[$336>>2]|0;
       $338 = (($337) - 2)|0;
       HEAP32[$336>>2] = $338;
       $modified = 1;
       continue L1;
      }
     }
    }
    break;
   }
   case 5:  {
    $498 = $p2;
    $499 = (($498) + 4|0);
    $500 = HEAP32[$499>>2]|0;
    $501 = $level;
    $502 = ($500|0)==($501|0);
    if ($502) {
     $503 = $p2;
     $504 = HEAP32[$503>>2]|0;
     $505 = ($504|0)==(0);
     if ($505) {
      $506 = $p2;
      $507 = (($506) + 8|0);
      $508 = +HEAPF64[$507>>3];
      $509 = $508 == 0.0;
      if ($509) {
       $510 = $p1;
       $511 = (($510) + 32|0);
       $p2 = $511;
       while(1) {
        $512 = $p2;
        $513 = $ep;
        $514 = ($512>>>0)<($513>>>0);
        if (!($514)) {
         break;
        }
        $515 = $p2;
        $516 = (($515) + 4|0);
        $517 = HEAP32[$516>>2]|0;
        $518 = $level;
        $519 = ($517|0)<($518|0);
        if ($519) {
         label = 127;
         break;
        }
        $520 = $p2;
        $521 = (($520) + 32|0);
        $p2 = $521;
       }
       if ((label|0) == 127) {
        label = 0;
       }
       $522 = $p1;
       $523 = $p2;
       $524 = $ep;
       $525 = $p2;
       $526 = $524;
       $527 = $525;
       $528 = (($526) - ($527))|0;
       _memmove(($522|0),($523|0),($528|0))|0;
       $529 = $p2;
       $530 = $p1;
       $531 = $529;
       $532 = $530;
       $533 = (($531) - ($532))|0;
       $534 = (($533|0) / 16)&-1;
       $535 = $2;
       $536 = HEAP32[$535>>2]|0;
       $537 = (($536) - ($534))|0;
       HEAP32[$535>>2] = $537;
       $modified = 1;
       continue L1;
      }
     }
    }
    $538 = $p1;
    $539 = (($538) + 16|0);
    $p2 = $539;
    $540 = $p2;
    $541 = (($540) + 4|0);
    $542 = HEAP32[$541>>2]|0;
    $543 = $level;
    $544 = ($542|0)==($543|0);
    if ($544) {
     $545 = $p2;
     $546 = HEAP32[$545>>2]|0;
     $547 = ($546|0)==(0);
     if ($547) {
      $548 = $p2;
      $549 = (($548) + 8|0);
      $550 = +HEAPF64[$549>>3];
      (_f_to_fraction($550,$numerator,$denominator)|0);
      $551 = +HEAPF64[$numerator>>3];
      (_check_divide_by_zero($551)|0);
      $552 = +HEAPF64[$denominator>>3];
      $553 = +HEAPF64[$numerator>>3];
      $554 = $552 / $553;
      $555 = $p2;
      $556 = (($555) + 8|0);
      HEAPF64[$556>>3] = $554;
      $557 = $p1;
      $558 = (($557) + 8|0);
      HEAP32[$558>>2] = 4;
      continue L1;
     }
    }
    $559 = $p2;
    $560 = (($559) + 4|0);
    $561 = HEAP32[$560>>2]|0;
    $562 = $level;
    $563 = ($561|0)==($562|0);
    if ($563) {
     $564 = $p2;
     $565 = HEAP32[$564>>2]|0;
     $566 = ($565|0)==(1);
     if ($566) {
      $567 = $p2;
      $568 = (($567) + 8|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = $569 & 16383;
      $571 = ($570|0)==(4);
      if ($571) {
       $572 = $p1;
       $573 = (($572) + 8|0);
       HEAP32[$573>>2] = 4;
       continue L1;
      }
     }
    }
    break;
   }
   case 2:  {
    $339 = $p2;
    $340 = (($339) + 4|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = $level;
    $343 = ($341|0)==($342|0);
    do {
     if ($343) {
      $344 = $p2;
      $345 = HEAP32[$344>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $347 = $p2;
       $348 = (($347) + 8|0);
       $349 = +HEAPF64[$348>>3];
       $350 = $349 == 0.0;
       if ($350) {
        $351 = $p2;
        $352 = $1;
        $353 = ($351|0)==($352|0);
        if (!($353)) {
         $354 = $p2;
         $355 = (($354) + -16|0);
         $356 = (($355) + 4|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = $level;
         $359 = ($357|0)<($358|0);
         if (!($359)) {
          break;
         }
        }
        $360 = $p2;
        $361 = (($360) + 8|0);
        HEAPF64[$361>>3] = -1.0;
        $362 = $p1;
        $363 = (($362) + 8|0);
        HEAP32[$363>>2] = 4;
        $364 = $1;
        $365 = $2;
        $366 = HEAP32[$365>>2]|0;
        $367 = $p1;
        $368 = $1;
        $369 = $367;
        $370 = $368;
        $371 = (($369) - ($370))|0;
        $372 = (($371|0) / 16)&-1;
        _binary_parenthesize($364,$366,$372);
        $modified = 1;
        continue L1;
       }
      }
     }
    } while(0);
    break;
   }
   case 8:  {
    $690 = $p2;
    $691 = (($690) + 4|0);
    $692 = HEAP32[$691>>2]|0;
    $693 = $level;
    $694 = ($692|0)==($693|0);
    do {
     if ($694) {
      $695 = $p2;
      $696 = HEAP32[$695>>2]|0;
      $697 = ($696|0)==(0);
      if ($697) {
       $698 = $p2;
       $699 = (($698) + 8|0);
       $700 = +HEAPF64[$699>>3];
       $701 = $700 == 1.0;
       if (!($701)) {
        break;
       }
       $702 = $p1;
       $703 = (($702) + 32|0);
       $p2 = $703;
       while(1) {
        $704 = $p2;
        $705 = $ep;
        $706 = ($704>>>0)<($705>>>0);
        if (!($706)) {
         break;
        }
        $707 = $p2;
        $708 = (($707) + 4|0);
        $709 = HEAP32[$708>>2]|0;
        $710 = $level;
        $711 = ($709|0)<=($710|0);
        if ($711) {
         label = 175;
         break;
        }
        $712 = $p2;
        $713 = (($712) + 32|0);
        $p2 = $713;
       }
       if ((label|0) == 175) {
        label = 0;
       }
       $714 = $p1;
       $715 = $p2;
       $716 = $ep;
       $717 = $p2;
       $718 = $716;
       $719 = $717;
       $720 = (($718) - ($719))|0;
       _memmove(($714|0),($715|0),($720|0))|0;
       $721 = $p2;
       $722 = $p1;
       $723 = $721;
       $724 = $722;
       $725 = (($723) - ($724))|0;
       $726 = (($725|0) / 16)&-1;
       $727 = $2;
       $728 = HEAP32[$727>>2]|0;
       $729 = (($728) - ($726))|0;
       HEAP32[$727>>2] = $729;
       $modified = 1;
       continue L1;
      }
     }
    } while(0);
    $730 = $p1;
    $731 = (($730) + 16|0);
    $p2 = $731;
    $732 = $p2;
    $733 = (($732) + 4|0);
    $734 = HEAP32[$733>>2]|0;
    $735 = $level;
    $736 = ($734|0)==($735|0);
    do {
     if ($736) {
      $737 = $p2;
      $738 = HEAP32[$737>>2]|0;
      $739 = ($738|0)==(0);
      if ($739) {
       $740 = $p2;
       $741 = (($740) + 8|0);
       $742 = +HEAPF64[$741>>3];
       $743 = $742 == 0.0;
       if (!($743)) {
        $780 = $p2;
        $781 = (($780) + 8|0);
        $782 = +HEAPF64[$781>>3];
        $783 = $782 - 1.0;
        $784 = (+Math_abs((+$783)));
        $785 = +HEAPF64[432>>3];
        $786 = $784 <= $785;
        if ($786) {
         $787 = $p1;
         $788 = $p1;
         $789 = (($788) + 32|0);
         $790 = $ep;
         $791 = $p1;
         $792 = (($791) + 32|0);
         $793 = $790;
         $794 = $792;
         $795 = (($793) - ($794))|0;
         _memmove(($787|0),($789|0),($795|0))|0;
         $796 = $2;
         $797 = HEAP32[$796>>2]|0;
         $798 = (($797) - 2)|0;
         HEAP32[$796>>2] = $798;
         $modified = 1;
         continue L1;
        } else {
         break;
        }
       }
       $744 = $p1;
       $745 = (($744) + -16|0);
       $p2 = $745;
       while(1) {
        $746 = $p2;
        $747 = $1;
        $748 = ($746>>>0)>($747>>>0);
        if (!($748)) {
         break;
        }
        $749 = $p2;
        $750 = (($749) + -16|0);
        $751 = (($750) + 4|0);
        $752 = HEAP32[$751>>2]|0;
        $753 = $level;
        $754 = ($752|0)<=($753|0);
        if ($754) {
         label = 186;
         break;
        }
        $755 = $p2;
        $756 = (($755) + -16|0);
        $p2 = $756;
       }
       if ((label|0) == 186) {
        label = 0;
       }
       $757 = $p2;
       $758 = $p1;
       $759 = (($758) + 16|0);
       $760 = $ep;
       $761 = $p1;
       $762 = (($761) + 16|0);
       $763 = $760;
       $764 = $762;
       $765 = (($763) - ($764))|0;
       _memmove(($757|0),($759|0),($765|0))|0;
       $766 = $p1;
       $767 = (($766) + 16|0);
       $768 = $p2;
       $769 = $767;
       $770 = $768;
       $771 = (($769) - ($770))|0;
       $772 = (($771|0) / 16)&-1;
       $773 = $2;
       $774 = HEAP32[$773>>2]|0;
       $775 = (($774) - ($772))|0;
       HEAP32[$773>>2] = $775;
       $776 = $p2;
       $777 = (($776) + 8|0);
       HEAPF64[$777>>3] = 1.0;
       $778 = $p2;
       $779 = (($778) + 16|0);
       $p1 = $779;
       $modified = 1;
       continue L1;
      }
     }
    } while(0);
    break;
   }
   case 4:  {
    $373 = $p2;
    $374 = (($373) + 4|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = $level;
    $377 = ($375|0)==($376|0);
    do {
     if ($377) {
      $378 = $p2;
      $379 = HEAP32[$378>>2]|0;
      $380 = ($379|0)==(0);
      if ($380) {
       $381 = $p2;
       $382 = (($381) + 8|0);
       $383 = +HEAPF64[$382>>3];
       $384 = $383 == 0.0;
       if (!($384)) {
        $413 = $p2;
        $414 = (($413) + 8|0);
        $415 = +HEAPF64[$414>>3];
        $416 = $415 - 1.0;
        $417 = (+Math_abs((+$416)));
        $418 = +HEAPF64[432>>3];
        $419 = $417 <= $418;
        if ($419) {
         $420 = $p2;
         $421 = $p1;
         $422 = (($421) + 16|0);
         $423 = $ep;
         $424 = $p1;
         $425 = (($424) + 16|0);
         $426 = $423;
         $427 = $425;
         $428 = (($426) - ($427))|0;
         _memmove(($420|0),($422|0),($428|0))|0;
         $429 = $2;
         $430 = HEAP32[$429>>2]|0;
         $431 = (($430) - 2)|0;
         HEAP32[$429>>2] = $431;
         $modified = 1;
         continue L1;
        } else {
         break;
        }
       }
       $385 = $p1;
       $386 = (($385) + 32|0);
       $p2 = $386;
       while(1) {
        $387 = $p2;
        $388 = $ep;
        $389 = ($387>>>0)<($388>>>0);
        if (!($389)) {
         break;
        }
        $390 = $p2;
        $391 = (($390) + 4|0);
        $392 = HEAP32[$391>>2]|0;
        $393 = $level;
        $394 = ($392|0)<($393|0);
        if ($394) {
         label = 98;
         break;
        }
        $395 = $p2;
        $396 = (($395) + 32|0);
        $p2 = $396;
       }
       if ((label|0) == 98) {
        label = 0;
       }
       $397 = $p1;
       $398 = $p2;
       $399 = $ep;
       $400 = $p2;
       $401 = $399;
       $402 = $400;
       $403 = (($401) - ($402))|0;
       _memmove(($397|0),($398|0),($403|0))|0;
       $404 = $p2;
       $405 = $p1;
       $406 = $404;
       $407 = $405;
       $408 = (($406) - ($407))|0;
       $409 = (($408|0) / 16)&-1;
       $410 = $2;
       $411 = HEAP32[$410>>2]|0;
       $412 = (($411) - ($409))|0;
       HEAP32[$410>>2] = $412;
       $modified = 1;
       continue L1;
      }
     }
    } while(0);
    $432 = $p1;
    $433 = (($432) + 16|0);
    $434 = (($433) + 4|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = $level;
    $437 = ($435|0)==($436|0);
    if ($437) {
     $438 = $p1;
     $439 = (($438) + 16|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = ($440|0)==(0);
     if ($441) {
      $442 = $p1;
      $443 = (($442) + 16|0);
      $444 = (($443) + 8|0);
      $445 = +HEAPF64[$444>>3];
      $d = $445;
      $446 = $p1;
      $447 = (($446) + -16|0);
      $p2 = $447;
      while(1) {
       $448 = $p2;
       $449 = $1;
       $450 = ($448>>>0)>($449>>>0);
       if (!($450)) {
        break;
       }
       $451 = $p2;
       $452 = (($451) + -16|0);
       $453 = (($452) + 4|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = $level;
       $456 = ($454|0)<($455|0);
       if ($456) {
        label = 110;
        break;
       }
       $457 = $p2;
       $458 = (($457) + -16|0);
       $p2 = $458;
      }
      if ((label|0) == 110) {
       label = 0;
      }
      $459 = $p2;
      $460 = (($459) + 4|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = $level;
      $463 = ($461|0)==($462|0);
      if ($463) {
       $464 = $p2;
       $465 = HEAP32[$464>>2]|0;
       $466 = ($465|0)==(0);
       if ($466) {
        break L99;
       }
      }
      $467 = $p2;
      $468 = (($467) + 32|0);
      $469 = $p2;
      $470 = $p1;
      $471 = $p2;
      $472 = $470;
      $473 = $471;
      $474 = (($472) - ($473))|0;
      _memmove(($468|0),($469|0),($474|0))|0;
      $475 = $level;
      $476 = $p2;
      $477 = (($476) + 4|0);
      HEAP32[$477>>2] = $475;
      $478 = $p2;
      HEAP32[$478>>2] = 0;
      $479 = $d;
      $480 = $p2;
      $481 = (($480) + 8|0);
      HEAPF64[$481>>3] = $479;
      $482 = $level;
      $483 = $p2;
      $484 = (($483) + 16|0);
      $485 = (($484) + 4|0);
      HEAP32[$485>>2] = $482;
      $486 = $p2;
      $487 = (($486) + 16|0);
      HEAP32[$487>>2] = 2;
      $488 = $p2;
      $489 = (($488) + 16|0);
      $490 = (($489) + 8|0);
      HEAP32[$490>>2] = 4;
      $491 = $p2;
      $492 = $1;
      $493 = ($491>>>0)>($492>>>0);
      if ($493) {
       $494 = $p2;
       $495 = (($494) + -16|0);
       $p1 = $495;
      } else {
       $496 = $1;
       $497 = (($496) + 16|0);
       $p1 = $497;
      }
      continue L1;
     }
    }
    break;
   }
   case 7: case 6:  {
    $574 = $p2;
    $575 = (($574) + 4|0);
    $576 = HEAP32[$575>>2]|0;
    $577 = $level;
    $578 = ($576|0)==($577|0);
    if ($578) {
     $579 = $p2;
     $580 = HEAP32[$579>>2]|0;
     $581 = ($580|0)==(0);
     if ($581) {
      $582 = $p2;
      $583 = (($582) + 8|0);
      $584 = +HEAPF64[$583>>3];
      $585 = $584 == 0.0;
      if ($585) {
       $586 = $p1;
       $587 = (($586) + 32|0);
       $p2 = $587;
       while(1) {
        $588 = $p2;
        $589 = $ep;
        $590 = ($588>>>0)<($589>>>0);
        if (!($590)) {
         break;
        }
        $591 = $p2;
        $592 = (($591) + 4|0);
        $593 = HEAP32[$592>>2]|0;
        $594 = $level;
        $595 = ($593|0)<($594|0);
        if ($595) {
         label = 145;
         break;
        }
        $596 = $p2;
        $597 = (($596) + 32|0);
        $p2 = $597;
       }
       if ((label|0) == 145) {
        label = 0;
       }
       $598 = $p1;
       $599 = $p2;
       $600 = $ep;
       $601 = $p2;
       $602 = $600;
       $603 = $601;
       $604 = (($602) - ($603))|0;
       _memmove(($598|0),($599|0),($604|0))|0;
       $605 = $p2;
       $606 = $p1;
       $607 = $605;
       $608 = $606;
       $609 = (($607) - ($608))|0;
       $610 = (($609|0) / 16)&-1;
       $611 = $2;
       $612 = HEAP32[$611>>2]|0;
       $613 = (($612) - ($610))|0;
       HEAP32[$611>>2] = $613;
       $modified = 1;
       continue L1;
      }
     }
    }
    $614 = $p1;
    $615 = (($614) + 8|0);
    $616 = HEAP32[$615>>2]|0;
    $617 = ($616|0)==(6);
    if ($617) {
     $618 = $p1;
     $619 = (($618) + 16|0);
     $620 = (($619) + 4|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = $level;
     $623 = ($621|0)==($622|0);
     if ($623) {
      $624 = $p1;
      $625 = (($624) + 16|0);
      $626 = HEAP32[$625>>2]|0;
      $627 = ($626|0)==(0);
      if ($627) {
       $628 = $p1;
       $629 = (($628) + 16|0);
       $630 = (($629) + 8|0);
       $631 = +HEAPF64[$630>>3];
       $632 = (+Math_abs((+$631)));
       $d = $632;
       $633 = $d;
       $634 = +HEAPF64[432>>3];
       $635 = $633 > $634;
       do {
        if ($635) {
         $636 = $d;
         $637 = 1.0 / $636;
         $638 = (+_fmod((+$637),1.0));
         $639 = $638 == 0.0;
         if ($639) {
          $640 = $p1;
          $641 = (($640) + -16|0);
          $p2 = $641;
          while(1) {
           $642 = $p2;
           $643 = $1;
           $644 = ($642>>>0)>($643>>>0);
           if (!($644)) {
            break;
           }
           $645 = $p2;
           $646 = (($645) + -16|0);
           $647 = (($646) + 4|0);
           $648 = HEAP32[$647>>2]|0;
           $649 = $level;
           $650 = ($648|0)<($649|0);
           if ($650) {
            label = 157;
            break;
           }
           $651 = $p2;
           $652 = (($651) + -16|0);
           $p2 = $652;
          }
          if ((label|0) == 157) {
           label = 0;
          }
          $653 = $p2;
          $654 = $p1;
          $655 = $p2;
          $656 = $654;
          $657 = $655;
          $658 = (($656) - ($657))|0;
          $659 = (($658|0) / 16)&-1;
          $660 = (_is_integer_expr($653,$659)|0);
          $661 = ($660|0)!=(0);
          if (!($661)) {
           break;
          }
          $662 = $p2;
          $663 = $p1;
          $664 = (($663) + 16|0);
          $665 = $ep;
          $666 = $p1;
          $667 = (($666) + 16|0);
          $668 = $665;
          $669 = $667;
          $670 = (($668) - ($669))|0;
          _memmove(($662|0),($664|0),($670|0))|0;
          $671 = $p1;
          $672 = (($671) + 16|0);
          $673 = $p2;
          $674 = $672;
          $675 = $673;
          $676 = (($674) - ($675))|0;
          $677 = (($676|0) / 16)&-1;
          $678 = $2;
          $679 = HEAP32[$678>>2]|0;
          $680 = (($679) - ($677))|0;
          HEAP32[$678>>2] = $680;
          $681 = $p2;
          $682 = (($681) + 8|0);
          HEAPF64[$682>>3] = 0.0;
          $683 = $p2;
          $684 = $1;
          $685 = ($683>>>0)>($684>>>0);
          if ($685) {
           $686 = $p2;
           $687 = (($686) + -16|0);
           $p1 = $687;
          } else {
           $688 = $1;
           $689 = (($688) + 16|0);
           $p1 = $689;
          }
          $modified = 1;
          continue L1;
         }
        }
       } while(0);
      }
     }
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $799 = $p1;
  $800 = (($799) + 32|0);
  $p1 = $800;
 }
 if ((label|0) == 3) {
  $801 = $modified;
  $0 = $801;
  $802 = $0;
  STACKTOP = sp;return ($802|0);
 }
 $258 = $p2;
 $259 = $p3;
 $260 = ($258>>>0)>($259>>>0);
 if ($260) {
  $261 = $p2;
  $262 = (($261) + -16|0);
  $263 = (($262) + 8|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = ($264|0)==(2);
  if ($265) {
   $266 = $p2;
   $267 = (($266) + 8|0);
   $268 = +HEAPF64[$267>>3];
   $269 = -$268;
   $270 = $p2;
   $271 = (($270) + 8|0);
   HEAPF64[$271>>3] = $269;
  }
 }
 $272 = $p2;
 $273 = (($272) + 16|0);
 $274 = $p4;
 $275 = $ep;
 $276 = $p4;
 $277 = $275;
 $278 = $276;
 $279 = (($277) - ($278))|0;
 _memmove(($273|0),($274|0),($279|0))|0;
 $280 = $p4;
 $281 = $p2;
 $282 = (($281) + 16|0);
 $283 = $280;
 $284 = $282;
 $285 = (($283) - ($284))|0;
 $286 = (($285|0) / 16)&-1;
 $287 = $2;
 $288 = HEAP32[$287>>2]|0;
 $289 = (($288) - ($286))|0;
 HEAP32[$287>>2] = $289;
 $290 = $2;
 $291 = HEAP32[$290>>2]|0;
 $292 = $1;
 $293 = (($292) + ($291<<4)|0);
 $ep = $293;
 $294 = $p3;
 $295 = $p2;
 $296 = $ep;
 $297 = $p2;
 $298 = $296;
 $299 = $297;
 $300 = (($298) - ($299))|0;
 _memmove(($294|0),($295|0),($300|0))|0;
 $301 = $p2;
 $302 = $p3;
 $303 = $301;
 $304 = $302;
 $305 = (($303) - ($304))|0;
 $306 = (($305|0) / 16)&-1;
 $307 = $2;
 $308 = HEAP32[$307>>2]|0;
 $309 = (($308) - ($306))|0;
 HEAP32[$307>>2] = $309;
 $0 = 1;
 $802 = $0;
 STACKTOP = sp;return ($802|0);
}
function _simp_pp($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $denominator = 0, $i = 0, $ilevel = 0, $j = 0, $jlevel = 0, $k = 0, $modified = 0, $numerator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numerator = sp + 8|0;
 $denominator = sp;
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(8);
  if ($11) {
  } else {
   $12 = $i;
   $13 = $0;
   $14 = (($13) + ($12<<4)|0);
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $ilevel = $16;
   $17 = $i;
   $18 = (($17) + 2)|0;
   $j = $18;
   while(1) {
    $19 = $j;
    $20 = $1;
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)<($21|0);
    if (!($22)) {
     break;
    }
    $23 = $j;
    $24 = $0;
    $25 = (($24) + ($23<<4)|0);
    $26 = (($25) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $jlevel = $27;
    $28 = $jlevel;
    $29 = $ilevel;
    $30 = (($29) - 1)|0;
    $31 = ($28|0)==($30|0);
    if ($31) {
     $32 = $j;
     $33 = $0;
     $34 = (($33) + ($32<<4)|0);
     $35 = (($34) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(8);
     if ($37) {
      label = 9;
      break;
     }
    }
    $161 = $jlevel;
    $162 = $ilevel;
    $163 = ($161|0)<=($162|0);
    if ($163) {
     label = 44;
     break;
    }
    $164 = $j;
    $165 = (($164) + 2)|0;
    $j = $165;
   }
   L15: do {
    if ((label|0) == 9) {
     label = 0;
     $38 = HEAP32[41224>>2]|0;
     $39 = ($38|0)!=(0);
     do {
      if (!($39)) {
       $40 = $i;
       $41 = (($40) - 1)|0;
       $42 = $0;
       $43 = (($42) + ($41<<4)|0);
       $44 = (($43) + 4|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = $ilevel;
       $47 = ($45|0)!=($46|0);
       if (!($47)) {
        $48 = $i;
        $49 = (($48) - 1)|0;
        $50 = $0;
        $51 = (($50) + ($49<<4)|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = ($52|0)!=(0);
        if (!($53)) {
         $54 = $i;
         $55 = (($54) - 1)|0;
         $56 = $0;
         $57 = (($56) + ($55<<4)|0);
         $58 = (($57) + 8|0);
         $59 = +HEAPF64[$58>>3];
         $60 = $59 < 0.0;
         if (!($60)) {
          break;
         }
        }
       }
       $61 = $jlevel;
       $62 = $j;
       $63 = (($62) + 1)|0;
       $64 = $0;
       $65 = (($64) + ($63<<4)|0);
       $66 = (($65) + 4|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($61|0)==($67|0);
       if ($68) {
        $69 = $j;
        $70 = (($69) + 1)|0;
        $71 = $0;
        $72 = (($71) + ($70<<4)|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = ($73|0)==(0);
        if ($74) {
         $75 = $j;
         $76 = (($75) + 1)|0;
         $77 = $0;
         $78 = (($77) + ($76<<4)|0);
         $79 = (($78) + 8|0);
         $80 = +HEAPF64[$79>>3];
         (_f_to_fraction($80,$numerator,$denominator)|0);
         $81 = +HEAPF64[$denominator>>3];
         $82 = (+_fmod((+$81),2.0));
         $83 = $82 == 0.0;
         do {
          if ($83) {
           $84 = $i;
           $85 = (($84) + 2)|0;
           $86 = $j;
           $87 = ($85|0)==($86|0);
           if ($87) {
            $88 = $i;
            $89 = (($88) + 1)|0;
            $90 = $0;
            $91 = (($90) + ($89<<4)|0);
            $92 = HEAP32[$91>>2]|0;
            $93 = ($92|0)==(0);
            if ($93) {
             $94 = $i;
             $95 = (($94) + 1)|0;
             $96 = $0;
             $97 = (($96) + ($95<<4)|0);
             $98 = (($97) + 8|0);
             $99 = +HEAPF64[$98>>3];
             (_f_to_fraction($99,$numerator,$denominator)|0);
             $100 = +HEAPF64[$numerator>>3];
             $101 = (+_fmod((+$100),2.0));
             $102 = $101 == 0.0;
             if ($102) {
              break L15;
             }
             break;
            }
           }
           break L15;
          }
         } while(0);
        } else {
         label = 24;
        }
       } else {
        label = 24;
       }
       do {
        if ((label|0) == 24) {
         label = 0;
         $103 = $i;
         $104 = (($103) + 2)|0;
         $105 = $j;
         $106 = ($104|0)==($105|0);
         if ($106) {
          $107 = $i;
          $108 = (($107) + 1)|0;
          $109 = $0;
          $110 = (($109) + ($108<<4)|0);
          $111 = HEAP32[$110>>2]|0;
          $112 = ($111|0)==(0);
          if ($112) {
           $113 = $i;
           $114 = (($113) + 1)|0;
           $115 = $0;
           $116 = (($115) + ($114<<4)|0);
           $117 = (($116) + 8|0);
           $118 = +HEAPF64[$117>>3];
           (_f_to_fraction($118,$numerator,$denominator)|0);
           $119 = +HEAPF64[$numerator>>3];
           $120 = (+_fmod((+$119),2.0));
           $121 = $120 == 0.0;
           if ($121) {
            break L15;
           }
           break;
          }
         }
         break L15;
        }
       } while(0);
      }
     } while(0);
     $122 = $j;
     $123 = $0;
     $124 = (($123) + ($122<<4)|0);
     $125 = (($124) + 8|0);
     HEAP32[$125>>2] = 4;
     $126 = $j;
     $k = $126;
     while(1) {
      $127 = $k;
      $128 = $1;
      $129 = HEAP32[$128>>2]|0;
      $130 = ($127|0)<($129|0);
      if ($130) {
       $131 = $k;
       $132 = $0;
       $133 = (($132) + ($131<<4)|0);
       $134 = (($133) + 4|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = $jlevel;
       $137 = ($135|0)>=($136|0);
       $169 = $137;
      } else {
       $169 = 0;
      }
      if (!($169)) {
       break;
      }
      $138 = $k;
      $139 = $0;
      $140 = (($139) + ($138<<4)|0);
      $141 = (($140) + 4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($142) + 2)|0;
      HEAP32[$141>>2] = $143;
      $144 = $k;
      $145 = (($144) + 1)|0;
      $k = $145;
     }
     $146 = $i;
     $147 = (($146) + 1)|0;
     $k = $147;
     while(1) {
      $148 = $k;
      $149 = $j;
      $150 = ($148|0)<($149|0);
      if (!($150)) {
       break;
      }
      $151 = $k;
      $152 = $0;
      $153 = (($152) + ($151<<4)|0);
      $154 = (($153) + 4|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (($155) + 1)|0;
      HEAP32[$154>>2] = $156;
      $157 = $k;
      $158 = (($157) + 1)|0;
      $k = $158;
     }
     $159 = $i;
     $160 = (($159) - 2)|0;
     $i = $160;
     $modified = 1;
    }
    else if ((label|0) == 44) {
     label = 0;
    }
   } while(0);
  }
  $166 = $i;
  $167 = (($166) + 2)|0;
  $i = $167;
 }
 $168 = $modified;
 STACKTOP = sp;return ($168|0);
}
function _reorder($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 $4 = (_order_recurse($2,$3,0,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _simp_ssub($equation,$np,$v,$d,$power_flag,$times_flag,$fc_level) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 $d = +$d;
 $power_flag = $power_flag|0;
 $times_flag = $times_flag|0;
 $fc_level = $fc_level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $v;
 $3 = $d;
 $4 = $power_flag;
 $5 = $times_flag;
 $6 = $fc_level;
 while(1) {
  while(1) {
   while(1) {
    while(1) {
     while(1) {
      while(1) {
       while(1) {
        while(1) {
         $7 = $0;
         $8 = $1;
         _elim_loop($7,$8);
         $9 = $0;
         $10 = $1;
         $11 = (_simp2_power($9,$10)|0);
         $12 = ($11|0)!=(0);
         if (!($12)) {
          break;
         }
        }
        $13 = $5;
        $14 = ($13|0)!=(0);
        if ($14) {
         $15 = $0;
         $16 = $1;
         $17 = (_factor_times($15,$16)|0);
         $18 = ($17|0)!=(0);
         $50 = $18;
        } else {
         $50 = 0;
        }
        if (!($50)) {
         break;
        }
       }
       $19 = $0;
       $20 = $1;
       $21 = (_elim_sign($19,$20)|0);
       $22 = ($21|0)!=(0);
       if (!($22)) {
        break;
       }
      }
      $23 = $0;
      $24 = $1;
      $25 = (_subtract_itself($23,$24)|0);
      $26 = ($25|0)!=(0);
      if (!($26)) {
       break;
      }
     }
     $27 = $0;
     $28 = $1;
     $29 = $6;
     $30 = (_factor_constants($27,$28,$29)|0);
     $31 = ($30|0)!=(0);
     if (!($31)) {
      break;
     }
    }
    $32 = $0;
    $33 = $1;
    $34 = $2;
    $35 = $3;
    $36 = (_factor_divide($32,$33,$34,$35)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
   }
   $38 = $0;
   $39 = $1;
   $40 = $2;
   $41 = $3;
   $42 = (_factor_plus($38,$39,$40,$41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    break;
   }
  }
  $44 = $4;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $0;
   $47 = $1;
   $48 = (_factor_power($46,$47)|0);
   $49 = ($48|0)!=(0);
   $51 = $49;
  } else {
   $51 = 0;
  }
  if (!($51)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _simp2_power($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, $j = 0, $k = 0, $level = 0, $modified = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(8);
  L4: do {
   if ($11) {
    $12 = $i;
    $13 = $0;
    $14 = (($13) + ($12<<4)|0);
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $level = $16;
    $op = 0;
    $k = -1;
    $17 = $i;
    $18 = (($17) + 1)|0;
    $j = $18;
    while(1) {
     $19 = $j;
     $20 = $1;
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)<($21|0);
     if ($22) {
      $23 = $j;
      $24 = $0;
      $25 = (($24) + ($23<<4)|0);
      $26 = (($25) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $level;
      $29 = ($27|0)>=($28|0);
      $170 = $29;
     } else {
      $170 = 0;
     }
     if (!($170)) {
      break;
     }
     $30 = $j;
     $31 = $0;
     $32 = (($31) + ($30<<4)|0);
     $33 = (($32) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $level;
     $36 = (($35) + 1)|0;
     $37 = ($34|0)==($36|0);
     if ($37) {
      $38 = $j;
      $39 = $0;
      $40 = (($39) + ($38<<4)|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($41|0)==(2);
      if ($42) {
       $43 = $j;
       $44 = $0;
       $45 = (($44) + ($43<<4)|0);
       $46 = (($45) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $op = $47;
      } else {
       $48 = $j;
       $49 = $0;
       $50 = (($49) + ($48<<4)|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0);
       if ($52) {
        $53 = $j;
        $54 = $0;
        $55 = (($54) + ($53<<4)|0);
        $56 = (($55) + 8|0);
        $57 = +HEAPF64[$56>>3];
        $58 = $57 < 0.0;
        if ($58) {
         $59 = $j;
         $k = $59;
        }
       }
      }
     }
     $60 = $j;
     $61 = (($60) + 1)|0;
     $j = $61;
    }
    $62 = $j;
    $63 = $i;
    $64 = (($62) - ($63))|0;
    $65 = ($64|0)<=(2);
    if ($65) {
     $66 = $i;
     $67 = (($66) + 1)|0;
     $68 = $0;
     $69 = (($68) + ($67<<4)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(0);
     if ($71) {
      $72 = $i;
      $73 = (($72) + 1)|0;
      $74 = $0;
      $75 = (($74) + ($73<<4)|0);
      $76 = (($75) + 8|0);
      $77 = +HEAPF64[$76>>3];
      $78 = $77 < 0.0;
      if ($78) {
       $79 = $i;
       $80 = (($79) + 1)|0;
       $k = $80;
      } else {
       label = 22;
      }
     } else {
      label = 22;
     }
    } else {
     label = 22;
    }
    do {
     if ((label|0) == 22) {
      label = 0;
      $81 = $k;
      $82 = ($81|0)<(0);
      if ($82) {
       break L4;
      } else {
       break;
      }
     }
    } while(0);
    $83 = $op;
    if ((($83|0) == 5) | (($83|0) == 4) | (($83|0) == 0)) {
     $84 = $1;
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 2)|0;
     $87 = HEAP32[8>>2]|0;
     $88 = ($86|0)>($87|0);
     if ($88) {
      _error_huge();
     }
     $89 = $k;
     $90 = $0;
     $91 = (($90) + ($89<<4)|0);
     $92 = (($91) + 8|0);
     $93 = +HEAPF64[$92>>3];
     $94 = -$93;
     $95 = $k;
     $96 = $0;
     $97 = (($96) + ($95<<4)|0);
     $98 = (($97) + 8|0);
     HEAPF64[$98>>3] = $94;
     $99 = $i;
     $100 = (($99) - 2)|0;
     $k = $100;
     while(1) {
      $101 = $k;
      $102 = ($101|0)<(0);
      if ($102) {
       break;
      }
      $103 = $k;
      $104 = $0;
      $105 = (($104) + ($103<<4)|0);
      $106 = (($105) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = $level;
      $109 = ($107|0)<($108|0);
      if ($109) {
       break;
      }
      $110 = $k;
      $111 = (($110) + -1)|0;
      $k = $111;
     }
     $112 = $k;
     $113 = (($112) + 1)|0;
     $k = $113;
     $114 = $k;
     $i1 = $114;
     while(1) {
      $115 = $i1;
      $116 = $j;
      $117 = ($115|0)<($116|0);
      if (!($117)) {
       break;
      }
      $118 = $i1;
      $119 = $0;
      $120 = (($119) + ($118<<4)|0);
      $121 = (($120) + 4|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) + 1)|0;
      HEAP32[$121>>2] = $123;
      $124 = $i1;
      $125 = (($124) + 1)|0;
      $i1 = $125;
     }
     $126 = $k;
     $127 = (($126) + 2)|0;
     $128 = $0;
     $129 = (($128) + ($127<<4)|0);
     $130 = $k;
     $131 = $0;
     $132 = (($131) + ($130<<4)|0);
     $133 = $1;
     $134 = HEAP32[$133>>2]|0;
     $135 = $k;
     $136 = (($134) - ($135))|0;
     $137 = $136<<4;
     _memmove(($129|0),($132|0),($137|0))|0;
     $138 = $1;
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + 2)|0;
     HEAP32[$138>>2] = $140;
     $141 = $level;
     $142 = $k;
     $143 = $0;
     $144 = (($143) + ($142<<4)|0);
     $145 = (($144) + 4|0);
     HEAP32[$145>>2] = $141;
     $146 = $k;
     $147 = $0;
     $148 = (($147) + ($146<<4)|0);
     HEAP32[$148>>2] = 0;
     $149 = $k;
     $150 = $0;
     $151 = (($150) + ($149<<4)|0);
     $152 = (($151) + 8|0);
     HEAPF64[$152>>3] = 1.0;
     $153 = $k;
     $154 = (($153) + 1)|0;
     $k = $154;
     $155 = $level;
     $156 = $k;
     $157 = $0;
     $158 = (($157) + ($156<<4)|0);
     $159 = (($158) + 4|0);
     HEAP32[$159>>2] = $155;
     $160 = $k;
     $161 = $0;
     $162 = (($161) + ($160<<4)|0);
     HEAP32[$162>>2] = 2;
     $163 = $k;
     $164 = $0;
     $165 = (($164) + ($163<<4)|0);
     $166 = (($165) + 8|0);
     HEAP32[$166>>2] = 5;
     $modified = 1;
    }
    label = 40;
   } else {
    label = 40;
   }
  } while(0);
  if ((label|0) == 40) {
   label = 0;
  }
  $167 = $i;
  $168 = (($167) + 2)|0;
  $i = $168;
 }
 $169 = $modified;
 STACKTOP = sp;return ($169|0);
}
function _elim_sign($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0, $d = 0.0, $denominator = 0, $i = 0, $j = 0, $k = 0, $level = 0, $modified = 0, $numerator = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numerator = sp + 8|0;
 $denominator = sp;
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $level = $10;
  $11 = $i;
  $12 = (($11) + 1)|0;
  $13 = $0;
  $14 = (($13) + ($12<<4)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0);
  L4: do {
   if ($16) {
    $17 = $i;
    $18 = $0;
    $19 = (($18) + ($17<<4)|0);
    $20 = (($19) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(8);
    if ($22) {
     $23 = $i;
     $24 = (($23) + 1)|0;
     $25 = $0;
     $26 = (($25) + ($24<<4)|0);
     $27 = (($26) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $level;
     $30 = ($28|0)==($29|0);
     if (!($30)) {
      $31 = $i;
      $32 = (($31) + 1)|0;
      $33 = $0;
      $34 = (($33) + ($32<<4)|0);
      $35 = (($34) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $level;
      $38 = (($37) + 1)|0;
      $39 = ($36|0)==($38|0);
      if (!($39)) {
       label = 75;
       break;
      }
     }
     $40 = $i;
     $41 = (($40) + 1)|0;
     $42 = $0;
     $43 = (($42) + ($41<<4)|0);
     $44 = (($43) + 4|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $level;
     $47 = (($46) + 1)|0;
     $48 = ($45|0)==($47|0);
     do {
      if ($48) {
       $49 = $i;
       $50 = (($49) + 3)|0;
       $51 = $1;
       $52 = HEAP32[$51>>2]|0;
       $53 = ($50|0)>=($52|0);
       if (!($53)) {
        $54 = $i;
        $55 = (($54) + 2)|0;
        $56 = $0;
        $57 = (($56) + ($55<<4)|0);
        $58 = (($57) + 8|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = ($59|0)!=(4);
        if (!($60)) {
         $61 = $i;
         $62 = (($61) + 2)|0;
         $k = $62;
         while(1) {
          $63 = $k;
          $64 = $1;
          $65 = HEAP32[$64>>2]|0;
          $66 = ($63|0)<($65|0);
          if ($66) {
           $67 = $k;
           $68 = $0;
           $69 = (($68) + ($67<<4)|0);
           $70 = (($69) + 4|0);
           $71 = HEAP32[$70>>2]|0;
           $72 = $level;
           $73 = (($72) + 1)|0;
           $74 = ($71|0)>=($73|0);
           $318 = $74;
          } else {
           $318 = 0;
          }
          if (!($318)) {
           break;
          }
          $75 = $k;
          $76 = (($75) + 2)|0;
          $k = $76;
         }
         $77 = $k;
         $78 = $i;
         $79 = (($78) + 2)|0;
         $80 = ($77|0)<=($79|0);
         if ($80) {
          break L4;
         }
         $81 = $i;
         $82 = (($81) + 3)|0;
         $83 = $0;
         $84 = (($83) + ($82<<4)|0);
         $85 = $k;
         $86 = $i;
         $87 = (($86) + 3)|0;
         $88 = (($85) - ($87))|0;
         $89 = (_is_integer_expr($84,$88)|0);
         $90 = ($89|0)!=(0);
         if ($90) {
          break;
         } else {
          break L4;
         }
        }
       }
       break L4;
      }
     } while(0);
     $91 = $i;
     $92 = (($91) + 1)|0;
     $93 = $0;
     $94 = (($93) + ($92<<4)|0);
     $95 = (($94) + 8|0);
     $96 = +HEAPF64[$95>>3];
     (_f_to_fraction($96,$numerator,$denominator)|0);
     $97 = +HEAPF64[$numerator>>3];
     $98 = (+_fmod((+$97),2.0));
     $99 = $98 == 0.0;
     if ($99) {
      $100 = $i;
      $101 = (($100) - 1)|0;
      $102 = $0;
      $103 = (($102) + ($101<<4)|0);
      $104 = (($103) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $level;
      $107 = ($105|0)==($106|0);
      if ($107) {
       $108 = $i;
       $109 = (($108) - 1)|0;
       $110 = $0;
       $111 = (($110) + ($109<<4)|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ($112|0)==(1);
       if ($113) {
        $114 = $i;
        $115 = (($114) - 1)|0;
        $116 = $0;
        $117 = (($116) + ($115<<4)|0);
        $118 = (($117) + 8|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = ($119|0)==(3);
        if ($120) {
         $121 = $i;
         $122 = (($121) - 1)|0;
         $123 = $0;
         $124 = (($123) + ($122<<4)|0);
         HEAP32[$124>>2] = 0;
         $125 = $i;
         $126 = (($125) - 1)|0;
         $127 = $0;
         $128 = (($127) + ($126<<4)|0);
         $129 = (($128) + 8|0);
         HEAPF64[$129>>3] = -1.0;
         $130 = $i;
         $131 = (($130) + 1)|0;
         $132 = $0;
         $133 = (($132) + ($131<<4)|0);
         $134 = (($133) + 8|0);
         $135 = +HEAPF64[$134>>3];
         $136 = $135 / 2.0;
         HEAPF64[$134>>3] = $136;
         $modified = 1;
         break;
        }
       }
      }
      $op = 0;
      $137 = $i;
      $138 = (($137) - 1)|0;
      $j = $138;
      while(1) {
       $139 = $j;
       $140 = ($139|0)>=(0);
       if ($140) {
        $141 = $j;
        $142 = $0;
        $143 = (($142) + ($141<<4)|0);
        $144 = (($143) + 4|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = $level;
        $147 = ($145|0)>=($146|0);
        $319 = $147;
       } else {
        $319 = 0;
       }
       if (!($319)) {
        break;
       }
       $148 = $j;
       $149 = $0;
       $150 = (($149) + ($148<<4)|0);
       $151 = (($150) + 4|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = $level;
       $154 = (($153) + 1)|0;
       $155 = ($152|0)<=($154|0);
       if ($155) {
        $156 = $j;
        $157 = $0;
        $158 = (($157) + ($156<<4)|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(2);
        if ($160) {
         label = 33;
         break;
        }
       }
       $166 = $j;
       $167 = (($166) + -1)|0;
       $j = $167;
      }
      if ((label|0) == 33) {
       label = 0;
       $161 = $j;
       $162 = $0;
       $163 = (($162) + ($161<<4)|0);
       $164 = (($163) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $op = $165;
      }
      $168 = $op;
      if ((($168|0) == 5) | (($168|0) == 4) | (($168|0) == 0)) {
       $169 = $i;
       $170 = (($169) - 1)|0;
       $j = $170;
       while(1) {
        $171 = $j;
        $172 = ($171|0)>=(0);
        if ($172) {
         $173 = $j;
         $174 = $0;
         $175 = (($174) + ($173<<4)|0);
         $176 = (($175) + 4|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = $level;
         $179 = ($177|0)>=($178|0);
         $320 = $179;
        } else {
         $320 = 0;
        }
        if (!($320)) {
         break;
        }
        $180 = $j;
        $181 = $0;
        $182 = (($181) + ($180<<4)|0);
        $183 = (($182) + 4|0);
        $184 = HEAP32[$183>>2]|0;
        $185 = $level;
        $186 = (($185) + 1)|0;
        $187 = ($184|0)<=($186|0);
        if ($187) {
         $188 = $j;
         $189 = $0;
         $190 = (($189) + ($188<<4)|0);
         $191 = HEAP32[$190>>2]|0;
         $192 = ($191|0)==(1);
         if ($192) {
          $193 = $j;
          $194 = $0;
          $195 = (($194) + ($193<<4)|0);
          $196 = (($195) + 8|0);
          $197 = HEAP32[$196>>2]|0;
          $198 = $197 & 16383;
          $199 = ($198|0)==(4);
          if ($199) {
           $200 = $j;
           $201 = $0;
           $202 = (($201) + ($200<<4)|0);
           HEAP32[$202>>2] = 0;
           $203 = $j;
           $204 = $0;
           $205 = (($204) + ($203<<4)|0);
           $206 = (($205) + 8|0);
           HEAPF64[$206>>3] = 1.0;
           $modified = 1;
          } else {
           label = 46;
          }
         } else {
          label = 46;
         }
         if ((label|0) == 46) {
          label = 0;
          $207 = $j;
          $208 = $0;
          $209 = (($208) + ($207<<4)|0);
          $210 = HEAP32[$209>>2]|0;
          $211 = ($210|0)==(0);
          do {
           if ($211) {
            $212 = $j;
            $213 = $0;
            $214 = (($213) + ($212<<4)|0);
            $215 = (($214) + 8|0);
            $216 = +HEAPF64[$215>>3];
            $217 = $216 < 0.0;
            if (!($217)) {
             break;
            }
            $218 = $j;
            $219 = $0;
            $220 = (($219) + ($218<<4)|0);
            $221 = (($220) + 8|0);
            $222 = +HEAPF64[$221>>3];
            $223 = -$222;
            $224 = $j;
            $225 = $0;
            $226 = (($225) + ($224<<4)|0);
            $227 = (($226) + 8|0);
            HEAPF64[$227>>3] = $223;
            $modified = 1;
           }
          } while(0);
         }
        }
        $228 = $j;
        $229 = (($228) + -1)|0;
        $j = $229;
       }
      }
     } else {
      $230 = $i;
      $231 = (($230) - 1)|0;
      $232 = $0;
      $233 = (($232) + ($231<<4)|0);
      $234 = (($233) + 4|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $level;
      $237 = ($235|0)==($236|0);
      if ($237) {
       $238 = $i;
       $239 = (($238) - 1)|0;
       $240 = $0;
       $241 = (($240) + ($239<<4)|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = ($242|0)==(1);
       if ($243) {
        $244 = $i;
        $245 = (($244) - 1)|0;
        $246 = $0;
        $247 = (($246) + ($245<<4)|0);
        $248 = (($247) + 8|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = ($249|0)==(3);
        if ($250) {
         $251 = $i;
         $252 = (($251) + 1)|0;
         $253 = $0;
         $254 = (($253) + ($252<<4)|0);
         $255 = (($254) + 4|0);
         $256 = HEAP32[$255>>2]|0;
         $257 = $level;
         $258 = ($256|0)==($257|0);
         if ($258) {
          $259 = $i;
          $260 = (($259) + 1)|0;
          $261 = $0;
          $262 = (($261) + ($260<<4)|0);
          $263 = (($262) + 8|0);
          $264 = +HEAPF64[$263>>3];
          $265 = (+_fmod((+$264),4.0));
          $d = $265;
          $266 = $d;
          $267 = $266 == 1.0;
          if ($267) {
           $268 = $i;
           $269 = $0;
           $270 = (($269) + ($268<<4)|0);
           $271 = (($270) + 8|0);
           HEAP32[$271>>2] = 4;
           $272 = $i;
           $273 = (($272) + 1)|0;
           $274 = $0;
           $275 = (($274) + ($273<<4)|0);
           $276 = (($275) + 8|0);
           HEAPF64[$276>>3] = 1.0;
           $modified = 1;
          } else {
           $277 = $d;
           $278 = $277 == 3.0;
           if ($278) {
            $279 = $i;
            $280 = $0;
            $281 = (($280) + ($279<<4)|0);
            $282 = (($281) + 8|0);
            HEAP32[$282>>2] = 4;
            $283 = $i;
            $284 = (($283) + 1)|0;
            $285 = $0;
            $286 = (($285) + ($284<<4)|0);
            $287 = (($286) + 8|0);
            HEAPF64[$287>>3] = -1.0;
            $modified = 1;
           }
          }
         } else {
          label = 65;
         }
        } else {
         label = 65;
        }
        if ((label|0) == 65) {
         label = 0;
         $288 = $i;
         $289 = (($288) - 1)|0;
         $290 = $0;
         $291 = (($290) + ($289<<4)|0);
         $292 = (($291) + 8|0);
         $293 = HEAP32[$292>>2]|0;
         $294 = $293 & 16383;
         $295 = ($294|0)==(4);
         if ($295) {
          $296 = +HEAPF64[$denominator>>3];
          $297 = (+_fmod((+$296),2.0));
          $298 = $297 == 1.0;
          if ($298) {
           $299 = +HEAPF64[$numerator>>3];
           $300 = (+_fmod((+$299),2.0));
           HEAPF64[$numerator>>3] = $300;
           $301 = +HEAPF64[$numerator>>3];
           $302 = $i;
           $303 = (($302) + 1)|0;
           $304 = $0;
           $305 = (($304) + ($303<<4)|0);
           $306 = (($305) + 8|0);
           $307 = +HEAPF64[$306>>3];
           $308 = $301 != $307;
           if ($308) {
            $309 = +HEAPF64[$numerator>>3];
            $310 = $i;
            $311 = (($310) + 1)|0;
            $312 = $0;
            $313 = (($312) + ($311<<4)|0);
            $314 = (($313) + 8|0);
            HEAPF64[$314>>3] = $309;
            $modified = 1;
           }
          }
         }
        }
       }
      }
     }
     label = 75;
    } else {
     label = 75;
    }
   } else {
    label = 75;
   }
  } while(0);
  if ((label|0) == 75) {
   label = 0;
  }
  $315 = $i;
  $316 = (($315) + 2)|0;
  $i = $316;
 }
 $317 = $modified;
 STACKTOP = sp;return ($317|0);
}
function _simp_equation($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $0;
 $2 = ($1|0)<(0);
 if (!($2)) {
  $3 = $0;
  $4 = HEAP32[464>>2]|0;
  $5 = ($3|0)>=($4|0);
  if (!($5)) {
   $6 = $0;
   $7 = (2080 + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)<=(0);
   if (!($9)) {
    $10 = $0;
    $11 = (480 + ($10<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $0;
    $14 = (2080 + ($13<<2)|0);
    (_simp_loop($12,$14)|0);
    $15 = $0;
    $16 = (2880 + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(0);
    if (!($18)) {
     STACKTOP = sp;return;
    }
    $19 = $0;
    $20 = (1280 + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $0;
    $23 = (2880 + ($22<<2)|0);
    (_simp_loop($21,$23)|0);
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _simp_loop($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $rv = 0;
 while(1) {
  while(1) {
   while(1) {
    while(1) {
     $2 = $0;
     $3 = $1;
     _elim_loop($2,$3);
     $4 = $0;
     $5 = $1;
     $6 = (_simp2_power($4,$5)|0);
     $7 = ($6|0)!=(0);
     if (!($7)) {
      break;
     }
    }
    $8 = $0;
    $9 = $1;
    $10 = (_factor_times($8,$9)|0);
    $i = $10;
    $11 = $i;
    $12 = ($11|0)!=(0);
    if ($12) {
     $rv = 1;
    }
    $13 = $i;
    $14 = ($13|0)!=(0);
    if (!($14)) {
     break;
    }
   }
   $15 = $0;
   $16 = $1;
   $17 = (_elim_sign($15,$16)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
  }
  $19 = $0;
  $20 = $1;
  $21 = (_subtract_itself($19,$20)|0);
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
 }
 $23 = $rv;
 STACKTOP = sp;return ($23|0);
}
function _mid_simp_side($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 _simp_ssub($2,$3,0,1.0,1,1,6);
 STACKTOP = sp;return;
}
function _simps_side($equation,$np,$zsolve) {
 $equation = $equation|0;
 $np = $np|0;
 $zsolve = $zsolve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $zsolve;
 $3 = $0;
 $4 = $1;
 _elim_loop($3,$4);
 $5 = $0;
 $6 = $1;
 (_simp_constant_power($5,$6)|0);
 while(1) {
  $7 = $0;
  $8 = $1;
  $9 = $2;
  $10 = ($9|0)!=(0);
  $11 = $10 ^ 1;
  $12 = $11&1;
  _simp_ssub($7,$8,0,0.0,$12,1,6);
  $13 = $0;
  $14 = $1;
  $15 = (_super_factor($13,$14,0)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _simp_constant_power($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i = 0, $j = 0, $level = 0, $modified = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(8);
  do {
   if ($11) {
   } else {
    $12 = $i;
    $13 = $0;
    $14 = (($13) + ($12<<4)|0);
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $level = $16;
    $17 = $i;
    $18 = (($17) - 1)|0;
    $19 = $0;
    $20 = (($19) + ($18<<4)|0);
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $level;
    $24 = ($22|0)!=($23|0);
    if (!($24)) {
     $25 = $i;
     $26 = (($25) - 1)|0;
     $27 = $0;
     $28 = (($27) + ($26<<4)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)!=(0);
     if (!($30)) {
      $31 = $i;
      $32 = (($31) - 1)|0;
      $33 = $0;
      $34 = (($33) + ($32<<4)|0);
      $35 = (($34) + 8|0);
      $36 = +HEAPF64[$35>>3];
      $37 = $36 < 0.0;
      if ($37) {
       $38 = HEAP32[41224>>2]|0;
       $39 = ($38|0)!=(0);
       if (!($39)) {
        break;
       }
      }
      $40 = $i;
      $41 = (($40) + 1)|0;
      $42 = $0;
      $43 = (($42) + ($41<<4)|0);
      $44 = (($43) + 4|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = $level;
      $47 = (($46) + 1)|0;
      $48 = ($45|0)!=($47|0);
      if (!($48)) {
       $49 = $i;
       $50 = (($49) + 1)|0;
       $51 = $0;
       $52 = (($51) + ($50<<4)|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)!=(0);
       if (!($54)) {
        $55 = $i;
        $56 = (($55) + 1)|0;
        $57 = $0;
        $58 = (($57) + ($56<<4)|0);
        $59 = (($58) + 8|0);
        $60 = +HEAPF64[$59>>3];
        $61 = $60 == 1.0;
        if (!($61)) {
         $62 = $i;
         $63 = (($62) + 2)|0;
         $j = $63;
         $64 = $j;
         $65 = $1;
         $66 = HEAP32[$65>>2]|0;
         $67 = ($64|0)>=($66|0);
         if (!($67)) {
          $68 = $j;
          $69 = $0;
          $70 = (($69) + ($68<<4)|0);
          $71 = (($70) + 4|0);
          $72 = HEAP32[$71>>2]|0;
          $73 = $level;
          $74 = (($73) + 1)|0;
          $75 = ($72|0)!=($74|0);
          if (!($75)) {
           $76 = $j;
           $77 = $0;
           $78 = (($77) + ($76<<4)|0);
           $79 = (($78) + 8|0);
           $80 = HEAP32[$79>>2]|0;
           if ((($80|0) == 4)) {
           } else if ((($80|0) == 5)) {
            $81 = $1;
            $82 = HEAP32[$81>>2]|0;
            $83 = (($82) + 2)|0;
            $84 = HEAP32[8>>2]|0;
            $85 = ($83|0)>($84|0);
            if ($85) {
             _error_huge();
            }
            $86 = $j;
            $87 = (($86) + 2)|0;
            $88 = $0;
            $89 = (($88) + ($87<<4)|0);
            $90 = $j;
            $91 = $0;
            $92 = (($91) + ($90<<4)|0);
            $93 = $1;
            $94 = HEAP32[$93>>2]|0;
            $95 = $j;
            $96 = (($94) - ($95))|0;
            $97 = $96<<4;
            _memmove(($89|0),($92|0),($97|0))|0;
            $98 = $1;
            $99 = HEAP32[$98>>2]|0;
            $100 = (($99) + 2)|0;
            HEAP32[$98>>2] = $100;
            $101 = $level;
            $102 = (($101) + 1)|0;
            $103 = $j;
            $104 = (($103) + 1)|0;
            $105 = $0;
            $106 = (($105) + ($104<<4)|0);
            $107 = (($106) + 4|0);
            HEAP32[$107>>2] = $102;
            $108 = $j;
            $109 = (($108) + 1)|0;
            $110 = $0;
            $111 = (($110) + ($109<<4)|0);
            HEAP32[$111>>2] = 0;
            $112 = $j;
            $113 = (($112) + 1)|0;
            $114 = $0;
            $115 = (($114) + ($113<<4)|0);
            $116 = (($115) + 8|0);
            HEAPF64[$116>>3] = 1.0;
           } else {
            break;
           }
           $117 = $level;
           $118 = $j;
           $119 = $0;
           $120 = (($119) + ($118<<4)|0);
           $121 = (($120) + 4|0);
           HEAP32[$121>>2] = $117;
           $122 = $j;
           $123 = $0;
           $124 = (($123) + ($122<<4)|0);
           $125 = (($124) + 8|0);
           HEAP32[$125>>2] = 8;
           $126 = $i;
           $127 = (($126) - 1)|0;
           $128 = $0;
           $129 = (($128) + ($127<<4)|0);
           $130 = (($129) + 4|0);
           $131 = HEAP32[$130>>2]|0;
           $132 = (($131) + 1)|0;
           HEAP32[$130>>2] = $132;
           $133 = $i;
           $134 = $0;
           $135 = (($134) + ($133<<4)|0);
           $136 = (($135) + 4|0);
           $137 = HEAP32[$136>>2]|0;
           $138 = (($137) + 1)|0;
           HEAP32[$136>>2] = $138;
           $modified = 1;
           break;
          }
         }
         break;
        }
       }
      }
      break;
     }
    }
   }
  } while(0);
  $139 = $i;
  $140 = (($139) + 2)|0;
  $i = $140;
 }
 $141 = $modified;
 STACKTOP = sp;return ($141|0);
}
function _simpv_side($equation,$np,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $v;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $2;
 $7 = ($6|0)==(0);
 $8 = $7&1;
 _simp_ssub($3,$4,$5,0.0,$8,1,6);
 STACKTOP = sp;return;
}
function _simpv_equation($n,$v) {
 $n = $n|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $v;
 $2 = $0;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $0;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $0;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $11 = $0;
    $12 = (480 + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $0;
    $15 = (2080 + ($14<<2)|0);
    $16 = $1;
    _simpv_side($13,$15,$16);
    $17 = $0;
    $18 = (2880 + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)>(0);
    if (!($20)) {
     STACKTOP = sp;return;
    }
    $21 = $0;
    $22 = (1280 + ($21<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $0;
    $25 = (2880 + ($24<<2)|0);
    $26 = $1;
    _simpv_side($23,$25,$26);
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _factor_imaginary($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 $4 = (_approximate_complex_roots($2,$3)|0);
 $rv = $4;
 $5 = $0;
 $6 = $1;
 _factorv($5,$6,3);
 $7 = $rv;
 STACKTOP = sp;return ($7|0);
}
function _factorv($equation,$np,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $v;
 while(1) {
  while(1) {
   $3 = $0;
   $4 = $1;
   (_simp_loop($3,$4)|0);
   $5 = $0;
   $6 = $1;
   $7 = $2;
   $8 = (_factor_plus($5,$6,$7,0.0)|0);
   $9 = ($8|0)!=(0);
   if (!($9)) {
    break;
   }
  }
  $10 = $2;
  $11 = ($10|0)==(3);
  if ($11) {
   $12 = $0;
   $13 = $1;
   $14 = (_div_imaginary($12,$13)|0);
   $15 = ($14|0)!=(0);
   $16 = $15;
  } else {
   $16 = 0;
  }
  if (!($16)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _div_imaginary($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $biloc = 0, $eiloc = 0, $eloc = 0, $i = 0, $ilevel = 0;
 var $iloc = 0, $j = 0, $k = 0, $level = 0, $modified = 0, $n = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(5);
  L4: do {
   if ($11) {
    $12 = $i;
    $13 = $0;
    $14 = (($13) + ($12<<4)|0);
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $level = $16;
    $17 = $i;
    $18 = (($17) + 1)|0;
    $19 = $0;
    $20 = (($19) + ($18<<4)|0);
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $level;
    $24 = ($22|0)==($23|0);
    if ($24) {
     $25 = $i;
     $26 = (($25) + 1)|0;
     $27 = $0;
     $28 = (($27) + ($26<<4)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(1);
     if ($30) {
      $31 = $i;
      $32 = (($31) + 1)|0;
      $33 = $0;
      $34 = (($33) + ($32<<4)|0);
      $35 = (($34) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)==(3);
      if ($37) {
       $38 = $1;
       $39 = HEAP32[$38>>2]|0;
       $40 = (($39) + 2)|0;
       $41 = HEAP32[8>>2]|0;
       $42 = ($40|0)>($41|0);
       if ($42) {
        _error_huge();
       }
       $43 = $i;
       $44 = (($43) + 2)|0;
       $45 = $0;
       $46 = (($45) + ($44<<4)|0);
       $47 = $i;
       $48 = $0;
       $49 = (($48) + ($47<<4)|0);
       $50 = $1;
       $51 = HEAP32[$50>>2]|0;
       $52 = $i;
       $53 = (($51) - ($52))|0;
       $54 = $53<<4;
       _memmove(($46|0),($49|0),($54|0))|0;
       $55 = $1;
       $56 = HEAP32[$55>>2]|0;
       $57 = (($56) + 2)|0;
       HEAP32[$55>>2] = $57;
       $58 = $level;
       $59 = $i;
       $60 = $0;
       $61 = (($60) + ($59<<4)|0);
       $62 = (($61) + 4|0);
       HEAP32[$62>>2] = $58;
       $63 = $i;
       $64 = $0;
       $65 = (($64) + ($63<<4)|0);
       HEAP32[$65>>2] = 2;
       $66 = $i;
       $67 = $0;
       $68 = (($67) + ($66<<4)|0);
       $69 = (($68) + 8|0);
       HEAP32[$69>>2] = 4;
       $70 = $i;
       $71 = (($70) + 1)|0;
       $i = $71;
       $72 = $level;
       $73 = $i;
       $74 = $0;
       $75 = (($74) + ($73<<4)|0);
       $76 = (($75) + 4|0);
       HEAP32[$76>>2] = $72;
       $77 = $i;
       $78 = $0;
       $79 = (($78) + ($77<<4)|0);
       HEAP32[$79>>2] = 0;
       $80 = $i;
       $81 = $0;
       $82 = (($81) + ($80<<4)|0);
       $83 = (($82) + 8|0);
       HEAPF64[$83>>3] = -1.0;
       $84 = $i;
       $85 = (($84) + 1)|0;
       $i = $85;
       $86 = $level;
       $87 = $i;
       $88 = $0;
       $89 = (($88) + ($87<<4)|0);
       $90 = (($89) + 4|0);
       HEAP32[$90>>2] = $86;
       $91 = $i;
       $92 = $0;
       $93 = (($92) + ($91<<4)|0);
       HEAP32[$93>>2] = 2;
       $94 = $i;
       $95 = $0;
       $96 = (($95) + ($94<<4)|0);
       $97 = (($96) + 8|0);
       HEAP32[$97>>2] = 4;
       $modified = 1;
       break;
      }
     }
    }
    $op = 0;
    $eiloc = -1;
    $biloc = -1;
    $iloc = -1;
    $98 = $i;
    $k = $98;
    $99 = $i;
    $100 = (($99) + 1)|0;
    $j = $100;
    while(1) {
     $101 = $j;
     $102 = $1;
     $103 = HEAP32[$102>>2]|0;
     $104 = ($101|0)<($103|0);
     if ($104) {
      $105 = $j;
      $106 = $0;
      $107 = (($106) + ($105<<4)|0);
      $108 = (($107) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = $level;
      $111 = ($109|0)>($110|0);
      $454 = $111;
     } else {
      $454 = 0;
     }
     if (!($454)) {
      break;
     }
     $112 = $j;
     $113 = $0;
     $114 = (($113) + ($112<<4)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(2);
     if ($116) {
      $117 = $j;
      $118 = $0;
      $119 = (($118) + ($117<<4)|0);
      $120 = (($119) + 4|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $level;
      $123 = (($122) + 1)|0;
      $124 = ($121|0)==($123|0);
      if ($124) {
       $125 = $j;
       $126 = $0;
       $127 = (($126) + ($125<<4)|0);
       $128 = (($127) + 8|0);
       $129 = HEAP32[$128>>2]|0;
       $op = $129;
       $130 = $j;
       $k = $130;
       $131 = $iloc;
       $132 = ($131|0)>=(0);
       if ($132) {
        $133 = $eiloc;
        $134 = ($133|0)<(0);
        if ($134) {
         $135 = $j;
         $eiloc = $135;
        }
       }
      } else {
       label = 20;
      }
     } else {
      label = 20;
     }
     if ((label|0) == 20) {
      label = 0;
      $136 = $j;
      $137 = $0;
      $138 = (($137) + ($136<<4)|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(1);
      if ($140) {
       $141 = $j;
       $142 = $0;
       $143 = (($142) + ($141<<4)|0);
       $144 = (($143) + 8|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(3);
       if ($146) {
        $147 = $iloc;
        $148 = ($147|0)>=(0);
        if ($148) {
         label = 23;
         break;
        }
        $149 = $j;
        $iloc = $149;
        $150 = $k;
        $151 = (($150) + 1)|0;
        $biloc = $151;
       }
      }
     }
     $152 = $j;
     $153 = (($152) + 1)|0;
     $j = $153;
    }
    if ((label|0) == 23) {
     label = 0;
     $op = 0;
    }
    $154 = $j;
    $eloc = $154;
    $155 = $iloc;
    $156 = ($155|0)>=(0);
    if ($156) {
     $157 = $eiloc;
     $158 = ($157|0)<(0);
     if ($158) {
      $159 = $j;
      $eiloc = $159;
     }
    }
    $160 = $iloc;
    $161 = ($160|0)<(0);
    do {
     if (!($161)) {
      $162 = $op;
      $163 = ($162|0)!=(1);
      if ($163) {
       $164 = $op;
       $165 = ($164|0)!=(2);
       if ($165) {
        break;
       }
      }
      $166 = $iloc;
      $167 = $0;
      $168 = (($167) + ($166<<4)|0);
      $169 = (($168) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $ilevel = $170;
      $171 = $ilevel;
      $172 = $level;
      $173 = (($172) + 1)|0;
      $174 = ($171|0)!=($173|0);
      if ($174) {
       $175 = $ilevel;
       $176 = $level;
       $177 = (($176) + 2)|0;
       $178 = ($175|0)!=($177|0);
       if ($178) {
        break L4;
       }
       $179 = $iloc;
       $180 = $biloc;
       $181 = ($179|0)>($180|0);
       if ($181) {
        $182 = $iloc;
        $183 = (($182) - 1)|0;
        $184 = $0;
        $185 = (($184) + ($183<<4)|0);
        $186 = (($185) + 8|0);
        $187 = HEAP32[$186>>2]|0;
        $188 = ($187|0)!=(4);
        if ($188) {
         break L4;
        }
       }
       $189 = $iloc;
       $190 = (($189) + 1)|0;
       $191 = $eiloc;
       $192 = ($190|0)<($191|0);
       if ($192) {
        $193 = $iloc;
        $194 = (($193) + 1)|0;
        $195 = $0;
        $196 = (($195) + ($194<<4)|0);
        $197 = (($196) + 8|0);
        $198 = HEAP32[$197>>2]|0;
        if (!((($198|0) == 5) | (($198|0) == 4))) {
         break L4;
        }
       }
      }
      $199 = $eloc;
      $200 = $i;
      $201 = (($200) + 1)|0;
      $202 = (($199) - ($201))|0;
      $203 = (($202) + 5)|0;
      $204 = $eiloc;
      $205 = $biloc;
      $206 = (($204) - ($205))|0;
      $207 = (($203) + ($206))|0;
      $208 = $1;
      $209 = HEAP32[$208>>2]|0;
      $210 = (($207) + ($209))|0;
      $211 = (($210) + 2)|0;
      $212 = HEAP32[8>>2]|0;
      $213 = ($211|0)>($212|0);
      if ($213) {
       _error_huge();
      }
      $214 = $eloc;
      $215 = $i;
      $216 = (($215) + 1)|0;
      $217 = (($214) - ($216))|0;
      $n = $217;
      $218 = HEAP32[3704>>2]|0;
      $219 = $i;
      $220 = (($219) + 1)|0;
      $221 = $0;
      $222 = (($221) + ($220<<4)|0);
      $223 = $n;
      $224 = $223<<4;
      _memmove(($218|0),($222|0),($224|0))|0;
      $225 = $iloc;
      $226 = $i;
      $227 = (($226) + 1)|0;
      $228 = (($225) - ($227))|0;
      $229 = HEAP32[3704>>2]|0;
      $230 = (($229) + ($228<<4)|0);
      HEAP32[$230>>2] = 0;
      $231 = $iloc;
      $232 = $i;
      $233 = (($232) + 1)|0;
      $234 = (($231) - ($233))|0;
      $235 = HEAP32[3704>>2]|0;
      $236 = (($235) + ($234<<4)|0);
      $237 = (($236) + 8|0);
      HEAPF64[$237>>3] = 0.0;
      $j = 0;
      while(1) {
       $238 = $j;
       $239 = $n;
       $240 = ($238|0)<($239|0);
       if (!($240)) {
        break;
       }
       $241 = $j;
       $242 = HEAP32[3704>>2]|0;
       $243 = (($242) + ($241<<4)|0);
       $244 = (($243) + 4|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = (($245) + 2)|0;
       HEAP32[$244>>2] = $246;
       $247 = $j;
       $248 = (($247) + 1)|0;
       $j = $248;
      }
      $249 = $level;
      $250 = (($249) + 2)|0;
      $251 = $n;
      $252 = HEAP32[3704>>2]|0;
      $253 = (($252) + ($251<<4)|0);
      $254 = (($253) + 4|0);
      HEAP32[$254>>2] = $250;
      $255 = $n;
      $256 = HEAP32[3704>>2]|0;
      $257 = (($256) + ($255<<4)|0);
      HEAP32[$257>>2] = 2;
      $258 = $n;
      $259 = HEAP32[3704>>2]|0;
      $260 = (($259) + ($258<<4)|0);
      $261 = (($260) + 8|0);
      HEAP32[$261>>2] = 8;
      $262 = $n;
      $263 = (($262) + 1)|0;
      $n = $263;
      $264 = $level;
      $265 = (($264) + 2)|0;
      $266 = $n;
      $267 = HEAP32[3704>>2]|0;
      $268 = (($267) + ($266<<4)|0);
      $269 = (($268) + 4|0);
      HEAP32[$269>>2] = $265;
      $270 = $n;
      $271 = HEAP32[3704>>2]|0;
      $272 = (($271) + ($270<<4)|0);
      HEAP32[$272>>2] = 0;
      $273 = $n;
      $274 = HEAP32[3704>>2]|0;
      $275 = (($274) + ($273<<4)|0);
      $276 = (($275) + 8|0);
      HEAPF64[$276>>3] = 2.0;
      $277 = $n;
      $278 = (($277) + 1)|0;
      $n = $278;
      $279 = $level;
      $280 = (($279) + 1)|0;
      $281 = $n;
      $282 = HEAP32[3704>>2]|0;
      $283 = (($282) + ($281<<4)|0);
      $284 = (($283) + 4|0);
      HEAP32[$284>>2] = $280;
      $285 = $n;
      $286 = HEAP32[3704>>2]|0;
      $287 = (($286) + ($285<<4)|0);
      HEAP32[$287>>2] = 2;
      $288 = $n;
      $289 = HEAP32[3704>>2]|0;
      $290 = (($289) + ($288<<4)|0);
      $291 = (($290) + 8|0);
      HEAP32[$291>>2] = 1;
      $292 = $n;
      $293 = (($292) + 1)|0;
      $n = $293;
      $294 = $n;
      $295 = HEAP32[3704>>2]|0;
      $296 = (($295) + ($294<<4)|0);
      $297 = $biloc;
      $298 = $0;
      $299 = (($298) + ($297<<4)|0);
      $300 = $eiloc;
      $301 = $biloc;
      $302 = (($300) - ($301))|0;
      $303 = $302<<4;
      _memmove(($296|0),($299|0),($303|0))|0;
      $304 = $n;
      $j = $304;
      $305 = $eiloc;
      $306 = $biloc;
      $307 = (($305) - ($306))|0;
      $308 = $n;
      $309 = (($308) + ($307))|0;
      $n = $309;
      $310 = $j;
      $k = $310;
      while(1) {
       $311 = $k;
       $312 = $n;
       $313 = ($311|0)<($312|0);
       if (!($313)) {
        break;
       }
       $314 = $k;
       $315 = HEAP32[3704>>2]|0;
       $316 = (($315) + ($314<<4)|0);
       $317 = (($316) + 4|0);
       $318 = HEAP32[$317>>2]|0;
       $319 = (($318) + 2)|0;
       HEAP32[$317>>2] = $319;
       $320 = $k;
       $321 = (($320) + 1)|0;
       $k = $321;
      }
      $322 = $level;
      $323 = (($322) + 2)|0;
      $324 = $n;
      $325 = HEAP32[3704>>2]|0;
      $326 = (($325) + ($324<<4)|0);
      $327 = (($326) + 4|0);
      HEAP32[$327>>2] = $323;
      $328 = $n;
      $329 = HEAP32[3704>>2]|0;
      $330 = (($329) + ($328<<4)|0);
      HEAP32[$330>>2] = 2;
      $331 = $n;
      $332 = HEAP32[3704>>2]|0;
      $333 = (($332) + ($331<<4)|0);
      $334 = (($333) + 8|0);
      HEAP32[$334>>2] = 8;
      $335 = $n;
      $336 = (($335) + 1)|0;
      $n = $336;
      $337 = $level;
      $338 = (($337) + 2)|0;
      $339 = $n;
      $340 = HEAP32[3704>>2]|0;
      $341 = (($340) + ($339<<4)|0);
      $342 = (($341) + 4|0);
      HEAP32[$342>>2] = $338;
      $343 = $n;
      $344 = HEAP32[3704>>2]|0;
      $345 = (($344) + ($343<<4)|0);
      HEAP32[$345>>2] = 0;
      $346 = $n;
      $347 = HEAP32[3704>>2]|0;
      $348 = (($347) + ($346<<4)|0);
      $349 = (($348) + 8|0);
      HEAPF64[$349>>3] = 2.0;
      $350 = $n;
      $351 = (($350) + 1)|0;
      $n = $351;
      $352 = $j;
      $353 = $iloc;
      $354 = $biloc;
      $355 = (($353) - ($354))|0;
      $356 = (($352) + ($355))|0;
      $357 = HEAP32[3704>>2]|0;
      $358 = (($357) + ($356<<4)|0);
      HEAP32[$358>>2] = 0;
      $359 = $j;
      $360 = $iloc;
      $361 = $biloc;
      $362 = (($360) - ($361))|0;
      $363 = (($359) + ($362))|0;
      $364 = HEAP32[3704>>2]|0;
      $365 = (($364) + ($363<<4)|0);
      $366 = (($365) + 8|0);
      HEAPF64[$366>>3] = 1.0;
      $367 = $iloc;
      $368 = (($367) + 2)|0;
      $369 = $0;
      $370 = (($369) + ($368<<4)|0);
      $371 = $iloc;
      $372 = $0;
      $373 = (($372) + ($371<<4)|0);
      $374 = $1;
      $375 = HEAP32[$374>>2]|0;
      $376 = $iloc;
      $377 = (($375) - ($376))|0;
      $378 = $377<<4;
      _memmove(($370|0),($373|0),($378|0))|0;
      $379 = $1;
      $380 = HEAP32[$379>>2]|0;
      $381 = (($380) + 2)|0;
      HEAP32[$379>>2] = $381;
      $382 = $ilevel;
      $383 = (($382) + 1)|0;
      $ilevel = $383;
      $384 = $ilevel;
      $385 = $iloc;
      $386 = $0;
      $387 = (($386) + ($385<<4)|0);
      $388 = (($387) + 4|0);
      HEAP32[$388>>2] = $384;
      $389 = $iloc;
      $390 = $0;
      $391 = (($390) + ($389<<4)|0);
      HEAP32[$391>>2] = 0;
      $392 = $iloc;
      $393 = $0;
      $394 = (($393) + ($392<<4)|0);
      $395 = (($394) + 8|0);
      HEAPF64[$395>>3] = -1.0;
      $396 = $iloc;
      $397 = (($396) + 1)|0;
      $iloc = $397;
      $398 = $ilevel;
      $399 = $iloc;
      $400 = $0;
      $401 = (($400) + ($399<<4)|0);
      $402 = (($401) + 4|0);
      HEAP32[$402>>2] = $398;
      $403 = $iloc;
      $404 = $0;
      $405 = (($404) + ($403<<4)|0);
      HEAP32[$405>>2] = 2;
      $406 = $iloc;
      $407 = $0;
      $408 = (($407) + ($406<<4)|0);
      $409 = (($408) + 8|0);
      HEAP32[$409>>2] = 4;
      $410 = $iloc;
      $411 = (($410) + 1)|0;
      $iloc = $411;
      $412 = $ilevel;
      $413 = $iloc;
      $414 = $0;
      $415 = (($414) + ($413<<4)|0);
      $416 = (($415) + 4|0);
      HEAP32[$416>>2] = $412;
      $417 = $i;
      $418 = (($417) + 1)|0;
      $419 = $n;
      $420 = (($418) + ($419))|0;
      $421 = $0;
      $422 = (($421) + ($420<<4)|0);
      $423 = $i;
      $424 = $0;
      $425 = (($424) + ($423<<4)|0);
      $426 = $1;
      $427 = HEAP32[$426>>2]|0;
      $428 = $i;
      $429 = (($427) - ($428))|0;
      $430 = $429<<4;
      _memmove(($422|0),($425|0),($430|0))|0;
      $431 = $n;
      $432 = (($431) + 1)|0;
      $433 = $1;
      $434 = HEAP32[$433>>2]|0;
      $435 = (($434) + ($432))|0;
      HEAP32[$433>>2] = $435;
      $436 = $i;
      $437 = (($436) + 1)|0;
      $438 = $0;
      $439 = (($438) + ($437<<4)|0);
      $440 = HEAP32[3704>>2]|0;
      $441 = $n;
      $442 = $441<<4;
      _memmove(($439|0),($440|0),($442|0))|0;
      $443 = $n;
      $444 = (($443) + 1)|0;
      $445 = $i;
      $446 = (($445) + ($444))|0;
      $i = $446;
      $447 = $i;
      $448 = $0;
      $449 = (($448) + ($447<<4)|0);
      $450 = (($449) + 8|0);
      HEAP32[$450>>2] = 4;
      $modified = 1;
      label = 58;
      break L4;
     }
    } while(0);
   } else {
    label = 58;
   }
  } while(0);
  if ((label|0) == 58) {
   label = 0;
  }
  $451 = $i;
  $452 = (($451) + 2)|0;
  $i = $452;
 }
 $453 = $modified;
 STACKTOP = sp;return ($453|0);
}
function _calc_simp($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 HEAP32[41264>>2] = 1;
 $2 = $0;
 $3 = $1;
 (_subst_constants($2,$3)|0);
 $4 = $0;
 $5 = $1;
 _mid_simp_side($4,$5);
 $6 = $0;
 $7 = $1;
 (_factor_imaginary($6,$7)|0);
 $8 = $0;
 $9 = $1;
 (_ufactor($8,$9)|0);
 $10 = $0;
 $11 = $1;
 (_factor_imaginary($10,$11)|0);
 $12 = $0;
 $13 = $1;
 _uf_simp($12,$13);
 $14 = $0;
 $15 = $1;
 (_factor_imaginary($14,$15)|0);
 $16 = $0;
 $17 = $1;
 _mid_simp_side($16,$17);
 $18 = $0;
 $19 = $1;
 (_make_simple_fractions($18,$19)|0);
 $20 = $0;
 $21 = $1;
 (_uf_tsimp($20,$21)|0);
 HEAP32[41264>>2] = 0;
 STACKTOP = sp;return;
}
function _approximate($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = HEAP32[41296>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $0;
  $5 = $1;
  _calc_simp($4,$5);
  STACKTOP = sp;return;
 } else {
  $6 = $0;
  $7 = $1;
  (_subst_constants($6,$7)|0);
  HEAP32[41264>>2] = 1;
  $8 = $0;
  $9 = $1;
  (_simp_loop($8,$9)|0);
  $10 = $0;
  $11 = $1;
  (_factor_imaginary($10,$11)|0);
  HEAP32[41264>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _simp_i($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $level = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $rv = 0;
 $2 = $0;
 $3 = $1;
 (_simp_loop($2,$3)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8<<4)|0);
  $11 = HEAP32[$10>>2]|0;
  if ((($11|0) == 2)) {
  } else if ((($11|0) == 0)) {
  } else if ((($11|0) == 1)) {
   $12 = $i;
   $13 = $0;
   $14 = (($13) + ($12<<4)|0);
   $15 = (($14) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(3);
   if ($17) {
    $18 = $1;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + 2)|0;
    $21 = HEAP32[8>>2]|0;
    $22 = ($20|0)>($21|0);
    if ($22) {
     _error_huge();
    }
    $23 = $i;
    $24 = $0;
    $25 = (($24) + ($23<<4)|0);
    $26 = (($25) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 1)|0;
    $level = $28;
    $29 = $i;
    $30 = (($29) + 2)|0;
    $31 = $0;
    $32 = (($31) + ($30<<4)|0);
    $33 = $i;
    $34 = $0;
    $35 = (($34) + ($33<<4)|0);
    $36 = $1;
    $37 = HEAP32[$36>>2]|0;
    $38 = $i;
    $39 = (($37) - ($38))|0;
    $40 = $39<<4;
    _memmove(($32|0),($35|0),($40|0))|0;
    $41 = $1;
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + 2)|0;
    HEAP32[$41>>2] = $43;
    $44 = $level;
    $45 = $i;
    $46 = $0;
    $47 = (($46) + ($45<<4)|0);
    $48 = (($47) + 4|0);
    HEAP32[$48>>2] = $44;
    $49 = $i;
    $50 = $0;
    $51 = (($50) + ($49<<4)|0);
    HEAP32[$51>>2] = 0;
    $52 = $i;
    $53 = $0;
    $54 = (($53) + ($52<<4)|0);
    $55 = (($54) + 8|0);
    HEAPF64[$55>>3] = -1.0;
    $56 = $i;
    $57 = (($56) + 1)|0;
    $i = $57;
    $58 = $level;
    $59 = $i;
    $60 = $0;
    $61 = (($60) + ($59<<4)|0);
    $62 = (($61) + 4|0);
    HEAP32[$62>>2] = $58;
    $63 = $i;
    $64 = $0;
    $65 = (($64) + ($63<<4)|0);
    HEAP32[$65>>2] = 2;
    $66 = $i;
    $67 = $0;
    $68 = (($67) + ($66<<4)|0);
    $69 = (($68) + 8|0);
    HEAP32[$69>>2] = 8;
    $70 = $i;
    $71 = (($70) + 1)|0;
    $i = $71;
    $72 = $level;
    $73 = $i;
    $74 = $0;
    $75 = (($74) + ($73<<4)|0);
    $76 = (($75) + 4|0);
    HEAP32[$76>>2] = $72;
    $77 = $i;
    $78 = $0;
    $79 = (($78) + ($77<<4)|0);
    HEAP32[$79>>2] = 0;
    $80 = $i;
    $81 = $0;
    $82 = (($81) + ($80<<4)|0);
    $83 = (($82) + 8|0);
    HEAPF64[$83>>3] = 0.5;
    $rv = 1;
   }
  }
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 while(1) {
  while(1) {
   while(1) {
    while(1) {
     while(1) {
      $86 = $0;
      $87 = $1;
      _organize($86,$87);
      $88 = $0;
      $89 = $1;
      $90 = (_combine_constants($88,$89,0)|0);
      $91 = ($90|0)!=(0);
      if (!($91)) {
       break;
      }
     }
     $92 = $0;
     $93 = $1;
     $94 = (_elim_k($92,$93)|0);
     $95 = ($94|0)!=(0);
     if (!($95)) {
      break;
     }
    }
    $96 = $0;
    $97 = $1;
    $98 = (_simp_pp($96,$97)|0);
    $99 = ($98|0)!=(0);
    if (!($99)) {
     break;
    }
   }
   $100 = $0;
   $101 = $1;
   $102 = (_factor_power($100,$101)|0);
   $103 = ($102|0)!=(0);
   if (!($103)) {
    break;
   }
  }
  $104 = $0;
  $105 = $1;
  $106 = (_factor_times($104,$105)|0);
  $107 = ($106|0)!=(0);
  if (!($107)) {
   break;
  }
 }
 $108 = $0;
 $109 = $1;
 (_simp_loop($108,$109)|0);
 $110 = $rv;
 STACKTOP = sp;return ($110|0);
}
function _simp_divide($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 while(1) {
  while(1) {
   $2 = $0;
   $3 = $1;
   (_simp_loop($2,$3)|0);
   $4 = $0;
   $5 = $1;
   $6 = (_factor_constants($4,$5,1)|0);
   $7 = ($6|0)!=(0);
   if (!($7)) {
    break;
   }
  }
  $8 = $0;
  $9 = $1;
  $10 = (_factor_divide($8,$9,0,0.0)|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _simp2_divide($equation,$np,$v,$fc_level) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 $fc_level = $fc_level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $v;
 $3 = $fc_level;
 while(1) {
  while(1) {
   while(1) {
    while(1) {
     while(1) {
      $4 = $0;
      $5 = $1;
      _elim_loop($4,$5);
      $6 = $0;
      $7 = $1;
      $8 = (_simp2_power($6,$7)|0);
      $9 = ($8|0)!=(0);
      if (!($9)) {
       break;
      }
     }
     $10 = $0;
     $11 = $1;
     $12 = (_elim_sign($10,$11)|0);
     $13 = ($12|0)!=(0);
     if (!($13)) {
      break;
     }
    }
    $14 = $0;
    $15 = $1;
    $16 = (_subtract_itself($14,$15)|0);
    $17 = ($16|0)!=(0);
    if (!($17)) {
     break;
    }
   }
   $18 = $0;
   $19 = $1;
   $20 = $3;
   $21 = (_factor_constants($18,$19,$20)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    break;
   }
  }
  $23 = $0;
  $24 = $1;
  $25 = $2;
  $26 = (_factor_divide($23,$24,$25,0.0)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _simpb_side($equation,$np,$uf_power_flag,$power_flag,$fc_level) {
 $equation = $equation|0;
 $np = $np|0;
 $uf_power_flag = $uf_power_flag|0;
 $power_flag = $power_flag|0;
 $fc_level = $fc_level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt = 0, $i = 0, $last_v = 0, $v1 = 0, $va = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8048|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $va = sp;
 $0 = $equation;
 $1 = $np;
 $2 = $uf_power_flag;
 $3 = $power_flag;
 $4 = $fc_level;
 $5 = $0;
 $6 = $1;
 _elim_loop($5,$6);
 $7 = $2;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $0;
  $10 = $1;
  _uf_allpower($9,$10);
 }
 $last_v = 0;
 $vc = 0;
 while(1) {
  $11 = $vc;
  $12 = ($11|0)<(1000);
  if (!($12)) {
   break;
  }
  $cnt = 0;
  $v1 = -1;
  $i = 0;
  while(1) {
   $13 = $i;
   $14 = $1;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = $0;
   $19 = (($18) + ($17<<4)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   if ($21) {
    $22 = $i;
    $23 = $0;
    $24 = (($23) + ($22<<4)|0);
    $25 = (($24) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $last_v;
    $28 = ($26|0)>($27|0);
    if ($28) {
     $29 = $v1;
     $30 = ($29|0)==(-1);
     if ($30) {
      label = 11;
     } else {
      $31 = $i;
      $32 = $0;
      $33 = (($32) + ($31<<4)|0);
      $34 = (($33) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $v1;
      $37 = ($35|0)<($36|0);
      if ($37) {
       label = 11;
      } else {
       $43 = $i;
       $44 = $0;
       $45 = (($44) + ($43<<4)|0);
       $46 = (($45) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = $v1;
       $49 = ($47|0)==($48|0);
       if ($49) {
        $50 = $cnt;
        $51 = (($50) + 1)|0;
        $cnt = $51;
       }
      }
     }
     if ((label|0) == 11) {
      label = 0;
      $38 = $i;
      $39 = $0;
      $40 = (($39) + ($38<<4)|0);
      $41 = (($40) + 8|0);
      $42 = HEAP32[$41>>2]|0;
      $v1 = $42;
      $cnt = 1;
     }
    }
   }
   $52 = $i;
   $53 = (($52) + 2)|0;
   $i = $53;
  }
  $54 = $v1;
  $55 = ($54|0)==(-1);
  if ($55) {
   label = 19;
   break;
  }
  $56 = $v1;
  $last_v = $56;
  $57 = $v1;
  $58 = ($57|0)>(3);
  if ($58) {
   $59 = $v1;
   $60 = $vc;
   $61 = (($va) + ($60<<3)|0);
   HEAP32[$61>>2] = $59;
   $62 = $cnt;
   $63 = $vc;
   $64 = (($va) + ($63<<3)|0);
   $65 = (($64) + 4|0);
   HEAP32[$65>>2] = $62;
   $66 = $vc;
   $67 = (($66) + 1)|0;
   $vc = $67;
  }
 }
 if ((label|0) == 19) {
 }
 $68 = $vc;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $vc;
  _qsort($va,$70,8,60);
  $71 = $0;
  $72 = $1;
  $73 = HEAP32[$va>>2]|0;
  $74 = $4;
  _simp2_divide($71,$72,$73,$74);
  $i = 1;
  while(1) {
   $75 = $i;
   $76 = $vc;
   $77 = ($75|0)<($76|0);
   if (!($77)) {
    break;
   }
   $78 = $0;
   $79 = $1;
   $80 = $i;
   $81 = (($va) + ($80<<3)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (_factor_divide($78,$79,$82,0.0)|0);
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = $0;
    $86 = $1;
    $87 = $i;
    $88 = (($va) + ($87<<3)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $4;
    _simp2_divide($85,$86,$89,$90);
   }
   $91 = $i;
   $92 = (($91) + 1)|0;
   $i = $92;
  }
  $93 = $0;
  $94 = $1;
  $95 = $4;
  _simp2_divide($93,$94,0,$95);
  $i = 0;
  while(1) {
   $96 = $i;
   $97 = $vc;
   $98 = ($96|0)<($97|0);
   if (!($98)) {
    break;
   }
   while(1) {
    $99 = $0;
    $100 = $1;
    $101 = $i;
    $102 = (($va) + ($101<<3)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (_factor_plus($99,$100,$103,0.0)|0);
    $105 = ($104|0)!=(0);
    if (!($105)) {
     break;
    }
    $106 = $0;
    $107 = $1;
    $108 = $4;
    _simp2_divide($106,$107,0,$108);
   }
   $109 = $i;
   $110 = (($109) + 1)|0;
   $i = $110;
  }
 }
 while(1) {
  $111 = $0;
  $112 = $1;
  $113 = (_factor_divide($111,$112,5,0.0)|0);
  $114 = ($113|0)!=(0);
  if (!($114)) {
   break;
  }
  $115 = $0;
  $116 = $1;
  $117 = $4;
  _simp2_divide($115,$116,5,$117);
 }
 while(1) {
  $118 = $0;
  $119 = $1;
  $120 = (_factor_plus($118,$119,5,0.0)|0);
  $121 = ($120|0)!=(0);
  if (!($121)) {
   break;
  }
  $122 = $0;
  $123 = $1;
  $124 = $4;
  _simp2_divide($122,$123,0,$124);
 }
 $125 = $0;
 $126 = $1;
 $127 = $3;
 $128 = $4;
 _simp_ssub($125,$126,5,0.0,$127,1,$128);
 STACKTOP = sp;return;
}
function _simpb_vcmp($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $p2;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 16383;
 $6 = ($5|0)==(4);
 $7 = $6&1;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 16383;
 $11 = ($10|0)==(4);
 $12 = $11&1;
 $13 = ($7|0)==($12|0);
 do {
  if ($13) {
   $14 = $2;
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($16|0)==($19|0);
   if (!($20)) {
    $31 = $2;
    $32 = (($31) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $1;
    $35 = (($34) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($33) - ($36))|0;
    $0 = $37;
    break;
   }
   $21 = $1;
   $22 = HEAP32[$21>>2]|0;
   $23 = $2;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22|0)<($24|0);
   if ($25) {
    $0 = -1;
    break;
   }
   $26 = $1;
   $27 = HEAP32[$26>>2]|0;
   $28 = $2;
   $29 = HEAP32[$28>>2]|0;
   $30 = ($27|0)==($29|0);
   if ($30) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  } else {
   $38 = $1;
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 & 16383;
   $41 = ($40|0)==(4);
   if ($41) {
    $0 = -1;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _simple_frac_side($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $0;
  $6 = $1;
  (_make_simple_fractions($5,$6)|0);
  $7 = $0;
  $8 = $1;
  (_fractions_and_group($7,$8)|0);
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $1;
 (_simp_loop($9,$10)|0);
 $11 = $0;
 $12 = $1;
 (_poly_factor($11,$12,1)|0);
 while(1) {
  while(1) {
   while(1) {
    $13 = $0;
    $14 = $1;
    _simp_ssub($13,$14,0,0.0,0,1,5);
    $15 = $0;
    $16 = $1;
    $17 = (_poly_gcd_simp($15,$16)|0);
    $18 = ($17|0)!=(0);
    if (!($18)) {
     break;
    }
   }
   $19 = $0;
   $20 = $1;
   $21 = (_uf_power($19,$20)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    break;
   }
  }
  $23 = $0;
  $24 = $1;
  $25 = (_super_factor($23,$24,3)|0);
  $26 = ($25|0)!=(0);
  if (!($26)) {
   break;
  }
 }
 $27 = $0;
 $28 = $1;
 (_make_simple_fractions($27,$28)|0);
 $29 = $0;
 $30 = $1;
 (_uf_tsimp($29,$30)|0);
 $31 = $0;
 $32 = $1;
 (_poly_factor($31,$32,1)|0);
 $33 = $0;
 $34 = $1;
 _simpb_side($33,$34,1,0,2);
 $35 = $0;
 $36 = $1;
 _simpb_side($35,$36,1,0,2);
 $37 = $0;
 $38 = $1;
 (_fractions_and_group($37,$38)|0);
 STACKTOP = sp;return;
}
function _simpa_side($equation,$np,$quick_flag,$frac_flag) {
 $equation = $equation|0;
 $np = $np|0;
 $quick_flag = $quick_flag|0;
 $frac_flag = $frac_flag|0;
 var $$reg2mem201$0 = 0, $$reg2mem203$0 = 0, $$reg2mem205$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flag$0 = 0;
 var $flag$1 = 0, $save_save = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $save_save = sp;
 $0 = HEAP32[$np>>2]|0;
 $1 = ($0|0)==(1);
 L1: do {
  if ($1) {
   __THREW__ = 0;
   (invoke_iii(61,($equation|0),($np|0))|0);
   $2 = __THREW__; __THREW__ = 0;
   if ((($2|0) != 0) & ((threwValue|0) != 0)) { $3 = _testSetjmp(HEAP32[$2>>2]|0, _setjmpTable)|0; if (($3|0) == 0) { _longjmp($2|0, threwValue|0); } tempRet0 = threwValue; } else { $3 = -1; };
   $4 = tempRet0;
   if ((($3|0) == 1)) {
    $$reg2mem201$0 = $4;
   } else {
    $5 = ($frac_flag|0)!=(0);
    $6 = $5 ^ 1;
    $7 = $6&1;
    __THREW__ = 0;
    invoke_viiiii(62,($equation|0),($np|0),1,($7|0),2);
    $8 = __THREW__; __THREW__ = 0;
    if ((($8|0) != 0) & ((threwValue|0) != 0)) { $9 = _testSetjmp(HEAP32[$8>>2]|0, _setjmpTable)|0; if (($9|0) == 0) { _longjmp($8|0, threwValue|0); } tempRet0 = threwValue; } else { $9 = -1; };
    $10 = tempRet0;
    if ((($9|0) == 1)) {
     $$reg2mem201$0 = $10;
    } else {
     STACKTOP = sp;return;
    }
   }
  } else {
   __THREW__ = 0;
   (invoke_iii(63,($equation|0),($np|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   if ((($11|0) != 0) & ((threwValue|0) != 0)) { $12 = _testSetjmp(HEAP32[$11>>2]|0, _setjmpTable)|0; if (($12|0) == 0) { _longjmp($11|0, threwValue|0); } tempRet0 = threwValue; } else { $12 = -1; };
   $13 = tempRet0;
   if ((($12|0) == 1)) {
    $$reg2mem201$0 = $13;
   } else {
    while(1) {
     __THREW__ = 0;
     invoke_viiidiii(64,($equation|0),($np|0),0,1.0,0,1,5);
     $14 = __THREW__; __THREW__ = 0;
     if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = threwValue; } else { $15 = -1; };
     $16 = tempRet0;
     if ((($15|0) == 1)) {
      $$reg2mem201$0 = $16;
      break L1;
     }
     __THREW__ = 0;
     $17 = (invoke_iii(65,($equation|0),($np|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = threwValue; } else { $19 = -1; };
     $20 = tempRet0;
     if ((($19|0) == 1)) {
      $$reg2mem201$0 = $20;
      break L1;
     }
     $21 = ($17|0)!=(0);
     if (!($21)) {
      break;
     }
    }
    while(1) {
     __THREW__ = 0;
     $22 = (invoke_iii(66,($equation|0),($np|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
     $25 = tempRet0;
     if ((($24|0) == 1)) {
      $$reg2mem201$0 = $25;
      break L1;
     }
     $26 = ($22|0)!=(0);
     if (!($26)) {
      break;
     }
     __THREW__ = 0;
     (invoke_iii(63,($equation|0),($np|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = threwValue; } else { $28 = -1; };
     $29 = tempRet0;
     if ((($28|0) == 1)) {
      $$reg2mem201$0 = $29;
      break L1;
     }
    }
    $30 = HEAP32[56>>2]|0;
    $31 = ($30|0)!=(0);
    if ($31) {
     __THREW__ = 0;
     (invoke_iii(67,($equation|0),($np|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = threwValue; } else { $33 = -1; };
     $34 = tempRet0;
     if ((($33|0) == 1)) {
      $$reg2mem201$0 = $34;
      break;
     }
    }
    __THREW__ = 0;
    (invoke_iii(68,($equation|0),($np|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = threwValue; } else { $36 = -1; };
    $37 = tempRet0;
    if ((($36|0) == 1)) {
     $$reg2mem201$0 = $37;
    } else {
     __THREW__ = 0;
     (invoke_iii(69,($equation|0),($np|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = threwValue; } else { $39 = -1; };
     $40 = tempRet0;
     if ((($39|0) == 1)) {
      $$reg2mem201$0 = $40;
     } else {
      __THREW__ = 0;
      (invoke_iii(70,($equation|0),($np|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = threwValue; } else { $42 = -1; };
      $43 = tempRet0;
      if ((($42|0) == 1)) {
       $$reg2mem201$0 = $43;
      } else {
       __THREW__ = 0;
       invoke_vii(71,($equation|0),($np|0));
       $44 = __THREW__; __THREW__ = 0;
       if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = threwValue; } else { $45 = -1; };
       $46 = tempRet0;
       if ((($45|0) == 1)) {
        $$reg2mem201$0 = $46;
       } else {
        while(1) {
         __THREW__ = 0;
         invoke_vii(72,($equation|0),($np|0));
         $47 = __THREW__; __THREW__ = 0;
         if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = threwValue; } else { $48 = -1; };
         $49 = tempRet0;
         if ((($48|0) == 1)) {
          $$reg2mem201$0 = $49;
          break L1;
         }
         __THREW__ = 0;
         $50 = (invoke_iii(73,($equation|0),($np|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         if ((($51|0) != 0) & ((threwValue|0) != 0)) { $52 = _testSetjmp(HEAP32[$51>>2]|0, _setjmpTable)|0; if (($52|0) == 0) { _longjmp($51|0, threwValue|0); } tempRet0 = threwValue; } else { $52 = -1; };
         $53 = tempRet0;
         if ((($52|0) == 1)) {
          $$reg2mem201$0 = $53;
          break L1;
         }
         $54 = ($50|0)!=(0);
         if (!($54)) {
          break;
         }
        }
        __THREW__ = 0;
        (invoke_iii(74,($equation|0),($np|0))|0);
        $55 = __THREW__; __THREW__ = 0;
        if ((($55|0) != 0) & ((threwValue|0) != 0)) { $56 = _testSetjmp(HEAP32[$55>>2]|0, _setjmpTable)|0; if (($56|0) == 0) { _longjmp($55|0, threwValue|0); } tempRet0 = threwValue; } else { $56 = -1; };
        $57 = tempRet0;
        if ((($56|0) == 1)) {
         $$reg2mem201$0 = $57;
        } else {
         __THREW__ = 0;
         (invoke_iii(68,($equation|0),($np|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         if ((($58|0) != 0) & ((threwValue|0) != 0)) { $59 = _testSetjmp(HEAP32[$58>>2]|0, _setjmpTable)|0; if (($59|0) == 0) { _longjmp($58|0, threwValue|0); } tempRet0 = threwValue; } else { $59 = -1; };
         $60 = tempRet0;
         if ((($59|0) == 1)) {
          $$reg2mem201$0 = $60;
         } else {
          __THREW__ = 0;
          (invoke_iii(75,($equation|0),($np|0))|0);
          $61 = __THREW__; __THREW__ = 0;
          if ((($61|0) != 0) & ((threwValue|0) != 0)) { $62 = _testSetjmp(HEAP32[$61>>2]|0, _setjmpTable)|0; if (($62|0) == 0) { _longjmp($61|0, threwValue|0); } tempRet0 = threwValue; } else { $62 = -1; };
          $63 = tempRet0;
          if ((($62|0) == 1)) {
           $$reg2mem201$0 = $63;
          } else {
           __THREW__ = 0;
           invoke_viiidiii(64,($equation|0),($np|0),0,1.0,1,1,5);
           $64 = __THREW__; __THREW__ = 0;
           if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = threwValue; } else { $65 = -1; };
           $66 = tempRet0;
           if ((($65|0) == 1)) {
            $$reg2mem201$0 = $66;
           } else {
            __THREW__ = 0;
            (invoke_iii(68,($equation|0),($np|0))|0);
            $67 = __THREW__; __THREW__ = 0;
            if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = threwValue; } else { $68 = -1; };
            $69 = tempRet0;
            if ((($68|0) == 1)) {
             $$reg2mem201$0 = $69;
            } else {
             __THREW__ = 0;
             invoke_vii(76,($equation|0),($np|0));
             $70 = __THREW__; __THREW__ = 0;
             if ((($70|0) != 0) & ((threwValue|0) != 0)) { $71 = _testSetjmp(HEAP32[$70>>2]|0, _setjmpTable)|0; if (($71|0) == 0) { _longjmp($70|0, threwValue|0); } tempRet0 = threwValue; } else { $71 = -1; };
             $72 = tempRet0;
             if ((($71|0) == 1)) {
              $$reg2mem201$0 = $72;
             } else {
              __THREW__ = 0;
              (invoke_iii(69,($equation|0),($np|0))|0);
              $73 = __THREW__; __THREW__ = 0;
              if ((($73|0) != 0) & ((threwValue|0) != 0)) { $74 = _testSetjmp(HEAP32[$73>>2]|0, _setjmpTable)|0; if (($74|0) == 0) { _longjmp($73|0, threwValue|0); } tempRet0 = threwValue; } else { $74 = -1; };
              $75 = tempRet0;
              if ((($74|0) == 1)) {
               $$reg2mem201$0 = $75;
              } else {
               while(1) {
                while(1) {
                 __THREW__ = 0;
                 invoke_viiidiii(64,($equation|0),($np|0),0,1.0,0,1,6);
                 $76 = __THREW__; __THREW__ = 0;
                 if ((($76|0) != 0) & ((threwValue|0) != 0)) { $77 = _testSetjmp(HEAP32[$76>>2]|0, _setjmpTable)|0; if (($77|0) == 0) { _longjmp($76|0, threwValue|0); } tempRet0 = threwValue; } else { $77 = -1; };
                 $78 = tempRet0;
                 if ((($77|0) == 1)) {
                  $$reg2mem201$0 = $78;
                  break L1;
                 }
                 __THREW__ = 0;
                 $79 = (invoke_iii(65,($equation|0),($np|0))|0);
                 $80 = __THREW__; __THREW__ = 0;
                 if ((($80|0) != 0) & ((threwValue|0) != 0)) { $81 = _testSetjmp(HEAP32[$80>>2]|0, _setjmpTable)|0; if (($81|0) == 0) { _longjmp($80|0, threwValue|0); } tempRet0 = threwValue; } else { $81 = -1; };
                 $82 = tempRet0;
                 if ((($81|0) == 1)) {
                  $$reg2mem201$0 = $82;
                  break L1;
                 }
                 $83 = ($79|0)!=(0);
                 if (!($83)) {
                  break;
                 }
                }
                $84 = ($quick_flag|0)!=(0);
                if ($84) {
                 $$reg2mem205$0 = 0;
                } else {
                 __THREW__ = 0;
                 $85 = (invoke_iiii(77,($equation|0),($np|0),2)|0);
                 $86 = __THREW__; __THREW__ = 0;
                 if ((($86|0) != 0) & ((threwValue|0) != 0)) { $87 = _testSetjmp(HEAP32[$86>>2]|0, _setjmpTable)|0; if (($87|0) == 0) { _longjmp($86|0, threwValue|0); } tempRet0 = threwValue; } else { $87 = -1; };
                 $88 = tempRet0;
                 if ((($87|0) == 1)) {
                  $$reg2mem201$0 = $88;
                  break L1;
                 }
                 $89 = ($85|0)!=(0);
                 $$reg2mem205$0 = $89;
                }
                if (!($$reg2mem205$0)) {
                 break;
                }
               }
               __THREW__ = 0;
               $90 = (invoke_iii(78,($equation|0),($np|0))|0);
               $91 = __THREW__; __THREW__ = 0;
               if ((($91|0) != 0) & ((threwValue|0) != 0)) { $92 = _testSetjmp(HEAP32[$91>>2]|0, _setjmpTable)|0; if (($92|0) == 0) { _longjmp($91|0, threwValue|0); } tempRet0 = threwValue; } else { $92 = -1; };
               $93 = tempRet0;
               if ((($92|0) == 1)) {
                $$reg2mem201$0 = $93;
               } else {
                $94 = ($90|0)!=(0);
                if ($94) {
                 __THREW__ = 0;
                 invoke_viiidiii(64,($equation|0),($np|0),0,1.0,0,1,6);
                 $95 = __THREW__; __THREW__ = 0;
                 if ((($95|0) != 0) & ((threwValue|0) != 0)) { $96 = _testSetjmp(HEAP32[$95>>2]|0, _setjmpTable)|0; if (($96|0) == 0) { _longjmp($95|0, threwValue|0); } tempRet0 = threwValue; } else { $96 = -1; };
                 $97 = tempRet0;
                 if ((($96|0) == 1)) {
                  $$reg2mem201$0 = $97;
                  break;
                 }
                }
                __THREW__ = 0;
                (invoke_iii(68,($equation|0),($np|0))|0);
                $98 = __THREW__; __THREW__ = 0;
                if ((($98|0) != 0) & ((threwValue|0) != 0)) { $99 = _testSetjmp(HEAP32[$98>>2]|0, _setjmpTable)|0; if (($99|0) == 0) { _longjmp($98|0, threwValue|0); } tempRet0 = threwValue; } else { $99 = -1; };
                $100 = tempRet0;
                if ((($99|0) == 1)) {
                 $$reg2mem201$0 = $100;
                } else {
                 __THREW__ = 0;
                 (invoke_iii(75,($equation|0),($np|0))|0);
                 $101 = __THREW__; __THREW__ = 0;
                 if ((($101|0) != 0) & ((threwValue|0) != 0)) { $102 = _testSetjmp(HEAP32[$101>>2]|0, _setjmpTable)|0; if (($102|0) == 0) { _longjmp($101|0, threwValue|0); } tempRet0 = threwValue; } else { $102 = -1; };
                 $103 = tempRet0;
                 if ((($102|0) == 1)) {
                  $$reg2mem201$0 = $103;
                 } else {
                  __THREW__ = 0;
                  invoke_viii(79,($equation|0),($np|0),3);
                  $104 = __THREW__; __THREW__ = 0;
                  if ((($104|0) != 0) & ((threwValue|0) != 0)) { $105 = _testSetjmp(HEAP32[$104>>2]|0, _setjmpTable)|0; if (($105|0) == 0) { _longjmp($104|0, threwValue|0); } tempRet0 = threwValue; } else { $105 = -1; };
                  $106 = tempRet0;
                  if ((($105|0) == 1)) {
                   $$reg2mem201$0 = $106;
                  } else {
                   __THREW__ = 0;
                   (invoke_iii(70,($equation|0),($np|0))|0);
                   $107 = __THREW__; __THREW__ = 0;
                   if ((($107|0) != 0) & ((threwValue|0) != 0)) { $108 = _testSetjmp(HEAP32[$107>>2]|0, _setjmpTable)|0; if (($108|0) == 0) { _longjmp($107|0, threwValue|0); } tempRet0 = threwValue; } else { $108 = -1; };
                   $109 = tempRet0;
                   if ((($108|0) == 1)) {
                    $$reg2mem201$0 = $109;
                    break;
                   }
                   __THREW__ = 0;
                   invoke_viiidiii(64,($equation|0),($np|0),0,1.0,1,0,5);
                   $110 = __THREW__; __THREW__ = 0;
                   if ((($110|0) != 0) & ((threwValue|0) != 0)) { $111 = _testSetjmp(HEAP32[$110>>2]|0, _setjmpTable)|0; if (($111|0) == 0) { _longjmp($110|0, threwValue|0); } tempRet0 = threwValue; } else { $111 = -1; };
                   $112 = tempRet0;
                   if ((($111|0) == 1)) {
                    $$reg2mem201$0 = $112;
                    break;
                   }
                   __THREW__ = 0;
                   $113 = (invoke_iii(78,($equation|0),($np|0))|0);
                   $114 = __THREW__; __THREW__ = 0;
                   if ((($114|0) != 0) & ((threwValue|0) != 0)) { $115 = _testSetjmp(HEAP32[$114>>2]|0, _setjmpTable)|0; if (($115|0) == 0) { _longjmp($114|0, threwValue|0); } tempRet0 = threwValue; } else { $115 = -1; };
                   $116 = tempRet0;
                   if ((($115|0) == 1)) {
                    $$reg2mem201$0 = $116;
                    break;
                   }
                   $117 = ($113|0)!=(0);
                   if ($117) {
                    __THREW__ = 0;
                    invoke_viii(79,($equation|0),($np|0),3);
                    $118 = __THREW__; __THREW__ = 0;
                    if ((($118|0) != 0) & ((threwValue|0) != 0)) { $119 = _testSetjmp(HEAP32[$118>>2]|0, _setjmpTable)|0; if (($119|0) == 0) { _longjmp($118|0, threwValue|0); } tempRet0 = threwValue; } else { $119 = -1; };
                    $120 = tempRet0;
                    if ((($119|0) == 1)) {
                     $$reg2mem201$0 = $120;
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(70,($equation|0),($np|0))|0);
                    $121 = __THREW__; __THREW__ = 0;
                    if ((($121|0) != 0) & ((threwValue|0) != 0)) { $122 = _testSetjmp(HEAP32[$121>>2]|0, _setjmpTable)|0; if (($122|0) == 0) { _longjmp($121|0, threwValue|0); } tempRet0 = threwValue; } else { $122 = -1; };
                    $123 = tempRet0;
                    if ((($122|0) == 1)) {
                     $$reg2mem201$0 = $123;
                     break;
                    }
                    __THREW__ = 0;
                    invoke_viiidiii(64,($equation|0),($np|0),0,1.0,1,0,5);
                    $124 = __THREW__; __THREW__ = 0;
                    if ((($124|0) != 0) & ((threwValue|0) != 0)) { $125 = _testSetjmp(HEAP32[$124>>2]|0, _setjmpTable)|0; if (($125|0) == 0) { _longjmp($124|0, threwValue|0); } tempRet0 = threwValue; } else { $125 = -1; };
                    $126 = tempRet0;
                    if ((($125|0) == 1)) {
                     $$reg2mem201$0 = $126;
                     break;
                    }
                   }
                   __THREW__ = 0;
                   (invoke_iii(75,($equation|0),($np|0))|0);
                   $127 = __THREW__; __THREW__ = 0;
                   if ((($127|0) != 0) & ((threwValue|0) != 0)) { $128 = _testSetjmp(HEAP32[$127>>2]|0, _setjmpTable)|0; if (($128|0) == 0) { _longjmp($127|0, threwValue|0); } tempRet0 = threwValue; } else { $128 = -1; };
                   $129 = tempRet0;
                   if ((($128|0) == 1)) {
                    $$reg2mem201$0 = $129;
                    break;
                   }
                   __THREW__ = 0;
                   (invoke_iii(70,($equation|0),($np|0))|0);
                   $130 = __THREW__; __THREW__ = 0;
                   if ((($130|0) != 0) & ((threwValue|0) != 0)) { $131 = _testSetjmp(HEAP32[$130>>2]|0, _setjmpTable)|0; if (($131|0) == 0) { _longjmp($130|0, threwValue|0); } tempRet0 = threwValue; } else { $131 = -1; };
                   $132 = tempRet0;
                   if ((($131|0) == 1)) {
                    $$reg2mem201$0 = $132;
                    break;
                   }
                   __THREW__ = 0;
                   (invoke_iii(80,($equation|0),($np|0))|0);
                   $133 = __THREW__; __THREW__ = 0;
                   if ((($133|0) != 0) & ((threwValue|0) != 0)) { $134 = _testSetjmp(HEAP32[$133>>2]|0, _setjmpTable)|0; if (($134|0) == 0) { _longjmp($133|0, threwValue|0); } tempRet0 = threwValue; } else { $134 = -1; };
                   $135 = tempRet0;
                   if ((($134|0) == 1)) {
                    $$reg2mem201$0 = $135;
                    break;
                   }
                   __THREW__ = 0;
                   (invoke_iii(65,($equation|0),($np|0))|0);
                   $136 = __THREW__; __THREW__ = 0;
                   if ((($136|0) != 0) & ((threwValue|0) != 0)) { $137 = _testSetjmp(HEAP32[$136>>2]|0, _setjmpTable)|0; if (($137|0) == 0) { _longjmp($136|0, threwValue|0); } tempRet0 = threwValue; } else { $137 = -1; };
                   $138 = tempRet0;
                   if ((($137|0) == 1)) {
                    $$reg2mem201$0 = $138;
                    break;
                   }
                   while(1) {
                    while(1) {
                     __THREW__ = 0;
                     invoke_viiidiii(64,($equation|0),($np|0),0,1.0,0,1,6);
                     $139 = __THREW__; __THREW__ = 0;
                     if ((($139|0) != 0) & ((threwValue|0) != 0)) { $140 = _testSetjmp(HEAP32[$139>>2]|0, _setjmpTable)|0; if (($140|0) == 0) { _longjmp($139|0, threwValue|0); } tempRet0 = threwValue; } else { $140 = -1; };
                     $141 = tempRet0;
                     if ((($140|0) == 1)) {
                      $$reg2mem201$0 = $141;
                      break L1;
                     }
                     __THREW__ = 0;
                     $142 = (invoke_iii(65,($equation|0),($np|0))|0);
                     $143 = __THREW__; __THREW__ = 0;
                     if ((($143|0) != 0) & ((threwValue|0) != 0)) { $144 = _testSetjmp(HEAP32[$143>>2]|0, _setjmpTable)|0; if (($144|0) == 0) { _longjmp($143|0, threwValue|0); } tempRet0 = threwValue; } else { $144 = -1; };
                     $145 = tempRet0;
                     if ((($144|0) == 1)) {
                      $$reg2mem201$0 = $145;
                      break L1;
                     }
                     $146 = ($142|0)!=(0);
                     if (!($146)) {
                      break;
                     }
                    }
                    $147 = ($quick_flag|0)!=(0);
                    if ($147) {
                     $$reg2mem203$0 = 0;
                    } else {
                     __THREW__ = 0;
                     $148 = (invoke_iiii(77,($equation|0),($np|0),2)|0);
                     $149 = __THREW__; __THREW__ = 0;
                     if ((($149|0) != 0) & ((threwValue|0) != 0)) { $150 = _testSetjmp(HEAP32[$149>>2]|0, _setjmpTable)|0; if (($150|0) == 0) { _longjmp($149|0, threwValue|0); } tempRet0 = threwValue; } else { $150 = -1; };
                     $151 = tempRet0;
                     if ((($150|0) == 1)) {
                      $$reg2mem201$0 = $151;
                      break L1;
                     }
                     $152 = ($148|0)!=(0);
                     $$reg2mem203$0 = $152;
                    }
                    if (!($$reg2mem203$0)) {
                     break;
                    }
                   }
                   HEAP32[41216>>2] = $frac_flag;
                   $153 = HEAP32[$np>>2]|0;
                   HEAP32[3712>>2] = $153;
                   $154 = HEAP32[3680>>2]|0;
                   $155 = HEAP32[3712>>2]|0;
                   $156 = $155<<4;
                   _memmove(($154|0),($equation|0),($156|0))|0;
                   _memmove(($save_save|0),(41032|0),156)|0;
                   _saveSetjmp(41032,1,_setjmpTable|0)|0;
                   __THREW__ = 0;
                   $157 = __THREW__; __THREW__ = 0;
                   if ((($157|0) != 0) & ((threwValue|0) != 0)) { $158 = _testSetjmp(HEAP32[$157>>2]|0, _setjmpTable)|0; if (($158|0) == 0) { _longjmp($157|0, threwValue|0); } tempRet0 = threwValue; } else { $158 = -1; };
                   $159 = tempRet0;
                   if ((($158|0) == 1)) {
                    $$reg2mem201$0 = $159;
                    break;
                   }
                   $$reg2mem201$0 = 0;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 L91: while(1) {
  $160 = ($$reg2mem201$0|0)!=(0);
  if ($160) {
   _memmove((41032|0),($save_save|0),156)|0;
   $161 = ($$reg2mem201$0|0)==(13);
   if ($161) {
    __THREW__ = 0;
    invoke_vii(57,(41032|0),($$reg2mem201$0|0));
    $162 = __THREW__; __THREW__ = 0;
    if ((($162|0) != 0) & ((threwValue|0) != 0)) { $163 = _testSetjmp(HEAP32[$162>>2]|0, _setjmpTable)|0; if (($163|0) == 0) { _longjmp($162|0, threwValue|0); } tempRet0 = threwValue; } else { $163 = -1; };
    $164 = tempRet0;
    if ((($163|0) == 1)) {
     $$reg2mem201$0 = $164;
     continue;
    } else {
     label = 81;
     break;
    }
   }
   $165 = HEAP32[3712>>2]|0;
   HEAP32[$np>>2] = $165;
   $166 = HEAP32[3680>>2]|0;
   $167 = HEAP32[3712>>2]|0;
   $168 = $167<<4;
   _memmove(($equation|0),($166|0),($168|0))|0;
   $169 = ($$reg2mem201$0|0)==(14);
   if ($169) {
   } else {
   }
   HEAP32[41216>>2] = 1;
   __THREW__ = 0;
   (invoke_iii(69,($equation|0),($np|0))|0);
   $170 = __THREW__; __THREW__ = 0;
   if ((($170|0) != 0) & ((threwValue|0) != 0)) { $171 = _testSetjmp(HEAP32[$170>>2]|0, _setjmpTable)|0; if (($171|0) == 0) { _longjmp($170|0, threwValue|0); } tempRet0 = threwValue; } else { $171 = -1; };
   $172 = tempRet0;
   if ((($171|0) == 1)) {
    $$reg2mem201$0 = $172;
    continue;
   }
  } else {
   $173 = ($quick_flag|0)!=(0);
   if ($173) {
    __THREW__ = 0;
    (invoke_iii(69,($equation|0),($np|0))|0);
    $174 = __THREW__; __THREW__ = 0;
    if ((($174|0) != 0) & ((threwValue|0) != 0)) { $175 = _testSetjmp(HEAP32[$174>>2]|0, _setjmpTable)|0; if (($175|0) == 0) { _longjmp($174|0, threwValue|0); } tempRet0 = threwValue; } else { $175 = -1; };
    $176 = tempRet0;
    if ((($175|0) == 1)) {
     $$reg2mem201$0 = $176;
     continue;
    }
   } else {
    while(1) {
     __THREW__ = 0;
     (invoke_iii(65,($equation|0),($np|0))|0);
     $177 = __THREW__; __THREW__ = 0;
     if ((($177|0) != 0) & ((threwValue|0) != 0)) { $178 = _testSetjmp(HEAP32[$177>>2]|0, _setjmpTable)|0; if (($178|0) == 0) { _longjmp($177|0, threwValue|0); } tempRet0 = threwValue; } else { $178 = -1; };
     $179 = tempRet0;
     if ((($178|0) == 1)) {
      $$reg2mem201$0 = $179;
      continue L91;
     }
     __THREW__ = 0;
     invoke_vii(71,($equation|0),($np|0));
     $180 = __THREW__; __THREW__ = 0;
     if ((($180|0) != 0) & ((threwValue|0) != 0)) { $181 = _testSetjmp(HEAP32[$180>>2]|0, _setjmpTable)|0; if (($181|0) == 0) { _longjmp($180|0, threwValue|0); } tempRet0 = threwValue; } else { $181 = -1; };
     $182 = tempRet0;
     if ((($181|0) == 1)) {
      $$reg2mem201$0 = $182;
      continue L91;
     }
     __THREW__ = 0;
     $183 = (invoke_iii(69,($equation|0),($np|0))|0);
     $184 = __THREW__; __THREW__ = 0;
     if ((($184|0) != 0) & ((threwValue|0) != 0)) { $185 = _testSetjmp(HEAP32[$184>>2]|0, _setjmpTable)|0; if (($185|0) == 0) { _longjmp($184|0, threwValue|0); } tempRet0 = threwValue; } else { $185 = -1; };
     $186 = tempRet0;
     if ((($185|0) == 1)) {
      $$reg2mem201$0 = $186;
      continue L91;
     }
     $187 = ($183|0)!=(0);
     if (!($187)) {
      break;
     }
    }
   }
   _memmove((41032|0),($save_save|0),156)|0;
  }
  HEAP32[41216>>2] = 1;
  __THREW__ = 0;
  invoke_viiiii(62,($equation|0),($np|0),1,1,2);
  $188 = __THREW__; __THREW__ = 0;
  if ((($188|0) != 0) & ((threwValue|0) != 0)) { $189 = _testSetjmp(HEAP32[$188>>2]|0, _setjmpTable)|0; if (($189|0) == 0) { _longjmp($188|0, threwValue|0); } tempRet0 = threwValue; } else { $189 = -1; };
  $190 = tempRet0;
  if ((($189|0) == 1)) {
   $$reg2mem201$0 = $190;
   continue;
  }
  $flag$0 = 0;
  while(1) {
   __THREW__ = 0;
   $191 = (invoke_iii(78,($equation|0),($np|0))|0);
   $192 = __THREW__; __THREW__ = 0;
   if ((($192|0) != 0) & ((threwValue|0) != 0)) { $193 = _testSetjmp(HEAP32[$192>>2]|0, _setjmpTable)|0; if (($193|0) == 0) { _longjmp($192|0, threwValue|0); } tempRet0 = threwValue; } else { $193 = -1; };
   $194 = tempRet0;
   if ((($193|0) == 1)) {
    $$reg2mem201$0 = $194;
    continue L91;
   }
   $195 = ($191|0)!=(0);
   if ($195) {
    __THREW__ = 0;
    invoke_viiiii(62,($equation|0),($np|0),0,1,3);
    $196 = __THREW__; __THREW__ = 0;
    if ((($196|0) != 0) & ((threwValue|0) != 0)) { $197 = _testSetjmp(HEAP32[$196>>2]|0, _setjmpTable)|0; if (($197|0) == 0) { _longjmp($196|0, threwValue|0); } tempRet0 = threwValue; } else { $197 = -1; };
    $198 = tempRet0;
    if ((($197|0) == 1)) {
     $$reg2mem201$0 = $198;
     continue L91;
    }
    $flag$1 = 0;
   } else {
    $flag$1 = $flag$0;
   }
   $199 = ($flag$1|0)!=(0);
   if (!($199)) {
    __THREW__ = 0;
    $200 = (invoke_iiii(81,($equation|0),($np|0),1)|0);
    $201 = __THREW__; __THREW__ = 0;
    if ((($201|0) != 0) & ((threwValue|0) != 0)) { $202 = _testSetjmp(HEAP32[$201>>2]|0, _setjmpTable)|0; if (($202|0) == 0) { _longjmp($201|0, threwValue|0); } tempRet0 = threwValue; } else { $202 = -1; };
    $203 = tempRet0;
    if ((($202|0) == 1)) {
     $$reg2mem201$0 = $203;
     continue L91;
    }
    $204 = ($200|0)!=(0);
    if ($204) {
     __THREW__ = 0;
     invoke_viiiii(62,($equation|0),($np|0),0,1,3);
     $205 = __THREW__; __THREW__ = 0;
     if ((($205|0) != 0) & ((threwValue|0) != 0)) { $206 = _testSetjmp(HEAP32[$205>>2]|0, _setjmpTable)|0; if (($206|0) == 0) { _longjmp($205|0, threwValue|0); } tempRet0 = threwValue; } else { $206 = -1; };
     $207 = tempRet0;
     if ((($206|0) == 1)) {
      $$reg2mem201$0 = $207;
      continue L91;
     }
     $flag$0 = 1;
     continue;
    }
   }
   $208 = ($frac_flag|0)!=(0);
   if ($208) {
    break;
   }
   __THREW__ = 0;
   $209 = (invoke_iiiii(82,($equation|0),($np|0),1,($quick_flag|0))|0);
   $210 = __THREW__; __THREW__ = 0;
   if ((($210|0) != 0) & ((threwValue|0) != 0)) { $211 = _testSetjmp(HEAP32[$210>>2]|0, _setjmpTable)|0; if (($211|0) == 0) { _longjmp($210|0, threwValue|0); } tempRet0 = threwValue; } else { $211 = -1; };
   $212 = tempRet0;
   if ((($211|0) == 1)) {
    $$reg2mem201$0 = $212;
    continue L91;
   }
   $213 = ($209|0)!=(0);
   if (!($213)) {
    break;
   }
   __THREW__ = 0;
   invoke_viiiii(62,($equation|0),($np|0),0,1,3);
   $214 = __THREW__; __THREW__ = 0;
   if ((($214|0) != 0) & ((threwValue|0) != 0)) { $215 = _testSetjmp(HEAP32[$214>>2]|0, _setjmpTable)|0; if (($215|0) == 0) { _longjmp($214|0, threwValue|0); } tempRet0 = threwValue; } else { $215 = -1; };
   $216 = tempRet0;
   if ((($215|0) == 1)) {
    $$reg2mem201$0 = $216;
    continue L91;
   }
   $flag$0 = 0;
  }
  __THREW__ = 0;
  (invoke_iii(83,($equation|0),($np|0))|0);
  $217 = __THREW__; __THREW__ = 0;
  if ((($217|0) != 0) & ((threwValue|0) != 0)) { $218 = _testSetjmp(HEAP32[$217>>2]|0, _setjmpTable)|0; if (($218|0) == 0) { _longjmp($217|0, threwValue|0); } tempRet0 = threwValue; } else { $218 = -1; };
  $219 = tempRet0;
  if ((($218|0) == 1)) {
   $$reg2mem201$0 = $219;
   continue;
  }
  __THREW__ = 0;
  invoke_viiidiii(64,($equation|0),($np|0),0,1.0,1,1,5);
  $220 = __THREW__; __THREW__ = 0;
  if ((($220|0) != 0) & ((threwValue|0) != 0)) { $221 = _testSetjmp(HEAP32[$220>>2]|0, _setjmpTable)|0; if (($221|0) == 0) { _longjmp($220|0, threwValue|0); } tempRet0 = threwValue; } else { $221 = -1; };
  $222 = tempRet0;
  if ((($221|0) == 1)) {
   $$reg2mem201$0 = $222;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(68,($equation|0),($np|0))|0);
  $223 = __THREW__; __THREW__ = 0;
  if ((($223|0) != 0) & ((threwValue|0) != 0)) { $224 = _testSetjmp(HEAP32[$223>>2]|0, _setjmpTable)|0; if (($224|0) == 0) { _longjmp($223|0, threwValue|0); } tempRet0 = threwValue; } else { $224 = -1; };
  $225 = tempRet0;
  if ((($224|0) == 1)) {
   $$reg2mem201$0 = $225;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(61,($equation|0),($np|0))|0);
  $226 = __THREW__; __THREW__ = 0;
  if ((($226|0) != 0) & ((threwValue|0) != 0)) { $227 = _testSetjmp(HEAP32[$226>>2]|0, _setjmpTable)|0; if (($227|0) == 0) { _longjmp($226|0, threwValue|0); } tempRet0 = threwValue; } else { $227 = -1; };
  $228 = tempRet0;
  if ((($227|0) == 1)) {
   $$reg2mem201$0 = $228;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(66,($equation|0),($np|0))|0);
  $229 = __THREW__; __THREW__ = 0;
  if ((($229|0) != 0) & ((threwValue|0) != 0)) { $230 = _testSetjmp(HEAP32[$229>>2]|0, _setjmpTable)|0; if (($230|0) == 0) { _longjmp($229|0, threwValue|0); } tempRet0 = threwValue; } else { $230 = -1; };
  $231 = tempRet0;
  if ((($230|0) == 1)) {
   $$reg2mem201$0 = $231;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(69,($equation|0),($np|0))|0);
  $232 = __THREW__; __THREW__ = 0;
  if ((($232|0) != 0) & ((threwValue|0) != 0)) { $233 = _testSetjmp(HEAP32[$232>>2]|0, _setjmpTable)|0; if (($233|0) == 0) { _longjmp($232|0, threwValue|0); } tempRet0 = threwValue; } else { $233 = -1; };
  $234 = tempRet0;
  if ((($233|0) == 1)) {
   $$reg2mem201$0 = $234;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(61,($equation|0),($np|0))|0);
  $235 = __THREW__; __THREW__ = 0;
  if ((($235|0) != 0) & ((threwValue|0) != 0)) { $236 = _testSetjmp(HEAP32[$235>>2]|0, _setjmpTable)|0; if (($236|0) == 0) { _longjmp($235|0, threwValue|0); } tempRet0 = threwValue; } else { $236 = -1; };
  $237 = tempRet0;
  if ((($236|0) == 1)) {
   $$reg2mem201$0 = $237;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(65,($equation|0),($np|0))|0);
  $238 = __THREW__; __THREW__ = 0;
  if ((($238|0) != 0) & ((threwValue|0) != 0)) { $239 = _testSetjmp(HEAP32[$238>>2]|0, _setjmpTable)|0; if (($239|0) == 0) { _longjmp($238|0, threwValue|0); } tempRet0 = threwValue; } else { $239 = -1; };
  $240 = tempRet0;
  if ((($239|0) == 1)) {
   $$reg2mem201$0 = $240;
   continue;
  }
  __THREW__ = 0;
  (invoke_iii(84,($equation|0),($np|0))|0);
  $241 = __THREW__; __THREW__ = 0;
  if ((($241|0) != 0) & ((threwValue|0) != 0)) { $242 = _testSetjmp(HEAP32[$241>>2]|0, _setjmpTable)|0; if (($242|0) == 0) { _longjmp($241|0, threwValue|0); } tempRet0 = threwValue; } else { $242 = -1; };
  $243 = tempRet0;
  if ((($242|0) == 1)) {
   $$reg2mem201$0 = $243;
   continue;
  }
  __THREW__ = 0;
  invoke_viiiii(62,($equation|0),($np|0),1,1,3);
  $244 = __THREW__; __THREW__ = 0;
  if ((($244|0) != 0) & ((threwValue|0) != 0)) { $245 = _testSetjmp(HEAP32[$244>>2]|0, _setjmpTable)|0; if (($245|0) == 0) { _longjmp($244|0, threwValue|0); } tempRet0 = threwValue; } else { $245 = -1; };
  $246 = tempRet0;
  if ((($245|0) == 1)) {
   $$reg2mem201$0 = $246;
   continue;
  }
  __THREW__ = 0;
  (invoke_iiii(81,($equation|0),($np|0),1)|0);
  $247 = __THREW__; __THREW__ = 0;
  if ((($247|0) != 0) & ((threwValue|0) != 0)) { $248 = _testSetjmp(HEAP32[$247>>2]|0, _setjmpTable)|0; if (($248|0) == 0) { _longjmp($247|0, threwValue|0); } tempRet0 = threwValue; } else { $248 = -1; };
  $249 = tempRet0;
  if ((($248|0) == 1)) {
   $$reg2mem201$0 = $249;
   continue;
  }
  $250 = ($frac_flag|0)!=(0);
  $251 = $250 ^ 1;
  $252 = $251&1;
  __THREW__ = 0;
  invoke_viiiii(62,($equation|0),($np|0),1,($252|0),2);
  $253 = __THREW__; __THREW__ = 0;
  if ((($253|0) != 0) & ((threwValue|0) != 0)) { $254 = _testSetjmp(HEAP32[$253>>2]|0, _setjmpTable)|0; if (($254|0) == 0) { _longjmp($253|0, threwValue|0); } tempRet0 = threwValue; } else { $254 = -1; };
  $255 = tempRet0;
  if ((($254|0) == 1)) {
   $$reg2mem201$0 = $255;
  } else {
   break;
  }
 }
 if ((label|0) == 81) {
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _rationalize($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0;
 var $div_level = 0, $end_loc = 0, $flag = 0, $i = 0, $i1 = 0, $j = 0, $k = 0, $k1 = 0, $modified = 0, $neg_one_loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $neg_one_loc = -1;
 $modified = 0;
 $i = 1;
 L1: while(1) {
  L3: while(1) {
   $2 = $i;
   $3 = $1;
   $4 = HEAP32[$3>>2]|0;
   $5 = ($2|0)>=($4|0);
   if ($5) {
    break L1;
   }
   $6 = $i;
   $7 = $0;
   $8 = (($7) + ($6<<4)|0);
   $9 = (($8) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(5);
   if (!($11)) {
    label = 78;
    break;
   }
   $12 = $i;
   $13 = $0;
   $14 = (($13) + ($12<<4)|0);
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $div_level = $16;
   $count = 0;
   $j = -1;
   $17 = $i;
   $18 = (($17) + 2)|0;
   $end_loc = $18;
   while(1) {
    $19 = $end_loc;
    $20 = $1;
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)<($21|0);
    if ($22) {
     $23 = $end_loc;
     $24 = $0;
     $25 = (($24) + ($23<<4)|0);
     $26 = (($25) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $div_level;
     $29 = ($27|0)>($28|0);
     $398 = $29;
    } else {
     $398 = 0;
    }
    if (!($398)) {
     break;
    }
    $30 = $end_loc;
    $31 = $0;
    $32 = (($31) + ($30<<4)|0);
    $33 = (($32) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $div_level;
    $36 = (($35) + 1)|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = $count;
     $39 = (($38) + 1)|0;
     $count = $39;
     $40 = $j;
     $41 = ($40|0)<(0);
     if ($41) {
      $42 = $end_loc;
      $j = $42;
     }
    }
    $43 = $end_loc;
    $44 = (($43) + 2)|0;
    $end_loc = $44;
   }
   $45 = $j;
   $46 = ($45|0)<(0);
   if ($46) {
    label = 17;
    break;
   }
   $47 = $j;
   $48 = $0;
   $49 = (($48) + ($47<<4)|0);
   $50 = (($49) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   if (!((($51|0) == 2) | (($51|0) == 1))) {
    label = 20;
    break;
   }
   $52 = $i;
   $i1 = $52;
   L24: while(1) {
    $flag = 0;
    $53 = $j;
    $54 = (($53) - 2)|0;
    $k = $54;
    while(1) {
     $55 = $k;
     $56 = $i1;
     $57 = ($55|0)>($56|0);
     if (!($57)) {
      break;
     }
     $58 = $k;
     $59 = $0;
     $60 = (($59) + ($58<<4)|0);
     $61 = (($60) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $div_level;
     $64 = (($63) + 2)|0;
     $65 = ($62|0)==($64|0);
     if ($65) {
      label = 25;
      break;
     }
     $71 = $k;
     $72 = (($71) - 2)|0;
     $k = $72;
    }
    if ((label|0) == 25) {
     label = 0;
     $66 = $k;
     $67 = $0;
     $68 = (($67) + ($66<<4)|0);
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     if ((($70|0) == 8)) {
      $flag = 2;
     } else if ((($70|0) == 5) | (($70|0) == 4)) {
      $flag = 1;
     }
    }
    $73 = $flag;
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $j;
     $76 = (($75) - 2)|0;
     $k = $76;
     while(1) {
      $77 = $k;
      $78 = $i1;
      $79 = ($77|0)>($78|0);
      if (!($79)) {
       break;
      }
      $80 = $k;
      $81 = $0;
      $82 = (($81) + ($80<<4)|0);
      $83 = (($82) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $div_level;
      $86 = (($85) + 2)|0;
      $87 = ($84|0)==($86|0);
      if ($87) {
       label = 37;
      } else {
       $88 = $k;
       $89 = $0;
       $90 = (($89) + ($88<<4)|0);
       $91 = (($90) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $div_level;
       $94 = (($93) + 3)|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = $flag;
        $97 = ($96|0)==(1);
        if ($97) {
         label = 37;
        }
       }
      }
      if ((label|0) == 37) {
       label = 0;
       $98 = $k;
       $99 = $0;
       $100 = (($99) + ($98<<4)|0);
       $101 = (($100) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ($102|0)==(8);
       if ($103) {
        $104 = $k;
        $105 = $0;
        $106 = (($105) + ($104<<4)|0);
        $107 = (($106) + 4|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = $k;
        $110 = (($109) + 1)|0;
        $111 = $0;
        $112 = (($111) + ($110<<4)|0);
        $113 = (($112) + 4|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = ($108|0)==($114|0);
        if ($115) {
         $116 = $k;
         $117 = (($116) + 1)|0;
         $118 = $0;
         $119 = (($118) + ($117<<4)|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = ($120|0)==(0);
         if ($121) {
          $122 = $k;
          $123 = (($122) + 1)|0;
          $124 = $0;
          $125 = (($124) + ($123<<4)|0);
          $126 = (($125) + 8|0);
          $127 = +HEAPF64[$126>>3];
          $128 = (+_fmod((+$127),1.0));
          $129 = $128 == 0.5;
          if ($129) {
           break L24;
          }
         }
        }
       }
      }
      $374 = $k;
      $375 = (($374) - 2)|0;
      $k = $375;
     }
    }
    $376 = $j;
    $377 = $end_loc;
    $378 = ($376|0)>=($377|0);
    if ($378) {
     label = 70;
     break L3;
    }
    $379 = $j;
    $i1 = $379;
    $380 = $j;
    $381 = (($380) + 2)|0;
    $j = $381;
    while(1) {
     $382 = $j;
     $383 = $end_loc;
     $384 = ($382|0)<($383|0);
     if (!($384)) {
      break;
     }
     $385 = $j;
     $386 = $0;
     $387 = (($386) + ($385<<4)|0);
     $388 = (($387) + 4|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = $div_level;
     $391 = (($390) + 1)|0;
     $392 = ($389|0)==($391|0);
     if ($392) {
      label = 74;
      break;
     }
     $393 = $j;
     $394 = (($393) + 2)|0;
     $j = $394;
    }
    if ((label|0) == 74) {
     label = 0;
    }
   }
   $130 = $i;
   $131 = (($130) + 2)|0;
   $k1 = $131;
   while(1) {
    $132 = $k1;
    $133 = $end_loc;
    $134 = ($132|0)<($133|0);
    if (!($134)) {
     label = 59;
     break;
    }
    $135 = $k1;
    $136 = $0;
    $137 = (($136) + ($135<<4)|0);
    $138 = (($137) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ($139|0)==(8);
    if ($140) {
     $141 = $k1;
     $142 = $0;
     $143 = (($142) + ($141<<4)|0);
     $144 = (($143) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $k1;
     $147 = (($146) + 1)|0;
     $148 = $0;
     $149 = (($148) + ($147<<4)|0);
     $150 = (($149) + 4|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($145|0)==($151|0);
     if ($152) {
      $153 = $k1;
      $154 = (($153) + 1)|0;
      $155 = $0;
      $156 = (($155) + ($154<<4)|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==(0);
      if ($158) {
       $159 = $k1;
       $160 = (($159) + 1)|0;
       $161 = $0;
       $162 = (($161) + ($160<<4)|0);
       $163 = (($162) + 8|0);
       $164 = +HEAPF64[$163>>3];
       $165 = (+_fmod((+$164),1.0));
       $166 = $165 == 0.5;
       if ($166) {
        $167 = $k;
        $168 = $k1;
        $169 = ($167|0)!=($168|0);
        if ($169) {
         $170 = $k1;
         $171 = $0;
         $172 = (($171) + ($170<<4)|0);
         $173 = (($172) + 4|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = $div_level;
         $176 = (($175) + 2)|0;
         $177 = ($174|0)==($176|0);
         if (!($177)) {
          label = 50;
          break;
         }
         $178 = $count;
         $179 = ($178|0)==(1);
         if (!($179)) {
          label = 50;
          break;
         }
        }
        $182 = $k1;
        $183 = (($182) - 1)|0;
        $184 = $0;
        $185 = (($184) + ($183<<4)|0);
        $186 = (($185) + 4|0);
        $187 = HEAP32[$186>>2]|0;
        $188 = $k1;
        $189 = $0;
        $190 = (($189) + ($188<<4)|0);
        $191 = (($190) + 4|0);
        $192 = HEAP32[$191>>2]|0;
        $193 = (($192) + 1)|0;
        $194 = ($187|0)==($193|0);
        if ($194) {
         $195 = $k1;
         $196 = (($195) - 2)|0;
         $197 = $0;
         $198 = (($197) + ($196<<4)|0);
         $199 = (($198) + 4|0);
         $200 = HEAP32[$199>>2]|0;
         $201 = $k1;
         $202 = (($201) - 1)|0;
         $203 = $0;
         $204 = (($203) + ($202<<4)|0);
         $205 = (($204) + 4|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = ($200|0)==($206|0);
         if ($207) {
          $208 = $k1;
          $209 = (($208) - 1)|0;
          $210 = $0;
          $211 = (($210) + ($209<<4)|0);
          $212 = HEAP32[$211>>2]|0;
          $213 = ($212|0)==(0);
          if ($213) {
           $214 = $k1;
           $215 = (($214) - 2)|0;
           $216 = $0;
           $217 = (($216) + ($215<<4)|0);
           $218 = (($217) + 8|0);
           $219 = HEAP32[$218>>2]|0;
           $220 = ($219|0)==(8);
           if ($220) {
            label = 55;
            break;
           }
          }
         }
        }
       }
      }
     }
    }
    $223 = $k1;
    $224 = (($223) + 2)|0;
    $k1 = $224;
   }
   if ((label|0) == 50) {
    label = 0;
    $180 = $i;
    $181 = (($180) + 2)|0;
    $i = $181;
    continue;
   }
   else if ((label|0) == 55) {
    label = 0;
    $221 = $i;
    $222 = (($221) + 2)|0;
    $i = $222;
    continue;
   }
   else if ((label|0) == 59) {
    label = 0;
    $225 = $i1;
    $226 = (($225) + 1)|0;
    $neg_one_loc = $226;
    $227 = $i1;
    $228 = $i;
    $229 = (($227) - ($228))|0;
    $k = $229;
    $230 = HEAP32[3704>>2]|0;
    $231 = $i;
    $232 = (($231) + 1)|0;
    $233 = $0;
    $234 = (($233) + ($232<<4)|0);
    $235 = $k;
    $236 = $235<<4;
    _memmove(($230|0),($234|0),($236|0))|0;
    $237 = $div_level;
    $238 = (($237) + 2)|0;
    $239 = $k;
    $240 = HEAP32[3704>>2]|0;
    $241 = (($240) + ($239<<4)|0);
    $242 = (($241) + 4|0);
    HEAP32[$242>>2] = $238;
    $243 = $k;
    $244 = HEAP32[3704>>2]|0;
    $245 = (($244) + ($243<<4)|0);
    HEAP32[$245>>2] = 0;
    $246 = $k;
    $247 = HEAP32[3704>>2]|0;
    $248 = (($247) + ($246<<4)|0);
    $249 = (($248) + 8|0);
    HEAPF64[$249>>3] = -1.0;
    $250 = $k;
    $251 = (($250) + 1)|0;
    $k = $251;
    $252 = $div_level;
    $253 = (($252) + 2)|0;
    $254 = $k;
    $255 = HEAP32[3704>>2]|0;
    $256 = (($255) + ($254<<4)|0);
    $257 = (($256) + 4|0);
    HEAP32[$257>>2] = $253;
    $258 = $k;
    $259 = HEAP32[3704>>2]|0;
    $260 = (($259) + ($258<<4)|0);
    HEAP32[$260>>2] = 2;
    $261 = $k;
    $262 = HEAP32[3704>>2]|0;
    $263 = (($262) + ($261<<4)|0);
    $264 = (($263) + 8|0);
    HEAP32[$264>>2] = 4;
    $265 = $k;
    $266 = (($265) + 1)|0;
    $k = $266;
    $267 = $k;
    $268 = HEAP32[3704>>2]|0;
    $269 = (($268) + ($267<<4)|0);
    $270 = $neg_one_loc;
    $271 = $0;
    $272 = (($271) + ($270<<4)|0);
    $273 = $end_loc;
    $274 = $neg_one_loc;
    $275 = (($273) - ($274))|0;
    $276 = $275<<4;
    _memmove(($269|0),($272|0),($276|0))|0;
    $k1 = 0;
    while(1) {
     $277 = $k1;
     $278 = $j;
     $279 = $neg_one_loc;
     $280 = (($278) - ($279))|0;
     $281 = ($277|0)<($280|0);
     if (!($281)) {
      break;
     }
     $282 = $k;
     $283 = HEAP32[3704>>2]|0;
     $284 = (($283) + ($282<<4)|0);
     $285 = (($284) + 4|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = (($286) + 1)|0;
     HEAP32[$285>>2] = $287;
     $288 = $k1;
     $289 = (($288) + 1)|0;
     $k1 = $289;
     $290 = $k;
     $291 = (($290) + 1)|0;
     $k = $291;
    }
    $292 = $end_loc;
    $293 = $i;
    $294 = (($293) + 1)|0;
    $295 = (($292) - ($294))|0;
    $296 = (($295) + 2)|0;
    $k = $296;
    $297 = $1;
    $298 = HEAP32[$297>>2]|0;
    $299 = $k;
    $300 = (($299) + 1)|0;
    $301 = $300<<1;
    $302 = (($298) + ($301))|0;
    $303 = HEAP32[8>>2]|0;
    $304 = ($302|0)>($303|0);
    if ($304) {
     _error_huge();
    }
    $305 = $end_loc;
    $306 = $k;
    $307 = (($306) + 1)|0;
    $308 = $307<<1;
    $309 = (($305) + ($308))|0;
    $310 = $0;
    $311 = (($310) + ($309<<4)|0);
    $312 = $end_loc;
    $313 = $0;
    $314 = (($313) + ($312<<4)|0);
    $315 = $1;
    $316 = HEAP32[$315>>2]|0;
    $317 = $end_loc;
    $318 = (($316) - ($317))|0;
    $319 = $318<<4;
    _memmove(($311|0),($314|0),($319|0))|0;
    $320 = $k;
    $321 = (($320) + 1)|0;
    $322 = $321<<1;
    $323 = $1;
    $324 = HEAP32[$323>>2]|0;
    $325 = (($324) + ($322))|0;
    HEAP32[$323>>2] = $325;
    $326 = $end_loc;
    $k1 = $326;
    $327 = $div_level;
    $328 = $k1;
    $329 = $0;
    $330 = (($329) + ($328<<4)|0);
    $331 = (($330) + 4|0);
    HEAP32[$331>>2] = $327;
    $332 = $k1;
    $333 = $0;
    $334 = (($333) + ($332<<4)|0);
    HEAP32[$334>>2] = 2;
    $335 = $k1;
    $336 = $0;
    $337 = (($336) + ($335<<4)|0);
    $338 = (($337) + 8|0);
    HEAP32[$338>>2] = 4;
    $339 = $k1;
    $340 = (($339) + 1)|0;
    $k1 = $340;
    $341 = $k1;
    $342 = $0;
    $343 = (($342) + ($341<<4)|0);
    $344 = HEAP32[3704>>2]|0;
    $345 = $k;
    $346 = $345<<4;
    _memmove(($343|0),($344|0),($346|0))|0;
    $347 = $k;
    $348 = $k1;
    $349 = (($348) + ($347))|0;
    $k1 = $349;
    $350 = $div_level;
    $351 = $k1;
    $352 = $0;
    $353 = (($352) + ($351<<4)|0);
    $354 = (($353) + 4|0);
    HEAP32[$354>>2] = $350;
    $355 = $k1;
    $356 = $0;
    $357 = (($356) + ($355<<4)|0);
    HEAP32[$357>>2] = 2;
    $358 = $k1;
    $359 = $0;
    $360 = (($359) + ($358<<4)|0);
    $361 = (($360) + 8|0);
    HEAP32[$361>>2] = 5;
    $362 = $k1;
    $363 = (($362) + 1)|0;
    $k1 = $363;
    $364 = $k1;
    $365 = $0;
    $366 = (($365) + ($364<<4)|0);
    $367 = HEAP32[3704>>2]|0;
    $368 = $k;
    $369 = $368<<4;
    _memmove(($366|0),($367|0),($369|0))|0;
    $370 = $k;
    $371 = $k1;
    $372 = (($371) + ($370))|0;
    $k1 = $372;
    $373 = $k1;
    $i = $373;
    $modified = 1;
    continue;
   }
  }
  if ((label|0) == 17) {
   label = 0;
  }
  else if ((label|0) == 20) {
   label = 0;
  }
  else if ((label|0) == 70) {
   label = 0;
  }
  else if ((label|0) == 78) {
   label = 0;
  }
  $395 = $i;
  $396 = (($395) + 2)|0;
  $i = $396;
 }
 $397 = $modified;
 STACKTOP = sp;return ($397|0);
}
function _integer_root_simp($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0;
 var $99 = 0.0, $d1 = 0.0, $d2 = 0.0, $denominator = 0.0, $i = 0, $j = 0, $level = 0, $modified = 0, $numerator = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = (($2) + 3)|0;
  $4 = $1;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = (($8) + ($7<<4)|0);
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(8);
  L4: do {
   if ($12) {
    $13 = $i;
    $14 = $0;
    $15 = (($14) + ($13<<4)|0);
    $16 = (($15) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $level = $17;
    $18 = $i;
    $19 = (($18) - 1)|0;
    $20 = $0;
    $21 = (($20) + ($19<<4)|0);
    $22 = (($21) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $level;
    $25 = ($23|0)==($24|0);
    L6: do {
     if ($25) {
      $26 = $i;
      $27 = (($26) + 1)|0;
      $28 = $0;
      $29 = (($28) + ($27<<4)|0);
      $30 = (($29) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = $level;
      $33 = (($32) + 1)|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = $i;
       $36 = (($35) + 2)|0;
       $37 = $0;
       $38 = (($37) + ($36<<4)|0);
       $39 = (($38) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = $level;
       $42 = (($41) + 1)|0;
       $43 = ($40|0)==($42|0);
       if ($43) {
        $44 = $i;
        $45 = (($44) + 3)|0;
        $46 = $0;
        $47 = (($46) + ($45<<4)|0);
        $48 = (($47) + 4|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = $level;
        $51 = (($50) + 1)|0;
        $52 = ($49|0)==($51|0);
        if ($52) {
         $53 = $i;
         $54 = (($53) + 2)|0;
         $55 = $0;
         $56 = (($55) + ($54<<4)|0);
         $57 = (($56) + 8|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = ($58|0)==(5);
         if ($59) {
          $60 = $i;
          $61 = (($60) - 1)|0;
          $62 = $0;
          $63 = (($62) + ($61<<4)|0);
          $64 = HEAP32[$63>>2]|0;
          $65 = ($64|0)==(0);
          if ($65) {
           $66 = $i;
           $67 = (($66) + 1)|0;
           $68 = $0;
           $69 = (($68) + ($67<<4)|0);
           $70 = HEAP32[$69>>2]|0;
           $71 = ($70|0)==(0);
           if ($71) {
            $72 = $i;
            $73 = (($72) + 3)|0;
            $74 = $0;
            $75 = (($74) + ($73<<4)|0);
            $76 = HEAP32[$75>>2]|0;
            $77 = ($76|0)==(0);
            if ($77) {
             $78 = $i;
             $79 = (($78) + 4)|0;
             $80 = $1;
             $81 = HEAP32[$80>>2]|0;
             $82 = ($79|0)<($81|0);
             if ($82) {
              $83 = $i;
              $84 = (($83) + 4)|0;
              $85 = $0;
              $86 = (($85) + ($84<<4)|0);
              $87 = (($86) + 4|0);
              $88 = HEAP32[$87>>2]|0;
              $89 = $level;
              $90 = ($88|0)>=($89|0);
              if ($90) {
               break L4;
              }
             }
             $91 = $i;
             $92 = (($91) + 1)|0;
             $93 = $0;
             $94 = (($93) + ($92<<4)|0);
             $95 = (($94) + 8|0);
             $96 = +HEAPF64[$95>>3];
             $numerator = $96;
             $97 = $numerator;
             $98 = $97 > 50.0;
             if (!($98)) {
              $99 = $numerator;
              $100 = $99 < 1.0;
              if (!($100)) {
               $101 = $numerator;
               $102 = (+_fmod((+$101),1.0));
               $103 = $102 != 0.0;
               if (!($103)) {
                $104 = $i;
                $105 = (($104) + 3)|0;
                $106 = $0;
                $107 = (($106) + ($105<<4)|0);
                $108 = (($107) + 8|0);
                $109 = +HEAPF64[$108>>3];
                $denominator = $109;
                $110 = $denominator;
                $111 = $110 > 50.0;
                do {
                 if (!($111)) {
                  $112 = $denominator;
                  $113 = $112 < 2.0;
                  if ($113) {
                   break;
                  }
                  $114 = $denominator;
                  $115 = (+_fmod((+$114),1.0));
                  $116 = $115 != 0.0;
                  if ($116) {
                   break;
                  }
                  $117 = (___errno_location()|0);
                  HEAP32[$117>>2] = 0;
                  $118 = $i;
                  $119 = (($118) - 1)|0;
                  $120 = $0;
                  $121 = (($120) + ($119<<4)|0);
                  $122 = (($121) + 8|0);
                  $123 = +HEAPF64[$122>>3];
                  $124 = $numerator;
                  $125 = (+Math_pow((+$123),(+$124)));
                  $d2 = $125;
                  $126 = (___errno_location()|0);
                  $127 = HEAP32[$126>>2]|0;
                  $128 = ($127|0)!=(0);
                  if ($128) {
                   break L4;
                  }
                  $129 = $d2;
                  $130 = (_factor_one($129)|0);
                  $131 = ($130|0)!=(0);
                  if (!($131)) {
                   break L4;
                  }
                  $d1 = 1.0;
                  $j = 0;
                  while(1) {
                   $132 = $j;
                   $133 = HEAP32[40928>>2]|0;
                   $134 = ($132|0)<($133|0);
                   if (!($134)) {
                    break;
                   }
                   $135 = $j;
                   $136 = (40160 + ($135<<3)|0);
                   HEAP8[tempDoublePtr>>0]=HEAP8[$136>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$136+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$136+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$136+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$136+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$136+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$136+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$136+7>>0];$137 = +HEAPF64[tempDoublePtr>>3];
                   $138 = $137 > 0.0;
                   if ($138) {
                    while(1) {
                     $139 = $j;
                     $140 = (40672 + ($139<<2)|0);
                     $141 = HEAPU8[$140>>0]|(HEAPU8[$140+1>>0]<<8)|(HEAPU8[$140+2>>0]<<16)|(HEAPU8[$140+3>>0]<<24);
                     $142 = (+($141|0));
                     $143 = $denominator;
                     $144 = $142 >= $143;
                     if (!($144)) {
                      break;
                     }
                     $145 = $j;
                     $146 = (40160 + ($145<<3)|0);
                     HEAP8[tempDoublePtr>>0]=HEAP8[$146>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$146+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$146+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$146+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$146+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$146+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$146+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$146+7>>0];$147 = +HEAPF64[tempDoublePtr>>3];
                     $148 = $d1;
                     $149 = $148 * $147;
                     $d1 = $149;
                     $150 = $denominator;
                     $151 = $j;
                     $152 = (40672 + ($151<<2)|0);
                     $153 = HEAPU8[$152>>0]|(HEAPU8[$152+1>>0]<<8)|(HEAPU8[$152+2>>0]<<16)|(HEAPU8[$152+3>>0]<<24);
                     $154 = (+($153|0));
                     $155 = $154 - $150;
                     $156 = (~~(($155)));
                     HEAP8[$152>>0]=$156&255;HEAP8[$152+1>>0]=($156>>8)&255;HEAP8[$152+2>>0]=($156>>16)&255;HEAP8[$152+3>>0]=$156>>24;
                    }
                   }
                   $157 = $j;
                   $158 = (($157) + 1)|0;
                   $j = $158;
                  }
                  $159 = $d1;
                  $160 = $159 == 1.0;
                  if ($160) {
                   break L4;
                  }
                  $161 = $1;
                  $162 = HEAP32[$161>>2]|0;
                  $163 = (($162) + 2)|0;
                  $164 = HEAP32[8>>2]|0;
                  $165 = ($163|0)>($164|0);
                  if ($165) {
                   _error_huge();
                  }
                  $166 = $i;
                  $167 = (($166) + 1)|0;
                  $168 = $0;
                  $169 = (($168) + ($167<<4)|0);
                  $170 = (($169) + 8|0);
                  HEAPF64[$170>>3] = 1.0;
                  $171 = (+_multiply_out_unique());
                  $172 = $i;
                  $173 = (($172) - 1)|0;
                  $174 = $0;
                  $175 = (($174) + ($173<<4)|0);
                  $176 = (($175) + 8|0);
                  HEAPF64[$176>>3] = $171;
                  $177 = $i;
                  $178 = (($177) - 1)|0;
                  $j = $178;
                  while(1) {
                   $179 = $j;
                   $180 = $i;
                   $181 = (($180) + 4)|0;
                   $182 = ($179|0)<($181|0);
                   if (!($182)) {
                    break;
                   }
                   $183 = $j;
                   $184 = $0;
                   $185 = (($184) + ($183<<4)|0);
                   $186 = (($185) + 4|0);
                   $187 = HEAP32[$186>>2]|0;
                   $188 = (($187) + 1)|0;
                   HEAP32[$186>>2] = $188;
                   $189 = $j;
                   $190 = (($189) + 1)|0;
                   $j = $190;
                  }
                  $191 = $i;
                  $192 = (($191) + 1)|0;
                  $193 = $0;
                  $194 = (($193) + ($192<<4)|0);
                  $195 = $i;
                  $196 = (($195) - 1)|0;
                  $197 = $0;
                  $198 = (($197) + ($196<<4)|0);
                  $199 = $1;
                  $200 = HEAP32[$199>>2]|0;
                  $201 = $i;
                  $202 = (($201) - 1)|0;
                  $203 = (($200) - ($202))|0;
                  $204 = $203<<4;
                  _memmove(($194|0),($198|0),($204|0))|0;
                  $205 = $1;
                  $206 = HEAP32[$205>>2]|0;
                  $207 = (($206) + 2)|0;
                  HEAP32[$205>>2] = $207;
                  $208 = $level;
                  $209 = $i;
                  $210 = (($209) - 1)|0;
                  $211 = $0;
                  $212 = (($211) + ($210<<4)|0);
                  $213 = (($212) + 4|0);
                  HEAP32[$213>>2] = $208;
                  $214 = $i;
                  $215 = (($214) - 1)|0;
                  $216 = $0;
                  $217 = (($216) + ($215<<4)|0);
                  HEAP32[$217>>2] = 0;
                  $218 = $d1;
                  $219 = $i;
                  $220 = (($219) - 1)|0;
                  $221 = $0;
                  $222 = (($221) + ($220<<4)|0);
                  $223 = (($222) + 8|0);
                  HEAPF64[$223>>3] = $218;
                  $224 = $level;
                  $225 = $i;
                  $226 = $0;
                  $227 = (($226) + ($225<<4)|0);
                  $228 = (($227) + 4|0);
                  HEAP32[$228>>2] = $224;
                  $229 = $i;
                  $230 = $0;
                  $231 = (($230) + ($229<<4)|0);
                  HEAP32[$231>>2] = 2;
                  $232 = $i;
                  $233 = $0;
                  $234 = (($233) + ($232<<4)|0);
                  $235 = (($234) + 8|0);
                  HEAP32[$235>>2] = 4;
                  $modified = 1;
                  $236 = $i;
                  $237 = (($236) + 4)|0;
                  $i = $237;
                  break L6;
                 }
                } while(0);
                break L4;
               }
              }
             }
             break L4;
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    label = 46;
   } else {
    label = 46;
   }
  } while(0);
  if ((label|0) == 46) {
   label = 0;
  }
  $238 = $i;
  $239 = (($238) + 2)|0;
  $i = $239;
 }
 $240 = $modified;
 STACKTOP = sp;return ($240|0);
}
function _simpa_repeat_side($equation,$np,$quick_flag,$frac_flag) {
 $equation = $equation|0;
 $np = $np|0;
 $quick_flag = $quick_flag|0;
 $frac_flag = $frac_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $quick_flag;
 $3 = $frac_flag;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 _simpa_side($7,$8,$9,$10);
 $11 = HEAP32[41296>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(1);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  HEAP32[3728>>2] = $17;
  $18 = HEAP32[3696>>2]|0;
  $19 = $0;
  $20 = HEAP32[3728>>2]|0;
  $21 = $20<<4;
  _memmove(($18|0),($19|0),($21|0))|0;
  $22 = $0;
  $23 = $1;
  $24 = $2;
  $25 = $3;
  _simpa_side($22,$23,$24,$25);
  $26 = $1;
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[3728>>2]|0;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
 }
 $30 = $1;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[3728>>2]|0;
 $33 = ($31|0)!=($32|0);
 if ($33) {
  $34 = HEAP32[3728>>2]|0;
  $35 = $1;
  HEAP32[$35>>2] = $34;
  $36 = $0;
  $37 = HEAP32[3696>>2]|0;
  $38 = HEAP32[3728>>2]|0;
  $39 = $38<<4;
  _memmove(($36|0),($37|0),($39|0))|0;
 }
 STACKTOP = sp;return;
}
function _simpa_repeat($n,$quick_flag,$frac_flag) {
 $n = $n|0;
 $quick_flag = $quick_flag|0;
 $frac_flag = $frac_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $quick_flag;
 $2 = $frac_flag;
 $3 = $0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $5 = $0;
  $6 = HEAP32[464>>2]|0;
  $7 = ($5|0)>=($6|0);
  if (!($7)) {
   $8 = $0;
   $9 = (2080 + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)<=(0);
   if (!($11)) {
    $12 = $0;
    $13 = (480 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $0;
    $16 = (2080 + ($15<<2)|0);
    $17 = $1;
    $18 = $2;
    _simpa_repeat_side($14,$16,$17,$18);
    $19 = $0;
    $20 = (2880 + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)>(0);
    if (!($22)) {
     STACKTOP = sp;return;
    }
    $23 = $0;
    $24 = (1280 + ($23<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $0;
    $27 = (2880 + ($26<<2)|0);
    $28 = $1;
    $29 = $2;
    _simpa_repeat_side($25,$27,$28,$29);
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _simple_frac_repeat_side($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $1;
 _simple_frac_side($5,$6);
 $7 = HEAP32[41296>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  HEAP32[3728>>2] = $10;
  $11 = HEAP32[3696>>2]|0;
  $12 = $0;
  $13 = HEAP32[3728>>2]|0;
  $14 = $13<<4;
  _memmove(($11|0),($12|0),($14|0))|0;
  $15 = $0;
  $16 = $1;
  _simple_frac_side($15,$16);
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[3728>>2]|0;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
 }
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[3728>>2]|0;
 $24 = ($22|0)!=($23|0);
 if ($24) {
  $25 = HEAP32[3728>>2]|0;
  $26 = $1;
  HEAP32[$26>>2] = $25;
  $27 = $0;
  $28 = HEAP32[3696>>2]|0;
  $29 = HEAP32[3728>>2]|0;
  $30 = $29<<4;
  _memmove(($27|0),($28|0),($30|0))|0;
 }
 STACKTOP = sp;return;
}
function _fixed_fmod($k1,$k2) {
 $k1 = +$k1;
 $k2 = +$k2;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp;
 $0 = $k1;
 $1 = $k2;
 $2 = $1;
 $3 = $2 == 0.0;
 L1: do {
  if (!($3)) {
   do {
    if (0) {
     $4 = $0;
     $5 = $4;
     $6 = (___FLOAT_BITS834($5)|0);
     $7 = $6 & 2147483647;
     $8 = ($7>>>0)<(2139095040);
     if (!($8)) {
      break L1;
     }
    } else {
     if (1) {
      $9 = $0;
      $10 = (___DOUBLE_BITS835($9)|0);
      $11 = tempRet0;
      $12 = $11 & 2147483647;
      $13 = ($12>>>0)<(2146435072);
      $14 = ($12|0)==(2146435072);
      $15 = ($10>>>0)<(0);
      $16 = $14 & $15;
      $17 = $13 | $16;
      if ($17) {
       break;
      } else {
       break L1;
      }
     } else {
      $18 = $0;
      $19 = (___fpclassifyl((+$18))|0);
      $20 = ($19|0)>(1);
      if ($20) {
       break;
      } else {
       break L1;
      }
     }
    }
   } while(0);
   do {
    if (0) {
     $21 = $1;
     $22 = $21;
     $23 = (___FLOAT_BITS834($22)|0);
     $24 = $23 & 2147483647;
     $25 = ($24>>>0)<(2139095040);
     if (!($25)) {
      break L1;
     }
    } else {
     if (1) {
      $26 = $1;
      $27 = (___DOUBLE_BITS835($26)|0);
      $28 = tempRet0;
      $29 = $28 & 2147483647;
      $30 = ($29>>>0)<(2146435072);
      $31 = ($29|0)==(2146435072);
      $32 = ($27>>>0)<(0);
      $33 = $31 & $32;
      $34 = $30 | $33;
      if ($34) {
       break;
      } else {
       break L1;
      }
     } else {
      $35 = $1;
      $36 = (___fpclassifyl((+$35))|0);
      $37 = ($36|0)>(1);
      if ($37) {
       break;
      } else {
       break L1;
      }
     }
    }
   } while(0);
   $38 = $0;
   $39 = (+_fmod((+$38),1.0));
   $40 = $39 == 0.0;
   if ($40) {
    $41 = $1;
    $42 = (+_fmod((+$41),1.0));
    $43 = $42 == 0.0;
    if ($43) {
     break;
    }
   }
   $47 = $0;
   $48 = $1;
   $49 = $47 / $48;
   $50 = (+_modf((+$49),($d|0)));
   $51 = $1;
   $52 = $50 * $51;
   $0 = $52;
   $53 = $0;
   STACKTOP = sp;return (+$53);
  }
 } while(0);
 $44 = $0;
 $45 = $1;
 $46 = (+_fmod((+$44),(+$45)));
 $0 = $46;
 $53 = $0;
 STACKTOP = sp;return (+$53);
}
function ___FLOAT_BITS834($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS835($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _const_recurse($equation,$np,$loc,$level,$iflag) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 $iflag = $iflag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $const_count = 0, $cv = 0, $cv$byval_copy = 0, $d1 = 0, $d2 = 0.0, $d3 = 0.0;
 var $denominator = 0, $loc1 = 0, $modified = 0, $numerator = 0, $old_loc = 0, $op = 0, $p = 0, $p$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p$byval_copy = sp + 104|0;
 $cv$byval_copy = sp + 88|0;
 $d1 = sp + 80|0;
 $numerator = sp + 56|0;
 $denominator = sp + 48|0;
 $cv = sp + 32|0;
 $p = sp + 16|0;
 $6 = sp;
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $5 = $iflag;
 $const_count = 0;
 $modified = 0;
 $7 = $3;
 $old_loc = $7;
 $loc1 = $7;
 L1: while(1) {
  while(1) {
   $8 = $3;
   $9 = $2;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)>=($10|0);
   if ($11) {
    label = 5;
    break L1;
   }
   $12 = $3;
   $13 = $1;
   $14 = (($13) + ($12<<4)|0);
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $4;
   $18 = ($16|0)<($17|0);
   if ($18) {
    label = 5;
    break L1;
   }
   $34 = $3;
   $35 = $1;
   $36 = (($35) + ($34<<4)|0);
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $4;
   $40 = ($38|0)>($39|0);
   if (!($40)) {
    break;
   }
   $41 = $1;
   $42 = $2;
   $43 = $3;
   $44 = $4;
   $45 = (($44) + 1)|0;
   $46 = $5;
   $47 = (_const_recurse($41,$42,$43,$45,$46)|0);
   $48 = $modified;
   $49 = $48 | $47;
   $modified = $49;
   while(1) {
    $50 = $3;
    $51 = $2;
    $52 = HEAP32[$51>>2]|0;
    $53 = ($50|0)<($52|0);
    if ($53) {
     $54 = $3;
     $55 = $1;
     $56 = (($55) + ($54<<4)|0);
     $57 = (($56) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $4;
     $60 = ($58|0)>($59|0);
     $513 = $60;
    } else {
     $513 = 0;
    }
    if (!($513)) {
     break;
    }
    $61 = $3;
    $62 = (($61) + 1)|0;
    $3 = $62;
   }
  }
  $63 = $3;
  $64 = $1;
  $65 = (($64) + ($63<<4)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0);
  do {
   if ($67) {
    $68 = $const_count;
    $69 = ($68|0)==(0);
    if ($69) {
     $70 = $3;
     $loc1 = $70;
     $71 = $const_count;
     $72 = (($71) + 1)|0;
     $const_count = $72;
     break;
    }
    $73 = $3;
    $74 = (($73) - 1)|0;
    $75 = $1;
    $76 = (($75) + ($74<<4)|0);
    $77 = (($76) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    $op = $78;
    $79 = $loc1;
    $80 = $1;
    $81 = (($80) + ($79<<4)|0);
    $82 = (($81) + 8|0);
    $83 = +HEAPF64[$82>>3];
    HEAPF64[$d1>>3] = $83;
    $84 = $3;
    $85 = $1;
    $86 = (($85) + ($84<<4)|0);
    $87 = (($86) + 8|0);
    $88 = +HEAPF64[$87>>3];
    $d2 = $88;
    $89 = $loc1;
    $90 = $old_loc;
    $91 = ($89|0)<=($90|0);
    if ($91) {
     $99 = 0;
    } else {
     $92 = $loc1;
     $93 = (($92) - 1)|0;
     $94 = $1;
     $95 = (($94) + ($93<<4)|0);
     $96 = (($95) + 8|0);
     $99 = $96;
    }
    $97 = $op;
    $98 = $d2;
    $100 = (_calc($99,$d1,$97,$98)|0);
    $101 = ($100|0)!=(0);
    if ($101) {
     $102 = $op;
     $103 = ($102|0)==(8);
     if ($103) {
      $104 = HEAP32[41256>>2]|0;
      $105 = ($104|0)!=(0);
      if (!($105)) {
       break L1;
      }
     }
     $486 = +HEAPF64[$d1>>3];
     $487 = $loc1;
     $488 = $1;
     $489 = (($488) + ($487<<4)|0);
     $490 = (($489) + 8|0);
     HEAPF64[$490>>3] = $486;
     $modified = 1;
     HEAP32[41256>>2] = 0;
     $491 = $3;
     $492 = (($491) - 1)|0;
     $493 = $1;
     $494 = (($493) + ($492<<4)|0);
     $495 = $3;
     $496 = (($495) + 1)|0;
     $497 = $1;
     $498 = (($497) + ($496<<4)|0);
     $499 = $2;
     $500 = HEAP32[$499>>2]|0;
     $501 = $3;
     $502 = (($501) + 1)|0;
     $503 = (($500) - ($502))|0;
     $504 = $503<<4;
     _memmove(($494|0),($498|0),($504|0))|0;
     $505 = $2;
     $506 = HEAP32[$505>>2]|0;
     $507 = (($506) - 2)|0;
     HEAP32[$505>>2] = $507;
     $508 = $3;
     $509 = (($508) - 2)|0;
     $3 = $509;
    } else {
     HEAP32[41256>>2] = 0;
    }
    label = 55;
   } else {
    label = 55;
   }
  } while(0);
  if ((label|0) == 55) {
   label = 0;
  }
  $510 = $3;
  $511 = (($510) + 1)|0;
  $3 = $511;
 }
 if ((label|0) == 5) {
  $19 = $3;
  $20 = $old_loc;
  $21 = (($19) - ($20))|0;
  $22 = ($21|0)==(1);
  if ($22) {
   $23 = $4;
   $24 = (($23) - 1)|0;
   $25 = ($24|0)>(1);
   if ($25) {
    $26 = $4;
    $27 = (($26) - 1)|0;
    $32 = $27;
   } else {
    $32 = 1;
   }
   $28 = $old_loc;
   $29 = $1;
   $30 = (($29) + ($28<<4)|0);
   $31 = (($30) + 4|0);
   HEAP32[$31>>2] = $32;
  }
  $33 = $modified;
  $0 = $33;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 $106 = $d2;
 $107 = (_f_to_fraction($106,$numerator,$denominator)|0);
 $108 = ($107|0)!=(0);
 if (!($108)) {
  $109 = $5;
  $110 = ($109|0)!=(0);
  do {
   if ($110) {
    $111 = HEAP32[48>>2]|0;
    $112 = ($111|0)!=(0);
    if ($112) {
     $113 = HEAP32[41264>>2]|0;
     $114 = ($113|0)!=(0);
     if (!($114)) {
      break;
     }
    }
    $116 = +HEAPF64[$d1>>3];
    HEAPF64[$cv>>3] = $116;
    $117 = (($cv) + 8|0);
    HEAPF64[$117>>3] = 0.0;
    $118 = $d2;
    HEAPF64[$p>>3] = $118;
    $119 = (($p) + 8|0);
    HEAPF64[$119>>3] = 0.0;
    ;HEAP32[$cv$byval_copy+0>>2]=HEAP32[$cv+0>>2]|0;HEAP32[$cv$byval_copy+4>>2]=HEAP32[$cv+4>>2]|0;HEAP32[$cv$byval_copy+8>>2]=HEAP32[$cv+8>>2]|0;HEAP32[$cv$byval_copy+12>>2]=HEAP32[$cv+12>>2]|0;
    ;HEAP32[$p$byval_copy+0>>2]=HEAP32[$p+0>>2]|0;HEAP32[$p$byval_copy+4>>2]=HEAP32[$p+4>>2]|0;HEAP32[$p$byval_copy+8>>2]=HEAP32[$p+8>>2]|0;HEAP32[$p$byval_copy+12>>2]=HEAP32[$p+12>>2]|0;
    _complex_pow($6,$cv$byval_copy,$p$byval_copy);
    ;HEAP32[$cv+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$cv+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$cv+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$cv+12>>2]=HEAP32[$6+12>>2]|0;
    $120 = $2;
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121) + 2)|0;
    $123 = HEAP32[8>>2]|0;
    $124 = ($122|0)>($123|0);
    if ($124) {
     _error_huge();
    }
    $125 = $loc1;
    $126 = (($125) + 2)|0;
    $127 = $1;
    $128 = (($127) + ($126<<4)|0);
    $129 = $loc1;
    $130 = $1;
    $131 = (($130) + ($129<<4)|0);
    $132 = $2;
    $133 = HEAP32[$132>>2]|0;
    $134 = $loc1;
    $135 = (($133) - ($134))|0;
    $136 = $135<<4;
    _memmove(($128|0),($131|0),($136|0))|0;
    $137 = $2;
    $138 = HEAP32[$137>>2]|0;
    $139 = (($138) + 2)|0;
    HEAP32[$137>>2] = $139;
    $140 = $4;
    $141 = $loc1;
    $142 = $1;
    $143 = (($142) + ($141<<4)|0);
    $144 = (($143) + 4|0);
    HEAP32[$144>>2] = $140;
    $145 = $loc1;
    $146 = $1;
    $147 = (($146) + ($145<<4)|0);
    HEAP32[$147>>2] = 0;
    $148 = +HEAPF64[$cv>>3];
    $149 = $loc1;
    $150 = $1;
    $151 = (($150) + ($149<<4)|0);
    $152 = (($151) + 8|0);
    HEAPF64[$152>>3] = $148;
    $153 = $loc1;
    $154 = (($153) + 1)|0;
    $loc1 = $154;
    $155 = $4;
    $156 = $loc1;
    $157 = $1;
    $158 = (($157) + ($156<<4)|0);
    $159 = (($158) + 4|0);
    HEAP32[$159>>2] = $155;
    $160 = $loc1;
    $161 = $1;
    $162 = (($161) + ($160<<4)|0);
    HEAP32[$162>>2] = 2;
    $163 = $loc1;
    $164 = $1;
    $165 = (($164) + ($163<<4)|0);
    $166 = (($165) + 8|0);
    HEAP32[$166>>2] = 1;
    $167 = $4;
    $168 = (($167) + 1)|0;
    $4 = $168;
    $169 = $4;
    $170 = $3;
    $171 = $1;
    $172 = (($171) + ($170<<4)|0);
    $173 = (($172) + 4|0);
    HEAP32[$173>>2] = $169;
    $174 = $3;
    $175 = $1;
    $176 = (($175) + ($174<<4)|0);
    HEAP32[$176>>2] = 1;
    $177 = $3;
    $178 = $1;
    $179 = (($178) + ($177<<4)|0);
    $180 = (($179) + 8|0);
    HEAP32[$180>>2] = 3;
    $181 = $3;
    $182 = (($181) + 1)|0;
    $3 = $182;
    $183 = $4;
    $184 = $3;
    $185 = $1;
    $186 = (($185) + ($184<<4)|0);
    $187 = (($186) + 4|0);
    HEAP32[$187>>2] = $183;
    $188 = $3;
    $189 = $1;
    $190 = (($189) + ($188<<4)|0);
    HEAP32[$190>>2] = 2;
    $191 = $3;
    $192 = $1;
    $193 = (($192) + ($191<<4)|0);
    $194 = (($193) + 8|0);
    HEAP32[$194>>2] = 4;
    $195 = $3;
    $196 = (($195) + 1)|0;
    $3 = $196;
    $197 = $4;
    $198 = $3;
    $199 = $1;
    $200 = (($199) + ($198<<4)|0);
    $201 = (($200) + 4|0);
    HEAP32[$201>>2] = $197;
    $202 = $3;
    $203 = $1;
    $204 = (($203) + ($202<<4)|0);
    HEAP32[$204>>2] = 0;
    $205 = (($cv) + 8|0);
    $206 = +HEAPF64[$205>>3];
    $207 = $3;
    $208 = $1;
    $209 = (($208) + ($207<<4)|0);
    $210 = (($209) + 8|0);
    HEAPF64[$210>>3] = $206;
    $0 = 1;
    $512 = $0;
    STACKTOP = sp;return ($512|0);
   }
  } while(0);
  $115 = $modified;
  $0 = $115;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 $211 = (___errno_location()|0);
 HEAP32[$211>>2] = 0;
 $212 = +HEAPF64[$d1>>3];
 $213 = -$212;
 $214 = $d2;
 $215 = (+Math_pow((+$213),(+$214)));
 $d3 = $215;
 _check_err();
 $216 = +HEAPF64[$denominator>>3];
 $217 = (+_fmod((+$216),2.0));
 $218 = $217 == 0.0;
 if (!($218)) {
  $219 = $2;
  $220 = HEAP32[$219>>2]|0;
  $221 = (($220) + 2)|0;
  $222 = HEAP32[8>>2]|0;
  $223 = ($221|0)>($222|0);
  if ($223) {
   _error_huge();
  }
  $224 = $loc1;
  $225 = (($224) + 2)|0;
  $226 = $1;
  $227 = (($226) + ($225<<4)|0);
  $228 = $loc1;
  $229 = $1;
  $230 = (($229) + ($228<<4)|0);
  $231 = $2;
  $232 = HEAP32[$231>>2]|0;
  $233 = $loc1;
  $234 = (($232) - ($233))|0;
  $235 = $234<<4;
  _memmove(($227|0),($230|0),($235|0))|0;
  $236 = $2;
  $237 = HEAP32[$236>>2]|0;
  $238 = (($237) + 2)|0;
  HEAP32[$236>>2] = $238;
  $239 = $4;
  $240 = (($239) + 1)|0;
  $241 = $loc1;
  $242 = $1;
  $243 = (($242) + ($241<<4)|0);
  $244 = (($243) + 4|0);
  HEAP32[$244>>2] = $240;
  $245 = $loc1;
  $246 = $1;
  $247 = (($246) + ($245<<4)|0);
  HEAP32[$247>>2] = 0;
  $248 = +HEAPF64[$d1>>3];
  $249 = -$248;
  $250 = $loc1;
  $251 = $1;
  $252 = (($251) + ($250<<4)|0);
  $253 = (($252) + 8|0);
  HEAPF64[$253>>3] = $249;
  $254 = $loc1;
  $255 = (($254) + 1)|0;
  $loc1 = $255;
  $256 = $4;
  $257 = (($256) + 1)|0;
  $258 = $loc1;
  $259 = $1;
  $260 = (($259) + ($258<<4)|0);
  $261 = (($260) + 4|0);
  HEAP32[$261>>2] = $257;
  $262 = $loc1;
  $263 = $1;
  $264 = (($263) + ($262<<4)|0);
  HEAP32[$264>>2] = 2;
  $265 = $loc1;
  $266 = $1;
  $267 = (($266) + ($265<<4)|0);
  $268 = (($267) + 8|0);
  HEAP32[$268>>2] = 8;
  $269 = $4;
  $270 = (($269) + 1)|0;
  $271 = $3;
  $272 = $1;
  $273 = (($272) + ($271<<4)|0);
  $274 = (($273) + 4|0);
  HEAP32[$274>>2] = $270;
  $275 = $3;
  $276 = $1;
  $277 = (($276) + ($275<<4)|0);
  HEAP32[$277>>2] = 0;
  $278 = $d2;
  $279 = $3;
  $280 = $1;
  $281 = (($280) + ($279<<4)|0);
  $282 = (($281) + 8|0);
  HEAPF64[$282>>3] = $278;
  $283 = $3;
  $284 = (($283) + 1)|0;
  $3 = $284;
  $285 = $4;
  $286 = $3;
  $287 = $1;
  $288 = (($287) + ($286<<4)|0);
  $289 = (($288) + 4|0);
  HEAP32[$289>>2] = $285;
  $290 = $3;
  $291 = $1;
  $292 = (($291) + ($290<<4)|0);
  HEAP32[$292>>2] = 2;
  $293 = $3;
  $294 = $1;
  $295 = (($294) + ($293<<4)|0);
  $296 = (($295) + 8|0);
  HEAP32[$296>>2] = 4;
  $297 = $3;
  $298 = (($297) + 1)|0;
  $3 = $298;
  $299 = $4;
  $300 = $3;
  $301 = $1;
  $302 = (($301) + ($300<<4)|0);
  $303 = (($302) + 4|0);
  HEAP32[$303>>2] = $299;
  $304 = $3;
  $305 = $1;
  $306 = (($305) + ($304<<4)|0);
  HEAP32[$306>>2] = 0;
  $307 = +HEAPF64[$numerator>>3];
  $308 = (+_fmod((+$307),2.0));
  $309 = $308 == 0.0;
  if ($309) {
   $310 = $3;
   $311 = $1;
   $312 = (($311) + ($310<<4)|0);
   $313 = (($312) + 8|0);
   HEAPF64[$313>>3] = 1.0;
  } else {
   $314 = $3;
   $315 = $1;
   $316 = (($315) + ($314<<4)|0);
   $317 = (($316) + 8|0);
   HEAPF64[$317>>3] = -1.0;
  }
  $0 = 1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 $318 = $5;
 $319 = ($318|0)!=(0);
 if (!($319)) {
  $320 = $modified;
  $0 = $320;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 $321 = $2;
 $322 = HEAP32[$321>>2]|0;
 $323 = (($322) + 2)|0;
 $324 = HEAP32[8>>2]|0;
 $325 = ($323|0)>($324|0);
 if ($325) {
  _error_huge();
 }
 $326 = $loc1;
 $327 = (($326) + 2)|0;
 $328 = $1;
 $329 = (($328) + ($327<<4)|0);
 $330 = $loc1;
 $331 = $1;
 $332 = (($331) + ($330<<4)|0);
 $333 = $2;
 $334 = HEAP32[$333>>2]|0;
 $335 = $loc1;
 $336 = (($334) - ($335))|0;
 $337 = $336<<4;
 _memmove(($329|0),($332|0),($337|0))|0;
 $338 = $2;
 $339 = HEAP32[$338>>2]|0;
 $340 = (($339) + 2)|0;
 HEAP32[$338>>2] = $340;
 $341 = $d2;
 $342 = $341 == 0.5;
 if ($342) {
  $343 = $4;
  $344 = (($343) + 1)|0;
  $345 = $loc1;
  $346 = $1;
  $347 = (($346) + ($345<<4)|0);
  $348 = (($347) + 4|0);
  HEAP32[$348>>2] = $344;
  $349 = $loc1;
  $350 = $1;
  $351 = (($350) + ($349<<4)|0);
  HEAP32[$351>>2] = 0;
  $352 = +HEAPF64[$d1>>3];
  $353 = -$352;
  $354 = $loc1;
  $355 = $1;
  $356 = (($355) + ($354<<4)|0);
  $357 = (($356) + 8|0);
  HEAPF64[$357>>3] = $353;
  $358 = $loc1;
  $359 = (($358) + 1)|0;
  $loc1 = $359;
  $360 = $4;
  $361 = (($360) + 1)|0;
  $362 = $loc1;
  $363 = $1;
  $364 = (($363) + ($362<<4)|0);
  $365 = (($364) + 4|0);
  HEAP32[$365>>2] = $361;
  $366 = $loc1;
  $367 = $1;
  $368 = (($367) + ($366<<4)|0);
  HEAP32[$368>>2] = 2;
  $369 = $loc1;
  $370 = $1;
  $371 = (($370) + ($369<<4)|0);
  $372 = (($371) + 8|0);
  HEAP32[$372>>2] = 8;
  $373 = $4;
  $374 = (($373) + 1)|0;
  $375 = $3;
  $376 = $1;
  $377 = (($376) + ($375<<4)|0);
  $378 = (($377) + 4|0);
  HEAP32[$378>>2] = $374;
  $379 = $3;
  $380 = $1;
  $381 = (($380) + ($379<<4)|0);
  HEAP32[$381>>2] = 0;
  $382 = $d2;
  $383 = $3;
  $384 = $1;
  $385 = (($384) + ($383<<4)|0);
  $386 = (($385) + 8|0);
  HEAPF64[$386>>3] = $382;
  $387 = $3;
  $388 = (($387) + 1)|0;
  $3 = $388;
  $389 = $4;
  $390 = $3;
  $391 = $1;
  $392 = (($391) + ($390<<4)|0);
  $393 = (($392) + 4|0);
  HEAP32[$393>>2] = $389;
  $394 = $3;
  $395 = $1;
  $396 = (($395) + ($394<<4)|0);
  HEAP32[$396>>2] = 2;
  $397 = $3;
  $398 = $1;
  $399 = (($398) + ($397<<4)|0);
  $400 = (($399) + 8|0);
  HEAP32[$400>>2] = 4;
  $401 = $3;
  $402 = (($401) + 1)|0;
  $3 = $402;
  $403 = $4;
  $404 = $3;
  $405 = $1;
  $406 = (($405) + ($404<<4)|0);
  $407 = (($406) + 4|0);
  HEAP32[$407>>2] = $403;
  $408 = $3;
  $409 = $1;
  $410 = (($409) + ($408<<4)|0);
  HEAP32[$410>>2] = 1;
  $411 = $3;
  $412 = $1;
  $413 = (($412) + ($411<<4)|0);
  $414 = (($413) + 8|0);
  HEAP32[$414>>2] = 3;
 } else {
  $415 = $4;
  $416 = $loc1;
  $417 = $1;
  $418 = (($417) + ($416<<4)|0);
  $419 = (($418) + 4|0);
  HEAP32[$419>>2] = $415;
  $420 = $loc1;
  $421 = $1;
  $422 = (($421) + ($420<<4)|0);
  HEAP32[$422>>2] = 0;
  $423 = $d3;
  $424 = $loc1;
  $425 = $1;
  $426 = (($425) + ($424<<4)|0);
  $427 = (($426) + 8|0);
  HEAPF64[$427>>3] = $423;
  $428 = $loc1;
  $429 = (($428) + 1)|0;
  $loc1 = $429;
  $430 = $4;
  $431 = $loc1;
  $432 = $1;
  $433 = (($432) + ($431<<4)|0);
  $434 = (($433) + 4|0);
  HEAP32[$434>>2] = $430;
  $435 = $loc1;
  $436 = $1;
  $437 = (($436) + ($435<<4)|0);
  HEAP32[$437>>2] = 2;
  $438 = $loc1;
  $439 = $1;
  $440 = (($439) + ($438<<4)|0);
  $441 = (($440) + 8|0);
  HEAP32[$441>>2] = 4;
  $442 = $4;
  $443 = (($442) + 1)|0;
  $4 = $443;
  $444 = $4;
  $445 = $3;
  $446 = $1;
  $447 = (($446) + ($445<<4)|0);
  $448 = (($447) + 4|0);
  HEAP32[$448>>2] = $444;
  $449 = $3;
  $450 = $1;
  $451 = (($450) + ($449<<4)|0);
  HEAP32[$451>>2] = 1;
  $452 = $3;
  $453 = $1;
  $454 = (($453) + ($452<<4)|0);
  $455 = (($454) + 8|0);
  HEAP32[$455>>2] = 3;
  $456 = $3;
  $457 = (($456) + 1)|0;
  $3 = $457;
  $458 = $4;
  $459 = $3;
  $460 = $1;
  $461 = (($460) + ($459<<4)|0);
  $462 = (($461) + 4|0);
  HEAP32[$462>>2] = $458;
  $463 = $3;
  $464 = $1;
  $465 = (($464) + ($463<<4)|0);
  HEAP32[$465>>2] = 2;
  $466 = $3;
  $467 = $1;
  $468 = (($467) + ($466<<4)|0);
  $469 = (($468) + 8|0);
  HEAP32[$469>>2] = 8;
  $470 = $3;
  $471 = (($470) + 1)|0;
  $3 = $471;
  $472 = $4;
  $473 = $3;
  $474 = $1;
  $475 = (($474) + ($473<<4)|0);
  $476 = (($475) + 4|0);
  HEAP32[$476>>2] = $472;
  $477 = $3;
  $478 = $1;
  $479 = (($478) + ($477<<4)|0);
  HEAP32[$479>>2] = 0;
  $480 = $d2;
  $481 = $480 * 2.0;
  $482 = $3;
  $483 = $1;
  $484 = (($483) + ($482<<4)|0);
  $485 = (($484) + 8|0);
  HEAPF64[$485>>3] = $481;
 }
 $0 = 1;
 $512 = $0;
 STACKTOP = sp;return ($512|0);
}
function _calc($op1p,$k1p,$op2,$k2) {
 $op1p = $op1p|0;
 $k1p = $k1p|0;
 $op2 = $op2|0;
 $k2 = +$k2;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $d = 0.0, $d1 = 0, $d2 = 0, $op1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d1 = sp + 8|0;
 $d2 = sp;
 $1 = $op1p;
 $2 = $k1p;
 $3 = $op2;
 $4 = $k2;
 HEAP32[41256>>2] = 0;
 $5 = (___errno_location()|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $op1 = $9;
 } else {
  $op1 = 0;
 }
 $10 = $3;
 L5: do {
  switch ($10|0) {
  case 8:  {
   $108 = $2;
   $109 = +HEAPF64[$108>>3];
   $110 = $109 < 0.0;
   if ($110) {
    $111 = $4;
    $112 = (+_fmod((+$111),1.0));
    $113 = $112 != 0.0;
    if ($113) {
     break L5;
    }
   }
   HEAP32[41256>>2] = 1;
   $114 = $2;
   $115 = +HEAPF64[$114>>3];
   $116 = $115 == 0.0;
   if ($116) {
    $117 = $4;
    $118 = $117 == 0.0;
    if ($118) {
     _warning(71824);
     $d = 1.0;
    } else {
     label = 48;
    }
   } else {
    label = 48;
   }
   if ((label|0) == 48) {
    $119 = $2;
    $120 = +HEAPF64[$119>>3];
    $121 = $120 == 0.0;
    if ($121) {
     $122 = $4;
     $123 = $122 < 0.0;
     if ($123) {
      _warning(71880);
      $d = inf;
     } else {
      label = 51;
     }
    } else {
     label = 51;
    }
    if ((label|0) == 51) {
     $124 = $2;
     $125 = +HEAPF64[$124>>3];
     $126 = $4;
     $127 = (+Math_pow((+$125),(+$126)));
     $d = $127;
     $128 = HEAP32[48>>2]|0;
     $129 = ($128|0)!=(0);
     if ($129) {
      $130 = HEAP32[41264>>2]|0;
      $131 = ($130|0)!=(0);
      if (!($131)) {
       do {
        if (0) {
         $132 = $4;
         $133 = $132;
         $134 = (___FLOAT_BITS834($133)|0);
         $135 = $134 & 2147483647;
         $136 = ($135>>>0)<(2139095040);
         if ($136) {
          label = 58;
         }
        } else {
         if (1) {
          $137 = $4;
          $138 = (___DOUBLE_BITS835($137)|0);
          $139 = tempRet0;
          $140 = $139 & 2147483647;
          $141 = ($140>>>0)<(2146435072);
          $142 = ($140|0)==(2146435072);
          $143 = ($138>>>0)<(0);
          $144 = $142 & $143;
          $145 = $141 | $144;
          if ($145) {
           label = 58;
           break;
          } else {
           break;
          }
         } else {
          $146 = $4;
          $147 = (___fpclassifyl((+$146))|0);
          $148 = ($147|0)>(1);
          if ($148) {
           label = 58;
           break;
          } else {
           break;
          }
         }
        }
       } while(0);
       do {
        if ((label|0) == 58) {
         $149 = $4;
         $150 = (+_fmod((+$149),1.0));
         $151 = $150 != 0.0;
         if ($151) {
          $152 = $2;
          $153 = +HEAPF64[$152>>3];
          $154 = (_f_to_fraction($153,$d1,$d2)|0);
          $155 = ($154|0)!=(0);
          if ($155) {
           $156 = $d;
           $157 = (_f_to_fraction($156,$d1,$d2)|0);
           $158 = ($157|0)!=(0);
           if ($158) {
            break;
           }
           HEAP32[41256>>2] = 0;
           $0 = 0;
           $175 = $0;
           STACKTOP = sp;return ($175|0);
          }
         }
        }
       } while(0);
      }
     }
    }
   }
   $159 = (___errno_location()|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ($160|0)==(34);
   if ($161) {
    HEAP32[41256>>2] = 0;
    $0 = 0;
    $175 = $0;
    STACKTOP = sp;return ($175|0);
   }
   _check_err();
   $162 = HEAP32[41256>>2]|0;
   $163 = ($162|0)!=(0);
   if ($163) {
    $164 = $d;
    $165 = $2;
    HEAPF64[$165>>3] = $164;
   }
   break;
  }
  case 9:  {
   $166 = $2;
   $167 = +HEAPF64[$166>>3];
   $168 = $167 + 1.0;
   $169 = (+_tgamma($168));
   $d = $169;
   $170 = (___errno_location()|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)!=(0);
   if (!($172)) {
    $173 = $d;
    $174 = $2;
    HEAPF64[$174>>3] = $173;
    break L5;
   }
   $0 = 0;
   $175 = $0;
   STACKTOP = sp;return ($175|0);
   break;
  }
  case 7:  {
   $74 = $4;
   (_check_divide_by_zero($74)|0);
   $75 = $2;
   $76 = +HEAPF64[$75>>3];
   $77 = $4;
   $78 = $76 / $77;
   $79 = $2;
   (+_modf((+$78),($79|0)));
   break;
  }
  case 5: case 4:  {
   $47 = $op1;
   $48 = ($47|0)==(0);
   if ($48) {
    $op1 = 4;
   }
   $49 = $op1;
   $50 = $3;
   $51 = ($49|0)==($50|0);
   if ($51) {
    $52 = $4;
    $53 = $2;
    $54 = +HEAPF64[$53>>3];
    $55 = $54 * $52;
    HEAPF64[$53>>3] = $55;
   } else {
    $56 = $op1;
    $57 = ($56|0)==(5);
    if ($57) {
     $58 = $2;
     $59 = +HEAPF64[$58>>3];
     (_check_divide_by_zero($59)|0);
     $60 = $4;
     $61 = $2;
     $62 = +HEAPF64[$61>>3];
     $63 = $60 / $62;
     $64 = $2;
     HEAPF64[$64>>3] = $63;
     $65 = $1;
     HEAP32[$65>>2] = 4;
    } else {
     $66 = $3;
     $67 = ($66|0)==(5);
     if ($67) {
      $68 = $4;
      (_check_divide_by_zero($68)|0);
      $69 = $2;
      $70 = +HEAPF64[$69>>3];
      $71 = $4;
      $72 = $70 / $71;
      $73 = $2;
      HEAPF64[$73>>3] = $72;
     }
    }
   }
   break;
  }
  case 2: case 1:  {
   $11 = $op1;
   $12 = ($11|0)==(2);
   if ($12) {
    $13 = $2;
    $14 = +HEAPF64[$13>>3];
    $15 = -$14;
    $d = $15;
   } else {
    $16 = $2;
    $17 = +HEAPF64[$16>>3];
    $d = $17;
   }
   $18 = $d;
   $19 = (+Math_abs((+$18)));
   $20 = +HEAPF64[432>>3];
   $21 = $19 * $20;
   HEAPF64[$d1>>3] = $21;
   $22 = $3;
   $23 = ($22|0)==(1);
   if ($23) {
    $24 = $4;
    $25 = $d;
    $26 = $25 + $24;
    $d = $26;
   } else {
    $27 = $4;
    $28 = $d;
    $29 = $28 - $27;
    $d = $29;
   }
   $30 = $d;
   $31 = (+Math_abs((+$30)));
   $32 = +HEAPF64[$d1>>3];
   $33 = $31 < $32;
   if ($33) {
    $d = 0.0;
   }
   $34 = $op1;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = $d;
    $37 = $2;
    HEAPF64[$37>>3] = $36;
   } else {
    $38 = $d;
    $39 = $38 >= 0.0;
    if ($39) {
     $40 = $1;
     HEAP32[$40>>2] = 1;
     $41 = $d;
     $42 = $2;
     HEAPF64[$42>>3] = $41;
    } else {
     $43 = $1;
     HEAP32[$43>>2] = 2;
     $44 = $d;
     $45 = -$44;
     $46 = $2;
     HEAPF64[$46>>3] = $45;
    }
   }
   break;
  }
  case 6:  {
   $80 = $4;
   $81 = $80 == 0.0;
   if ($81) {
    _warning(71800);
   }
   $82 = $2;
   $83 = +HEAPF64[$82>>3];
   $84 = $4;
   $85 = (+_fixed_fmod($83,$84));
   $86 = $2;
   HEAPF64[$86>>3] = $85;
   $87 = HEAP32[64>>2]|0;
   $88 = ($87|0)!=(0);
   if ($88) {
    $89 = $2;
    $90 = +HEAPF64[$89>>3];
    $91 = $90 < 0.0;
    if ($91) {
     $92 = $4;
     $93 = (+Math_abs((+$92)));
     $94 = $2;
     $95 = +HEAPF64[$94>>3];
     $96 = $95 + $93;
     HEAPF64[$94>>3] = $96;
    }
   }
   $97 = HEAP32[64>>2]|0;
   $98 = ($97|0)==(1);
   if ($98) {
    $99 = $4;
    $100 = $99 < 0.0;
    if ($100) {
     $101 = $2;
     $102 = +HEAPF64[$101>>3];
     $103 = $102 > 0.0;
     if ($103) {
      $104 = $4;
      $105 = $2;
      $106 = +HEAPF64[$105>>3];
      $107 = $106 + $104;
      HEAPF64[$105>>3] = $107;
     }
    }
   }
   break;
  }
  default: {
   $0 = 0;
   $175 = $0;
   STACKTOP = sp;return ($175|0);
  }
  }
 } while(0);
 $0 = 1;
 $175 = $0;
 STACKTOP = sp;return ($175|0);
}
function _se_compare($p1,$n1,$p2,$n2,$diff_signp) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 $p2 = $p2|0;
 $n2 = $n2|0;
 $diff_signp = $diff_signp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l1 = 0, $l2 = 0;
 var $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n1;
 $3 = $p2;
 $4 = $n2;
 $5 = $diff_signp;
 $6 = $2;
 $7 = $4;
 $8 = ($6|0)>($7|0);
 if ($8) {
  $9 = $2;
  $10 = (($9) + 1)|0;
  $11 = $4;
  $12 = (($11) + 1)|0;
  $13 = (($10|0) / ($12|0))&-1;
  $19 = $13;
 } else {
  $14 = $4;
  $15 = (($14) + 1)|0;
  $16 = $2;
  $17 = (($16) + 1)|0;
  $18 = (($15|0) / ($17|0))&-1;
  $19 = $18;
 }
 $20 = ($19|0)>(3);
 if ($20) {
  $21 = $5;
  HEAP32[$21>>2] = 0;
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 } else {
  $22 = $1;
  $23 = $2;
  $24 = (_min_level($22,$23)|0);
  $l1 = $24;
  $25 = $3;
  $26 = $4;
  $27 = (_min_level($25,$26)|0);
  $l2 = $27;
  $28 = $1;
  $29 = $2;
  $30 = $l1;
  $31 = $3;
  $32 = $4;
  $33 = $l2;
  $34 = $5;
  $35 = (_compare_recurse($28,$29,$30,$31,$32,$33,$34)|0);
  $rv = $35;
  $36 = $rv;
  $0 = $36;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return 0|0;
}
function _compare_recurse($p1,$n1,$l1,$p2,$n2,$l2,$diff_signp) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 $l1 = $l1|0;
 $p2 = $p2|0;
 $n2 = $n2|0;
 $l2 = $l2|0;
 $diff_signp = $diff_signp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c1 = 0.0, $c2 = 0.0, $d1 = 0.0, $diff_op = 0, $ep1 = 0, $ep2 = 0, $first = 0, $i = 0, $j = 0, $last_op1 = 0, $len = 0, $oc2 = 0, $op1 = 0, $op2 = 0, $opa2 = 0, $pv1 = 0, $used = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 50112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $j = sp + 40052|0;
 $opa2 = sp + 40|0;
 $used = sp + 40104|0;
 $1 = $p1;
 $2 = $n1;
 $3 = $l1;
 $4 = $p2;
 $5 = $n2;
 $6 = $l2;
 $7 = $diff_signp;
 $op1 = 0;
 $op2 = 0;
 $diff_op = 0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $5;
  $12 = ($11|0)==(1);
  if ($12) {
   $13 = $1;
   $14 = HEAP32[$13>>2]|0;
   $15 = $4;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)!=($16|0);
   if ($17) {
    $0 = 0;
    $442 = $0;
    STACKTOP = sp;return ($442|0);
   }
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   do {
    if ((($19|0) == 0)) {
     $41 = $1;
     $42 = (($41) + 8|0);
     $43 = +HEAPF64[$42>>3];
     $c1 = $43;
     $44 = $4;
     $45 = (($44) + 8|0);
     $46 = +HEAPF64[$45>>3];
     $c2 = $46;
     $47 = $c1;
     $48 = $c2;
     $49 = $47 == $48;
     if ($49) {
      $0 = 1;
      $442 = $0;
      STACKTOP = sp;return ($442|0);
     }
     $50 = $c1;
     $51 = $c2;
     $52 = -$51;
     $53 = $50 == $52;
     if ($53) {
      $54 = $7;
      HEAP32[$54>>2] = 1;
      $0 = 1;
      $442 = $0;
      STACKTOP = sp;return ($442|0);
     }
     $55 = $c1;
     $56 = (+Math_abs((+$55)));
     $57 = +HEAPF64[432>>3];
     $58 = $56 * $57;
     $d1 = $58;
     $59 = $c1;
     $60 = $c2;
     $61 = $59 - $60;
     $62 = (+Math_abs((+$61)));
     $63 = $d1;
     $64 = $62 < $63;
     if ($64) {
      $0 = 1;
      $442 = $0;
      STACKTOP = sp;return ($442|0);
     }
     $65 = $c1;
     $66 = $c2;
     $67 = $65 + $66;
     $68 = (+Math_abs((+$67)));
     $69 = $d1;
     $70 = $68 < $69;
     if (!($70)) {
      break;
     }
     $71 = $7;
     HEAP32[$71>>2] = 1;
     $0 = 1;
     $442 = $0;
     STACKTOP = sp;return ($442|0);
    } else if ((($19|0) == 2)) {
     _error_bug(71984);
    } else if ((($19|0) == 1)) {
     $20 = HEAP32[41248>>2]|0;
     $21 = ($20|0)!=(0);
     if ($21) {
      $22 = $1;
      $23 = (($22) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = $24 & 16383;
      $26 = ($25|0)==(4);
      if ($26) {
       $27 = $4;
       $28 = (($27) + 8|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = $29 & 16383;
       $31 = ($30|0)==(4);
       $32 = $31&1;
       $0 = $32;
       $442 = $0;
       STACKTOP = sp;return ($442|0);
      }
     }
     $33 = $1;
     $34 = (($33) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $4;
     $37 = (($36) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($35|0)==($38|0);
     $40 = $39&1;
     $0 = $40;
     $442 = $0;
     STACKTOP = sp;return ($442|0);
    }
   } while(0);
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 }
 $72 = $2;
 $73 = $1;
 $74 = (($73) + ($72<<4)|0);
 $ep1 = $74;
 $75 = $5;
 $76 = $4;
 $77 = (($76) + ($75<<4)|0);
 $ep2 = $77;
 $78 = $1;
 $79 = (($78) + 16|0);
 $pv1 = $79;
 while(1) {
  $80 = $pv1;
  $81 = $ep1;
  $82 = ($80>>>0)<($81>>>0);
  if (!($82)) {
   break;
  }
  $83 = $pv1;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $3;
  $87 = ($85|0)==($86|0);
  if ($87) {
   label = 25;
   break;
  }
  $91 = $pv1;
  $92 = (($91) + 32|0);
  $pv1 = $92;
 }
 if ((label|0) == 25) {
  $88 = $pv1;
  $89 = (($88) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $op1 = $90;
 }
 $93 = $4;
 $94 = (($93) + 16|0);
 $pv1 = $94;
 while(1) {
  $95 = $pv1;
  $96 = $ep2;
  $97 = ($95>>>0)<($96>>>0);
  if (!($97)) {
   break;
  }
  $98 = $pv1;
  $99 = (($98) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $6;
  $102 = ($100|0)==($101|0);
  if ($102) {
   label = 31;
   break;
  }
  $106 = $pv1;
  $107 = (($106) + 32|0);
  $pv1 = $107;
 }
 if ((label|0) == 31) {
  $103 = $pv1;
  $104 = (($103) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $op2 = $105;
 }
 $108 = $op2;
 $109 = ($108|0)==(0);
 do {
  if ($109) {
   $110 = $op1;
   $111 = ($110|0)!=(4);
   if ($111) {
    $112 = $op1;
    $113 = ($112|0)!=(5);
    if ($113) {
     $0 = 0;
     $442 = $0;
     STACKTOP = sp;return ($442|0);
    }
   }
  } else {
   $114 = $op1;
   switch ($114|0) {
   case 0:  {
    $119 = $op2;
    $120 = ($119|0)!=(4);
    if ($120) {
     $121 = $op2;
     $122 = ($121|0)!=(5);
     if ($122) {
      $0 = 0;
      $442 = $0;
      STACKTOP = sp;return ($442|0);
     }
    }
    break;
   }
   case 5: case 4:  {
    $123 = $op2;
    $124 = ($123|0)!=(4);
    if ($124) {
     $125 = $op2;
     $126 = ($125|0)!=(5);
     if ($126) {
      $diff_op = 1;
     }
    }
    break;
   }
   case 2: case 1:  {
    $115 = $op2;
    $116 = ($115|0)!=(1);
    if ($116) {
     $117 = $op2;
     $118 = ($117|0)!=(2);
     if ($118) {
      $diff_op = 1;
     }
    }
    break;
   }
   default: {
    $127 = $op2;
    $128 = $op1;
    $129 = ($127|0)!=($128|0);
    if ($129) {
     $diff_op = 1;
    }
   }
   }
   $130 = $diff_op;
   $131 = ($130|0)!=(0);
   if (!($131)) {
    break;
   }
   $132 = $1;
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)==(0);
   do {
    if ($134) {
     $135 = $1;
     $136 = (($135) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $3;
     $139 = ($137|0)==($138|0);
     if ($139) {
      $140 = $op1;
      $141 = ($140|0)==(4);
      if ($141) {
       $142 = $1;
       $143 = (($142) + 8|0);
       $144 = +HEAPF64[$143>>3];
       $145 = (+Math_abs((+$144)));
       $146 = $145 - 1.0;
       $147 = (+Math_abs((+$146)));
       $148 = +HEAPF64[432>>3];
       $149 = $147 <= $148;
       if (!($149)) {
        break;
       }
       $150 = $1;
       $151 = (($150) + 32|0);
       $152 = $2;
       $153 = (($152) - 2)|0;
       $154 = $1;
       $155 = (($154) + 32|0);
       $156 = $2;
       $157 = (($156) - 2)|0;
       $158 = (_min_level($155,$157)|0);
       $159 = $4;
       $160 = $5;
       $161 = $6;
       $162 = $7;
       $163 = (_compare_recurse($151,$153,$158,$159,$160,$161,$162)|0);
       $164 = ($163|0)!=(0);
       if (!($164)) {
        $0 = 0;
        $442 = $0;
        STACKTOP = sp;return ($442|0);
       }
       $165 = $1;
       $166 = (($165) + 8|0);
       $167 = +HEAPF64[$166>>3];
       $168 = $167 < 0.0;
       if ($168) {
        $169 = $7;
        $170 = HEAP32[$169>>2]|0;
        $171 = $170 ^ 1;
        HEAP32[$169>>2] = $171;
       }
       $0 = 1;
       $442 = $0;
       STACKTOP = sp;return ($442|0);
      }
     }
    }
   } while(0);
   $172 = $4;
   $173 = HEAP32[$172>>2]|0;
   $174 = ($173|0)==(0);
   do {
    if ($174) {
     $175 = $4;
     $176 = (($175) + 4|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = ($177|0)==($178|0);
     if ($179) {
      $180 = $op2;
      $181 = ($180|0)==(4);
      if ($181) {
       $182 = $4;
       $183 = (($182) + 8|0);
       $184 = +HEAPF64[$183>>3];
       $185 = (+Math_abs((+$184)));
       $186 = $185 - 1.0;
       $187 = (+Math_abs((+$186)));
       $188 = +HEAPF64[432>>3];
       $189 = $187 <= $188;
       if (!($189)) {
        break;
       }
       $190 = $1;
       $191 = $2;
       $192 = $3;
       $193 = $4;
       $194 = (($193) + 32|0);
       $195 = $5;
       $196 = (($195) - 2)|0;
       $197 = $4;
       $198 = (($197) + 32|0);
       $199 = $5;
       $200 = (($199) - 2)|0;
       $201 = (_min_level($198,$200)|0);
       $202 = $7;
       $203 = (_compare_recurse($190,$191,$192,$194,$196,$201,$202)|0);
       $204 = ($203|0)!=(0);
       if (!($204)) {
        $0 = 0;
        $442 = $0;
        STACKTOP = sp;return ($442|0);
       }
       $205 = $4;
       $206 = (($205) + 8|0);
       $207 = +HEAPF64[$206>>3];
       $208 = $207 < 0.0;
       if ($208) {
        $209 = $7;
        $210 = HEAP32[$209>>2]|0;
        $211 = $210 ^ 1;
        HEAP32[$209>>2] = $211;
       }
       $0 = 1;
       $442 = $0;
       STACKTOP = sp;return ($442|0);
      }
     }
    }
   } while(0);
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $212 = $4;
 HEAP32[$opa2>>2] = $212;
 HEAP8[$used>>0] = 0;
 $oc2 = 1;
 $213 = $4;
 $214 = (($213) + 16|0);
 $pv1 = $214;
 while(1) {
  $215 = $pv1;
  $216 = $ep2;
  $217 = ($215>>>0)<($216>>>0);
  if (!($217)) {
   break;
  }
  $218 = $pv1;
  $219 = (($218) + 4|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $6;
  $222 = ($220|0)==($221|0);
  if ($222) {
   $223 = $pv1;
   $224 = (($223) + 16|0);
   $225 = $oc2;
   $226 = (($opa2) + ($225<<2)|0);
   HEAP32[$226>>2] = $224;
   $227 = $oc2;
   $228 = (($used) + ($227)|0);
   HEAP8[$228>>0] = 0;
   $229 = $oc2;
   $230 = (($229) + 1)|0;
   $oc2 = $230;
   $231 = ($230|0)>=(10000);
   if ($231) {
    label = 82;
    break;
   }
  }
  $232 = $pv1;
  $233 = (($232) + 32|0);
  $pv1 = $233;
 }
 if ((label|0) == 82) {
  $0 = 0;
  $442 = $0;
  STACKTOP = sp;return ($442|0);
 }
 $234 = $pv1;
 $235 = (($234) + 16|0);
 $236 = $oc2;
 $237 = (($opa2) + ($236<<2)|0);
 HEAP32[$237>>2] = $235;
 $last_op1 = 0;
 $first = 1;
 $238 = $1;
 $pv1 = $238;
 L133: while(1) {
  $len = 1;
  while(1) {
   $239 = $len;
   $240 = $pv1;
   $241 = (($240) + ($239<<4)|0);
   $242 = $ep1;
   $243 = ($241>>>0)<($242>>>0);
   if (!($243)) {
    break;
   }
   $244 = $len;
   $245 = $pv1;
   $246 = (($245) + ($244<<4)|0);
   $247 = (($246) + 4|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $3;
   $250 = ($248|0)<=($249|0);
   if ($250) {
    label = 90;
    break;
   }
   $251 = $len;
   $252 = (($251) + 2)|0;
   $len = $252;
  }
  if ((label|0) == 90) {
   label = 0;
  }
  $i = 0;
  L143: while(1) {
   $253 = $i;
   $254 = $oc2;
   $255 = ($253|0)>=($254|0);
   if ($255) {
    label = 95;
    break;
   }
   $283 = $i;
   $284 = (($used) + ($283)|0);
   $285 = HEAP8[$284>>0]|0;
   $286 = ($285<<24>>24)!=(0);
   L146: do {
    if ($286) {
    } else {
     $287 = $op1;
     L148: do {
      switch ($287|0) {
      case 2: case 1:  {
       break;
      }
      case 5: case 4: case 0:  {
       $288 = $last_op1;
       $289 = ($288|0)==(5);
       $290 = $289&1;
       $291 = $i;
       $292 = ($291|0)!=(0);
       if ($292) {
        $293 = $i;
        $294 = (($opa2) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = (($295) + -16|0);
        $297 = (($296) + 8|0);
        $298 = HEAP32[$297>>2]|0;
        $299 = ($298|0)==(5);
        $301 = $299;
       } else {
        $301 = 0;
       }
       $300 = $301&1;
       $302 = ($290|0)!=($300|0);
       if ($302) {
        break L146;
       } else {
        break L148;
       }
       break;
      }
      default: {
       $303 = $last_op1;
       $304 = ($303|0)==(0);
       $305 = $304&1;
       $306 = $i;
       $307 = ($306|0)==(0);
       $308 = $307&1;
       $309 = ($305|0)!=($308|0);
       if ($309) {
        label = 115;
        break L133;
       }
      }
      }
     } while(0);
     $310 = $pv1;
     $311 = $len;
     $312 = $pv1;
     $313 = (($312) + 4|0);
     $314 = HEAP32[$313>>2]|0;
     $315 = $3;
     $316 = ($314|0)<=($315|0);
     if ($316) {
      $317 = $3;
      $345 = $317;
     } else {
      $318 = $3;
      $319 = (($318) + 1)|0;
      $345 = $319;
     }
     $320 = $i;
     $321 = (($opa2) + ($320<<2)|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = $i;
     $324 = (($323) + 1)|0;
     $325 = (($opa2) + ($324<<2)|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $i;
     $328 = (($opa2) + ($327<<2)|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = $326;
     $331 = $329;
     $332 = (($330) - ($331))|0;
     $333 = (($332|0) / 16)&-1;
     $334 = (($333) - 1)|0;
     $335 = $i;
     $336 = (($opa2) + ($335<<2)|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = (($337) + 4|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = $6;
     $341 = ($339|0)<=($340|0);
     if ($341) {
      $342 = $6;
      $346 = $342;
     } else {
      $343 = $6;
      $344 = (($343) + 1)|0;
      $346 = $344;
     }
     $347 = (_compare_recurse($310,$311,$345,$322,$334,$346,$j)|0);
     $348 = ($347|0)!=(0);
     if (!($348)) {
      break;
     }
     $349 = $op1;
     switch ($349|0) {
     case 5: case 4: case 0:  {
      label = 125;
      break L143;
      break;
     }
     case 2: case 1:  {
      break;
     }
     default: {
      $381 = HEAP32[$j>>2]|0;
      $382 = ($381|0)!=(0);
      if (!($382)) {
       label = 139;
       break L143;
      }
      break L146;
     }
     }
     $354 = $last_op1;
     $355 = ($354|0)==(2);
     if ($355) {
      $356 = HEAP32[$j>>2]|0;
      $357 = ($356|0)!=(0);
      $358 = $357 ^ 1;
      $359 = $358&1;
      HEAP32[$j>>2] = $359;
     }
     $360 = $i;
     $361 = ($360|0)!=(0);
     if ($361) {
      $362 = $i;
      $363 = (($opa2) + ($362<<2)|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = (($364) + -16|0);
      $366 = (($365) + 8|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = ($367|0)==(2);
      if ($368) {
       $369 = HEAP32[$j>>2]|0;
       $370 = ($369|0)!=(0);
       $371 = $370 ^ 1;
       $372 = $371&1;
       HEAP32[$j>>2] = $372;
      }
     }
     $373 = $first;
     $374 = ($373|0)!=(0);
     if ($374) {
      label = 135;
      break L143;
     }
     $375 = $7;
     $376 = HEAP32[$375>>2]|0;
     $377 = HEAP32[$j>>2]|0;
     $378 = ($376|0)!=($377|0);
     if (!($378)) {
      label = 134;
      break L143;
     }
    }
   } while(0);
   $385 = $i;
   $386 = (($385) + 1)|0;
   $i = $386;
  }
  if ((label|0) == 95) {
   label = 0;
   $256 = $op1;
   $257 = ($256|0)==(4);
   if (!($257)) {
    $258 = $op1;
    $259 = ($258|0)==(5);
    if (!($259)) {
     break;
    }
   }
   $260 = $pv1;
   $261 = (($260) + 4|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $3;
   $264 = ($262|0)==($263|0);
   if (!($264)) {
    break;
   }
   $265 = $pv1;
   $266 = HEAP32[$265>>2]|0;
   $267 = ($266|0)==(0);
   if (!($267)) {
    break;
   }
   $268 = $pv1;
   $269 = (($268) + 8|0);
   $270 = +HEAPF64[$269>>3];
   $271 = (+Math_abs((+$270)));
   $272 = $271 - 1.0;
   $273 = (+Math_abs((+$272)));
   $274 = +HEAPF64[432>>3];
   $275 = $273 <= $274;
   if (!($275)) {
    label = 103;
    break;
   }
   $276 = $pv1;
   $277 = (($276) + 8|0);
   $278 = +HEAPF64[$277>>3];
   $279 = $278 < 0.0;
   if ($279) {
    $280 = $7;
    $281 = HEAP32[$280>>2]|0;
    $282 = $281 ^ 1;
    HEAP32[$280>>2] = $282;
   }
  }
  else if ((label|0) == 125) {
   label = 0;
   $350 = HEAP32[$j>>2]|0;
   $351 = $7;
   $352 = HEAP32[$351>>2]|0;
   $353 = $352 ^ $350;
   HEAP32[$351>>2] = $353;
   label = 140;
  }
  else if ((label|0) == 134) {
   label = 0;
   label = 136;
  }
  else if ((label|0) == 135) {
   label = 0;
   $379 = HEAP32[$j>>2]|0;
   $380 = $7;
   HEAP32[$380>>2] = $379;
   $first = 0;
   label = 136;
  }
  else if ((label|0) == 139) {
   label = 0;
   label = 140;
  }
  if ((label|0) == 136) {
   label = 0;
   label = 140;
  }
  if ((label|0) == 140) {
   label = 0;
   $383 = $i;
   $384 = (($used) + ($383)|0);
   HEAP8[$384>>0] = 1;
  }
  $387 = $len;
  $388 = $pv1;
  $389 = (($388) + ($387<<4)|0);
  $pv1 = $389;
  $390 = $pv1;
  $391 = $ep1;
  $392 = ($390>>>0)>=($391>>>0);
  if ($392) {
   label = 144;
   break;
  }
  $393 = $pv1;
  $394 = (($393) + 8|0);
  $395 = HEAP32[$394>>2]|0;
  $last_op1 = $395;
  $396 = $pv1;
  $397 = (($396) + 16|0);
  $pv1 = $397;
 }
 if ((label|0) == 103) {
 }
 else if ((label|0) == 115) {
  $0 = 0;
  $442 = $0;
  STACKTOP = sp;return ($442|0);
 }
 else if ((label|0) == 144) {
  $i = 0;
  while(1) {
   $398 = $i;
   $399 = $oc2;
   $400 = ($398|0)<($399|0);
   if (!($400)) {
    label = 161;
    break;
   }
   $401 = $i;
   $402 = (($used) + ($401)|0);
   $403 = HEAP8[$402>>0]|0;
   $404 = ($403<<24>>24)!=(0);
   if ($404) {
   } else {
    $405 = $op2;
    $406 = ($405|0)==(4);
    if (!($406)) {
     $407 = $op2;
     $408 = ($407|0)==(5);
     if (!($408)) {
      break;
     }
    }
    $409 = $i;
    $410 = (($opa2) + ($409<<2)|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = (($411) + 4|0);
    $413 = HEAP32[$412>>2]|0;
    $414 = $6;
    $415 = ($413|0)==($414|0);
    if (!($415)) {
     break;
    }
    $416 = $i;
    $417 = (($opa2) + ($416<<2)|0);
    $418 = HEAP32[$417>>2]|0;
    $419 = HEAP32[$418>>2]|0;
    $420 = ($419|0)==(0);
    if (!($420)) {
     break;
    }
    $421 = $i;
    $422 = (($opa2) + ($421<<2)|0);
    $423 = HEAP32[$422>>2]|0;
    $424 = (($423) + 8|0);
    $425 = +HEAPF64[$424>>3];
    $426 = (+Math_abs((+$425)));
    $427 = $426 - 1.0;
    $428 = (+Math_abs((+$427)));
    $429 = +HEAPF64[432>>3];
    $430 = $428 <= $429;
    if (!($430)) {
     label = 157;
     break;
    }
    $431 = $i;
    $432 = (($opa2) + ($431<<2)|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = (($433) + 8|0);
    $435 = +HEAPF64[$434>>3];
    $436 = $435 < 0.0;
    if ($436) {
     $437 = $7;
     $438 = HEAP32[$437>>2]|0;
     $439 = $438 ^ 1;
     HEAP32[$437>>2] = $439;
    }
   }
   $440 = $i;
   $441 = (($440) + 1)|0;
   $i = $441;
  }
  if ((label|0) == 157) {
  }
  else if ((label|0) == 161) {
   $0 = 1;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
  $0 = 0;
  $442 = $0;
  STACKTOP = sp;return ($442|0);
 }
 $0 = 0;
 $442 = $0;
 STACKTOP = sp;return ($442|0);
}
function _order_recurse($equation,$np,$loc,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $modified = 0, $n = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $op = 0;
 $modified = 0;
 $5 = $3;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 L1: do {
  if ($7) {
  } else {
   $8 = $3;
   $i = $8;
   while(1) {
    $9 = $i;
    $10 = $2;
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)<($11|0);
    if (!($12)) {
     break;
    }
    $13 = $i;
    $14 = $1;
    $15 = (($14) + ($13<<4)|0);
    $16 = (($15) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $4;
    $19 = ($17|0)<($18|0);
    if ($19) {
     label = 6;
     break;
    }
    $31 = $i;
    $32 = $1;
    $33 = (($32) + ($31<<4)|0);
    $34 = (($33) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $4;
    $37 = ($35|0)>($36|0);
    if ($37) {
     $38 = $1;
     $39 = $2;
     $40 = $i;
     $41 = $4;
     $42 = (($41) + 1)|0;
     $43 = (_order_recurse($38,$39,$40,$42)|0);
     $44 = $modified;
     $45 = $44 | $43;
     $modified = $45;
     $46 = $i;
     $47 = (($46) + 1)|0;
     $i = $47;
     while(1) {
      $48 = $i;
      $49 = $2;
      $50 = HEAP32[$49>>2]|0;
      $51 = ($48|0)<($50|0);
      if ($51) {
       $52 = $i;
       $53 = $1;
       $54 = (($53) + ($52<<4)|0);
       $55 = (($54) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $4;
       $58 = ($56|0)>($57|0);
       $262 = $58;
      } else {
       $262 = 0;
      }
      if (!($262)) {
       break;
      }
      $59 = $i;
      $60 = (($59) + 1)|0;
      $i = $60;
     }
     continue;
    }
    $61 = $i;
    $62 = $1;
    $63 = (($62) + ($61<<4)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(2);
    if ($65) {
     $66 = $i;
     $67 = $66 & 1;
     $68 = ($67|0)==(0);
     if ($68) {
      label = 21;
      break;
     }
     $69 = $i;
     $70 = $1;
     $71 = (($70) + ($69<<4)|0);
     $72 = (($71) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(0);
     if ($74) {
      label = 21;
      break;
     }
     $75 = $op;
     $76 = ($75|0)!=(0);
     if ($76) {
      $77 = $i;
      $78 = $1;
      $79 = (($78) + ($77<<4)|0);
      $80 = (($79) + 8|0);
      $81 = HEAP32[$80>>2]|0;
      if ((($81|0) == 5) | (($81|0) == 4)) {
       $86 = $op;
       $87 = ($86|0)==(4);
       if (!($87)) {
        $88 = $op;
        $89 = ($88|0)==(5);
        if (!($89)) {
         label = 31;
         break;
        }
       }
      } else if ((($81|0) == 2) | (($81|0) == 1)) {
       $82 = $op;
       $83 = ($82|0)==(1);
       if (!($83)) {
        $84 = $op;
        $85 = ($84|0)==(2);
        if (!($85)) {
         label = 27;
         break;
        }
       }
      } else {
       label = 32;
       break;
      }
     } else {
      $90 = $i;
      $91 = $1;
      $92 = (($91) + ($90<<4)|0);
      $93 = (($92) + 8|0);
      $94 = HEAP32[$93>>2]|0;
      $op = $94;
     }
    } else {
     $95 = $i;
     $96 = $95 & 1;
     $97 = ($96|0)!=(0);
     if ($97) {
      label = 37;
      break;
     }
    }
    $98 = $i;
    $99 = (($98) + 1)|0;
    $i = $99;
   }
   do {
    if ((label|0) == 6) {
     $20 = $i;
     $21 = $1;
     $22 = (($21) + ($20<<4)|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)!=(2);
     if (!($24)) {
      $25 = $i;
      $26 = $1;
      $27 = (($26) + ($25<<4)|0);
      $28 = (($27) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)<(1);
      if (!($30)) {
       break;
      }
     }
     break L1;
    }
    else if ((label|0) == 21) {
     break L1;
    }
    else if ((label|0) == 27) {
     break L1;
    }
    else if ((label|0) == 31) {
     label = 32;
    }
    else if ((label|0) == 37) {
     break L1;
    }
   } while(0);
   if ((label|0) == 32) {
    break;
   }
   $100 = $i;
   $101 = $100 & 1;
   $102 = ($101|0)==(0);
   if ($102) {
    break;
   }
   $103 = $op;
   if ((($103|0) == 5) | (($103|0) == 4)) {
    $171 = $3;
    $172 = (($171) + 1)|0;
    $j = $172;
    while(1) {
     $173 = $j;
     $174 = $i;
     $175 = ($173|0)>=($174|0);
     if ($175) {
      label = 62;
      break;
     }
     $177 = $j;
     $178 = $1;
     $179 = (($178) + ($177<<4)|0);
     $180 = (($179) + 4|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $4;
     $183 = ($181|0)==($182|0);
     if ($183) {
      $184 = $j;
      $185 = $1;
      $186 = (($185) + ($184<<4)|0);
      $187 = (($186) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ($188|0)==(5);
      if ($189) {
       break;
      }
     }
     $190 = $j;
     $191 = (($190) + 2)|0;
     $j = $191;
    }
    if ((label|0) == 62) {
     $176 = $modified;
     $0 = $176;
     $261 = $0;
     STACKTOP = sp;return ($261|0);
    }
    $192 = $j;
    $193 = (($192) + 2)|0;
    $k = $193;
    while(1) {
     $194 = $k;
     $195 = $i;
     $196 = ($194|0)<($195|0);
     if (!($196)) {
      break;
     }
     $197 = $k;
     $198 = $1;
     $199 = (($198) + ($197<<4)|0);
     $200 = (($199) + 4|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $4;
     $203 = ($201|0)==($202|0);
     if ($203) {
      $204 = $k;
      $205 = $1;
      $206 = (($205) + ($204<<4)|0);
      $207 = (($206) + 8|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = ($208|0)==(4);
      if ($209) {
       $210 = $k;
       $211 = (($210) + 2)|0;
       $n = $211;
       while(1) {
        $212 = $n;
        $213 = $i;
        $214 = ($212|0)<($213|0);
        if ($214) {
         $215 = $n;
         $216 = $1;
         $217 = (($216) + ($215<<4)|0);
         $218 = (($217) + 4|0);
         $219 = HEAP32[$218>>2]|0;
         $220 = $4;
         $221 = ($219|0)>($220|0);
         $263 = $221;
        } else {
         $263 = 0;
        }
        if (!($263)) {
         break;
        }
        $222 = $n;
        $223 = (($222) + 2)|0;
        $n = $223;
       }
       $224 = $k;
       $225 = $n;
       $226 = (($225) - ($224))|0;
       $n = $226;
       $227 = HEAP32[3704>>2]|0;
       $228 = $k;
       $229 = $1;
       $230 = (($229) + ($228<<4)|0);
       $231 = $n;
       $232 = $231<<4;
       _memmove(($227|0),($230|0),($232|0))|0;
       $233 = $j;
       $234 = $n;
       $235 = (($233) + ($234))|0;
       $236 = $1;
       $237 = (($236) + ($235<<4)|0);
       $238 = $j;
       $239 = $1;
       $240 = (($239) + ($238<<4)|0);
       $241 = $k;
       $242 = $j;
       $243 = (($241) - ($242))|0;
       $244 = $243<<4;
       _memmove(($237|0),($240|0),($244|0))|0;
       $245 = $j;
       $246 = $1;
       $247 = (($246) + ($245<<4)|0);
       $248 = HEAP32[3704>>2]|0;
       $249 = $n;
       $250 = $249<<4;
       _memmove(($247|0),($248|0),($250|0))|0;
       $251 = $n;
       $252 = $j;
       $253 = (($252) + ($251))|0;
       $j = $253;
       $254 = $n;
       $255 = $k;
       $256 = (($255) + ($254))|0;
       $k = $256;
       $modified = 1;
       continue;
      }
     }
     $257 = $k;
     $258 = (($257) + 2)|0;
     $k = $258;
    }
   } else if ((($103|0) == 2) | (($103|0) == 1)) {
    $104 = $3;
    $105 = $1;
    $106 = (($105) + ($104<<4)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $109 = $3;
     $110 = $1;
     $111 = (($110) + ($109<<4)|0);
     $112 = (($111) + 8|0);
     $113 = +HEAPF64[$112>>3];
     $114 = $113 < 0.0;
     if ($114) {
      $115 = $3;
      $116 = $1;
      $117 = (($116) + ($115<<4)|0);
      $118 = (($117) + 4|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = $4;
      $121 = ($119|0)==($120|0);
      if ($121) {
       label = 50;
      } else {
       $122 = $3;
       $123 = (($122) + 1)|0;
       $124 = $1;
       $125 = (($124) + ($123<<4)|0);
       $126 = (($125) + 4|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $4;
       $129 = (($128) + 1)|0;
       $130 = ($127|0)==($129|0);
       if ($130) {
        $131 = $3;
        $132 = (($131) + 1)|0;
        $133 = $1;
        $134 = (($133) + ($132<<4)|0);
        $135 = (($134) + 8|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($136|0)==(4);
        if ($137) {
         label = 50;
        } else {
         $138 = $3;
         $139 = (($138) + 1)|0;
         $140 = $1;
         $141 = (($140) + ($139<<4)|0);
         $142 = (($141) + 8|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ($143|0)==(5);
         if ($144) {
          label = 50;
         }
        }
       }
      }
      if ((label|0) == 50) {
       $145 = $3;
       $146 = (($145) + 1)|0;
       $j = $146;
       while(1) {
        $147 = $j;
        $148 = $i;
        $149 = ($147|0)<($148|0);
        if (!($149)) {
         break;
        }
        $150 = $j;
        $151 = $1;
        $152 = (($151) + ($150<<4)|0);
        $153 = (($152) + 4|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = $4;
        $156 = ($154|0)==($155|0);
        if ($156) {
         $157 = $j;
         $158 = $1;
         $159 = (($158) + ($157<<4)|0);
         $160 = (($159) + 8|0);
         $161 = HEAP32[$160>>2]|0;
         $162 = ($161|0)==(1);
         if ($162) {
          label = 54;
          break;
         }
        }
        $169 = $j;
        $170 = (($169) + 2)|0;
        $j = $170;
       }
       if ((label|0) == 54) {
        $163 = $1;
        $164 = $2;
        $165 = $4;
        $166 = $3;
        $167 = $j;
        $168 = (($167) + 1)|0;
        _swap($163,$164,$165,$166,$168);
        $modified = 1;
       }
      }
     }
    }
   }
   $259 = $modified;
   $0 = $259;
   $261 = $0;
   STACKTOP = sp;return ($261|0);
  }
 } while(0);
 _error_bug(71928);
 $260 = $modified;
 $0 = $260;
 $261 = $0;
 STACKTOP = sp;return ($261|0);
}
function _swap($equation,$np,$level,$i1,$i2) {
 $equation = $equation|0;
 $np = $np|0;
 $level = $level|0;
 $i1 = $i1|0;
 $i2 = $i2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $e1 = 0, $e2 = 0, $n1 = 0, $n2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $level;
 $3 = $i1;
 $4 = $i2;
 $5 = $3;
 $6 = (($5) + 1)|0;
 $e1 = $6;
 while(1) {
  $7 = $e1;
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)>=($9|0);
  if ($10) {
   break;
  }
  $11 = $e1;
  $12 = $0;
  $13 = (($12) + ($11<<4)|0);
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ($15|0)<=($16|0);
  if ($17) {
   break;
  }
  $18 = $e1;
  $19 = (($18) + 2)|0;
  $e1 = $19;
 }
 $20 = $4;
 $21 = (($20) + 1)|0;
 $e2 = $21;
 while(1) {
  $22 = $e2;
  $23 = $1;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22|0)>=($24|0);
  if ($25) {
   break;
  }
  $26 = $e2;
  $27 = $0;
  $28 = (($27) + ($26<<4)|0);
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $2;
  $32 = ($30|0)<=($31|0);
  if ($32) {
   break;
  }
  $33 = $e2;
  $34 = (($33) + 2)|0;
  $e2 = $34;
 }
 $35 = $e1;
 $36 = $3;
 $37 = (($35) - ($36))|0;
 $n1 = $37;
 $38 = $e2;
 $39 = $4;
 $40 = (($38) - ($39))|0;
 $n2 = $40;
 $41 = HEAP32[3704>>2]|0;
 $42 = $3;
 $43 = $0;
 $44 = (($43) + ($42<<4)|0);
 $45 = $e2;
 $46 = $3;
 $47 = (($45) - ($46))|0;
 $48 = $47<<4;
 _memmove(($41|0),($44|0),($48|0))|0;
 $49 = $3;
 $50 = $n2;
 $51 = (($49) + ($50))|0;
 $52 = $e1;
 $53 = ($51|0)!=($52|0);
 if ($53) {
  $54 = $3;
  $55 = $n2;
  $56 = (($54) + ($55))|0;
  $57 = $0;
  $58 = (($57) + ($56<<4)|0);
  $59 = $e1;
  $60 = $0;
  $61 = (($60) + ($59<<4)|0);
  $62 = $4;
  $63 = $e1;
  $64 = (($62) - ($63))|0;
  $65 = $64<<4;
  _memmove(($58|0),($61|0),($65|0))|0;
 }
 $66 = $3;
 $67 = $0;
 $68 = (($67) + ($66<<4)|0);
 $69 = $4;
 $70 = $3;
 $71 = (($69) - ($70))|0;
 $72 = HEAP32[3704>>2]|0;
 $73 = (($72) + ($71<<4)|0);
 $74 = $n2;
 $75 = $74<<4;
 _memmove(($68|0),($73|0),($75|0))|0;
 $76 = $e2;
 $77 = $n1;
 $78 = (($76) - ($77))|0;
 $79 = $0;
 $80 = (($79) + ($78<<4)|0);
 $81 = HEAP32[3704>>2]|0;
 $82 = $n1;
 $83 = $82<<4;
 _memmove(($80|0),($81|0),($83|0))|0;
 STACKTOP = sp;return;
}
function _org_up_level($bp,$ep,$level,$invert) {
 $bp = $bp|0;
 $ep = $ep|0;
 $level = $level|0;
 $invert = $invert|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bp;
 $1 = $ep;
 $2 = $level;
 $3 = $invert;
 $4 = $3;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  while(1) {
   $34 = $0;
   $35 = $1;
   $36 = ($34>>>0)<=($35>>>0);
   if (!($36)) {
    break;
   }
   $37 = $0;
   $38 = (($37) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + -1)|0;
   HEAP32[$38>>2] = $40;
   $41 = $0;
   $42 = (($41) + 16|0);
   $0 = $42;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $6 = $0;
  $7 = $1;
  $8 = ($6>>>0)<=($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + -1)|0;
  HEAP32[$10>>2] = $12;
  $13 = $0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ($15|0)==($16|0);
  if ($17) {
   $18 = $0;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(2);
   if ($20) {
    $21 = $0;
    $22 = (($21) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    if ((($23|0) == 4)) {
     $28 = $0;
     $29 = (($28) + 8|0);
     HEAP32[$29>>2] = 5;
    } else if ((($23|0) == 5)) {
     $30 = $0;
     $31 = (($30) + 8|0);
     HEAP32[$31>>2] = 4;
    } else if ((($23|0) == 1)) {
     $24 = $0;
     $25 = (($24) + 8|0);
     HEAP32[$25>>2] = 2;
    } else if ((($23|0) == 2)) {
     $26 = $0;
     $27 = (($26) + 8|0);
     HEAP32[$27>>2] = 1;
    }
   }
  }
  $32 = $0;
  $33 = (($32) + 16|0);
  $0 = $33;
 }
 STACKTOP = sp;return;
}
function _group_proc($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 _group_recurse($2,$3,0,1);
 STACKTOP = sp;return;
}
function _group_recurse($equation,$np,$loc,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $di = 0, $e1 = 0, $edi = 0, $group_flag = 0, $i = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $loc;
 $3 = $level;
 $di = -1;
 $group_flag = 0;
 $4 = $2;
 $i = $4;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = $i;
   $10 = $0;
   $11 = (($10) + ($9<<4)|0);
   $12 = (($11) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $3;
   $15 = ($13|0)>=($14|0);
   $167 = $15;
  } else {
   $167 = 0;
  }
  if (!($167)) {
   break;
  }
  $16 = $i;
  $17 = $0;
  $18 = (($17) + ($16<<4)|0);
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $3;
  $22 = ($20|0)>($21|0);
  if (!($22)) {
   $43 = $i;
   $44 = (($43) + 1)|0;
   $i = $44;
   continue;
  }
  $23 = $0;
  $24 = $1;
  $25 = $i;
  $26 = $3;
  $27 = (($26) + 1)|0;
  _group_recurse($23,$24,$25,$27);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
  while(1) {
   $30 = $i;
   $31 = $1;
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)<($32|0);
   if ($33) {
    $34 = $i;
    $35 = $0;
    $36 = (($35) + ($34<<4)|0);
    $37 = (($36) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $3;
    $40 = ($38|0)>($39|0);
    $168 = $40;
   } else {
    $168 = 0;
   }
   if (!($168)) {
    break;
   }
   $41 = $i;
   $42 = (($41) + 2)|0;
   $i = $42;
  }
 }
 $45 = $i;
 $e1 = $45;
 $edi = $45;
 $46 = $2;
 $47 = (($46) + 1)|0;
 $i = $47;
 while(1) {
  $48 = $i;
  $49 = $e1;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $0;
  $53 = (($52) + ($51<<4)|0);
  $54 = (($53) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $3;
  $57 = ($55|0)==($56|0);
  L22: do {
   if ($57) {
    $58 = $i;
    $59 = $0;
    $60 = (($59) + ($58<<4)|0);
    $61 = (($60) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(5);
    do {
     if ($63) {
      $64 = $di;
      $65 = ($64|0)<(0);
      if ($65) {
       $66 = $i;
       $di = $66;
       break L22;
      }
      $group_flag = 1;
      $67 = $i;
      $68 = (($67) + 2)|0;
      $len = $68;
      while(1) {
       $69 = $len;
       $70 = $e1;
       $71 = ($69|0)<($70|0);
       if (!($71)) {
        break;
       }
       $72 = $len;
       $73 = $0;
       $74 = (($73) + ($72<<4)|0);
       $75 = (($74) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $3;
       $78 = ($76|0)==($77|0);
       if ($78) {
        $79 = $len;
        $80 = $0;
        $81 = (($80) + ($79<<4)|0);
        $82 = (($81) + 8|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($83|0)!=(5);
        if ($84) {
         label = 24;
         break;
        }
       }
       $85 = $len;
       $86 = (($85) + 2)|0;
       $len = $86;
      }
      if ((label|0) == 24) {
       label = 0;
      }
      $87 = $i;
      $88 = $len;
      $89 = (($88) - ($87))|0;
      $len = $89;
      $90 = $edi;
      $91 = $e1;
      $92 = ($90|0)==($91|0);
      if ($92) {
       $93 = $len;
       $94 = $i;
       $95 = (($94) + ($93))|0;
       $i = $95;
       $96 = $i;
       $edi = $96;
       break L22;
      } else {
       $97 = HEAP32[3704>>2]|0;
       $98 = $i;
       $99 = $0;
       $100 = (($99) + ($98<<4)|0);
       $101 = $len;
       $102 = $101<<4;
       _memmove(($97|0),($100|0),($102|0))|0;
       $103 = $di;
       $104 = $len;
       $105 = (($103) + ($104))|0;
       $106 = $0;
       $107 = (($106) + ($105<<4)|0);
       $108 = $di;
       $109 = $0;
       $110 = (($109) + ($108<<4)|0);
       $111 = $i;
       $112 = $di;
       $113 = (($111) - ($112))|0;
       $114 = $113<<4;
       _memmove(($107|0),($110|0),($114|0))|0;
       $115 = $di;
       $116 = $0;
       $117 = (($116) + ($115<<4)|0);
       $118 = HEAP32[3704>>2]|0;
       $119 = $len;
       $120 = $119<<4;
       _memmove(($117|0),($118|0),($120|0))|0;
       $121 = $len;
       $122 = $edi;
       $123 = (($122) + ($121))|0;
       $edi = $123;
       $124 = $len;
       $125 = (($124) - 2)|0;
       $126 = $i;
       $127 = (($126) + ($125))|0;
       $i = $127;
       break;
      }
     } else {
      $128 = $di;
      $129 = ($128|0)>=(0);
      if ($129) {
       $130 = $edi;
       $131 = $e1;
       $132 = ($130|0)==($131|0);
       if ($132) {
        $133 = $i;
        $edi = $133;
       }
      }
     }
    } while(0);
    label = 35;
   } else {
    label = 35;
   }
  } while(0);
  if ((label|0) == 35) {
   label = 0;
  }
  $134 = $i;
  $135 = (($134) + 2)|0;
  $i = $135;
 }
 $136 = $group_flag;
 $137 = ($136|0)!=(0);
 if (!($137)) {
  STACKTOP = sp;return;
 }
 $138 = $di;
 $139 = (($138) + 1)|0;
 $i = $139;
 while(1) {
  $140 = $i;
  $141 = $edi;
  $142 = ($140|0)<($141|0);
  if (!($142)) {
   break;
  }
  $143 = $i;
  $144 = $0;
  $145 = (($144) + ($143<<4)|0);
  $146 = (($145) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $3;
  $149 = ($147|0)==($148|0);
  if ($149) {
   $150 = $i;
   $151 = $0;
   $152 = (($151) + ($150<<4)|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)==(2);
   if ($154) {
    $155 = $i;
    $156 = $0;
    $157 = (($156) + ($155<<4)|0);
    $158 = (($157) + 8|0);
    HEAP32[$158>>2] = 4;
   }
  }
  $159 = $i;
  $160 = $0;
  $161 = (($160) + ($159<<4)|0);
  $162 = (($161) + 4|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + 1)|0;
  HEAP32[$162>>2] = $164;
  $165 = $i;
  $166 = (($165) + 1)|0;
  $i = $166;
 }
 STACKTOP = sp;return;
}
function _fractions_and_group($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $rv = 0;
 $2 = $0;
 $3 = $1;
 _elim_loop($2,$3);
 $4 = HEAP32[40>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = $1;
  $8 = (_make_fractions($6,$7)|0);
  $rv = $8;
 }
 $9 = $0;
 $10 = $1;
 _group_proc($9,$10);
 $11 = $rv;
 STACKTOP = sp;return ($11|0);
}
function _make_fractions_and_group($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $rv = 0;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $1;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $11 = $1;
    $12 = (480 + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $1;
    $15 = (2080 + ($14<<2)|0);
    $16 = (_fractions_and_group($13,$15)|0);
    $17 = ($16|0)!=(0);
    if ($17) {
     $rv = 1;
    }
    $18 = $1;
    $19 = (2880 + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)>(0);
    if ($21) {
     $22 = $1;
     $23 = (1280 + ($22<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $1;
     $26 = (2880 + ($25<<2)|0);
     $27 = (_fractions_and_group($24,$26)|0);
     $28 = ($27|0)!=(0);
     if ($28) {
      $rv = 1;
     }
    }
    $29 = $rv;
    $0 = $29;
    $30 = $0;
    STACKTOP = sp;return ($30|0);
   }
  }
 }
 $0 = 0;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _super_factor($equation,$np,$start_flag) {
 $equation = $equation|0;
 $np = $np|0;
 $start_flag = $start_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $start_flag;
 $3 = $0;
 $4 = $1;
 _group_proc($3,$4);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = (_sf_recurse($5,$6,0,1,$7)|0);
 $rv = $8;
 $9 = $0;
 $10 = $1;
 _organize($9,$10);
 $11 = $rv;
 STACKTOP = sp;return ($11|0);
}
function _sf_recurse($equation,$np,$loc,$level,$start_flag) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 $start_flag = $start_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $len1 = 0, $len2 = 0;
 var $modified = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $5 = $start_flag;
 $modified = 0;
 $6 = $5;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = $3;
  $9 = (($8) + 1)|0;
  $i = $9;
  while(1) {
   $10 = $i;
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)<($12|0);
   if ($13) {
    $14 = $i;
    $15 = $1;
    $16 = (($15) + ($14<<4)|0);
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $4;
    $20 = ($18|0)>=($19|0);
    $169 = $20;
   } else {
    $169 = 0;
   }
   if (!($169)) {
    break;
   }
   $21 = $i;
   $22 = $1;
   $23 = (($22) + ($21<<4)|0);
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $4;
   $27 = ($25|0)==($26|0);
   if ($27) {
    $28 = $i;
    $29 = $1;
    $30 = (($29) + ($28<<4)|0);
    $31 = (($30) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(5);
    if ($33) {
     label = 8;
     break;
    }
   }
   $34 = $i;
   $35 = (($34) + 2)|0;
   $i = $35;
  }
  if ((label|0) == 8) {
   $5 = 1;
  }
 }
 $op = 0;
 $36 = $3;
 $i = $36;
 while(1) {
  $37 = $i;
  $38 = $2;
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)<($39|0);
  if ($40) {
   $41 = $i;
   $42 = $1;
   $43 = (($42) + ($41<<4)|0);
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $4;
   $47 = ($45|0)>=($46|0);
   $170 = $47;
  } else {
   $170 = 0;
  }
  if (!($170)) {
   break;
  }
  $48 = $i;
  $49 = $1;
  $50 = (($49) + ($48<<4)|0);
  $51 = (($50) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $4;
  $54 = ($52|0)>($53|0);
  if (!($54)) {
   $79 = $i;
   $80 = $1;
   $81 = (($80) + ($79<<4)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(2);
   if ($83) {
    $84 = $i;
    $85 = $1;
    $86 = (($85) + ($84<<4)|0);
    $87 = (($86) + 8|0);
    $88 = HEAP32[$87>>2]|0;
    $op = $88;
   }
   $89 = $i;
   $90 = (($89) + 1)|0;
   $i = $90;
   continue;
  }
  $55 = $1;
  $56 = $2;
  $57 = $i;
  $58 = $4;
  $59 = (($58) + 1)|0;
  $60 = $5;
  $61 = (_sf_recurse($55,$56,$57,$59,$60)|0);
  $62 = $modified;
  $63 = $62 | $61;
  $modified = $63;
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
  while(1) {
   $66 = $i;
   $67 = $2;
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)<($68|0);
   if ($69) {
    $70 = $i;
    $71 = $1;
    $72 = (($71) + ($70<<4)|0);
    $73 = (($72) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $4;
    $76 = ($74|0)>($75|0);
    $171 = $76;
   } else {
    $171 = 0;
   }
   if (!($171)) {
    break;
   }
   $77 = $i;
   $78 = (($77) + 2)|0;
   $i = $78;
  }
 }
 $91 = $modified;
 $92 = ($91|0)!=(0);
 if (!($92)) {
  $93 = $5;
  $94 = ($93|0)!=(0);
  if ($94) {
   $96 = $op;
   if (!((($96|0) == 2) | (($96|0) == 1))) {
    $97 = $modified;
    $0 = $97;
    $168 = $0;
    STACKTOP = sp;return ($168|0);
   }
   L47: while(1) {
    $98 = $3;
    $i = $98;
    $99 = $i;
    $100 = (($99) + 1)|0;
    $k = $100;
    while(1) {
     $101 = $k;
     $102 = $2;
     $103 = HEAP32[$102>>2]|0;
     $104 = ($101|0)<($103|0);
     if ($104) {
      $105 = $k;
      $106 = $1;
      $107 = (($106) + ($105<<4)|0);
      $108 = (($107) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = $4;
      $111 = ($109|0)>($110|0);
      $172 = $111;
     } else {
      $172 = 0;
     }
     if (!($172)) {
      break;
     }
     $112 = $k;
     $113 = (($112) + 2)|0;
     $k = $113;
    }
    $114 = $k;
    $115 = $i;
    $116 = (($114) - ($115))|0;
    $len1 = $116;
    $117 = $i;
    $118 = $len1;
    $119 = (($117) + ($118))|0;
    $120 = (($119) + 1)|0;
    $j = $120;
    while(1) {
     $121 = $j;
     $122 = $2;
     $123 = HEAP32[$122>>2]|0;
     $124 = ($121|0)<($123|0);
     if ($124) {
      $125 = $j;
      $126 = (($125) - 1)|0;
      $127 = $1;
      $128 = (($127) + ($126<<4)|0);
      $129 = (($128) + 4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $4;
      $132 = ($130|0)>=($131|0);
      $173 = $132;
     } else {
      $173 = 0;
     }
     if (!($173)) {
      break L47;
     }
     $133 = $j;
     $134 = (($133) + 1)|0;
     $k = $134;
     while(1) {
      $135 = $k;
      $136 = $2;
      $137 = HEAP32[$136>>2]|0;
      $138 = ($135|0)<($137|0);
      if ($138) {
       $139 = $k;
       $140 = $1;
       $141 = (($140) + ($139<<4)|0);
       $142 = (($141) + 4|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = $4;
       $145 = ($143|0)>($144|0);
       $174 = $145;
      } else {
       $174 = 0;
      }
      if (!($174)) {
       break;
      }
      $146 = $k;
      $147 = (($146) + 2)|0;
      $k = $147;
     }
     $148 = $k;
     $149 = $j;
     $150 = (($148) - ($149))|0;
     $len2 = $150;
     $151 = $1;
     $152 = $2;
     $153 = $3;
     $154 = $i;
     $155 = $len1;
     $156 = $j;
     $157 = $len2;
     $158 = $4;
     $159 = (($158) + 1)|0;
     $160 = $5;
     $161 = (_sf_sub($151,$152,$153,$154,$155,$156,$157,$159,$160)|0);
     $162 = ($161|0)!=(0);
     if ($162) {
      break;
     }
     $163 = $len2;
     $164 = (($163) + 1)|0;
     $165 = $j;
     $166 = (($165) + ($164))|0;
     $j = $166;
    }
    $modified = 1;
   }
   $167 = $modified;
   $0 = $167;
   $168 = $0;
   STACKTOP = sp;return ($168|0);
  }
 }
 $95 = $modified;
 $0 = $95;
 $168 = $0;
 STACKTOP = sp;return ($168|0);
}
function _sf_sub($equation,$np,$loc,$i1,$n1,$i2,$n2,$level,$start_flag) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $i1 = $i1|0;
 $n1 = $n1|0;
 $i2 = $i2|0;
 $n2 = $n2|0;
 $level = $level|0;
 $start_flag = $start_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1 = 0, $b2 = 0, $div_flag1 = 0, $div_flag2 = 0, $e1 = 0, $e2 = 0, $i = 0, $j = 0, $k = 0;
 var $len = 0, $np1 = 0, $np2 = 0, $op1 = 0, $op2 = 0, $p1 = 0, $p2 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $i1;
 $5 = $n1;
 $6 = $i2;
 $7 = $n2;
 $8 = $level;
 $9 = $start_flag;
 $div_flag1 = 0;
 $div_flag2 = 0;
 $10 = $4;
 $11 = $5;
 $12 = (($10) + ($11))|0;
 $e1 = $12;
 $13 = $6;
 $14 = $7;
 $15 = (($13) + ($14))|0;
 $e2 = $15;
 $16 = $6;
 $17 = (($16) - 1)|0;
 $18 = $1;
 $19 = (($18) + ($17<<4)|0);
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $op2 = $21;
 $22 = $4;
 $23 = $3;
 $24 = ($22|0)<=($23|0);
 if ($24) {
  $op1 = 1;
 } else {
  $25 = $4;
  $26 = (($25) - 1)|0;
  $27 = $1;
  $28 = (($27) + ($26<<4)|0);
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $op1 = $30;
 }
 $31 = $4;
 $32 = (($31) + 1)|0;
 $i = $32;
 while(1) {
  $33 = $i;
  $34 = $e1;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $i;
  $37 = $1;
  $38 = (($37) + ($36<<4)|0);
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $8;
  $42 = ($40|0)==($41|0);
  if ($42) {
   $43 = $i;
   $44 = $1;
   $45 = (($44) + ($43<<4)|0);
   $46 = (($45) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(5);
   if ($48) {
    label = 8;
    break;
   }
  }
  $49 = $i;
  $50 = (($49) + 2)|0;
  $i = $50;
 }
 if ((label|0) == 8) {
  $div_flag1 = 1;
 }
 $51 = $i;
 $52 = (($51) + 1)|0;
 $b1 = $52;
 $53 = $div_flag1;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = $i;
  $56 = (($55) + 2)|0;
  $i = $56;
  while(1) {
   $57 = $i;
   $58 = $e1;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = $i;
   $61 = $1;
   $62 = (($61) + ($60<<4)|0);
   $63 = (($62) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $8;
   $66 = ($64|0)<=($65|0);
   if ($66) {
    label = 15;
    break;
   }
   $67 = $i;
   $68 = (($67) + 2)|0;
   $i = $68;
  }
  if ((label|0) == 15) {
  }
 }
 $69 = $6;
 $70 = (($69) + 1)|0;
 $j = $70;
 while(1) {
  $71 = $j;
  $72 = $e2;
  $73 = ($71|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = $j;
  $75 = $1;
  $76 = (($75) + ($74<<4)|0);
  $77 = (($76) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $8;
  $80 = ($78|0)==($79|0);
  if ($80) {
   $81 = $j;
   $82 = $1;
   $83 = (($82) + ($81<<4)|0);
   $84 = (($83) + 8|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(5);
   if ($86) {
    label = 23;
    break;
   }
  }
  $87 = $j;
  $88 = (($87) + 2)|0;
  $j = $88;
 }
 if ((label|0) == 23) {
  $div_flag2 = 1;
 }
 $89 = $j;
 $90 = (($89) + 1)|0;
 $b2 = $90;
 $91 = $div_flag2;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $j;
  $94 = (($93) + 2)|0;
  $j = $94;
  while(1) {
   $95 = $j;
   $96 = $e2;
   $97 = ($95|0)<($96|0);
   if (!($97)) {
    break;
   }
   $98 = $j;
   $99 = $1;
   $100 = (($99) + ($98<<4)|0);
   $101 = (($100) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $8;
   $104 = ($102|0)<=($103|0);
   if ($104) {
    label = 30;
    break;
   }
   $105 = $j;
   $106 = (($105) + 2)|0;
   $j = $106;
  }
  if ((label|0) == 30) {
  }
 }
 $107 = $div_flag1;
 $108 = ($107|0)!=(0);
 if (!($108)) {
  $109 = $div_flag2;
  $110 = ($109|0)!=(0);
  if (!($110)) {
   $0 = 0;
   $830 = $0;
   STACKTOP = sp;return ($830|0);
  }
 }
 $111 = $9;
 $112 = ($111|0)<=(2);
 if ($112) {
  $113 = $9;
  $114 = ($113|0)!=(1);
  if ($114) {
   $115 = $div_flag1;
   $116 = ($115|0)!=(0);
   do {
    if ($116) {
     $117 = $b1;
     $118 = $1;
     $119 = (($118) + ($117<<4)|0);
     $120 = $i;
     $121 = $b1;
     $122 = (($120) - ($121))|0;
     $123 = (_exp_is_absolute($119,$122)|0);
     $124 = ($123|0)!=(0);
     if (!($124)) {
      break;
     }
     $0 = 0;
     $830 = $0;
     STACKTOP = sp;return ($830|0);
    }
   } while(0);
   $125 = $div_flag2;
   $126 = ($125|0)!=(0);
   do {
    if ($126) {
     $127 = $b2;
     $128 = $1;
     $129 = (($128) + ($127<<4)|0);
     $130 = $j;
     $131 = $b2;
     $132 = (($130) - ($131))|0;
     $133 = (_exp_is_absolute($129,$132)|0);
     $134 = ($133|0)!=(0);
     if (!($134)) {
      break;
     }
     $0 = 0;
     $830 = $0;
     STACKTOP = sp;return ($830|0);
    }
   } while(0);
  }
 }
 $135 = $9;
 $136 = ($135|0)>=(2);
 L70: do {
  if ($136) {
   $137 = $div_flag1;
   $138 = ($137|0)!=(0);
   if ($138) {
    $139 = $div_flag2;
    $140 = ($139|0)!=(0);
    if ($140) {
     $141 = $b1;
     $142 = $1;
     $143 = (($142) + ($141<<4)|0);
     $144 = $i;
     $145 = $b1;
     $146 = (($144) - ($145))|0;
     $147 = $b2;
     $148 = $1;
     $149 = (($148) + ($147<<4)|0);
     $150 = $j;
     $151 = $b2;
     $152 = (($150) - ($151))|0;
     $153 = (_poly2_gcd($143,$146,$149,$152,0,1)|0);
     $rv = $153;
     $154 = ($153|0)>(0);
     do {
      if ($154) {
       $155 = HEAP32[3680>>2]|0;
       $p1 = $155;
       $156 = HEAP32[3712>>2]|0;
       $np1 = $156;
       $157 = HEAP32[3688>>2]|0;
       $p2 = $157;
       $158 = HEAP32[3720>>2]|0;
       $np2 = $158;
      } else {
       $159 = $rv;
       $160 = ($159|0)==(0);
       if ($160) {
        $161 = $b2;
        $162 = $1;
        $163 = (($162) + ($161<<4)|0);
        $164 = $j;
        $165 = $b2;
        $166 = (($164) - ($165))|0;
        $167 = $b1;
        $168 = $1;
        $169 = (($168) + ($167<<4)|0);
        $170 = $i;
        $171 = $b1;
        $172 = (($170) - ($171))|0;
        $173 = (_poly2_gcd($163,$166,$169,$172,0,1)|0);
        $174 = ($173|0)>(0);
        if ($174) {
         $175 = HEAP32[3688>>2]|0;
         $p1 = $175;
         $176 = HEAP32[3720>>2]|0;
         $np1 = $176;
         $177 = HEAP32[3680>>2]|0;
         $p2 = $177;
         $178 = HEAP32[3712>>2]|0;
         $np2 = $178;
         break;
        }
       }
       label = 57;
       break L70;
      }
     } while(0);
     $551 = $4;
     $552 = (5 - ($551))|0;
     $553 = $e1;
     $554 = (($552) + ($553))|0;
     $555 = $np2;
     $556 = $555<<1;
     $557 = (($554) + ($556))|0;
     $558 = $b2;
     $559 = (($557) + ($558))|0;
     $560 = $6;
     $561 = (($559) - ($560))|0;
     $562 = $e2;
     $563 = (($561) + ($562))|0;
     $564 = $j;
     $565 = (($563) - ($564))|0;
     $566 = $np1;
     $567 = (($565) + ($566))|0;
     $568 = HEAP32[8>>2]|0;
     $569 = ($567|0)>($568|0);
     if ($569) {
      _error_huge();
     }
     $k = 0;
     while(1) {
      $570 = $k;
      $571 = $np1;
      $572 = ($570|0)<($571|0);
      if (!($572)) {
       break;
      }
      $573 = $8;
      $574 = $k;
      $575 = $p1;
      $576 = (($575) + ($574<<4)|0);
      $577 = (($576) + 4|0);
      $578 = HEAP32[$577>>2]|0;
      $579 = (($578) + ($573))|0;
      HEAP32[$577>>2] = $579;
      $580 = $k;
      $581 = (($580) + 1)|0;
      $k = $581;
     }
     $k = 0;
     while(1) {
      $582 = $k;
      $583 = $np2;
      $584 = ($582|0)<($583|0);
      if (!($584)) {
       break;
      }
      $585 = $8;
      $586 = $k;
      $587 = $p2;
      $588 = (($587) + ($586<<4)|0);
      $589 = (($588) + 4|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = (($590) + ($585))|0;
      HEAP32[$589>>2] = $591;
      $592 = $k;
      $593 = (($592) + 1)|0;
      $k = $593;
     }
     $594 = $b1;
     $595 = $4;
     $596 = (($594) - ($595))|0;
     $597 = (($596) - 1)|0;
     $len = $597;
     $598 = HEAP32[3704>>2]|0;
     $599 = $4;
     $600 = $1;
     $601 = (($600) + ($599<<4)|0);
     $602 = $len;
     $603 = $602<<4;
     _memmove(($598|0),($601|0),($603|0))|0;
     $604 = $op1;
     $605 = ($604|0)==(2);
     if ($605) {
      $606 = $8;
      $607 = $len;
      $608 = HEAP32[3704>>2]|0;
      $609 = (($608) + ($607<<4)|0);
      $610 = (($609) + 4|0);
      HEAP32[$610>>2] = $606;
      $611 = $len;
      $612 = HEAP32[3704>>2]|0;
      $613 = (($612) + ($611<<4)|0);
      HEAP32[$613>>2] = 2;
      $614 = $len;
      $615 = HEAP32[3704>>2]|0;
      $616 = (($615) + ($614<<4)|0);
      $617 = (($616) + 8|0);
      HEAP32[$617>>2] = 4;
      $618 = $len;
      $619 = (($618) + 1)|0;
      $len = $619;
      $620 = $8;
      $621 = $len;
      $622 = HEAP32[3704>>2]|0;
      $623 = (($622) + ($621<<4)|0);
      $624 = (($623) + 4|0);
      HEAP32[$624>>2] = $620;
      $625 = $len;
      $626 = HEAP32[3704>>2]|0;
      $627 = (($626) + ($625<<4)|0);
      HEAP32[$627>>2] = 0;
      $628 = $len;
      $629 = HEAP32[3704>>2]|0;
      $630 = (($629) + ($628<<4)|0);
      $631 = (($630) + 8|0);
      HEAPF64[$631>>3] = -1.0;
      $632 = $len;
      $633 = (($632) + 1)|0;
      $len = $633;
     }
     $634 = $len;
     $635 = HEAP32[3704>>2]|0;
     $636 = (($635) + ($634<<4)|0);
     $637 = $i;
     $638 = $1;
     $639 = (($638) + ($637<<4)|0);
     $640 = $e1;
     $641 = $i;
     $642 = (($640) - ($641))|0;
     $643 = $642<<4;
     _memmove(($636|0),($639|0),($643|0))|0;
     $644 = $e1;
     $645 = $i;
     $646 = (($644) - ($645))|0;
     $647 = $len;
     $648 = (($647) + ($646))|0;
     $len = $648;
     $649 = $8;
     $650 = $len;
     $651 = HEAP32[3704>>2]|0;
     $652 = (($651) + ($650<<4)|0);
     $653 = (($652) + 4|0);
     HEAP32[$653>>2] = $649;
     $654 = $len;
     $655 = HEAP32[3704>>2]|0;
     $656 = (($655) + ($654<<4)|0);
     HEAP32[$656>>2] = 2;
     $657 = $len;
     $658 = HEAP32[3704>>2]|0;
     $659 = (($658) + ($657<<4)|0);
     $660 = (($659) + 8|0);
     HEAP32[$660>>2] = 4;
     $661 = $len;
     $662 = (($661) + 1)|0;
     $len = $662;
     $663 = $len;
     $664 = HEAP32[3704>>2]|0;
     $665 = (($664) + ($663<<4)|0);
     $666 = $p2;
     $667 = $np2;
     $668 = $667<<4;
     _memmove(($665|0),($666|0),($668|0))|0;
     $669 = $np2;
     $670 = $len;
     $671 = (($670) + ($669))|0;
     $len = $671;
     $k = 0;
     while(1) {
      $672 = $k;
      $673 = $len;
      $674 = ($672|0)<($673|0);
      if (!($674)) {
       break;
      }
      $675 = $k;
      $676 = HEAP32[3704>>2]|0;
      $677 = (($676) + ($675<<4)|0);
      $678 = (($677) + 4|0);
      $679 = HEAP32[$678>>2]|0;
      $680 = (($679) + 2)|0;
      HEAP32[$678>>2] = $680;
      $681 = $k;
      $682 = (($681) + 1)|0;
      $k = $682;
     }
     $683 = $8;
     $684 = (($683) + 1)|0;
     $685 = $len;
     $686 = HEAP32[3704>>2]|0;
     $687 = (($686) + ($685<<4)|0);
     $688 = (($687) + 4|0);
     HEAP32[$688>>2] = $684;
     $689 = $len;
     $690 = HEAP32[3704>>2]|0;
     $691 = (($690) + ($689<<4)|0);
     HEAP32[$691>>2] = 2;
     $692 = $op2;
     $693 = $len;
     $694 = HEAP32[3704>>2]|0;
     $695 = (($694) + ($693<<4)|0);
     $696 = (($695) + 8|0);
     HEAP32[$696>>2] = $692;
     $697 = $len;
     $698 = (($697) + 1)|0;
     $len = $698;
     $699 = $len;
     $k = $699;
     $700 = $len;
     $701 = HEAP32[3704>>2]|0;
     $702 = (($701) + ($700<<4)|0);
     $703 = $6;
     $704 = $1;
     $705 = (($704) + ($703<<4)|0);
     $706 = $b2;
     $707 = $6;
     $708 = (($706) - ($707))|0;
     $709 = (($708) - 1)|0;
     $710 = $709<<4;
     _memmove(($702|0),($705|0),($710|0))|0;
     $711 = $b2;
     $712 = $6;
     $713 = (($711) - ($712))|0;
     $714 = (($713) - 1)|0;
     $715 = $len;
     $716 = (($715) + ($714))|0;
     $len = $716;
     $717 = $len;
     $718 = HEAP32[3704>>2]|0;
     $719 = (($718) + ($717<<4)|0);
     $720 = $j;
     $721 = $1;
     $722 = (($721) + ($720<<4)|0);
     $723 = $e2;
     $724 = $j;
     $725 = (($723) - ($724))|0;
     $726 = $725<<4;
     _memmove(($719|0),($722|0),($726|0))|0;
     $727 = $e2;
     $728 = $j;
     $729 = (($727) - ($728))|0;
     $730 = $len;
     $731 = (($730) + ($729))|0;
     $len = $731;
     $732 = $8;
     $733 = $len;
     $734 = HEAP32[3704>>2]|0;
     $735 = (($734) + ($733<<4)|0);
     $736 = (($735) + 4|0);
     HEAP32[$736>>2] = $732;
     $737 = $len;
     $738 = HEAP32[3704>>2]|0;
     $739 = (($738) + ($737<<4)|0);
     HEAP32[$739>>2] = 2;
     $740 = $len;
     $741 = HEAP32[3704>>2]|0;
     $742 = (($741) + ($740<<4)|0);
     $743 = (($742) + 8|0);
     HEAP32[$743>>2] = 4;
     $744 = $len;
     $745 = (($744) + 1)|0;
     $len = $745;
     $746 = $len;
     $747 = HEAP32[3704>>2]|0;
     $748 = (($747) + ($746<<4)|0);
     $749 = $p1;
     $750 = $np1;
     $751 = $750<<4;
     _memmove(($748|0),($749|0),($751|0))|0;
     $752 = $np1;
     $753 = $len;
     $754 = (($753) + ($752))|0;
     $len = $754;
     while(1) {
      $755 = $k;
      $756 = $len;
      $757 = ($755|0)<($756|0);
      if (!($757)) {
       break;
      }
      $758 = $k;
      $759 = HEAP32[3704>>2]|0;
      $760 = (($759) + ($758<<4)|0);
      $761 = (($760) + 4|0);
      $762 = HEAP32[$761>>2]|0;
      $763 = (($762) + 2)|0;
      HEAP32[$761>>2] = $763;
      $764 = $k;
      $765 = (($764) + 1)|0;
      $k = $765;
     }
     $766 = $8;
     $767 = $len;
     $768 = HEAP32[3704>>2]|0;
     $769 = (($768) + ($767<<4)|0);
     $770 = (($769) + 4|0);
     HEAP32[$770>>2] = $766;
     $771 = $len;
     $772 = HEAP32[3704>>2]|0;
     $773 = (($772) + ($771<<4)|0);
     HEAP32[$773>>2] = 2;
     $774 = $len;
     $775 = HEAP32[3704>>2]|0;
     $776 = (($775) + ($774<<4)|0);
     $777 = (($776) + 8|0);
     HEAP32[$777>>2] = 5;
     $778 = $len;
     $779 = (($778) + 1)|0;
     $len = $779;
     $780 = $len;
     $k = $780;
     $781 = $len;
     $782 = HEAP32[3704>>2]|0;
     $783 = (($782) + ($781<<4)|0);
     $784 = $b1;
     $785 = $1;
     $786 = (($785) + ($784<<4)|0);
     $787 = $i;
     $788 = $b1;
     $789 = (($787) - ($788))|0;
     $790 = $789<<4;
     _memmove(($783|0),($786|0),($790|0))|0;
     $791 = $i;
     $792 = $b1;
     $793 = (($791) - ($792))|0;
     $794 = $len;
     $795 = (($794) + ($793))|0;
     $len = $795;
     $796 = $8;
     $797 = $len;
     $798 = HEAP32[3704>>2]|0;
     $799 = (($798) + ($797<<4)|0);
     $800 = (($799) + 4|0);
     HEAP32[$800>>2] = $796;
     $801 = $len;
     $802 = HEAP32[3704>>2]|0;
     $803 = (($802) + ($801<<4)|0);
     HEAP32[$803>>2] = 2;
     $804 = $len;
     $805 = HEAP32[3704>>2]|0;
     $806 = (($805) + ($804<<4)|0);
     $807 = (($806) + 8|0);
     HEAP32[$807>>2] = 4;
     $808 = $len;
     $809 = (($808) + 1)|0;
     $len = $809;
     $810 = $len;
     $811 = HEAP32[3704>>2]|0;
     $812 = (($811) + ($810<<4)|0);
     $813 = $p2;
     $814 = $np2;
     $815 = $814<<4;
     _memmove(($812|0),($813|0),($815|0))|0;
     $816 = $np2;
     $817 = $len;
     $818 = (($817) + ($816))|0;
     $len = $818;
     while(1) {
      $819 = $k;
      $820 = $len;
      $821 = ($819|0)<($820|0);
      if (!($821)) {
       break;
      }
      $822 = $k;
      $823 = HEAP32[3704>>2]|0;
      $824 = (($823) + ($822<<4)|0);
      $825 = (($824) + 4|0);
      $826 = HEAP32[$825>>2]|0;
      $827 = (($826) + 1)|0;
      HEAP32[$825>>2] = $827;
      $828 = $k;
      $829 = (($828) + 1)|0;
      $k = $829;
     }
    } else {
     label = 57;
    }
   } else {
    label = 57;
   }
  } else {
   label = 57;
  }
 } while(0);
 if ((label|0) == 57) {
  $179 = $5;
  $180 = $7;
  $181 = (($179) + ($180))|0;
  $182 = $i;
  $183 = $b1;
  $184 = (($182) - ($183))|0;
  $185 = (($181) + ($184))|0;
  $186 = $j;
  $187 = $b2;
  $188 = (($186) - ($187))|0;
  $189 = (($185) + ($188))|0;
  $190 = (($189) + 8)|0;
  $191 = HEAP32[8>>2]|0;
  $192 = ($190|0)>($191|0);
  if ($192) {
   _error_huge();
  }
  $193 = $div_flag1;
  $194 = ($193|0)!=(0);
  if (!($194)) {
   $195 = $4;
   $k = $195;
   while(1) {
    $196 = $k;
    $197 = $e1;
    $198 = ($196|0)<($197|0);
    if (!($198)) {
     break;
    }
    $199 = $k;
    $200 = $1;
    $201 = (($200) + ($199<<4)|0);
    $202 = (($201) + 4|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (($203) + 1)|0;
    HEAP32[$202>>2] = $204;
    $205 = $k;
    $206 = (($205) + 1)|0;
    $k = $206;
   }
  }
  $207 = $div_flag2;
  $208 = ($207|0)!=(0);
  if (!($208)) {
   $209 = $6;
   $k = $209;
   while(1) {
    $210 = $k;
    $211 = $e2;
    $212 = ($210|0)<($211|0);
    if (!($212)) {
     break;
    }
    $213 = $k;
    $214 = $1;
    $215 = (($214) + ($213<<4)|0);
    $216 = (($215) + 4|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($217) + 1)|0;
    HEAP32[$216>>2] = $218;
    $219 = $k;
    $220 = (($219) + 1)|0;
    $k = $220;
   }
  }
  $221 = $b1;
  $222 = $4;
  $223 = (($221) - ($222))|0;
  $224 = (($223) - 1)|0;
  $len = $224;
  $225 = HEAP32[3704>>2]|0;
  $226 = $4;
  $227 = $1;
  $228 = (($227) + ($226<<4)|0);
  $229 = $len;
  $230 = $229<<4;
  _memmove(($225|0),($228|0),($230|0))|0;
  $231 = $op1;
  $232 = ($231|0)==(2);
  if ($232) {
   $233 = $8;
   $234 = $len;
   $235 = HEAP32[3704>>2]|0;
   $236 = (($235) + ($234<<4)|0);
   $237 = (($236) + 4|0);
   HEAP32[$237>>2] = $233;
   $238 = $len;
   $239 = HEAP32[3704>>2]|0;
   $240 = (($239) + ($238<<4)|0);
   HEAP32[$240>>2] = 2;
   $241 = $len;
   $242 = HEAP32[3704>>2]|0;
   $243 = (($242) + ($241<<4)|0);
   $244 = (($243) + 8|0);
   HEAP32[$244>>2] = 4;
   $245 = $len;
   $246 = (($245) + 1)|0;
   $len = $246;
   $247 = $8;
   $248 = $len;
   $249 = HEAP32[3704>>2]|0;
   $250 = (($249) + ($248<<4)|0);
   $251 = (($250) + 4|0);
   HEAP32[$251>>2] = $247;
   $252 = $len;
   $253 = HEAP32[3704>>2]|0;
   $254 = (($253) + ($252<<4)|0);
   HEAP32[$254>>2] = 0;
   $255 = $len;
   $256 = HEAP32[3704>>2]|0;
   $257 = (($256) + ($255<<4)|0);
   $258 = (($257) + 8|0);
   HEAPF64[$258>>3] = -1.0;
   $259 = $len;
   $260 = (($259) + 1)|0;
   $len = $260;
  }
  $261 = $div_flag1;
  $262 = ($261|0)!=(0);
  if ($262) {
   $263 = $len;
   $264 = HEAP32[3704>>2]|0;
   $265 = (($264) + ($263<<4)|0);
   $266 = $i;
   $267 = $1;
   $268 = (($267) + ($266<<4)|0);
   $269 = $e1;
   $270 = $i;
   $271 = (($269) - ($270))|0;
   $272 = $271<<4;
   _memmove(($265|0),($268|0),($272|0))|0;
   $273 = $e1;
   $274 = $i;
   $275 = (($273) - ($274))|0;
   $276 = $len;
   $277 = (($276) + ($275))|0;
   $len = $277;
  }
  $278 = $div_flag2;
  $279 = ($278|0)!=(0);
  if ($279) {
   $280 = $8;
   $281 = $len;
   $282 = HEAP32[3704>>2]|0;
   $283 = (($282) + ($281<<4)|0);
   $284 = (($283) + 4|0);
   HEAP32[$284>>2] = $280;
   $285 = $len;
   $286 = HEAP32[3704>>2]|0;
   $287 = (($286) + ($285<<4)|0);
   HEAP32[$287>>2] = 2;
   $288 = $len;
   $289 = HEAP32[3704>>2]|0;
   $290 = (($289) + ($288<<4)|0);
   $291 = (($290) + 8|0);
   HEAP32[$291>>2] = 4;
   $292 = $len;
   $293 = (($292) + 1)|0;
   $len = $293;
   $294 = $len;
   $295 = HEAP32[3704>>2]|0;
   $296 = (($295) + ($294<<4)|0);
   $297 = $b2;
   $298 = $1;
   $299 = (($298) + ($297<<4)|0);
   $300 = $j;
   $301 = $b2;
   $302 = (($300) - ($301))|0;
   $303 = $302<<4;
   _memmove(($296|0),($299|0),($303|0))|0;
   $304 = $j;
   $305 = $b2;
   $306 = (($304) - ($305))|0;
   $307 = $len;
   $308 = (($307) + ($306))|0;
   $len = $308;
  }
  $k = 0;
  while(1) {
   $309 = $k;
   $310 = $len;
   $311 = ($309|0)<($310|0);
   if (!($311)) {
    break;
   }
   $312 = $k;
   $313 = HEAP32[3704>>2]|0;
   $314 = (($313) + ($312<<4)|0);
   $315 = (($314) + 4|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = (($316) + 2)|0;
   HEAP32[$315>>2] = $317;
   $318 = $k;
   $319 = (($318) + 1)|0;
   $k = $319;
  }
  $320 = $8;
  $321 = (($320) + 1)|0;
  $322 = $len;
  $323 = HEAP32[3704>>2]|0;
  $324 = (($323) + ($322<<4)|0);
  $325 = (($324) + 4|0);
  HEAP32[$325>>2] = $321;
  $326 = $len;
  $327 = HEAP32[3704>>2]|0;
  $328 = (($327) + ($326<<4)|0);
  HEAP32[$328>>2] = 2;
  $329 = $op2;
  $330 = $len;
  $331 = HEAP32[3704>>2]|0;
  $332 = (($331) + ($330<<4)|0);
  $333 = (($332) + 8|0);
  HEAP32[$333>>2] = $329;
  $334 = $len;
  $335 = (($334) + 1)|0;
  $len = $335;
  $336 = $len;
  $k = $336;
  $337 = $len;
  $338 = HEAP32[3704>>2]|0;
  $339 = (($338) + ($337<<4)|0);
  $340 = $6;
  $341 = $1;
  $342 = (($341) + ($340<<4)|0);
  $343 = $b2;
  $344 = $6;
  $345 = (($343) - ($344))|0;
  $346 = (($345) - 1)|0;
  $347 = $346<<4;
  _memmove(($339|0),($342|0),($347|0))|0;
  $348 = $b2;
  $349 = $6;
  $350 = (($348) - ($349))|0;
  $351 = (($350) - 1)|0;
  $352 = $len;
  $353 = (($352) + ($351))|0;
  $len = $353;
  $354 = $div_flag2;
  $355 = ($354|0)!=(0);
  if ($355) {
   $356 = $len;
   $357 = HEAP32[3704>>2]|0;
   $358 = (($357) + ($356<<4)|0);
   $359 = $j;
   $360 = $1;
   $361 = (($360) + ($359<<4)|0);
   $362 = $e2;
   $363 = $j;
   $364 = (($362) - ($363))|0;
   $365 = $364<<4;
   _memmove(($358|0),($361|0),($365|0))|0;
   $366 = $e2;
   $367 = $j;
   $368 = (($366) - ($367))|0;
   $369 = $len;
   $370 = (($369) + ($368))|0;
   $len = $370;
  }
  $371 = $div_flag1;
  $372 = ($371|0)!=(0);
  if ($372) {
   $373 = $8;
   $374 = $len;
   $375 = HEAP32[3704>>2]|0;
   $376 = (($375) + ($374<<4)|0);
   $377 = (($376) + 4|0);
   HEAP32[$377>>2] = $373;
   $378 = $len;
   $379 = HEAP32[3704>>2]|0;
   $380 = (($379) + ($378<<4)|0);
   HEAP32[$380>>2] = 2;
   $381 = $len;
   $382 = HEAP32[3704>>2]|0;
   $383 = (($382) + ($381<<4)|0);
   $384 = (($383) + 8|0);
   HEAP32[$384>>2] = 4;
   $385 = $len;
   $386 = (($385) + 1)|0;
   $len = $386;
   $387 = $len;
   $388 = HEAP32[3704>>2]|0;
   $389 = (($388) + ($387<<4)|0);
   $390 = $b1;
   $391 = $1;
   $392 = (($391) + ($390<<4)|0);
   $393 = $i;
   $394 = $b1;
   $395 = (($393) - ($394))|0;
   $396 = $395<<4;
   _memmove(($389|0),($392|0),($396|0))|0;
   $397 = $i;
   $398 = $b1;
   $399 = (($397) - ($398))|0;
   $400 = $len;
   $401 = (($400) + ($399))|0;
   $len = $401;
  }
  while(1) {
   $402 = $k;
   $403 = $len;
   $404 = ($402|0)<($403|0);
   if (!($404)) {
    break;
   }
   $405 = $k;
   $406 = HEAP32[3704>>2]|0;
   $407 = (($406) + ($405<<4)|0);
   $408 = (($407) + 4|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = (($409) + 2)|0;
   HEAP32[$408>>2] = $410;
   $411 = $k;
   $412 = (($411) + 1)|0;
   $k = $412;
  }
  $413 = $8;
  $414 = $len;
  $415 = HEAP32[3704>>2]|0;
  $416 = (($415) + ($414<<4)|0);
  $417 = (($416) + 4|0);
  HEAP32[$417>>2] = $413;
  $418 = $len;
  $419 = HEAP32[3704>>2]|0;
  $420 = (($419) + ($418<<4)|0);
  HEAP32[$420>>2] = 2;
  $421 = $len;
  $422 = HEAP32[3704>>2]|0;
  $423 = (($422) + ($421<<4)|0);
  $424 = (($423) + 8|0);
  HEAP32[$424>>2] = 5;
  $425 = $len;
  $426 = (($425) + 1)|0;
  $len = $426;
  $427 = $len;
  $k = $427;
  $428 = $div_flag1;
  $429 = ($428|0)!=(0);
  if ($429) {
   $430 = $len;
   $431 = HEAP32[3704>>2]|0;
   $432 = (($431) + ($430<<4)|0);
   $433 = $b1;
   $434 = $1;
   $435 = (($434) + ($433<<4)|0);
   $436 = $i;
   $437 = $b1;
   $438 = (($436) - ($437))|0;
   $439 = $438<<4;
   _memmove(($432|0),($435|0),($439|0))|0;
   $440 = $i;
   $441 = $b1;
   $442 = (($440) - ($441))|0;
   $443 = $len;
   $444 = (($443) + ($442))|0;
   $len = $444;
  }
  $445 = $div_flag1;
  $446 = ($445|0)!=(0);
  if ($446) {
   $447 = $div_flag2;
   $448 = ($447|0)!=(0);
   if ($448) {
    $449 = $8;
    $450 = $len;
    $451 = HEAP32[3704>>2]|0;
    $452 = (($451) + ($450<<4)|0);
    $453 = (($452) + 4|0);
    HEAP32[$453>>2] = $449;
    $454 = $len;
    $455 = HEAP32[3704>>2]|0;
    $456 = (($455) + ($454<<4)|0);
    HEAP32[$456>>2] = 2;
    $457 = $len;
    $458 = HEAP32[3704>>2]|0;
    $459 = (($458) + ($457<<4)|0);
    $460 = (($459) + 8|0);
    HEAP32[$460>>2] = 4;
    $461 = $len;
    $462 = (($461) + 1)|0;
    $len = $462;
   }
  }
  $463 = $div_flag2;
  $464 = ($463|0)!=(0);
  if ($464) {
   $465 = $len;
   $466 = HEAP32[3704>>2]|0;
   $467 = (($466) + ($465<<4)|0);
   $468 = $b2;
   $469 = $1;
   $470 = (($469) + ($468<<4)|0);
   $471 = $j;
   $472 = $b2;
   $473 = (($471) - ($472))|0;
   $474 = $473<<4;
   _memmove(($467|0),($470|0),($474|0))|0;
   $475 = $j;
   $476 = $b2;
   $477 = (($475) - ($476))|0;
   $478 = $len;
   $479 = (($478) + ($477))|0;
   $len = $479;
  }
  while(1) {
   $480 = $k;
   $481 = $len;
   $482 = ($480|0)<($481|0);
   if (!($482)) {
    break;
   }
   $483 = $k;
   $484 = HEAP32[3704>>2]|0;
   $485 = (($484) + ($483<<4)|0);
   $486 = (($485) + 4|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = (($487) + 1)|0;
   HEAP32[$486>>2] = $488;
   $489 = $k;
   $490 = (($489) + 1)|0;
   $k = $490;
  }
 }
 $491 = $2;
 $492 = HEAP32[$491>>2]|0;
 $493 = $len;
 $494 = (($492) + ($493))|0;
 $495 = $5;
 $496 = (($494) - ($495))|0;
 $497 = $7;
 $498 = (($497) + 1)|0;
 $499 = (($496) - ($498))|0;
 $500 = HEAP32[8>>2]|0;
 $501 = ($499|0)>($500|0);
 if ($501) {
  _error_huge();
 }
 $502 = $op1;
 $503 = ($502|0)==(2);
 if ($503) {
  $504 = $4;
  $505 = (($504) - 1)|0;
  $506 = $1;
  $507 = (($506) + ($505<<4)|0);
  $508 = (($507) + 8|0);
  HEAP32[$508>>2] = 1;
 }
 $509 = $6;
 $510 = (($509) - 1)|0;
 $511 = $1;
 $512 = (($511) + ($510<<4)|0);
 $513 = $e2;
 $514 = $1;
 $515 = (($514) + ($513<<4)|0);
 $516 = $2;
 $517 = HEAP32[$516>>2]|0;
 $518 = $e2;
 $519 = (($517) - ($518))|0;
 $520 = $519<<4;
 _memmove(($512|0),($515|0),($520|0))|0;
 $521 = $7;
 $522 = (($521) + 1)|0;
 $523 = $2;
 $524 = HEAP32[$523>>2]|0;
 $525 = (($524) - ($522))|0;
 HEAP32[$523>>2] = $525;
 $526 = $4;
 $527 = $len;
 $528 = (($526) + ($527))|0;
 $529 = $1;
 $530 = (($529) + ($528<<4)|0);
 $531 = $e1;
 $532 = $1;
 $533 = (($532) + ($531<<4)|0);
 $534 = $2;
 $535 = HEAP32[$534>>2]|0;
 $536 = $e1;
 $537 = (($535) - ($536))|0;
 $538 = $537<<4;
 _memmove(($530|0),($533|0),($538|0))|0;
 $539 = $len;
 $540 = $5;
 $541 = (($539) - ($540))|0;
 $542 = $2;
 $543 = HEAP32[$542>>2]|0;
 $544 = (($543) + ($541))|0;
 HEAP32[$542>>2] = $544;
 $545 = $4;
 $546 = $1;
 $547 = (($546) + ($545<<4)|0);
 $548 = HEAP32[3704>>2]|0;
 $549 = $len;
 $550 = $549<<4;
 _memmove(($547|0),($548|0),($550|0))|0;
 $0 = 1;
 $830 = $0;
 STACKTOP = sp;return ($830|0);
}
function _uf_tsimp($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 $4 = (_uf_times($2,$3)|0);
 $rv = $4;
 $5 = $0;
 $6 = $1;
 (_simp_loop($5,$6)|0);
 while(1) {
  $7 = $0;
  $8 = $1;
  $9 = (_uf_times($7,$8)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $rv = 1;
  $11 = $0;
  $12 = $1;
  (_simp_loop($11,$12)|0);
 }
 $13 = $rv;
 STACKTOP = sp;return ($13|0);
}
function _uf_times($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $rv = 0;
 while(1) {
  $2 = $0;
  $3 = $1;
  _organize($2,$3);
  $4 = $0;
  $5 = $1;
  $6 = (_reorder($4,$5)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $0;
   $9 = $1;
   _organize($8,$9);
  }
  $10 = $0;
  $11 = $1;
  _group_proc($10,$11);
  $12 = HEAP32[41216>>2]|0;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $0;
   $15 = $1;
   _no_divide($14,$15);
  }
  $16 = $0;
  $17 = $1;
  $18 = (_sub_ufactor($16,$17,1)|0);
  $i = $18;
  $19 = $i;
  $20 = $rv;
  $21 = $20 | $19;
  $rv = $21;
  $22 = $i;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   break;
  }
 }
 $24 = $0;
 $25 = $1;
 _organize($24,$25);
 $26 = $rv;
 STACKTOP = sp;return ($26|0);
}
function _uf_power($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $count = -1;
 while(1) {
  $2 = $0;
  $3 = $1;
  _organize($2,$3);
  $4 = $count;
  $5 = (($4) + 1)|0;
  $count = $5;
  $6 = ($5|0)>(0);
  if ($6) {
   break;
  }
  $7 = $0;
  $8 = $1;
  $9 = (_sub_ufactor($7,$8,2)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $11 = $count;
  STACKTOP = sp;return ($11|0);
 }
 $11 = $count;
 STACKTOP = sp;return ($11|0);
}
function _sub_ufactor($equation,$np,$ii) {
 $equation = $equation|0;
 $np = $np|0;
 $ii = $ii|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $b1 = 0, $e1 = 0, $i = 0, $level = 0, $modified = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $ii;
 $modified = 0;
 $i = 1;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = (($8) + ($7<<4)|0);
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  do {
   if ((($11|0) == 8)) {
    $14 = $2;
    $15 = $14 & 1;
    $16 = ($15|0)==(0);
    if ($16) {
     label = 11;
     break;
    } else {
     label = 10;
     break;
    }
   } else if ((($11|0) == 5) | (($11|0) == 4)) {
    $12 = $2;
    $13 = ($12|0)==(1);
    if ($13) {
     label = 11;
     break;
    } else {
     break;
    }
   } else {
    label = 10;
   }
  } while(0);
  do {
   if ((label|0) == 10) {
    label = 0;
   }
   else if ((label|0) == 11) {
    label = 0;
    $17 = $i;
    $18 = $0;
    $19 = (($18) + ($17<<4)|0);
    $20 = (($19) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $level = $21;
    $22 = $i;
    $23 = (($22) - 2)|0;
    $b1 = $23;
    while(1) {
     $24 = $b1;
     $25 = ($24|0)>=(0);
     if (!($25)) {
      break;
     }
     $26 = $b1;
     $27 = $0;
     $28 = (($27) + ($26<<4)|0);
     $29 = (($28) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $level;
     $32 = ($30|0)<($31|0);
     if ($32) {
      label = 14;
      break;
     }
     $33 = $b1;
     $34 = (($33) - 2)|0;
     $b1 = $34;
    }
    if ((label|0) == 14) {
     label = 0;
    }
    $35 = $b1;
    $36 = (($35) + 1)|0;
    $b1 = $36;
    $37 = $i;
    $38 = (($37) + 2)|0;
    $e1 = $38;
    while(1) {
     $39 = $e1;
     $40 = $1;
     $41 = HEAP32[$40>>2]|0;
     $42 = ($39|0)<($41|0);
     if (!($42)) {
      break;
     }
     $43 = $e1;
     $44 = $0;
     $45 = (($44) + ($43<<4)|0);
     $46 = (($45) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $level;
     $49 = ($47|0)<($48|0);
     if ($49) {
      label = 20;
      break;
     }
     $50 = $e1;
     $51 = (($50) + 2)|0;
     $e1 = $51;
    }
    if ((label|0) == 20) {
     label = 0;
    }
    $52 = $0;
    $53 = $1;
    $54 = $b1;
    $55 = $i;
    $56 = $e1;
    $57 = $level;
    $58 = $2;
    $59 = (_unf_sub($52,$53,$54,$55,$56,$57,$58)|0);
    $60 = ($59|0)!=(0);
    if ($60) {
     $modified = 1;
     $61 = $b1;
     $62 = (($61) - 1)|0;
     $i = $62;
     break;
    } else {
     break;
    }
   }
  } while(0);
  $63 = $i;
  $64 = (($63) + 2)|0;
  $i = $64;
 }
 $65 = $modified;
 STACKTOP = sp;return ($65|0);
}
function _uf_pplus($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $count = -1;
 while(1) {
  $2 = $0;
  $3 = $1;
  _organize($2,$3);
  $4 = $count;
  $5 = (($4) + 1)|0;
  $count = $5;
  $6 = ($5|0)>(0);
  if ($6) {
   break;
  }
  $7 = $0;
  $8 = $1;
  $9 = (_sub_ufactor($7,$8,4)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $11 = $count;
  STACKTOP = sp;return ($11|0);
 }
 $11 = $count;
 STACKTOP = sp;return ($11|0);
}
function _uf_allpower($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 while(1) {
  $2 = $0;
  $3 = $1;
  _organize($2,$3);
  $4 = $0;
  $5 = $1;
  $6 = (_sub_ufactor($4,$5,0)|0);
  $7 = ($6|0)!=(0);
  if (!($7)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _uf_repeat($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $count = -1;
 while(1) {
  $2 = $0;
  $3 = $1;
  _organize($2,$3);
  $4 = $count;
  $5 = (($4) + 1)|0;
  $count = $5;
  $6 = ($5|0)>(0);
  if ($6) {
   label = 3;
   break;
  }
  $7 = $0;
  $8 = $1;
  $9 = (_sub_ufactor($7,$8,6)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
 }
 if ((label|0) == 3) {
 }
 $11 = $0;
 $12 = $1;
 (_patch_root_div($11,$12)|0);
 STACKTOP = sp;return;
}
function _patch_root_div($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var $level = 0, $modified = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) - 2)|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = (($8) + ($7<<4)|0);
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(5);
  L4: do {
   if ($12) {
    $13 = $i;
    $14 = $0;
    $15 = (($14) + ($13<<4)|0);
    $16 = (($15) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 1)|0;
    $level = $18;
    $19 = $i;
    $20 = (($19) + 2)|0;
    $21 = $0;
    $22 = (($21) + ($20<<4)|0);
    $23 = (($22) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(8);
    if ($25) {
     $26 = $i;
     $27 = (($26) + 2)|0;
     $28 = $0;
     $29 = (($28) + ($27<<4)|0);
     $30 = (($29) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $level;
     $33 = ($31|0)==($32|0);
     if ($33) {
      $34 = $i;
      $35 = (($34) + 1)|0;
      $36 = $0;
      $37 = (($36) + ($35<<4)|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($38|0)==(0);
      if ($39) {
       $40 = $i;
       $41 = (($40) + 3)|0;
       $42 = $0;
       $43 = (($42) + ($41<<4)|0);
       $44 = (($43) + 4|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = $level;
       $47 = ($45|0)==($46|0);
       if ($47) {
        $48 = $i;
        $49 = (($48) + 3)|0;
        $50 = $0;
        $51 = (($50) + ($49<<4)|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = ($52|0)==(0);
        if ($53) {
         $54 = $i;
         $55 = (($54) + 1)|0;
         $56 = $0;
         $57 = (($56) + ($55<<4)|0);
         $58 = (($57) + 8|0);
         $59 = +HEAPF64[$58>>3];
         $60 = (+_fmod((+$59),1.0));
         $61 = $60 == 0.0;
         L12: do {
          if ($61) {
           $62 = HEAP32[56>>2]|0;
           $63 = ($62|0)!=(0);
           L14: do {
            if ($63) {
             do {
              if (0) {
               $64 = $i;
               $65 = (($64) + 3)|0;
               $66 = $0;
               $67 = (($66) + ($65<<4)|0);
               $68 = (($67) + 8|0);
               $69 = +HEAPF64[$68>>3];
               $70 = $69;
               $71 = (___FLOAT_BITS866($70)|0);
               $72 = $71 & 2147483647;
               $73 = ($72>>>0)<(2139095040);
               if (!($73)) {
                break L14;
               }
              } else {
               if (1) {
                $74 = $i;
                $75 = (($74) + 3)|0;
                $76 = $0;
                $77 = (($76) + ($75<<4)|0);
                $78 = (($77) + 8|0);
                $79 = +HEAPF64[$78>>3];
                $80 = (___DOUBLE_BITS867($79)|0);
                $81 = tempRet0;
                $82 = $81 & 2147483647;
                $83 = ($82>>>0)<(2146435072);
                $84 = ($82|0)==(2146435072);
                $85 = ($80>>>0)<(0);
                $86 = $84 & $85;
                $87 = $83 | $86;
                if ($87) {
                 break;
                } else {
                 break L14;
                }
               } else {
                $88 = $i;
                $89 = (($88) + 3)|0;
                $90 = $0;
                $91 = (($90) + ($89<<4)|0);
                $92 = (($91) + 8|0);
                $93 = +HEAPF64[$92>>3];
                $94 = (___fpclassifyl((+$93))|0);
                $95 = ($94|0)>(1);
                if ($95) {
                 break;
                } else {
                 break L14;
                }
               }
              }
             } while(0);
             $96 = $i;
             $97 = (($96) + 3)|0;
             $98 = $0;
             $99 = (($98) + ($97<<4)|0);
             $100 = (($99) + 8|0);
             $101 = +HEAPF64[$100>>3];
             $102 = $101 <= 0.0;
             if (!($102)) {
              $103 = $i;
              $104 = (($103) + 3)|0;
              $105 = $0;
              $106 = (($105) + ($104<<4)|0);
              $107 = (($106) + 8|0);
              $108 = +HEAPF64[$107>>3];
              $109 = $108 >= 1.0;
              if (!($109)) {
               $110 = $1;
               $111 = HEAP32[$110>>2]|0;
               $112 = (($111) + 2)|0;
               $113 = HEAP32[8>>2]|0;
               $114 = ($112|0)>($113|0);
               if ($114) {
                _error_huge();
               }
               $115 = $i;
               $116 = (($115) + 3)|0;
               $117 = $0;
               $118 = (($117) + ($116<<4)|0);
               $119 = (($118) + 8|0);
               $120 = +HEAPF64[$119>>3];
               $121 = $120 - 1.0;
               HEAPF64[$119>>3] = $121;
               $122 = $i;
               $123 = (($122) + 2)|0;
               $124 = $0;
               $125 = (($124) + ($123<<4)|0);
               $126 = $i;
               $127 = $0;
               $128 = (($127) + ($126<<4)|0);
               $129 = $1;
               $130 = HEAP32[$129>>2]|0;
               $131 = $i;
               $132 = (($130) - ($131))|0;
               $133 = $132<<4;
               _memmove(($125|0),($128|0),($133|0))|0;
               $134 = $1;
               $135 = HEAP32[$134>>2]|0;
               $136 = (($135) + 2)|0;
               HEAP32[$134>>2] = $136;
               $137 = $i;
               $138 = (($137) + 1)|0;
               $i = $138;
               $139 = $level;
               $140 = (($139) - 1)|0;
               $141 = $i;
               $142 = $0;
               $143 = (($142) + ($141<<4)|0);
               $144 = (($143) + 4|0);
               HEAP32[$144>>2] = $140;
               $145 = $i;
               $146 = $0;
               $147 = (($146) + ($145<<4)|0);
               HEAP32[$147>>2] = 0;
               $148 = $i;
               $149 = (($148) + 2)|0;
               $150 = $0;
               $151 = (($150) + ($149<<4)|0);
               $152 = (($151) + 8|0);
               $153 = +HEAPF64[$152>>3];
               $154 = $i;
               $155 = $0;
               $156 = (($155) + ($154<<4)|0);
               $157 = (($156) + 8|0);
               HEAPF64[$157>>3] = $153;
               $158 = $i;
               $159 = (($158) + 1)|0;
               $i = $159;
               break L12;
              }
             }
            }
           } while(0);
           break L4;
          } else {
           $160 = $i;
           $161 = $0;
           $162 = (($161) + ($160<<4)|0);
           $163 = (($162) + 8|0);
           HEAP32[$163>>2] = 4;
           $164 = $i;
           $165 = (($164) + 1)|0;
           $166 = $0;
           $167 = (($166) + ($165<<4)|0);
           $168 = (($167) + 8|0);
           $169 = +HEAPF64[$168>>3];
           $170 = 1.0 / $169;
           $171 = $i;
           $172 = (($171) + 1)|0;
           $173 = $0;
           $174 = (($173) + ($172<<4)|0);
           $175 = (($174) + 8|0);
           HEAPF64[$175>>3] = $170;
          }
         } while(0);
         $modified = 1;
        }
       }
      }
     }
    }
    label = 25;
   } else {
    label = 25;
   }
  } while(0);
  if ((label|0) == 25) {
   label = 0;
  }
  $176 = $i;
  $177 = (($176) + 2)|0;
  $i = $177;
 }
 $178 = $modified;
 STACKTOP = sp;return ($178|0);
}
function _uf_repeat_always($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $count = -1;
 while(1) {
  $2 = $0;
  $3 = $1;
  _organize($2,$3);
  $4 = $count;
  $5 = (($4) + 1)|0;
  $count = $5;
  $6 = ($5|0)>(0);
  if ($6) {
   break;
  }
  $7 = $0;
  $8 = $1;
  $9 = (_sub_ufactor($7,$8,8)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _uf_simp($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 (_uf_tsimp($2,$3)|0);
 $4 = $0;
 $5 = $1;
 (_uf_power($4,$5)|0);
 $6 = $0;
 $7 = $1;
 _uf_repeat($6,$7);
 $8 = $0;
 $9 = $1;
 (_uf_tsimp($8,$9)|0);
 STACKTOP = sp;return;
}
function _uf_simp_no_repeat($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 (_uf_power($2,$3)|0);
 $4 = $0;
 $5 = $1;
 (_uf_tsimp($4,$5)|0);
 STACKTOP = sp;return;
}
function _ufactor($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 _uf_repeat($2,$3);
 $4 = $0;
 $5 = $1;
 $6 = (_uf_times($4,$5)|0);
 $rv = $6;
 $7 = $0;
 $8 = $1;
 _uf_allpower($7,$8);
 $9 = $rv;
 STACKTOP = sp;return ($9|0);
}
function _no_divide($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0;
 var $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(5);
  if ($11) {
   $12 = $i;
   $13 = $0;
   $14 = (($13) + ($12<<4)|0);
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $level = $16;
   $17 = $i;
   $18 = (($17) - 1)|0;
   $j = $18;
   while(1) {
    $19 = $j;
    $20 = ($19|0)>=(0);
    if (!($20)) {
     break;
    }
    $21 = $j;
    $22 = $0;
    $23 = (($22) + ($21<<4)|0);
    $24 = (($23) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $level;
    $27 = ($25|0)<($26|0);
    if ($27) {
     label = 7;
     break;
    }
    $28 = $j;
    $29 = $0;
    $30 = (($29) + ($28<<4)|0);
    $31 = (($30) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + 2)|0;
    HEAP32[$31>>2] = $33;
    $34 = $j;
    $35 = (($34) + -1)|0;
    $j = $35;
   }
   if ((label|0) == 7) {
    label = 0;
   }
  }
  $36 = $i;
  $37 = (($36) + 2)|0;
  $i = $37;
 }
 STACKTOP = sp;return;
}
function _unf_sub($equation,$np,$b1,$loc,$e1,$level,$ii) {
 $equation = $equation|0;
 $np = $np|0;
 $b1 = $b1|0;
 $loc = $loc|0;
 $e1 = $e1|0;
 $level = $level|0;
 $ii = $ii|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0;
 var $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0.0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0.0, $714 = 0, $715 = 0.0, $716 = 0.0, $717 = 0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0, $734 = 0, $735 = 0.0, $736 = 0, $737 = 0.0, $738 = 0, $739 = 0.0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0.0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0.0;
 var $765 = 0.0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0.0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b2 = 0, $be1 = 0, $d1 = 0.0, $d2 = 0.0;
 var $eb1 = 0, $i = 0, $j = 0, $k = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $b1;
 $4 = $loc;
 $5 = $e1;
 $6 = $level;
 $7 = $ii;
 $8 = $4;
 $9 = $1;
 $10 = (($9) + ($8<<4)|0);
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 do {
  if ((($12|0) == 5) | (($12|0) == 4)) {
   $13 = $7;
   $14 = ($13|0)!=(1);
   if ($14) {
    break;
   }
   $15 = $3;
   $16 = (($15) + 1)|0;
   $i = $16;
   L6: while(1) {
    $17 = $i;
    $18 = $5;
    $19 = ($17|0)<($18|0);
    if (!($19)) {
     label = 49;
     break;
    }
    $20 = $i;
    $21 = $1;
    $22 = (($21) + ($20<<4)|0);
    $23 = (($22) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $6;
    $26 = (($25) + 1)|0;
    $27 = ($24|0)==($26|0);
    do {
     if ($27) {
      $28 = $i;
      $29 = $1;
      $30 = (($29) + ($28<<4)|0);
      $31 = (($30) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      if (!((($32|0) == 2) | (($32|0) == 1))) {
       break;
      }
      $33 = $i;
      $34 = (($33) - 2)|0;
      $b2 = $34;
      while(1) {
       $35 = $b2;
       $36 = $3;
       $37 = ($35|0)>=($36|0);
       if (!($37)) {
        break;
       }
       $38 = $b2;
       $39 = $1;
       $40 = (($39) + ($38<<4)|0);
       $41 = (($40) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = $6;
       $44 = ($42|0)<=($43|0);
       if ($44) {
        label = 13;
        break;
       }
       $45 = $b2;
       $46 = (($45) - 2)|0;
       $b2 = $46;
      }
      if ((label|0) == 13) {
       label = 0;
      }
      $47 = $b2;
      $48 = (($47) + 1)|0;
      $b2 = $48;
      $49 = $b2;
      $eb1 = $49;
      $50 = $i;
      $51 = (($50) + 2)|0;
      $be1 = $51;
      while(1) {
       $52 = $be1;
       $53 = $5;
       $54 = ($52|0)<($53|0);
       if (!($54)) {
        break;
       }
       $55 = $be1;
       $56 = $1;
       $57 = (($56) + ($55<<4)|0);
       $58 = (($57) + 4|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = $6;
       $61 = ($59|0)<=($60|0);
       if ($61) {
        label = 19;
        break;
       }
       $62 = $be1;
       $63 = (($62) + 2)|0;
       $be1 = $63;
      }
      if ((label|0) == 19) {
       label = 0;
      }
      $64 = $eb1;
      $65 = $3;
      $66 = ($64|0)>($65|0);
      if (!($66)) {
       break L6;
      }
      $67 = $eb1;
      $68 = (($67) - 1)|0;
      $69 = $1;
      $70 = (($69) + ($68<<4)|0);
      $71 = (($70) + 8|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(5);
      if (!($73)) {
       break L6;
      }
      $74 = $be1;
      $75 = (($74) - 2)|0;
      $i = $75;
     } else {
     }
    } while(0);
    $232 = $i;
    $233 = (($232) + 2)|0;
    $i = $233;
   }
   if ((label|0) == 49) {
    break;
   }
   $len = 0;
   while(1) {
    $76 = $len;
    $77 = $eb1;
    $78 = $3;
    $79 = (($77) - ($78))|0;
    $80 = (($76) + ($79))|0;
    $81 = $i;
    $82 = $b2;
    $83 = (($81) - ($82))|0;
    $84 = (($80) + ($83))|0;
    $85 = $5;
    $86 = $be1;
    $87 = (($85) - ($86))|0;
    $88 = (($84) + ($87))|0;
    $89 = (($88) + 1)|0;
    $90 = HEAP32[8>>2]|0;
    $91 = ($89|0)>($90|0);
    if ($91) {
     _error_huge();
    }
    $92 = $len;
    $93 = HEAP32[3704>>2]|0;
    $94 = (($93) + ($92<<4)|0);
    $95 = $3;
    $96 = $1;
    $97 = (($96) + ($95<<4)|0);
    $98 = $eb1;
    $99 = $3;
    $100 = (($98) - ($99))|0;
    $101 = $100<<4;
    _memmove(($94|0),($97|0),($101|0))|0;
    $102 = $len;
    $j = $102;
    $103 = $eb1;
    $104 = $3;
    $105 = (($103) - ($104))|0;
    $106 = $len;
    $107 = (($106) + ($105))|0;
    $len = $107;
    while(1) {
     $108 = $j;
     $109 = $len;
     $110 = ($108|0)<($109|0);
     if (!($110)) {
      break;
     }
     $111 = $j;
     $112 = HEAP32[3704>>2]|0;
     $113 = (($112) + ($111<<4)|0);
     $114 = (($113) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 1)|0;
     HEAP32[$114>>2] = $116;
     $117 = $j;
     $118 = (($117) + 1)|0;
     $j = $118;
    }
    $119 = $len;
    $120 = HEAP32[3704>>2]|0;
    $121 = (($120) + ($119<<4)|0);
    $122 = $b2;
    $123 = $1;
    $124 = (($123) + ($122<<4)|0);
    $125 = $i;
    $126 = $b2;
    $127 = (($125) - ($126))|0;
    $128 = $127<<4;
    _memmove(($121|0),($124|0),($128|0))|0;
    $129 = $i;
    $130 = $b2;
    $131 = (($129) - ($130))|0;
    $132 = $len;
    $133 = (($132) + ($131))|0;
    $len = $133;
    $134 = $len;
    $135 = HEAP32[3704>>2]|0;
    $136 = (($135) + ($134<<4)|0);
    $137 = $be1;
    $138 = $1;
    $139 = (($138) + ($137<<4)|0);
    $140 = $5;
    $141 = $be1;
    $142 = (($140) - ($141))|0;
    $143 = $142<<4;
    _memmove(($136|0),($139|0),($143|0))|0;
    $144 = $len;
    $j = $144;
    $145 = $5;
    $146 = $be1;
    $147 = (($145) - ($146))|0;
    $148 = $len;
    $149 = (($148) + ($147))|0;
    $len = $149;
    while(1) {
     $150 = $j;
     $151 = $len;
     $152 = ($150|0)<($151|0);
     if (!($152)) {
      break;
     }
     $153 = $j;
     $154 = HEAP32[3704>>2]|0;
     $155 = (($154) + ($153<<4)|0);
     $156 = (($155) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (($157) + 1)|0;
     HEAP32[$156>>2] = $158;
     $159 = $j;
     $160 = (($159) + 1)|0;
     $j = $160;
    }
    $161 = $i;
    $162 = $be1;
    $163 = ($161|0)<($162|0);
    if (!($163)) {
     break;
    }
    $164 = $len;
    $165 = HEAP32[3704>>2]|0;
    $166 = (($165) + ($164<<4)|0);
    $167 = $i;
    $168 = $1;
    $169 = (($168) + ($167<<4)|0);
    ;HEAP32[$166+0>>2]=HEAP32[$169+0>>2]|0;HEAP32[$166+4>>2]=HEAP32[$169+4>>2]|0;HEAP32[$166+8>>2]=HEAP32[$169+8>>2]|0;HEAP32[$166+12>>2]=HEAP32[$169+12>>2]|0;
    $170 = $len;
    $171 = HEAP32[3704>>2]|0;
    $172 = (($171) + ($170<<4)|0);
    $173 = (($172) + 4|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (($174) + -1)|0;
    HEAP32[$173>>2] = $175;
    $176 = $len;
    $177 = (($176) + 1)|0;
    $len = $177;
    $178 = $i;
    $179 = (($178) + 1)|0;
    $b2 = $179;
    $180 = $i;
    $181 = (($180) + 2)|0;
    $i = $181;
    while(1) {
     $182 = $i;
     $183 = $be1;
     $184 = ($182|0)<($183|0);
     if (!($184)) {
      break;
     }
     $185 = $i;
     $186 = $1;
     $187 = (($186) + ($185<<4)|0);
     $188 = (($187) + 4|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = $6;
     $191 = (($190) + 1)|0;
     $192 = ($189|0)==($191|0);
     if ($192) {
      label = 40;
      break;
     }
     $193 = $i;
     $194 = (($193) + 2)|0;
     $i = $194;
    }
    if ((label|0) == 40) {
     label = 0;
    }
   }
   $195 = $2;
   $196 = HEAP32[$195>>2]|0;
   $197 = $5;
   $198 = $3;
   $199 = (($197) - ($198))|0;
   $200 = (($196) - ($199))|0;
   $201 = $len;
   $202 = (($200) + ($201))|0;
   $203 = HEAP32[8>>2]|0;
   $204 = ($202|0)>($203|0);
   if ($204) {
    _error_huge();
   }
   $205 = $3;
   $206 = $len;
   $207 = (($205) + ($206))|0;
   $208 = $1;
   $209 = (($208) + ($207<<4)|0);
   $210 = $5;
   $211 = $1;
   $212 = (($211) + ($210<<4)|0);
   $213 = $2;
   $214 = HEAP32[$213>>2]|0;
   $215 = $5;
   $216 = (($214) - ($215))|0;
   $217 = $216<<4;
   _memmove(($209|0),($212|0),($217|0))|0;
   $218 = $len;
   $219 = $5;
   $220 = $3;
   $221 = (($219) - ($220))|0;
   $222 = (($218) - ($221))|0;
   $223 = $2;
   $224 = HEAP32[$223>>2]|0;
   $225 = (($224) + ($222))|0;
   HEAP32[$223>>2] = $225;
   $226 = $3;
   $227 = $1;
   $228 = (($227) + ($226<<4)|0);
   $229 = HEAP32[3704>>2]|0;
   $230 = $len;
   $231 = $230<<4;
   _memmove(($228|0),($229|0),($231|0))|0;
   $0 = 1;
   $835 = $0;
   STACKTOP = sp;return ($835|0);
  } else if ((($12|0) == 8)) {
   $234 = $4;
   $235 = (($234) + 3)|0;
   $236 = $2;
   $237 = HEAP32[$236>>2]|0;
   $238 = ($235|0)<($237|0);
   do {
    if ($238) {
     $239 = $4;
     $240 = (($239) + 1)|0;
     $241 = $1;
     $242 = (($241) + ($240<<4)|0);
     $243 = (($242) + 4|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = $6;
     $246 = ($244|0)==($245|0);
     if ($246) {
      $247 = $4;
      $248 = (($247) + 1)|0;
      $249 = $1;
      $250 = (($249) + ($248<<4)|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = ($251|0)==(0);
      if ($252) {
       $253 = $4;
       $254 = (($253) + 2)|0;
       $255 = $1;
       $256 = (($255) + ($254<<4)|0);
       $257 = (($256) + 4|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = $6;
       $260 = (($259) - 1)|0;
       $261 = ($258|0)==($260|0);
       if ($261) {
        $262 = $4;
        $263 = (($262) + 2)|0;
        $264 = $1;
        $265 = (($264) + ($263<<4)|0);
        $266 = (($265) + 8|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = ($267|0)==(8);
        if ($268) {
         $269 = $4;
         $270 = (($269) + 3)|0;
         $271 = $1;
         $272 = (($271) + ($270<<4)|0);
         $273 = HEAP32[$272>>2]|0;
         $274 = ($273|0)==(0);
         if ($274) {
          $275 = $4;
          $276 = (($275) + 3)|0;
          $277 = $1;
          $278 = (($277) + ($276<<4)|0);
          $279 = (($278) + 4|0);
          $280 = HEAP32[$279>>2]|0;
          $281 = $6;
          $282 = (($281) - 1)|0;
          $283 = ($280|0)==($282|0);
          if (!($283)) {
           $284 = $4;
           $285 = (($284) + 5)|0;
           $286 = $2;
           $287 = HEAP32[$286>>2]|0;
           $288 = ($285|0)<($287|0);
           if (!($288)) {
            break;
           }
           $289 = $4;
           $290 = (($289) + 3)|0;
           $291 = $1;
           $292 = (($291) + ($290<<4)|0);
           $293 = (($292) + 4|0);
           $294 = HEAP32[$293>>2]|0;
           $295 = $6;
           $296 = ($294|0)==($295|0);
           if (!($296)) {
            break;
           }
           $297 = $4;
           $298 = (($297) + 4)|0;
           $299 = $1;
           $300 = (($299) + ($298<<4)|0);
           $301 = (($300) + 4|0);
           $302 = HEAP32[$301>>2]|0;
           $303 = $6;
           $304 = ($302|0)==($303|0);
           if (!($304)) {
            break;
           }
           $305 = $4;
           $306 = (($305) + 4)|0;
           $307 = $1;
           $308 = (($307) + ($306<<4)|0);
           $309 = (($308) + 8|0);
           $310 = HEAP32[$309>>2]|0;
           $311 = ($310|0)==(5);
           if (!($311)) {
            break;
           }
           $312 = $4;
           $313 = (($312) + 5)|0;
           $314 = $1;
           $315 = (($314) + ($313<<4)|0);
           $316 = (($315) + 4|0);
           $317 = HEAP32[$316>>2]|0;
           $318 = $6;
           $319 = ($317|0)==($318|0);
           if (!($319)) {
            break;
           }
           $320 = $4;
           $321 = (($320) + 5)|0;
           $322 = $1;
           $323 = (($322) + ($321<<4)|0);
           $324 = HEAP32[$323>>2]|0;
           $325 = ($324|0)==(0);
           if (!($325)) {
            break;
           }
           $326 = $4;
           $327 = (($326) + 6)|0;
           $328 = $2;
           $329 = HEAP32[$328>>2]|0;
           $330 = ($327|0)>=($329|0);
           if (!($330)) {
            $331 = $4;
            $332 = (($331) + 6)|0;
            $333 = $1;
            $334 = (($333) + ($332<<4)|0);
            $335 = (($334) + 4|0);
            $336 = HEAP32[$335>>2]|0;
            $337 = $6;
            $338 = ($336|0)<($337|0);
            if (!($338)) {
             break;
            }
           }
          }
          $0 = 0;
          $835 = $0;
          STACKTOP = sp;return ($835|0);
         }
        }
       }
      }
     }
    }
   } while(0);
   $339 = $7;
   $340 = ($339|0)==(2);
   if ($340) {
    label = 68;
   } else {
    $341 = $7;
    $342 = ($341|0)==(0);
    if ($342) {
     label = 68;
    } else {
     label = 95;
    }
   }
   do {
    if ((label|0) == 68) {
     $343 = $3;
     $344 = (($343) + 1)|0;
     $i = $344;
     while(1) {
      $345 = $i;
      $346 = $4;
      $347 = ($345|0)<($346|0);
      if (!($347)) {
       label = 94;
       break;
      }
      $348 = $i;
      $349 = $1;
      $350 = (($349) + ($348<<4)|0);
      $351 = (($350) + 4|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = $6;
      $354 = (($353) + 1)|0;
      $355 = ($352|0)!=($354|0);
      if (!($355)) {
       break;
      }
      $487 = $i;
      $488 = (($487) + 2)|0;
      $i = $488;
     }
     if ((label|0) == 94) {
      label = 95;
      break;
     }
     $356 = $i;
     $357 = $1;
     $358 = (($357) + ($356<<4)|0);
     $359 = (($358) + 8|0);
     $360 = HEAP32[$359>>2]|0;
     if (!((($360|0) == 5) | (($360|0) == 4))) {
      break;
     }
     $361 = $3;
     $b2 = $361;
     $len = 0;
     while(1) {
      $362 = $len;
      $363 = $i;
      $364 = $b2;
      $365 = (($363) - ($364))|0;
      $366 = (($362) + ($365))|0;
      $367 = $5;
      $368 = $4;
      $369 = (($367) - ($368))|0;
      $370 = (($366) + ($369))|0;
      $371 = (($370) + 1)|0;
      $372 = HEAP32[8>>2]|0;
      $373 = ($371|0)>($372|0);
      if ($373) {
       _error_huge();
      }
      $374 = $len;
      $375 = HEAP32[3704>>2]|0;
      $376 = (($375) + ($374<<4)|0);
      $377 = $b2;
      $378 = $1;
      $379 = (($378) + ($377<<4)|0);
      $380 = $i;
      $381 = $b2;
      $382 = (($380) - ($381))|0;
      $383 = $382<<4;
      _memmove(($376|0),($379|0),($383|0))|0;
      $384 = $i;
      $385 = $b2;
      $386 = (($384) - ($385))|0;
      $387 = $len;
      $388 = (($387) + ($386))|0;
      $len = $388;
      $389 = $len;
      $390 = HEAP32[3704>>2]|0;
      $391 = (($390) + ($389<<4)|0);
      $392 = $4;
      $393 = $1;
      $394 = (($393) + ($392<<4)|0);
      $395 = $5;
      $396 = $4;
      $397 = (($395) - ($396))|0;
      $398 = $397<<4;
      _memmove(($391|0),($394|0),($398|0))|0;
      $399 = $len;
      $j = $399;
      $400 = $5;
      $401 = $4;
      $402 = (($400) - ($401))|0;
      $403 = $len;
      $404 = (($403) + ($402))|0;
      $len = $404;
      while(1) {
       $405 = $j;
       $406 = $len;
       $407 = ($405|0)<($406|0);
       if (!($407)) {
        break;
       }
       $408 = $j;
       $409 = HEAP32[3704>>2]|0;
       $410 = (($409) + ($408<<4)|0);
       $411 = (($410) + 4|0);
       $412 = HEAP32[$411>>2]|0;
       $413 = (($412) + 1)|0;
       HEAP32[$411>>2] = $413;
       $414 = $j;
       $415 = (($414) + 1)|0;
       $j = $415;
      }
      $416 = $i;
      $417 = $4;
      $418 = ($416|0)<($417|0);
      if (!($418)) {
       break;
      }
      $419 = $len;
      $420 = HEAP32[3704>>2]|0;
      $421 = (($420) + ($419<<4)|0);
      $422 = $i;
      $423 = $1;
      $424 = (($423) + ($422<<4)|0);
      ;HEAP32[$421+0>>2]=HEAP32[$424+0>>2]|0;HEAP32[$421+4>>2]=HEAP32[$424+4>>2]|0;HEAP32[$421+8>>2]=HEAP32[$424+8>>2]|0;HEAP32[$421+12>>2]=HEAP32[$424+12>>2]|0;
      $425 = $len;
      $426 = HEAP32[3704>>2]|0;
      $427 = (($426) + ($425<<4)|0);
      $428 = (($427) + 4|0);
      $429 = HEAP32[$428>>2]|0;
      $430 = (($429) + -1)|0;
      HEAP32[$428>>2] = $430;
      $431 = $len;
      $432 = (($431) + 1)|0;
      $len = $432;
      $433 = $i;
      $434 = (($433) + 1)|0;
      $b2 = $434;
      $435 = $i;
      $436 = (($435) + 2)|0;
      $i = $436;
      while(1) {
       $437 = $i;
       $438 = $4;
       $439 = ($437|0)<($438|0);
       if (!($439)) {
        break;
       }
       $440 = $i;
       $441 = $1;
       $442 = (($441) + ($440<<4)|0);
       $443 = (($442) + 4|0);
       $444 = HEAP32[$443>>2]|0;
       $445 = $6;
       $446 = (($445) + 1)|0;
       $447 = ($444|0)==($446|0);
       if ($447) {
        label = 86;
        break;
       }
       $448 = $i;
       $449 = (($448) + 2)|0;
       $i = $449;
      }
      if ((label|0) == 86) {
       label = 0;
      }
     }
     $450 = $2;
     $451 = HEAP32[$450>>2]|0;
     $452 = $5;
     $453 = $3;
     $454 = (($452) - ($453))|0;
     $455 = (($451) - ($454))|0;
     $456 = $len;
     $457 = (($455) + ($456))|0;
     $458 = HEAP32[8>>2]|0;
     $459 = ($457|0)>($458|0);
     if ($459) {
      _error_huge();
     }
     $460 = $3;
     $461 = $len;
     $462 = (($460) + ($461))|0;
     $463 = $1;
     $464 = (($463) + ($462<<4)|0);
     $465 = $5;
     $466 = $1;
     $467 = (($466) + ($465<<4)|0);
     $468 = $2;
     $469 = HEAP32[$468>>2]|0;
     $470 = $5;
     $471 = (($469) - ($470))|0;
     $472 = $471<<4;
     _memmove(($464|0),($467|0),($472|0))|0;
     $473 = $len;
     $474 = $5;
     $475 = $3;
     $476 = (($474) - ($475))|0;
     $477 = (($473) - ($476))|0;
     $478 = $2;
     $479 = HEAP32[$478>>2]|0;
     $480 = (($479) + ($477))|0;
     HEAP32[$478>>2] = $480;
     $481 = $3;
     $482 = $1;
     $483 = (($482) + ($481<<4)|0);
     $484 = HEAP32[3704>>2]|0;
     $485 = $len;
     $486 = $485<<4;
     _memmove(($483|0),($484|0),($486|0))|0;
     $0 = 1;
     $835 = $0;
     STACKTOP = sp;return ($835|0);
    }
   } while(0);
   if ((label|0) == 95) {
   }
   $489 = $7;
   $490 = ($489|0)==(4);
   if ($490) {
    label = 98;
   } else {
    $491 = $7;
    $492 = ($491|0)==(0);
    if ($492) {
     label = 98;
    } else {
     label = 128;
    }
   }
   do {
    if ((label|0) == 98) {
     $493 = $4;
     $494 = (($493) + 2)|0;
     $i = $494;
     while(1) {
      $495 = $i;
      $496 = $5;
      $497 = ($495|0)<($496|0);
      if (!($497)) {
       label = 127;
       break;
      }
      $498 = $i;
      $499 = $1;
      $500 = (($499) + ($498<<4)|0);
      $501 = (($500) + 4|0);
      $502 = HEAP32[$501>>2]|0;
      $503 = $6;
      $504 = (($503) + 1)|0;
      $505 = ($502|0)!=($504|0);
      if (!($505)) {
       break;
      }
      $650 = $i;
      $651 = (($650) + 2)|0;
      $i = $651;
     }
     if ((label|0) == 127) {
      label = 128;
      break;
     }
     $506 = $i;
     $507 = $1;
     $508 = (($507) + ($506<<4)|0);
     $509 = (($508) + 8|0);
     $510 = HEAP32[$509>>2]|0;
     if (!((($510|0) == 2) | (($510|0) == 1))) {
      break;
     }
     $511 = $4;
     $512 = (($511) + 1)|0;
     $b2 = $512;
     $len = 0;
     while(1) {
      $513 = $len;
      $514 = $4;
      $515 = $3;
      $516 = (($514) - ($515))|0;
      $517 = (($513) + ($516))|0;
      $518 = $i;
      $519 = $b2;
      $520 = (($518) - ($519))|0;
      $521 = (($517) + ($520))|0;
      $522 = (($521) + 2)|0;
      $523 = HEAP32[8>>2]|0;
      $524 = ($522|0)>($523|0);
      if ($524) {
       _error_huge();
      }
      $525 = $len;
      $j = $525;
      $526 = $len;
      $527 = HEAP32[3704>>2]|0;
      $528 = (($527) + ($526<<4)|0);
      $529 = $3;
      $530 = $1;
      $531 = (($530) + ($529<<4)|0);
      $532 = $4;
      $533 = (($532) + 1)|0;
      $534 = $3;
      $535 = (($533) - ($534))|0;
      $536 = $535<<4;
      _memmove(($528|0),($531|0),($536|0))|0;
      $537 = $4;
      $538 = (($537) + 1)|0;
      $539 = $3;
      $540 = (($538) - ($539))|0;
      $541 = $len;
      $542 = (($541) + ($540))|0;
      $len = $542;
      while(1) {
       $543 = $j;
       $544 = $len;
       $545 = ($543|0)<($544|0);
       if (!($545)) {
        break;
       }
       $546 = $j;
       $547 = HEAP32[3704>>2]|0;
       $548 = (($547) + ($546<<4)|0);
       $549 = (($548) + 4|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = (($550) + 1)|0;
       HEAP32[$549>>2] = $551;
       $552 = $j;
       $553 = (($552) + 1)|0;
       $j = $553;
      }
      $554 = $len;
      $555 = HEAP32[3704>>2]|0;
      $556 = (($555) + ($554<<4)|0);
      $557 = $b2;
      $558 = $1;
      $559 = (($558) + ($557<<4)|0);
      $560 = $i;
      $561 = $b2;
      $562 = (($560) - ($561))|0;
      $563 = $562<<4;
      _memmove(($556|0),($559|0),($563|0))|0;
      $564 = $i;
      $565 = $b2;
      $566 = (($564) - ($565))|0;
      $567 = $len;
      $568 = (($567) + ($566))|0;
      $len = $568;
      $569 = $i;
      $570 = $5;
      $571 = ($569|0)<($570|0);
      if (!($571)) {
       break;
      }
      $572 = $6;
      $573 = $len;
      $574 = HEAP32[3704>>2]|0;
      $575 = (($574) + ($573<<4)|0);
      $576 = (($575) + 4|0);
      HEAP32[$576>>2] = $572;
      $577 = $len;
      $578 = HEAP32[3704>>2]|0;
      $579 = (($578) + ($577<<4)|0);
      HEAP32[$579>>2] = 2;
      $580 = $i;
      $581 = $1;
      $582 = (($581) + ($580<<4)|0);
      $583 = (($582) + 8|0);
      $584 = HEAP32[$583>>2]|0;
      $585 = ($584|0)==(1);
      if ($585) {
       $586 = $len;
       $587 = HEAP32[3704>>2]|0;
       $588 = (($587) + ($586<<4)|0);
       $589 = (($588) + 8|0);
       HEAP32[$589>>2] = 4;
      } else {
       $590 = $len;
       $591 = HEAP32[3704>>2]|0;
       $592 = (($591) + ($590<<4)|0);
       $593 = (($592) + 8|0);
       HEAP32[$593>>2] = 5;
      }
      $594 = $len;
      $595 = (($594) + 1)|0;
      $len = $595;
      $596 = $i;
      $597 = (($596) + 1)|0;
      $b2 = $597;
      $598 = $i;
      $599 = (($598) + 2)|0;
      $i = $599;
      while(1) {
       $600 = $i;
       $601 = $5;
       $602 = ($600|0)<($601|0);
       if (!($602)) {
        break;
       }
       $603 = $i;
       $604 = $1;
       $605 = (($604) + ($603<<4)|0);
       $606 = (($605) + 4|0);
       $607 = HEAP32[$606>>2]|0;
       $608 = $6;
       $609 = (($608) + 1)|0;
       $610 = ($607|0)==($609|0);
       if ($610) {
        label = 119;
        break;
       }
       $611 = $i;
       $612 = (($611) + 2)|0;
       $i = $612;
      }
      if ((label|0) == 119) {
       label = 0;
      }
     }
     $613 = $2;
     $614 = HEAP32[$613>>2]|0;
     $615 = $5;
     $616 = $3;
     $617 = (($615) - ($616))|0;
     $618 = (($614) - ($617))|0;
     $619 = $len;
     $620 = (($618) + ($619))|0;
     $621 = HEAP32[8>>2]|0;
     $622 = ($620|0)>($621|0);
     if ($622) {
      _error_huge();
     }
     $623 = $3;
     $624 = $len;
     $625 = (($623) + ($624))|0;
     $626 = $1;
     $627 = (($626) + ($625<<4)|0);
     $628 = $5;
     $629 = $1;
     $630 = (($629) + ($628<<4)|0);
     $631 = $2;
     $632 = HEAP32[$631>>2]|0;
     $633 = $5;
     $634 = (($632) - ($633))|0;
     $635 = $634<<4;
     _memmove(($627|0),($630|0),($635|0))|0;
     $636 = $len;
     $637 = $5;
     $638 = $3;
     $639 = (($637) - ($638))|0;
     $640 = (($636) - ($639))|0;
     $641 = $2;
     $642 = HEAP32[$641>>2]|0;
     $643 = (($642) + ($640))|0;
     HEAP32[$641>>2] = $643;
     $644 = $3;
     $645 = $1;
     $646 = (($645) + ($644<<4)|0);
     $647 = HEAP32[3704>>2]|0;
     $648 = $len;
     $649 = $648<<4;
     _memmove(($646|0),($647|0),($649|0))|0;
     $0 = 1;
     $835 = $0;
     STACKTOP = sp;return ($835|0);
    }
   } while(0);
   if ((label|0) == 128) {
   }
   $652 = $7;
   $653 = ($652|0)!=(6);
   if ($653) {
    $654 = $7;
    $655 = ($654|0)!=(8);
    if ($655) {
     break;
    }
   }
   $656 = $4;
   $i = $656;
   $657 = $i;
   $658 = (($657) + 1)|0;
   $659 = $1;
   $660 = (($659) + ($658<<4)|0);
   $661 = (($660) + 4|0);
   $662 = HEAP32[$661>>2]|0;
   $663 = $6;
   $664 = ($662|0)!=($663|0);
   if (!($664)) {
    $665 = $i;
    $666 = (($665) + 1)|0;
    $667 = $1;
    $668 = (($667) + ($666<<4)|0);
    $669 = HEAP32[$668>>2]|0;
    $670 = ($669|0)!=(0);
    if (!($670)) {
     $671 = $i;
     $672 = (($671) + 1)|0;
     $673 = $1;
     $674 = (($673) + ($672<<4)|0);
     $675 = (($674) + 8|0);
     $676 = +HEAPF64[$675>>3];
     $d1 = $676;
     do {
      if (0) {
       $677 = $d1;
       $678 = $677;
       $679 = (___FLOAT_BITS866($678)|0);
       $680 = $679 & 2147483647;
       $681 = ($680>>>0)<(2139095040);
       if ($681) {
        label = 140;
       }
      } else {
       if (1) {
        $682 = $d1;
        $683 = (___DOUBLE_BITS867($682)|0);
        $684 = tempRet0;
        $685 = $684 & 2147483647;
        $686 = ($685>>>0)<(2146435072);
        $687 = ($685|0)==(2146435072);
        $688 = ($683>>>0)<(0);
        $689 = $687 & $688;
        $690 = $686 | $689;
        if ($690) {
         label = 140;
         break;
        } else {
         break;
        }
       } else {
        $691 = $d1;
        $692 = (___fpclassifyl((+$691))|0);
        $693 = ($692|0)>(1);
        if ($693) {
         label = 140;
         break;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 140) {
      $694 = $d1;
      $695 = $694 <= 1.0;
      if (!($695)) {
       $696 = $7;
       $697 = ($696|0)!=(8);
       if ($697) {
        $698 = $d1;
        $699 = $698 > 100.0;
        if ($699) {
         break;
        }
        $700 = $i;
        $701 = $3;
        $702 = (($700) - ($701))|0;
        $703 = ($702|0)==(1);
        if ($703) {
         $704 = $3;
         $705 = $1;
         $706 = (($705) + ($704<<4)|0);
         $707 = HEAP32[$706>>2]|0;
         $708 = ($707|0)!=(0);
         if ($708) {
          break;
         }
        }
        $709 = $i;
        $710 = $3;
        $711 = (($709) - ($710))|0;
        $712 = ($711|0)>(1);
        if ($712) {
         $713 = $d1;
         $714 = $713 > 2.0;
         if ($714) {
          $715 = $d1;
          $716 = (+_fmod((+$715),1.0));
          $717 = $716 != 0.0;
          if ($717) {
           break;
          }
         }
        }
       }
       $718 = $d1;
       $719 = (+Math_ceil((+$718)));
       $720 = $719 - 1.0;
       $d1 = $720;
       $721 = $d1;
       $722 = $i;
       $723 = $3;
       $724 = (($722) - ($723))|0;
       $725 = (+($724|0));
       $726 = $725 + 1.0;
       $727 = $721 * $726;
       $d2 = $727;
       $728 = $2;
       $729 = HEAP32[$728>>2]|0;
       $730 = (+($729|0));
       $731 = $d2;
       $732 = $730 + $731;
       $733 = HEAP32[8>>2]|0;
       $734 = (($733) - 10)|0;
       $735 = (+($734|0));
       $736 = $732 > $735;
       if ($736) {
        break;
       }
       $737 = $d1;
       $738 = (~~(($737)));
       $j = $738;
       $739 = $d2;
       $740 = (~~(($739)));
       $k = $740;
       $741 = $5;
       $742 = $k;
       $743 = (($741) + ($742))|0;
       $744 = $1;
       $745 = (($744) + ($743<<4)|0);
       $746 = $5;
       $747 = $1;
       $748 = (($747) + ($746<<4)|0);
       $749 = $2;
       $750 = HEAP32[$749>>2]|0;
       $751 = $5;
       $752 = (($750) - ($751))|0;
       $753 = $752<<4;
       _memmove(($745|0),($748|0),($753|0))|0;
       $754 = $k;
       $755 = $2;
       $756 = HEAP32[$755>>2]|0;
       $757 = (($756) + ($754))|0;
       HEAP32[$755>>2] = $757;
       $758 = $d1;
       $759 = $i;
       $760 = (($759) + 1)|0;
       $761 = $1;
       $762 = (($761) + ($760<<4)|0);
       $763 = (($762) + 8|0);
       $764 = +HEAPF64[$763>>3];
       $765 = $764 - $758;
       HEAPF64[$763>>3] = $765;
       $766 = $5;
       $k = $766;
       while(1) {
        $767 = $j;
        $768 = (($767) + -1)|0;
        $j = $768;
        $769 = ($767|0)>(0);
        if (!($769)) {
         break;
        }
        $770 = $6;
        $771 = $k;
        $772 = $1;
        $773 = (($772) + ($771<<4)|0);
        $774 = (($773) + 4|0);
        HEAP32[$774>>2] = $770;
        $775 = $k;
        $776 = $1;
        $777 = (($776) + ($775<<4)|0);
        HEAP32[$777>>2] = 2;
        $778 = $k;
        $779 = $1;
        $780 = (($779) + ($778<<4)|0);
        $781 = (($780) + 8|0);
        HEAP32[$781>>2] = 4;
        $782 = $k;
        $783 = (($782) + 1)|0;
        $784 = $1;
        $785 = (($784) + ($783<<4)|0);
        $786 = $3;
        $787 = $1;
        $788 = (($787) + ($786<<4)|0);
        $789 = $i;
        $790 = $3;
        $791 = (($789) - ($790))|0;
        $792 = $791<<4;
        _memmove(($785|0),($788|0),($792|0))|0;
        $793 = $i;
        $794 = $3;
        $795 = (($793) - ($794))|0;
        $796 = (($795) + 1)|0;
        $797 = $k;
        $798 = (($797) + ($796))|0;
        $k = $798;
       }
       $799 = $i;
       $800 = (($799) + 1)|0;
       $801 = $1;
       $802 = (($801) + ($800<<4)|0);
       $803 = (($802) + 8|0);
       $804 = +HEAPF64[$803>>3];
       $805 = $804 == 1.0;
       if ($805) {
        $806 = $i;
        $807 = $1;
        $808 = (($807) + ($806<<4)|0);
        $809 = $5;
        $810 = $1;
        $811 = (($810) + ($809<<4)|0);
        $812 = $2;
        $813 = HEAP32[$812>>2]|0;
        $814 = $5;
        $815 = (($813) - ($814))|0;
        $816 = $815<<4;
        _memmove(($808|0),($811|0),($816|0))|0;
        $817 = $5;
        $818 = $i;
        $819 = (($817) - ($818))|0;
        $820 = $2;
        $821 = HEAP32[$820>>2]|0;
        $822 = (($821) - ($819))|0;
        HEAP32[$820>>2] = $822;
       } else {
        $823 = $3;
        $j = $823;
        while(1) {
         $824 = $j;
         $825 = $5;
         $826 = ($824|0)<($825|0);
         if (!($826)) {
          break;
         }
         $827 = $j;
         $828 = $1;
         $829 = (($828) + ($827<<4)|0);
         $830 = (($829) + 4|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = (($831) + 1)|0;
         HEAP32[$830>>2] = $832;
         $833 = $j;
         $834 = (($833) + 1)|0;
         $j = $834;
        }
       }
       $0 = 1;
       $835 = $0;
       STACKTOP = sp;return ($835|0);
      }
     }
     break;
    }
   }
  }
 } while(0);
 $0 = 0;
 $835 = $0;
 STACKTOP = sp;return ($835|0);
}
function _unsimp_power($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $modified = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(8);
  do {
   if ($11) {
    $12 = $i;
    $13 = $0;
    $14 = (($13) + ($12<<4)|0);
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $i;
    $18 = (($17) + 1)|0;
    $19 = $0;
    $20 = (($19) + ($18<<4)|0);
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($16|0)==($22|0);
    if ($23) {
     $24 = $i;
     $25 = (($24) + 1)|0;
     $26 = $0;
     $27 = (($26) + ($25<<4)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0);
     if ($29) {
      break;
     }
    }
    $30 = $0;
    $31 = $1;
    $32 = $i;
    $33 = (_usp_sub($30,$31,$32)|0);
    $34 = $modified;
    $35 = $34 | $33;
    $modified = $35;
    label = 8;
   } else {
    label = 8;
   }
  } while(0);
  if ((label|0) == 8) {
   label = 0;
  }
  $36 = $i;
  $37 = (($36) + 2)|0;
  $i = $37;
 }
 $38 = $modified;
 STACKTOP = sp;return ($38|0);
}
function _usp_sub($equation,$np,$i) {
 $equation = $equation|0;
 $np = $np|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $i;
 $4 = $3;
 $5 = $1;
 $6 = (($5) + ($4<<4)|0);
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $level = $8;
 $9 = $3;
 $10 = (($9) - 2)|0;
 $j = $10;
 while(1) {
  $11 = $j;
  $12 = ($11|0)<(0);
  if ($12) {
   label = 3;
   break;
  }
  $13 = $j;
  $14 = $1;
  $15 = (($14) + ($13<<4)|0);
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $level;
  $19 = ($17|0)<($18|0);
  if ($19) {
   break;
  }
  $34 = $j;
  $35 = (($34) - 2)|0;
  $j = $35;
 }
 if ((label|0) == 3) {
  $0 = 0;
  $111 = $0;
  STACKTOP = sp;return ($111|0);
 }
 $20 = $j;
 $21 = $1;
 $22 = (($21) + ($20<<4)|0);
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $level;
 $26 = (($25) - 1)|0;
 $27 = ($24|0)==($26|0);
 if ($27) {
  $28 = $j;
  $29 = $1;
  $30 = (($29) + ($28<<4)|0);
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(5);
  if ($33) {
   $36 = $2;
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 2)|0;
   $39 = HEAP32[8>>2]|0;
   $40 = ($38|0)>($39|0);
   if ($40) {
    _error_huge();
   }
   $41 = $j;
   $42 = $1;
   $43 = (($42) + ($41<<4)|0);
   $44 = (($43) + 8|0);
   HEAP32[$44>>2] = 4;
   $45 = $3;
   $46 = (($45) + 1)|0;
   $j = $46;
   while(1) {
    $47 = $j;
    $48 = $2;
    $49 = HEAP32[$48>>2]|0;
    $50 = ($47|0)>=($49|0);
    if ($50) {
     break;
    }
    $51 = $j;
    $52 = $1;
    $53 = (($52) + ($51<<4)|0);
    $54 = (($53) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $level;
    $57 = ($55|0)<($56|0);
    if ($57) {
     break;
    }
    $58 = $j;
    $59 = $1;
    $60 = (($59) + ($58<<4)|0);
    $61 = (($60) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + 1)|0;
    HEAP32[$61>>2] = $63;
    $64 = $j;
    $65 = (($64) + 1)|0;
    $j = $65;
   }
   $66 = $3;
   $67 = (($66) + 1)|0;
   $3 = $67;
   $68 = $3;
   $69 = (($68) + 2)|0;
   $70 = $1;
   $71 = (($70) + ($69<<4)|0);
   $72 = $3;
   $73 = $1;
   $74 = (($73) + ($72<<4)|0);
   $75 = $2;
   $76 = HEAP32[$75>>2]|0;
   $77 = $3;
   $78 = (($76) - ($77))|0;
   $79 = $78<<4;
   _memmove(($71|0),($74|0),($79|0))|0;
   $80 = $2;
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) + 2)|0;
   HEAP32[$80>>2] = $82;
   $83 = $level;
   $84 = (($83) + 1)|0;
   $85 = $3;
   $86 = $1;
   $87 = (($86) + ($85<<4)|0);
   $88 = (($87) + 4|0);
   HEAP32[$88>>2] = $84;
   $89 = $3;
   $90 = $1;
   $91 = (($90) + ($89<<4)|0);
   HEAP32[$91>>2] = 0;
   $92 = $3;
   $93 = $1;
   $94 = (($93) + ($92<<4)|0);
   $95 = (($94) + 8|0);
   HEAPF64[$95>>3] = -1.0;
   $96 = $3;
   $97 = (($96) + 1)|0;
   $3 = $97;
   $98 = $level;
   $99 = (($98) + 1)|0;
   $100 = $3;
   $101 = $1;
   $102 = (($101) + ($100<<4)|0);
   $103 = (($102) + 4|0);
   HEAP32[$103>>2] = $99;
   $104 = $3;
   $105 = $1;
   $106 = (($105) + ($104<<4)|0);
   HEAP32[$106>>2] = 2;
   $107 = $3;
   $108 = $1;
   $109 = (($108) + ($107<<4)|0);
   $110 = (($109) + 8|0);
   HEAP32[$110>>2] = 4;
   $0 = 1;
   $111 = $0;
   STACKTOP = sp;return ($111|0);
  }
 }
 $0 = 0;
 $111 = $0;
 STACKTOP = sp;return ($111|0);
}
function _uf_neg_help($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $i = 0;
 var $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) - 1)|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = (($8) + ($7<<4)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $i;
   $13 = $0;
   $14 = (($13) + ($12<<4)|0);
   $15 = (($14) + 8|0);
   $16 = +HEAPF64[$15>>3];
   $17 = $16 < 0.0;
   if ($17) {
    $18 = $i;
    $19 = $0;
    $20 = (($19) + ($18<<4)|0);
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $level = $22;
    $23 = $i;
    $24 = (($23) + 1)|0;
    $25 = $0;
    $26 = (($25) + ($24<<4)|0);
    $27 = (($26) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $level;
    $30 = ($28|0)==($29|0);
    if ($30) {
     $31 = $i;
     $32 = (($31) + 1)|0;
     $33 = $0;
     $34 = (($33) + ($32<<4)|0);
     $35 = (($34) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     if ((($36|0) == 5) | (($36|0) == 4)) {
      $37 = $1;
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38) + 2)|0;
      $40 = HEAP32[8>>2]|0;
      $41 = ($39|0)>($40|0);
      if ($41) {
       _error_huge();
      }
      $42 = $i;
      $43 = (($42) + 3)|0;
      $44 = $0;
      $45 = (($44) + ($43<<4)|0);
      $46 = $i;
      $47 = (($46) + 1)|0;
      $48 = $0;
      $49 = (($48) + ($47<<4)|0);
      $50 = $1;
      $51 = HEAP32[$50>>2]|0;
      $52 = $i;
      $53 = (($52) + 1)|0;
      $54 = (($51) - ($53))|0;
      $55 = $54<<4;
      _memmove(($45|0),($49|0),($55|0))|0;
      $56 = $1;
      $57 = HEAP32[$56>>2]|0;
      $58 = (($57) + 2)|0;
      HEAP32[$56>>2] = $58;
      $59 = $i;
      $60 = $0;
      $61 = (($60) + ($59<<4)|0);
      $62 = (($61) + 8|0);
      $63 = +HEAPF64[$62>>3];
      $64 = -$63;
      $65 = $i;
      $66 = $0;
      $67 = (($66) + ($65<<4)|0);
      $68 = (($67) + 8|0);
      HEAPF64[$68>>3] = $64;
      $69 = $i;
      $70 = (($69) + 1)|0;
      $i = $70;
      $71 = $level;
      $72 = $i;
      $73 = $0;
      $74 = (($73) + ($72<<4)|0);
      $75 = (($74) + 4|0);
      HEAP32[$75>>2] = $71;
      $76 = $i;
      $77 = $0;
      $78 = (($77) + ($76<<4)|0);
      HEAP32[$78>>2] = 2;
      $79 = $i;
      $80 = $0;
      $81 = (($80) + ($79<<4)|0);
      $82 = (($81) + 8|0);
      HEAP32[$82>>2] = 5;
      $83 = $i;
      $84 = (($83) + 1)|0;
      $i = $84;
      $85 = $level;
      $86 = $i;
      $87 = $0;
      $88 = (($87) + ($86<<4)|0);
      $89 = (($88) + 4|0);
      HEAP32[$89>>2] = $85;
      $90 = $i;
      $91 = $0;
      $92 = (($91) + ($90<<4)|0);
      HEAP32[$92>>2] = 0;
      $93 = $i;
      $94 = $0;
      $95 = (($94) + ($93<<4)|0);
      $96 = (($95) + 8|0);
      HEAPF64[$96>>3] = -1.0;
     }
    }
   }
  }
  $97 = $i;
  $98 = (($97) + 2)|0;
  $i = $98;
 }
 STACKTOP = sp;return;
}
function ___FLOAT_BITS866($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS867($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _poly_in_v_sub($p1,$n,$v,$allow_divides) {
 $p1 = $p1|0;
 $n = $n|0;
 $v = $v|0;
 $allow_divides = $allow_divides|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $count = 0, $i = 0, $k = 0, $level = 0, $vlevel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n;
 $3 = $v;
 $4 = $allow_divides;
 $5 = $1;
 $6 = $2;
 $7 = (_min_level($5,$6)|0);
 $level = $7;
 $i = 0;
 $count = 0;
 L1: while(1) {
  $8 = $i;
  $9 = $2;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 35;
   break;
  }
  $11 = $i;
  $12 = $1;
  $13 = (($12) + ($11<<4)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  do {
   if ($15) {
    $16 = $i;
    $17 = $1;
    $18 = (($17) + ($16<<4)|0);
    $19 = (($18) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $3;
    $22 = ($20|0)==($21|0);
    if ($22) {
     $23 = $count;
     $24 = (($23) + 1)|0;
     $count = $24;
     $25 = $count;
     $26 = ($25|0)>(1);
     if ($26) {
      label = 6;
      break L1;
     }
     $27 = $i;
     $28 = $1;
     $29 = (($28) + ($27<<4)|0);
     $30 = (($29) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $vlevel = $31;
     $32 = $vlevel;
     $33 = $level;
     $34 = ($32|0)==($33|0);
     if (!($34)) {
      $35 = $vlevel;
      $36 = $level;
      $37 = (($36) + 1)|0;
      $38 = ($35|0)==($37|0);
      if (!($38)) {
       label = 32;
       break L1;
      }
     }
     $k = 1;
     while(1) {
      $39 = $k;
      $40 = $2;
      $41 = ($39|0)<($40|0);
      if (!($41)) {
       break;
      }
      $42 = $k;
      $43 = $1;
      $44 = (($43) + ($42<<4)|0);
      $45 = (($44) + 4|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = $level;
      $48 = ($46|0)==($47|0);
      do {
       if ($48) {
        $49 = $k;
        $50 = $1;
        $51 = (($50) + ($49<<4)|0);
        $52 = (($51) + 8|0);
        $53 = HEAP32[$52>>2]|0;
        if ((($53|0) == 8)) {
         $60 = $k;
         $61 = $i;
         $62 = (($61) + 1)|0;
         $63 = ($60|0)==($62|0);
         if (!($63)) {
          label = 20;
          break L1;
         }
         break;
        } else if ((($53|0) == 5)) {
         label = 13;
        } else if (!((($53|0) == 4))) {
         label = 21;
         break L1;
        }
        if ((label|0) == 13) {
         label = 0;
         $54 = $4;
         $55 = ($54|0)!=(0);
         if (!($55)) {
          $56 = $k;
          $57 = $i;
          $58 = (($57) - 1)|0;
          $59 = ($56|0)==($58|0);
          if ($59) {
           label = 15;
           break L1;
          }
         }
        }
       } else {
       }
      } while(0);
      $64 = $k;
      $65 = (($64) + 2)|0;
      $k = $65;
     }
     $66 = $vlevel;
     $67 = $level;
     $68 = (($67) + 1)|0;
     $69 = ($66|0)==($68|0);
     if (!($69)) {
      break;
     }
     $70 = $i;
     $71 = (($70) + 1)|0;
     $72 = $2;
     $73 = ($71|0)<($72|0);
     if (!($73)) {
      label = 29;
      break L1;
     }
     $74 = $i;
     $75 = (($74) + 1)|0;
     $76 = $1;
     $77 = (($76) + ($75<<4)|0);
     $78 = (($77) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $vlevel;
     $81 = ($79|0)==($80|0);
     if (!($81)) {
      label = 29;
      break L1;
     }
     $82 = $i;
     $83 = (($82) + 1)|0;
     $84 = $1;
     $85 = (($84) + ($83<<4)|0);
     $86 = (($85) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)==(8);
     if (!($88)) {
      label = 29;
      break L1;
     }
    } else {
     label = 33;
    }
   } else {
    label = 33;
   }
  } while(0);
  if ((label|0) == 33) {
   label = 0;
  }
  $89 = $i;
  $90 = (($89) + 2)|0;
  $i = $90;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $91 = $0;
  STACKTOP = sp;return ($91|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $91 = $0;
  STACKTOP = sp;return ($91|0);
 }
 else if ((label|0) == 20) {
  label = 21;
 }
 else if ((label|0) == 29) {
  label = 32;
 }
 else if ((label|0) == 35) {
  $0 = 1;
  $91 = $0;
  STACKTOP = sp;return ($91|0);
 }
 if ((label|0) == 21) {
  $0 = 0;
  $91 = $0;
  STACKTOP = sp;return ($91|0);
 }
 else if ((label|0) == 32) {
  $0 = 0;
  $91 = $0;
  STACKTOP = sp;return ($91|0);
 }
 return 0|0;
}
function _poly_in_v($p1,$n,$v,$allow_divides) {
 $p1 = $p1|0;
 $n = $n|0;
 $v = $v|0;
 $allow_divides = $allow_divides|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n;
 $3 = $v;
 $4 = $allow_divides;
 $i = 1;
 $j = 0;
 while(1) {
  $5 = $i;
  $6 = $2;
  $7 = ($5|0)>=($6|0);
  if ($7) {
   label = 6;
  } else {
   $8 = $i;
   $9 = $1;
   $10 = (($9) + ($8<<4)|0);
   $11 = (($10) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(1);
   if ($13) {
    $14 = $i;
    $15 = $1;
    $16 = (($15) + ($14<<4)|0);
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(1);
    if ($19) {
     label = 6;
    } else {
     $20 = $i;
     $21 = $1;
     $22 = (($21) + ($20<<4)|0);
     $23 = (($22) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(2);
     if ($25) {
      label = 6;
     }
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $26 = $j;
   $27 = $1;
   $28 = (($27) + ($26<<4)|0);
   $29 = $i;
   $30 = $j;
   $31 = (($29) - ($30))|0;
   $32 = $3;
   $33 = $4;
   $34 = (_poly_in_v_sub($28,$31,$32,$33)|0);
   $35 = ($34|0)!=(0);
   if (!($35)) {
    label = 7;
    break;
   }
   $36 = $i;
   $37 = (($36) + 1)|0;
   $j = $37;
  }
  $38 = $i;
  $39 = $2;
  $40 = ($38|0)>=($39|0);
  if ($40) {
   break;
  }
  $41 = $i;
  $42 = (($41) + 2)|0;
  $i = $42;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $0 = 1;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _poly_factor($equation,$np,$do_repeat) {
 $equation = $equation|0;
 $np = $np|0;
 $do_repeat = $do_repeat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $do_repeat;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_pf_recurse($3,$4,0,1,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _pf_recurse($equation,$np,$loc,$level,$do_repeat) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 $do_repeat = $do_repeat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $count = 0, $i = 0;
 var $level_count = 0, $modified = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $loc;
 $3 = $level;
 $4 = $do_repeat;
 $modified = 0;
 $count = 0;
 $level_count = 0;
 $5 = $2;
 $6 = (($5) + 1)|0;
 $i = $6;
 while(1) {
  $7 = $i;
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if ($10) {
   $11 = $i;
   $12 = $0;
   $13 = (($12) + ($11<<4)|0);
   $14 = (($13) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $3;
   $17 = ($15|0)>=($16|0);
   $95 = $17;
  } else {
   $95 = 0;
  }
  if (!($95)) {
   break;
  }
  $18 = $i;
  $19 = $0;
  $20 = (($19) + ($18<<4)|0);
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  if ((($22|0) == 2) | (($22|0) == 1)) {
   $23 = $count;
   $24 = (($23) + 1)|0;
   $count = $24;
   $25 = $i;
   $26 = $0;
   $27 = (($26) + ($25<<4)|0);
   $28 = (($27) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $3;
   $31 = ($29|0)==($30|0);
   if ($31) {
    $32 = $level_count;
    $33 = (($32) + 1)|0;
    $level_count = $33;
   }
  }
  $34 = $i;
  $35 = (($34) + 2)|0;
  $i = $35;
 }
 $36 = $level_count;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $count;
  $39 = ($38|0)>(1);
  if ($39) {
   $40 = $0;
   $41 = $1;
   $42 = $2;
   $43 = $i;
   $44 = $2;
   $45 = (($43) - ($44))|0;
   $46 = $3;
   $47 = $4;
   $48 = (_pf_sub($40,$41,$42,$45,$46,$47)|0);
   $modified = $48;
  }
 }
 $49 = $2;
 $i = $49;
 while(1) {
  $50 = $i;
  $51 = $1;
  $52 = HEAP32[$51>>2]|0;
  $53 = ($50|0)<($52|0);
  if ($53) {
   $54 = $i;
   $55 = $0;
   $56 = (($55) + ($54<<4)|0);
   $57 = (($56) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $3;
   $60 = ($58|0)>=($59|0);
   $96 = $60;
  } else {
   $96 = 0;
  }
  if (!($96)) {
   break;
  }
  $61 = $i;
  $62 = $0;
  $63 = (($62) + ($61<<4)|0);
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $3;
  $67 = ($65|0)>($66|0);
  if (!($67)) {
   $92 = $i;
   $93 = (($92) + 1)|0;
   $i = $93;
   continue;
  }
  $68 = $0;
  $69 = $1;
  $70 = $i;
  $71 = $3;
  $72 = (($71) + 1)|0;
  $73 = $4;
  $74 = (_pf_recurse($68,$69,$70,$72,$73)|0);
  $75 = $modified;
  $76 = $75 | $74;
  $modified = $76;
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
  while(1) {
   $79 = $i;
   $80 = $1;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($79|0)<($81|0);
   if ($82) {
    $83 = $i;
    $84 = $0;
    $85 = (($84) + ($83<<4)|0);
    $86 = (($85) + 4|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $3;
    $89 = ($87|0)>($88|0);
    $97 = $89;
   } else {
    $97 = 0;
   }
   if (!($97)) {
    break;
   }
   $90 = $i;
   $91 = (($90) + 2)|0;
   $i = $91;
  }
 }
 $94 = $modified;
 STACKTOP = sp;return ($94|0);
}
function _remove_factors() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $divide_flag = 0, $i = 0, $j = 0, $k = 0, $op = 0, $plus_flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $plus_flag = 0;
 $divide_flag = 0;
 while(1) {
  $1 = HEAP32[3680>>2]|0;
  _simp_ssub($1,3712,0,1.0,0,1,4);
  $2 = HEAP32[3680>>2]|0;
  $3 = (_uf_power($2,3712)|0);
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
 }
 $i = 1;
 $j = 0;
 $k = 0;
 L5: while(1) {
  $5 = $i;
  $6 = HEAP32[3712>>2]|0;
  $7 = ($5|0)>=($6|0);
  if ($7) {
   break;
  }
  $38 = $i;
  $39 = HEAP32[3680>>2]|0;
  $40 = (($39) + ($38<<4)|0);
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $op = $42;
  $43 = $i;
  $44 = HEAP32[3680>>2]|0;
  $45 = (($44) + ($43<<4)|0);
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  do {
   if ((($47|0) == 1)) {
    $48 = $op;
    if ((($48|0) == 2) | (($48|0) == 1)) {
     $plus_flag = 1;
     break;
    } else if (!((($48|0) == 5) | (($48|0) == 4))) {
     label = 18;
     break L5;
    }
    $49 = $plus_flag;
    $50 = ($49|0)!=(0);
    if ($50) {
     $51 = $divide_flag;
     $52 = ($51|0)!=(0);
     if (!($52)) {
      $53 = $k;
      $54 = ($53|0)>(0);
      if ($54) {
       $55 = $j;
       $56 = (($55) + -1)|0;
       $j = $56;
      }
      $57 = $k;
      $58 = HEAP32[3704>>2]|0;
      $59 = (($58) + ($57<<4)|0);
      $60 = $j;
      $61 = HEAP32[3680>>2]|0;
      $62 = (($61) + ($60<<4)|0);
      $63 = $i;
      $64 = $j;
      $65 = (($63) - ($64))|0;
      $66 = $65<<4;
      _memmove(($59|0),($62|0),($66|0))|0;
      $67 = $i;
      $68 = $j;
      $69 = (($67) - ($68))|0;
      $70 = $k;
      $71 = (($70) + ($69))|0;
      $k = $71;
     }
    }
    $plus_flag = 0;
    $72 = $op;
    $73 = ($72|0)==(5);
    $74 = $73&1;
    $divide_flag = $74;
    $75 = $i;
    $76 = (($75) + 1)|0;
    $j = $76;
    label = 28;
   } else if ((($47|0) == 2)) {
    $77 = $op;
    if ((($77|0) == 2) | (($77|0) == 1)) {
     $plus_flag = 1;
    }
    label = 28;
   } else {
    label = 28;
   }
  } while(0);
  if ((label|0) == 28) {
   label = 0;
  }
  $78 = $i;
  $79 = (($78) + 2)|0;
  $i = $79;
 }
 if ((label|0) == 18) {
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $8 = $plus_flag;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $divide_flag;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = $k;
   $13 = ($12|0)>(0);
   if ($13) {
    $14 = $j;
    $15 = (($14) + -1)|0;
    $j = $15;
   }
   $16 = $k;
   $17 = HEAP32[3704>>2]|0;
   $18 = (($17) + ($16<<4)|0);
   $19 = $j;
   $20 = HEAP32[3680>>2]|0;
   $21 = (($20) + ($19<<4)|0);
   $22 = $i;
   $23 = $j;
   $24 = (($22) - ($23))|0;
   $25 = $24<<4;
   _memmove(($18|0),($21|0),($25|0))|0;
   $26 = $i;
   $27 = $j;
   $28 = (($26) - ($27))|0;
   $29 = $k;
   $30 = (($29) + ($28))|0;
   $k = $30;
  }
 }
 $31 = $k;
 $32 = ($31|0)<=(0);
 if ($32) {
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 } else {
  $33 = HEAP32[3680>>2]|0;
  $34 = HEAP32[3704>>2]|0;
  $35 = $k;
  $36 = $35<<4;
  _memmove(($33|0),($34|0),($36|0))|0;
  $37 = $k;
  HEAP32[3712>>2] = $37;
  $0 = 1;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 return 0|0;
}
function _poly_gcd($larger,$llen,$smaller,$slen,$v) {
 $larger = $larger|0;
 $llen = $llen|0;
 $smaller = $smaller|0;
 $slen = $slen|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 4|0;
 $1 = $larger;
 $2 = $llen;
 $3 = $smaller;
 $4 = $slen;
 HEAP32[$5>>2] = $v;
 $6 = $2;
 $7 = HEAP32[8>>2]|0;
 $8 = ($6|0)>($7|0);
 if (!($8)) {
  $9 = $4;
  $10 = HEAP32[8>>2]|0;
  $11 = (15000)<($10|0);
  if ($11) {
   $14 = 15000;
  } else {
   $12 = HEAP32[8>>2]|0;
   $14 = $12;
  }
  $13 = ($9|0)>($14|0);
  if (!($13)) {
   $15 = HEAP32[3688>>2]|0;
   $16 = $1;
   $17 = ($15|0)!=($16|0);
   if ($17) {
    $18 = HEAP32[3688>>2]|0;
    $19 = $1;
    $20 = $2;
    $21 = $20<<4;
    _memmove(($18|0),($19|0),($21|0))|0;
   }
   $22 = $2;
   HEAP32[3720>>2] = $22;
   $23 = HEAP32[3680>>2]|0;
   $24 = $3;
   $25 = ($23|0)!=($24|0);
   if ($25) {
    $26 = HEAP32[3680>>2]|0;
    $27 = $3;
    $28 = $4;
    $29 = $28<<4;
    _memmove(($26|0),($27|0),($29|0))|0;
   }
   $30 = $4;
   HEAP32[3712>>2] = $30;
   $31 = (_remove_factors()|0);
   $32 = ($31|0)!=(0);
   if (!($32)) {
    $0 = 0;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
   $33 = HEAP32[3712>>2]|0;
   $34 = ($33|0)>(15000);
   if ($34) {
    $0 = 0;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
   $35 = HEAP32[3680>>2]|0;
   $36 = HEAP32[3712>>2]|0;
   $37 = $36<<4;
   _memmove((72032|0),($35|0),($37|0))|0;
   $38 = HEAP32[3712>>2]|0;
   HEAP32[312032>>2] = $38;
   $39 = (_do_gcd($5)|0);
   $count = $39;
   $40 = $count;
   $41 = ($40|0)<=(0);
   if ($41) {
    $0 = 0;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
   $42 = $count;
   $43 = ($42|0)>(1);
   do {
    if ($43) {
     $44 = HEAP32[312032>>2]|0;
     $45 = HEAP32[8>>2]|0;
     $46 = ($44|0)>($45|0);
     if ($46) {
      $0 = 0;
      $74 = $0;
      STACKTOP = sp;return ($74|0);
     }
     $47 = HEAP32[3680>>2]|0;
     $48 = HEAP32[312032>>2]|0;
     $49 = $48<<4;
     _memmove(($47|0),(72032|0),($49|0))|0;
     $50 = HEAP32[312032>>2]|0;
     HEAP32[3712>>2] = $50;
     $51 = (_remove_factors()|0);
     $52 = ($51|0)!=(0);
     if (!($52)) {
      $0 = 0;
      $74 = $0;
      STACKTOP = sp;return ($74|0);
     }
     $53 = HEAP32[3712>>2]|0;
     $54 = ($53|0)>(15000);
     if ($54) {
      $0 = 0;
      $74 = $0;
      STACKTOP = sp;return ($74|0);
     }
     $55 = HEAP32[3680>>2]|0;
     $56 = HEAP32[3712>>2]|0;
     $57 = $56<<4;
     _memmove((72032|0),($55|0),($57|0))|0;
     $58 = HEAP32[3712>>2]|0;
     HEAP32[312032>>2] = $58;
     $59 = $1;
     $60 = $2;
     $61 = HEAP32[312032>>2]|0;
     $62 = (_poly_div($59,$60,72032,$61,$5)|0);
     $63 = ($62|0)!=(2);
     if (!($63)) {
      break;
     }
     $0 = 0;
     $74 = $0;
     STACKTOP = sp;return ($74|0);
    }
   } while(0);
   $64 = HEAP32[312032>>2]|0;
   $65 = HEAP32[8>>2]|0;
   $66 = ($64|0)>($65|0);
   if ($66) {
    $0 = 0;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   } else {
    $67 = HEAP32[3688>>2]|0;
    $68 = HEAP32[312032>>2]|0;
    $69 = $68<<4;
    _memmove(($67|0),(72032|0),($69|0))|0;
    $70 = HEAP32[312032>>2]|0;
    HEAP32[3720>>2] = $70;
    $71 = HEAP32[3680>>2]|0;
    _uf_simp($71,3712);
    $72 = HEAP32[3688>>2]|0;
    _uf_simp($72,3720);
    $73 = $count;
    $0 = $73;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
  }
 }
 $0 = 0;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _do_gcd($vp) {
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $vp;
 $count = 1;
 while(1) {
  $2 = $count;
  $3 = ($2|0)<(50);
  if (!($3)) {
   label = 11;
   break;
  }
  $4 = HEAP32[3688>>2]|0;
  $5 = HEAP32[3720>>2]|0;
  $6 = HEAP32[312032>>2]|0;
  $7 = $1;
  $8 = (_poly_div($4,$5,72032,$6,$7)|0);
  if ((($8|0) == 0)) {
   label = 4;
   break;
  } else if ((($8|0) == 2)) {
   label = 5;
   break;
  }
  $12 = HEAP32[312032>>2]|0;
  $13 = HEAP32[8>>2]|0;
  $14 = ($12|0)>($13|0);
  if ($14) {
   label = 8;
   break;
  }
  $15 = HEAP32[3720>>2]|0;
  $16 = ($15|0)>(15000);
  if ($16) {
   label = 8;
   break;
  }
  $17 = HEAP32[3704>>2]|0;
  $18 = HEAP32[3688>>2]|0;
  $19 = HEAP32[3720>>2]|0;
  $20 = $19<<4;
  _memmove(($17|0),($18|0),($20|0))|0;
  $21 = HEAP32[3688>>2]|0;
  $22 = HEAP32[312032>>2]|0;
  $23 = $22<<4;
  _memmove(($21|0),(72032|0),($23|0))|0;
  $24 = HEAP32[3704>>2]|0;
  $25 = HEAP32[3720>>2]|0;
  $26 = $25<<4;
  _memmove((72032|0),($24|0),($26|0))|0;
  $27 = HEAP32[3720>>2]|0;
  $i = $27;
  $28 = HEAP32[312032>>2]|0;
  HEAP32[3720>>2] = $28;
  $29 = $i;
  HEAP32[312032>>2] = $29;
  $30 = $count;
  $31 = (($30) + 1)|0;
  $count = $31;
 }
 if ((label|0) == 4) {
  $9 = $count;
  $10 = (1 - ($9))|0;
  $0 = $10;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 5) {
  $11 = $count;
  $0 = $11;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return 0|0;
}
function _poly_div($d1,$len1,$d2,$len2,$vp) {
 $d1 = $d1|0;
 $len1 = $len1|0;
 $d2 = $d2|0;
 $len2 = $len2|0;
 $vp = $vp|0;
 var $$0 = 0, $$reg2mem10$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $save_save = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $save_save = sp;
 $0 = HEAP32[41216>>2]|0;
 HEAP32[41216>>2] = 0;
 _memmove(($save_save|0),(41032|0),156)|0;
 _saveSetjmp(41032,1,_setjmpTable|0)|0;
 __THREW__ = 0;
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = threwValue; } else { $2 = -1; };
 $3 = tempRet0;
 if ((($2|0) == 1)) {
  $$reg2mem10$0 = $3;
 } else {
  $$reg2mem10$0 = 0;
 }
 while(1) {
  $4 = ($$reg2mem10$0|0)!=(0);
  if (!($4)) {
   __THREW__ = 0;
   $9 = (invoke_iiiiii(85,($d1|0),($len1|0),($d2|0),($len2|0),($vp|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   if ((($11|0) == 1)) {
    $$reg2mem10$0 = $12;
    continue;
   } else {
    label = 9;
    break;
   }
  }
  _memmove((41032|0),($save_save|0),156)|0;
  HEAP32[41216>>2] = $0;
  $5 = ($$reg2mem10$0|0)==(13);
  if (!($5)) {
   label = 7;
   break;
  }
  __THREW__ = 0;
  invoke_vii(57,(41032|0),($$reg2mem10$0|0));
  $6 = __THREW__; __THREW__ = 0;
  if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = threwValue; } else { $7 = -1; };
  $8 = tempRet0;
  if ((($7|0) == 1)) {
   $$reg2mem10$0 = $8;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  // unreachable;
 }
 else if ((label|0) == 7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 9) {
  _memmove((41032|0),($save_save|0),156)|0;
  HEAP32[41216>>2] = $0;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _poly2_gcd($larger,$llen,$smaller,$slen,$v,$require_additive) {
 $larger = $larger|0;
 $llen = $llen|0;
 $smaller = $smaller|0;
 $slen = $slen|0;
 $v = $v|0;
 $require_additive = $require_additive|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $count = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 12|0;
 $1 = $larger;
 $2 = $llen;
 $3 = $smaller;
 $4 = $slen;
 HEAP32[$5>>2] = $v;
 $6 = $require_additive;
 $7 = $6;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $count = 0;
   $i = 1;
   while(1) {
    $9 = $i;
    $10 = $2;
    $11 = ($9|0)<($10|0);
    if (!($11)) {
     break;
    }
    $12 = $i;
    $13 = $1;
    $14 = (($13) + ($12<<4)|0);
    $15 = (($14) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    if ($17) {
     label = 6;
     break;
    }
    $18 = $i;
    $19 = $1;
    $20 = (($19) + ($18<<4)|0);
    $21 = (($20) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(2);
    if ($23) {
     label = 6;
     break;
    }
    $26 = $i;
    $27 = (($26) + 2)|0;
    $i = $27;
   }
   if ((label|0) == 6) {
    $24 = $count;
    $25 = (($24) + 1)|0;
    $count = $25;
   }
   $28 = $count;
   $29 = ($28|0)==(0);
   if ($29) {
    $0 = 0;
    $119 = $0;
    STACKTOP = sp;return ($119|0);
   }
   $count = 0;
   $i = 1;
   while(1) {
    $30 = $i;
    $31 = $4;
    $32 = ($30|0)<($31|0);
    if (!($32)) {
     break;
    }
    $33 = $i;
    $34 = $3;
    $35 = (($34) + ($33<<4)|0);
    $36 = (($35) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(1);
    if ($38) {
     label = 15;
    } else {
     $39 = $i;
     $40 = $3;
     $41 = (($40) + ($39<<4)|0);
     $42 = (($41) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(2);
     if ($44) {
      label = 15;
     }
    }
    if ((label|0) == 15) {
     label = 0;
     $45 = $count;
     $46 = (($45) + 1)|0;
     $count = $46;
    }
    $47 = $i;
    $48 = (($47) + 2)|0;
    $i = $48;
   }
   $49 = $count;
   $50 = ($49|0)==(0);
   if (!($50)) {
    break;
   }
   $0 = 0;
   $119 = $0;
   STACKTOP = sp;return ($119|0);
  }
 } while(0);
 $51 = $2;
 $52 = HEAP32[8>>2]|0;
 $53 = ($51|0)>($52|0);
 if (!($53)) {
  $54 = $4;
  $55 = HEAP32[8>>2]|0;
  $56 = (15000)<($55|0);
  if ($56) {
   $59 = 15000;
  } else {
   $57 = HEAP32[8>>2]|0;
   $59 = $57;
  }
  $58 = ($54|0)>($59|0);
  if (!($58)) {
   $60 = HEAP32[3688>>2]|0;
   $61 = $1;
   $62 = $2;
   $63 = $62<<4;
   _memmove(($60|0),($61|0),($63|0))|0;
   $64 = $2;
   HEAP32[3720>>2] = $64;
   $65 = HEAP32[3680>>2]|0;
   $66 = $3;
   $67 = $4;
   $68 = $67<<4;
   _memmove(($65|0),($66|0),($68|0))|0;
   $69 = $4;
   HEAP32[3712>>2] = $69;
   $70 = HEAP32[3712>>2]|0;
   $71 = ($70|0)>(15000);
   if ($71) {
    $0 = 0;
    $119 = $0;
    STACKTOP = sp;return ($119|0);
   }
   $72 = HEAP32[3680>>2]|0;
   $73 = HEAP32[3712>>2]|0;
   $74 = $73<<4;
   _memmove((72032|0),($72|0),($74|0))|0;
   $75 = HEAP32[3712>>2]|0;
   HEAP32[312032>>2] = $75;
   $76 = (_do_gcd($5)|0);
   $count = $76;
   $77 = $count;
   $78 = ($77|0)<=(0);
   if ($78) {
    $79 = $count;
    $0 = $79;
    $119 = $0;
    STACKTOP = sp;return ($119|0);
   }
   $80 = $count;
   $81 = ($80|0)>(1);
   do {
    if ($81) {
     $82 = $6;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = HEAP32[312032>>2]|0;
      $85 = (_level1_plus_count(72032,$84)|0);
      $86 = ($85|0)==(0);
      if ($86) {
       $0 = 0;
       $119 = $0;
       STACKTOP = sp;return ($119|0);
      }
     }
     $87 = $3;
     $88 = $4;
     $89 = HEAP32[312032>>2]|0;
     $90 = (_poly_div($87,$88,72032,$89,$5)|0);
     $91 = ($90|0)!=(2);
     if ($91) {
      $0 = 0;
      $119 = $0;
      STACKTOP = sp;return ($119|0);
     }
     $92 = HEAP32[3688>>2]|0;
     $93 = HEAP32[312032>>2]|0;
     $94 = $93<<4;
     _memmove(($92|0),(72032|0),($94|0))|0;
     $95 = HEAP32[312032>>2]|0;
     HEAP32[3720>>2] = $95;
     $96 = HEAP32[3712>>2]|0;
     $97 = ($96|0)>(15000);
     if ($97) {
      $0 = 0;
      $119 = $0;
      STACKTOP = sp;return ($119|0);
     }
     $98 = HEAP32[3680>>2]|0;
     $99 = HEAP32[3712>>2]|0;
     $100 = $99<<4;
     _memmove((72032|0),($98|0),($100|0))|0;
     $101 = HEAP32[3712>>2]|0;
     HEAP32[312032>>2] = $101;
     $102 = HEAP32[3680>>2]|0;
     $103 = HEAP32[3688>>2]|0;
     $104 = HEAP32[3720>>2]|0;
     $105 = $104<<4;
     _memmove(($102|0),($103|0),($105|0))|0;
     $106 = HEAP32[3720>>2]|0;
     HEAP32[3712>>2] = $106;
     $107 = $1;
     $108 = $2;
     $109 = HEAP32[3680>>2]|0;
     $110 = HEAP32[3712>>2]|0;
     $111 = (_poly_div($107,$108,$109,$110,$5)|0);
     $112 = ($111|0)!=(2);
     if (!($112)) {
      $113 = HEAP32[3688>>2]|0;
      $114 = HEAP32[312032>>2]|0;
      $115 = $114<<4;
      _memmove(($113|0),(72032|0),($115|0))|0;
      $116 = HEAP32[312032>>2]|0;
      HEAP32[3720>>2] = $116;
      break;
     }
     $0 = 0;
     $119 = $0;
     STACKTOP = sp;return ($119|0);
    } else {
     HEAP32[3720>>2] = 1;
     $117 = HEAP32[3688>>2]|0;
     ;HEAP32[$117+0>>2]=HEAP32[3752+0>>2]|0;HEAP32[$117+4>>2]=HEAP32[3752+4>>2]|0;HEAP32[$117+8>>2]=HEAP32[3752+8>>2]|0;HEAP32[$117+12>>2]=HEAP32[3752+12>>2]|0;
    }
   } while(0);
   $118 = $count;
   $0 = $118;
   $119 = $0;
   STACKTOP = sp;return ($119|0);
  }
 }
 $0 = 0;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _is_integer_var($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $strncmpfunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = HEAP32[24>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $strncmpfunc = 86;
 } else {
  $strncmpfunc = 45;
 }
 $4 = $1;
 $5 = (_var_name($4)|0);
 $cp = $5;
 $6 = $cp;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $strncmpfunc;
  $9 = $cp;
  $10 = (FUNCTION_TABLE_iiii[$8 & 127]($9,312040,7)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $0 = 1;
   $12 = $0;
   STACKTOP = sp;return ($12|0);
  }
 }
 $0 = 0;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _is_integer_expr($p1,$n) {
 $p1 = $p1|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 16;
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  if ((($9|0) == 0)) {
   $16 = $i;
   $17 = $1;
   $18 = (($17) + ($16<<4)|0);
   $19 = (($18) + 8|0);
   $20 = +HEAPF64[$19>>3];
   $21 = (+_fmod((+$20),1.0));
   $22 = $21 != 0.0;
   if ($22) {
    label = 8;
    break;
   }
  } else if ((($9|0) == 1)) {
   $23 = $i;
   $24 = $1;
   $25 = (($24) + ($23<<4)|0);
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (Math_abs(($27|0))|0);
   $v = $28;
   $29 = $v;
   $30 = (_is_integer_var($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $32 = $v;
    $33 = $32 & 16383;
    $34 = ($33|0)!=(4);
    if ($34) {
     label = 12;
     break;
    }
   }
  } else if ((($9|0) == 2)) {
   $10 = $i;
   $11 = $1;
   $12 = (($11) + ($10<<4)|0);
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(5);
   if ($15) {
    label = 5;
    break;
   }
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 16) {
  $0 = 1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return 0|0;
}
function _mod_simp($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 $4 = (_mod_recurse($2,$3,0,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _mod_recurse($equation,$np,$loc,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $diff_sign = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $i4 = 0, $i5 = 0, $j = 0, $k = 0, $last_op2 = 0, $len1 = 0, $len2 = 0, $len3 = 0;
 var $modified = 0, $op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff_sign = sp;
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $modified = 0;
 $5 = $3;
 $i = $5;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if ($9) {
   $10 = $i;
   $11 = $1;
   $12 = (($11) + ($10<<4)|0);
   $13 = (($12) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $4;
   $16 = ($14|0)>=($15|0);
   $501 = $16;
  } else {
   $501 = 0;
  }
  if (!($501)) {
   break;
  }
  $17 = $i;
  $18 = $1;
  $19 = (($18) + ($17<<4)|0);
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  $23 = ($21|0)>($22|0);
  if (!($23)) {
   $47 = $i;
   $48 = (($47) + 1)|0;
   $i = $48;
   continue;
  }
  $24 = $1;
  $25 = $2;
  $26 = $i;
  $27 = $4;
  $28 = (($27) + 1)|0;
  $29 = (_mod_recurse($24,$25,$26,$28)|0);
  $30 = $modified;
  $31 = $30 | $29;
  $modified = $31;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
  while(1) {
   $34 = $i;
   $35 = $2;
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)<($36|0);
   if ($37) {
    $38 = $i;
    $39 = $1;
    $40 = (($39) + ($38<<4)|0);
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $4;
    $44 = ($42|0)>($43|0);
    $502 = $44;
   } else {
    $502 = 0;
   }
   if (!($502)) {
    break;
   }
   $45 = $i;
   $46 = (($45) + 2)|0;
   $i = $46;
  }
 }
 $49 = $modified;
 $50 = ($49|0)!=(0);
 if ($50) {
  $0 = 1;
  $500 = $0;
  STACKTOP = sp;return ($500|0);
 }
 $51 = $3;
 $52 = (($51) + 1)|0;
 $i = $52;
 L23: while(1) {
  $53 = $i;
  $54 = $2;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)<($55|0);
  if ($56) {
   $57 = $i;
   $58 = $1;
   $59 = (($58) + ($57<<4)|0);
   $60 = (($59) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $4;
   $63 = ($61|0)>=($62|0);
   $503 = $63;
  } else {
   $503 = 0;
  }
  if (!($503)) {
   label = 126;
   break;
  }
  $64 = $i;
  $65 = $1;
  $66 = (($65) + ($64<<4)|0);
  $67 = (($66) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $4;
  $70 = ($68|0)==($69|0);
  if ($70) {
   $71 = $i;
   $72 = $1;
   $73 = (($72) + ($71<<4)|0);
   $74 = (($73) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(6);
   if ($76) {
    $77 = $i;
    $78 = (($77) + 2)|0;
    $k = $78;
    while(1) {
     $79 = $k;
     $80 = $2;
     $81 = HEAP32[$80>>2]|0;
     $82 = ($79|0)>=($81|0);
     if ($82) {
      break;
     }
     $83 = $k;
     $84 = $1;
     $85 = (($84) + ($83<<4)|0);
     $86 = (($85) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $4;
     $89 = ($87|0)<=($88|0);
     if ($89) {
      break;
     }
     $90 = $k;
     $91 = (($90) + 2)|0;
     $k = $91;
    }
    $92 = $k;
    $93 = $i;
    $94 = (($93) + 1)|0;
    $95 = (($92) - ($94))|0;
    $len1 = $95;
    $last_op2 = 0;
    $96 = $3;
    $j = $96;
    while(1) {
     $97 = $j;
     $98 = $2;
     $99 = HEAP32[$98>>2]|0;
     $100 = ($97|0)<($99|0);
     if ($100) {
      $101 = $j;
      $102 = $1;
      $103 = (($102) + ($101<<4)|0);
      $104 = (($103) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $4;
      $107 = ($105|0)>=($106|0);
      $504 = $107;
     } else {
      $504 = 0;
     }
     if (!($504)) {
      break;
     }
     $108 = $j;
     $109 = $1;
     $110 = (($109) + ($108<<4)|0);
     $111 = (($110) + 4|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $4;
     $114 = ($112|0)==($113|0);
     if ($114) {
      $115 = $j;
      $116 = $1;
      $117 = (($116) + ($115<<4)|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(2);
      if ($119) {
       $120 = $j;
       $121 = $1;
       $122 = (($121) + ($120<<4)|0);
       $123 = (($122) + 8|0);
       $124 = HEAP32[$123>>2]|0;
       $last_op2 = $124;
      } else {
       label = 36;
      }
     } else {
      label = 36;
     }
     do {
      if ((label|0) == 36) {
       label = 0;
       $125 = $last_op2;
       $126 = ($125|0)==(6);
       if ($126) {
        break;
       }
       $last_op2 = 6;
       $op = 0;
       $127 = $j;
       $128 = (($127) + 1)|0;
       $k = $128;
       $i1 = $128;
       while(1) {
        $129 = $k;
        $130 = $2;
        $131 = HEAP32[$130>>2]|0;
        $132 = ($129|0)<($131|0);
        if ($132) {
         $133 = $k;
         $134 = $1;
         $135 = (($134) + ($133<<4)|0);
         $136 = (($135) + 4|0);
         $137 = HEAP32[$136>>2]|0;
         $138 = $4;
         $139 = ($137|0)>($138|0);
         $505 = $139;
        } else {
         $505 = 0;
        }
        if (!($505)) {
         break;
        }
        $140 = $k;
        $141 = $1;
        $142 = (($141) + ($140<<4)|0);
        $143 = (($142) + 4|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = $4;
        $146 = (($145) + 1)|0;
        $147 = ($144|0)==($146|0);
        if ($147) {
         $148 = $k;
         $149 = $1;
         $150 = (($149) + ($148<<4)|0);
         $151 = (($150) + 8|0);
         $152 = HEAP32[$151>>2]|0;
         $op = $152;
         $153 = $k;
         $i1 = $153;
        }
        $154 = $k;
        $155 = (($154) + 2)|0;
        $k = $155;
       }
       $156 = $k;
       $157 = $j;
       $158 = (($156) - ($157))|0;
       $len2 = $158;
       $159 = $op;
       do {
        if ((($159|0) == 2) | (($159|0) == 1)) {
         $267 = $j;
         $268 = (($267) + 1)|0;
         $i1 = $268;
         $i2 = $268;
         $269 = $j;
         $270 = (($269) - 1)|0;
         $i3 = $270;
         while(1) {
          $271 = $i1;
          $272 = $k;
          $273 = ($271|0)>=($272|0);
          if ($273) {
           label = 73;
          } else {
           $274 = $i1;
           $275 = $1;
           $276 = (($275) + ($274<<4)|0);
           $277 = (($276) + 4|0);
           $278 = HEAP32[$277>>2]|0;
           $279 = $4;
           $280 = (($279) + 1)|0;
           $281 = ($278|0)==($280|0);
           if ($281) {
            label = 73;
           }
          }
          if ((label|0) == 73) {
           label = 0;
           while(1) {
            $282 = $i2;
            $283 = $i1;
            $284 = ($282|0)<($283|0);
            if (!($284)) {
             break;
            }
            $285 = $i2;
            $286 = $1;
            $287 = (($286) + ($285<<4)|0);
            $288 = (($287) + 4|0);
            $289 = HEAP32[$288>>2]|0;
            $290 = $4;
            $291 = (($290) + 2)|0;
            $292 = ($289|0)==($291|0);
            if ($292) {
             $293 = $i2;
             $294 = $1;
             $295 = (($294) + ($293<<4)|0);
             $296 = (($295) + 8|0);
             $297 = HEAP32[$296>>2]|0;
             do {
              if ((($297|0) == 6)) {
               $298 = $i1;
               $299 = $i2;
               $300 = (($299) + 1)|0;
               $301 = (($298) - ($300))|0;
               $len3 = $301;
               $302 = $i;
               $303 = (($302) + 1)|0;
               $304 = $1;
               $305 = (($304) + ($303<<4)|0);
               $306 = $len1;
               $307 = $i2;
               $308 = (($307) + 1)|0;
               $309 = $1;
               $310 = (($309) + ($308<<4)|0);
               $311 = $len3;
               $312 = (_se_compare($305,$306,$310,$311,$diff_sign)|0);
               $313 = ($312|0)!=(0);
               if ($313) {
                label = 78;
                break L23;
               }
              } else if ((($297|0) == 4)) {
               $330 = $i1;
               $331 = (($330) - 2)|0;
               $i2 = $331;
               $332 = $i3;
               $333 = (($332) + 1)|0;
               $334 = $1;
               $335 = (($334) + ($333<<4)|0);
               $336 = $i1;
               $337 = $i3;
               $338 = (($337) + 1)|0;
               $339 = (($336) - ($338))|0;
               $340 = (_is_integer_expr($335,$339)|0);
               $341 = ($340|0)!=(0);
               if (!($341)) {
                break;
               }
               $342 = $i3;
               $343 = (($342) + 2)|0;
               $i4 = $343;
               while(1) {
                $344 = $i4;
                $345 = $i1;
                $346 = ($344|0)<($345|0);
                if (!($346)) {
                 break;
                }
                $347 = $i4;
                $348 = $1;
                $349 = (($348) + ($347<<4)|0);
                $350 = (($349) + 4|0);
                $351 = HEAP32[$350>>2]|0;
                $352 = $4;
                $353 = (($352) + 3)|0;
                $354 = ($351|0)==($353|0);
                do {
                 if ($354) {
                  $355 = $i4;
                  $356 = $1;
                  $357 = (($356) + ($355<<4)|0);
                  $358 = (($357) + 8|0);
                  $359 = HEAP32[$358>>2]|0;
                  $360 = ($359|0)==(6);
                  if (!($360)) {
                   break;
                  }
                  $361 = $i4;
                  $362 = (($361) + 2)|0;
                  $i5 = $362;
                  while(1) {
                   $363 = $i5;
                   $364 = $i1;
                   $365 = ($363|0)<($364|0);
                   if ($365) {
                    $366 = $i5;
                    $367 = $1;
                    $368 = (($367) + ($366<<4)|0);
                    $369 = (($368) + 4|0);
                    $370 = HEAP32[$369>>2]|0;
                    $371 = $4;
                    $372 = (($371) + 3)|0;
                    $373 = ($370|0)>($372|0);
                    $506 = $373;
                   } else {
                    $506 = 0;
                   }
                   if (!($506)) {
                    break;
                   }
                   $374 = $i5;
                   $375 = (($374) + 2)|0;
                   $i5 = $375;
                  }
                  $376 = $i5;
                  $377 = $i4;
                  $378 = (($377) + 1)|0;
                  $379 = (($376) - ($378))|0;
                  $len3 = $379;
                  $380 = $i;
                  $381 = (($380) + 1)|0;
                  $382 = $1;
                  $383 = (($382) + ($381<<4)|0);
                  $384 = $len1;
                  $385 = $i4;
                  $386 = (($385) + 1)|0;
                  $387 = $1;
                  $388 = (($387) + ($386<<4)|0);
                  $389 = $len3;
                  $390 = (_se_compare($383,$384,$388,$389,$diff_sign)|0);
                  $391 = ($390|0)!=(0);
                  if ($391) {
                   label = 93;
                   break L23;
                  }
                 }
                } while(0);
                $408 = $i4;
                $409 = (($408) + 2)|0;
                $i4 = $409;
               }
              }
             } while(0);
            }
            $410 = $i2;
            $411 = (($410) + 2)|0;
            $i2 = $411;
           }
           $412 = $i1;
           $i3 = $412;
          }
          $413 = $i1;
          $414 = $k;
          $415 = ($413|0)>=($414|0);
          if ($415) {
           break;
          }
          $416 = $i1;
          $417 = (($416) + 2)|0;
          $i1 = $417;
         }
        } else if ((($159|0) == 4)) {
         $192 = $j;
         $193 = $1;
         $194 = (($193) + ($192<<4)|0);
         $195 = $len2;
         $196 = (_is_integer_expr($194,$195)|0);
         $197 = ($196|0)!=(0);
         if (!($197)) {
          break;
         }
         $198 = $j;
         $199 = (($198) + 1)|0;
         $i1 = $199;
         $i2 = $199;
         while(1) {
          $200 = $i1;
          $201 = $k;
          $202 = ($200|0)>=($201|0);
          if ($202) {
           label = 55;
          } else {
           $203 = $i1;
           $204 = $1;
           $205 = (($204) + ($203<<4)|0);
           $206 = (($205) + 4|0);
           $207 = HEAP32[$206>>2]|0;
           $208 = $4;
           $209 = (($208) + 1)|0;
           $210 = ($207|0)==($209|0);
           if ($210) {
            label = 55;
           }
          }
          if ((label|0) == 55) {
           label = 0;
           while(1) {
            $211 = $i2;
            $212 = $i1;
            $213 = ($211|0)<($212|0);
            if (!($213)) {
             break;
            }
            $214 = $i2;
            $215 = $1;
            $216 = (($215) + ($214<<4)|0);
            $217 = (($216) + 4|0);
            $218 = HEAP32[$217>>2]|0;
            $219 = $4;
            $220 = (($219) + 2)|0;
            $221 = ($218|0)==($220|0);
            do {
             if ($221) {
              $222 = $i2;
              $223 = $1;
              $224 = (($223) + ($222<<4)|0);
              $225 = (($224) + 8|0);
              $226 = HEAP32[$225>>2]|0;
              $227 = ($226|0)==(6);
              if (!($227)) {
               break;
              }
              $228 = $i1;
              $229 = $i2;
              $230 = (($229) + 1)|0;
              $231 = (($228) - ($230))|0;
              $len3 = $231;
              $232 = $i;
              $233 = (($232) + 1)|0;
              $234 = $1;
              $235 = (($234) + ($233<<4)|0);
              $236 = $len1;
              $237 = $i2;
              $238 = (($237) + 1)|0;
              $239 = $1;
              $240 = (($239) + ($238<<4)|0);
              $241 = $len3;
              $242 = (_se_compare($235,$236,$240,$241,$diff_sign)|0);
              $243 = ($242|0)!=(0);
              if ($243) {
               label = 60;
               break L23;
              }
             }
            } while(0);
            $260 = $i2;
            $261 = (($260) + 2)|0;
            $i2 = $261;
           }
          }
          $262 = $i1;
          $263 = $k;
          $264 = ($262|0)>=($263|0);
          if ($264) {
           break;
          }
          $265 = $i1;
          $266 = (($265) + 2)|0;
          $i1 = $266;
         }
        } else if ((($159|0) == 6)) {
         $160 = $k;
         $161 = $i1;
         $162 = (($161) + 1)|0;
         $163 = (($160) - ($162))|0;
         $len3 = $163;
         $164 = $i;
         $165 = (($164) + 1)|0;
         $166 = $1;
         $167 = (($166) + ($165<<4)|0);
         $168 = $len1;
         $169 = $i1;
         $170 = (($169) + 1)|0;
         $171 = $1;
         $172 = (($171) + ($170<<4)|0);
         $173 = $len3;
         $174 = (_se_compare($167,$168,$172,$173,$diff_sign)|0);
         $175 = ($174|0)!=(0);
         if ($175) {
          label = 48;
          break L23;
         }
        }
       } while(0);
       $418 = $j;
       $419 = $1;
       $420 = (($419) + ($418<<4)|0);
       $421 = $len2;
       $422 = $i;
       $423 = (($422) + 1)|0;
       $424 = $1;
       $425 = (($424) + ($423<<4)|0);
       $426 = $len1;
       $427 = (_poly_div($420,$421,$425,$426,0)|0);
       $428 = ($427|0)!=(0);
       if ($428) {
        $429 = HEAP32[3680>>2]|0;
        (_uf_pplus($429,3712)|0);
        $430 = HEAP32[3680>>2]|0;
        $431 = HEAP32[3712>>2]|0;
        $432 = (_is_integer_expr($430,$431)|0);
        $433 = ($432|0)!=(0);
        if ($433) {
         $434 = HEAP32[3720>>2]|0;
         $435 = $len2;
         $436 = ($434|0)<($435|0);
         if ($436) {
          label = 113;
          break L23;
         }
         $437 = HEAP32[3720>>2]|0;
         $438 = ($437|0)==(1);
         do {
          if ($438) {
           $439 = HEAP32[3688>>2]|0;
           $440 = HEAP32[$439>>2]|0;
           $441 = ($440|0)==(0);
           if (!($441)) {
            break;
           }
           $442 = HEAP32[3688>>2]|0;
           $443 = (($442) + 8|0);
           $444 = +HEAPF64[$443>>3];
           $445 = $444 == 0.0;
           if ($445) {
            label = 113;
            break L23;
           }
          }
         } while(0);
        }
       }
      }
     } while(0);
     $495 = $j;
     $496 = (($495) + 1)|0;
     $j = $496;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
  if ((label|0) == 22) {
   label = 0;
  }
  $497 = $i;
  $498 = (($497) + 2)|0;
  $i = $498;
 }
 if ((label|0) == 48) {
  $176 = $i1;
  $177 = $1;
  $178 = (($177) + ($176<<4)|0);
  $179 = $k;
  $180 = $1;
  $181 = (($180) + ($179<<4)|0);
  $182 = $2;
  $183 = HEAP32[$182>>2]|0;
  $184 = $k;
  $185 = (($183) - ($184))|0;
  $186 = $185<<4;
  _memmove(($178|0),($181|0),($186|0))|0;
  $187 = $len3;
  $188 = (($187) + 1)|0;
  $189 = $2;
  $190 = HEAP32[$189>>2]|0;
  $191 = (($190) - ($188))|0;
  HEAP32[$189>>2] = $191;
  $0 = 1;
  $500 = $0;
  STACKTOP = sp;return ($500|0);
 }
 else if ((label|0) == 60) {
  $244 = $i2;
  $245 = $1;
  $246 = (($245) + ($244<<4)|0);
  $247 = $i1;
  $248 = $1;
  $249 = (($248) + ($247<<4)|0);
  $250 = $2;
  $251 = HEAP32[$250>>2]|0;
  $252 = $i1;
  $253 = (($251) - ($252))|0;
  $254 = $253<<4;
  _memmove(($246|0),($249|0),($254|0))|0;
  $255 = $len3;
  $256 = (($255) + 1)|0;
  $257 = $2;
  $258 = HEAP32[$257>>2]|0;
  $259 = (($258) - ($256))|0;
  HEAP32[$257>>2] = $259;
  $0 = 1;
  $500 = $0;
  STACKTOP = sp;return ($500|0);
 }
 else if ((label|0) == 78) {
  $314 = $i2;
  $315 = $1;
  $316 = (($315) + ($314<<4)|0);
  $317 = $i1;
  $318 = $1;
  $319 = (($318) + ($317<<4)|0);
  $320 = $2;
  $321 = HEAP32[$320>>2]|0;
  $322 = $i1;
  $323 = (($321) - ($322))|0;
  $324 = $323<<4;
  _memmove(($316|0),($319|0),($324|0))|0;
  $325 = $len3;
  $326 = (($325) + 1)|0;
  $327 = $2;
  $328 = HEAP32[$327>>2]|0;
  $329 = (($328) - ($326))|0;
  HEAP32[$327>>2] = $329;
  $0 = 1;
  $500 = $0;
  STACKTOP = sp;return ($500|0);
 }
 else if ((label|0) == 93) {
  $392 = $i4;
  $393 = $1;
  $394 = (($393) + ($392<<4)|0);
  $395 = $i5;
  $396 = $1;
  $397 = (($396) + ($395<<4)|0);
  $398 = $2;
  $399 = HEAP32[$398>>2]|0;
  $400 = $i5;
  $401 = (($399) - ($400))|0;
  $402 = $401<<4;
  _memmove(($394|0),($397|0),($402|0))|0;
  $403 = $len3;
  $404 = (($403) + 1)|0;
  $405 = $2;
  $406 = HEAP32[$405>>2]|0;
  $407 = (($406) - ($404))|0;
  HEAP32[$405>>2] = $407;
  $0 = 1;
  $500 = $0;
  STACKTOP = sp;return ($500|0);
 }
 else if ((label|0) == 113) {
  $446 = $2;
  $447 = HEAP32[$446>>2]|0;
  $448 = HEAP32[3720>>2]|0;
  $449 = $len2;
  $450 = (($448) - ($449))|0;
  $451 = (($447) + ($450))|0;
  $452 = HEAP32[8>>2]|0;
  $453 = ($451|0)>($452|0);
  if ($453) {
   _error_huge();
  }
  $k = 0;
  while(1) {
   $454 = $k;
   $455 = HEAP32[3720>>2]|0;
   $456 = ($454|0)<($455|0);
   if (!($456)) {
    break;
   }
   $457 = $4;
   $458 = $k;
   $459 = HEAP32[3688>>2]|0;
   $460 = (($459) + ($458<<4)|0);
   $461 = (($460) + 4|0);
   $462 = HEAP32[$461>>2]|0;
   $463 = (($462) + ($457))|0;
   HEAP32[$461>>2] = $463;
   $464 = $k;
   $465 = (($464) + 1)|0;
   $k = $465;
  }
  $466 = $j;
  $467 = HEAP32[3720>>2]|0;
  $468 = (($466) + ($467))|0;
  $469 = $1;
  $470 = (($469) + ($468<<4)|0);
  $471 = $j;
  $472 = $len2;
  $473 = (($471) + ($472))|0;
  $474 = $1;
  $475 = (($474) + ($473<<4)|0);
  $476 = $2;
  $477 = HEAP32[$476>>2]|0;
  $478 = $j;
  $479 = $len2;
  $480 = (($478) + ($479))|0;
  $481 = (($477) - ($480))|0;
  $482 = $481<<4;
  _memmove(($470|0),($475|0),($482|0))|0;
  $483 = HEAP32[3720>>2]|0;
  $484 = $len2;
  $485 = (($483) - ($484))|0;
  $486 = $2;
  $487 = HEAP32[$486>>2]|0;
  $488 = (($487) + ($485))|0;
  HEAP32[$486>>2] = $488;
  $489 = $j;
  $490 = $1;
  $491 = (($490) + ($489<<4)|0);
  $492 = HEAP32[3688>>2]|0;
  $493 = HEAP32[3720>>2]|0;
  $494 = $493<<4;
  _memmove(($491|0),($492|0),($494|0))|0;
  $0 = 1;
  $500 = $0;
  STACKTOP = sp;return ($500|0);
 }
 else if ((label|0) == 126) {
  $499 = $modified;
  $0 = $499;
  $500 = $0;
  STACKTOP = sp;return ($500|0);
 }
 return 0|0;
}
function _poly_gcd_simp($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $0;
 $3 = $1;
 $4 = (_polydiv_recurse($2,$3,0,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _polydiv_recurse($equation,$np,$loc,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $last_op2 = 0;
 var $len1 = 0, $len2 = 0, $modified = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $loc;
 $3 = $level;
 $modified = 0;
 $4 = $2;
 $i = $4;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if ($8) {
   $9 = $i;
   $10 = $0;
   $11 = (($10) + ($9<<4)|0);
   $12 = (($11) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $3;
   $15 = ($13|0)>=($14|0);
   $292 = $15;
  } else {
   $292 = 0;
  }
  if (!($292)) {
   break;
  }
  $16 = $i;
  $17 = $0;
  $18 = (($17) + ($16<<4)|0);
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $3;
  $22 = ($20|0)>($21|0);
  if (!($22)) {
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
   continue;
  }
  $23 = $0;
  $24 = $1;
  $25 = $i;
  $26 = $3;
  $27 = (($26) + 1)|0;
  $28 = (_polydiv_recurse($23,$24,$25,$27)|0);
  $29 = $modified;
  $30 = $29 | $28;
  $modified = $30;
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
  while(1) {
   $33 = $i;
   $34 = $1;
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)<($35|0);
   if ($36) {
    $37 = $i;
    $38 = $0;
    $39 = (($38) + ($37<<4)|0);
    $40 = (($39) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $3;
    $43 = ($41|0)>($42|0);
    $293 = $43;
   } else {
    $293 = 0;
   }
   if (!($293)) {
    break;
   }
   $44 = $i;
   $45 = (($44) + 2)|0;
   $i = $45;
  }
 }
 L19: while(1) {
  $48 = $2;
  $49 = (($48) + 1)|0;
  $i = $49;
  L21: while(1) {
   $50 = $i;
   $51 = $1;
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)<($52|0);
   if ($53) {
    $54 = $i;
    $55 = $0;
    $56 = (($55) + ($54<<4)|0);
    $57 = (($56) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $3;
    $60 = ($58|0)>=($59|0);
    $294 = $60;
   } else {
    $294 = 0;
   }
   if (!($294)) {
    break L19;
   }
   $61 = $i;
   $62 = $0;
   $63 = (($62) + ($61<<4)|0);
   $64 = (($63) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $3;
   $67 = ($65|0)==($66|0);
   if ($67) {
    $68 = $i;
    $69 = $0;
    $70 = (($69) + ($68<<4)|0);
    $71 = (($70) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(5);
    if ($73) {
     $74 = $i;
     $75 = (($74) + 2)|0;
     $k = $75;
     while(1) {
      $76 = $k;
      $77 = $1;
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)>=($78|0);
      if ($79) {
       break;
      }
      $80 = $k;
      $81 = $0;
      $82 = (($81) + ($80<<4)|0);
      $83 = (($82) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $3;
      $86 = ($84|0)<=($85|0);
      if ($86) {
       break;
      }
      $87 = $k;
      $88 = (($87) + 2)|0;
      $k = $88;
     }
     $89 = $k;
     $90 = $i;
     $91 = (($90) + 1)|0;
     $92 = (($89) - ($91))|0;
     $len1 = $92;
     $last_op2 = 0;
     $93 = $2;
     $j = $93;
     while(1) {
      $94 = $j;
      $95 = $1;
      $96 = HEAP32[$95>>2]|0;
      $97 = ($94|0)<($96|0);
      if ($97) {
       $98 = $j;
       $99 = $0;
       $100 = (($99) + ($98<<4)|0);
       $101 = (($100) + 4|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $3;
       $104 = ($102|0)>=($103|0);
       $295 = $104;
      } else {
       $295 = 0;
      }
      if (!($295)) {
       break;
      }
      $105 = $j;
      $106 = $0;
      $107 = (($106) + ($105<<4)|0);
      $108 = (($107) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = $3;
      $111 = ($109|0)==($110|0);
      if ($111) {
       $112 = $j;
       $113 = $0;
       $114 = (($113) + ($112<<4)|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($115|0)==(2);
       if ($116) {
        $117 = $j;
        $118 = $0;
        $119 = (($118) + ($117<<4)|0);
        $120 = (($119) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $last_op2 = $121;
       } else {
        label = 34;
       }
      } else {
       label = 34;
      }
      do {
       if ((label|0) == 34) {
        label = 0;
        $122 = $last_op2;
        if ((($122|0) == 5)) {
         break;
        } else if ((($122|0) == 4) | (($122|0) == 0)) {
        } else {
         _error_bug(792064);
        }
        $last_op2 = 5;
        $123 = $j;
        $124 = (($123) + 1)|0;
        $k = $124;
        while(1) {
         $125 = $k;
         $126 = $1;
         $127 = HEAP32[$126>>2]|0;
         $128 = ($125|0)>=($127|0);
         if ($128) {
          break;
         }
         $129 = $k;
         $130 = $0;
         $131 = (($130) + ($129<<4)|0);
         $132 = (($131) + 4|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = $3;
         $135 = ($133|0)<=($134|0);
         if ($135) {
          break;
         }
         $136 = $k;
         $137 = (($136) + 2)|0;
         $k = $137;
        }
        $138 = $k;
        $139 = $j;
        $140 = (($138) - ($139))|0;
        $len2 = $140;
        $141 = $i;
        $142 = (($141) + 1)|0;
        $143 = $0;
        $144 = (($143) + ($142<<4)|0);
        $145 = $len1;
        $146 = $j;
        $147 = $0;
        $148 = (($147) + ($146<<4)|0);
        $149 = $len2;
        $150 = (_poly2_gcd($144,$145,$148,$149,0,1)|0);
        $rv = $150;
        $151 = ($150|0)>(0);
        if ($151) {
         label = 45;
         break L21;
        }
        $266 = $rv;
        $267 = ($266|0)==(0);
        if ($267) {
         $268 = $j;
         $269 = $0;
         $270 = (($269) + ($268<<4)|0);
         $271 = $len2;
         $272 = $i;
         $273 = (($272) + 1)|0;
         $274 = $0;
         $275 = (($274) + ($273<<4)|0);
         $276 = $len1;
         $277 = (_poly2_gcd($270,$271,$275,$276,0,1)|0);
         $278 = ($277|0)>(0);
         if ($278) {
          label = 62;
          break L21;
         }
        }
       }
      } while(0);
      $287 = $j;
      $288 = (($287) + 1)|0;
      $j = $288;
     }
    }
   }
   $289 = $i;
   $290 = (($289) + 2)|0;
   $i = $290;
  }
  if ((label|0) == 45) {
   label = 0;
  }
  else if ((label|0) == 62) {
   label = 0;
   $279 = $j;
   $280 = (($279) - 1)|0;
   $k = $280;
   $281 = $i;
   $282 = (($281) + 1)|0;
   $j = $282;
   $283 = $k;
   $i = $283;
   $284 = $len1;
   $k = $284;
   $285 = $len2;
   $len1 = $285;
   $286 = $k;
   $len2 = $286;
  }
  $k = 0;
  while(1) {
   $152 = $k;
   $153 = HEAP32[3712>>2]|0;
   $154 = ($152|0)<($153|0);
   if (!($154)) {
    break;
   }
   $155 = $3;
   $156 = $k;
   $157 = HEAP32[3680>>2]|0;
   $158 = (($157) + ($156<<4)|0);
   $159 = (($158) + 4|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($155))|0;
   HEAP32[$159>>2] = $161;
   $162 = $k;
   $163 = (($162) + 1)|0;
   $k = $163;
  }
  $k = 0;
  while(1) {
   $164 = $k;
   $165 = HEAP32[3720>>2]|0;
   $166 = ($164|0)<($165|0);
   if (!($166)) {
    break;
   }
   $167 = $3;
   $168 = $k;
   $169 = HEAP32[3688>>2]|0;
   $170 = (($169) + ($168<<4)|0);
   $171 = (($170) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + ($167))|0;
   HEAP32[$171>>2] = $173;
   $174 = $k;
   $175 = (($174) + 1)|0;
   $k = $175;
  }
  $176 = $1;
  $177 = HEAP32[$176>>2]|0;
  $178 = HEAP32[3720>>2]|0;
  $179 = $len2;
  $180 = (($178) - ($179))|0;
  $181 = (($177) + ($180))|0;
  $182 = HEAP32[8>>2]|0;
  $183 = ($181|0)>($182|0);
  if ($183) {
   label = 56;
  } else {
   $184 = $1;
   $185 = HEAP32[$184>>2]|0;
   $186 = HEAP32[3720>>2]|0;
   $187 = $len2;
   $188 = (($186) - ($187))|0;
   $189 = (($185) + ($188))|0;
   $190 = HEAP32[3712>>2]|0;
   $191 = $len1;
   $192 = (($190) - ($191))|0;
   $193 = (($189) + ($192))|0;
   $194 = HEAP32[8>>2]|0;
   $195 = ($193|0)>($194|0);
   if ($195) {
    label = 56;
   }
  }
  if ((label|0) == 56) {
   label = 0;
   _error_huge();
  }
  $196 = $j;
  $197 = HEAP32[3720>>2]|0;
  $198 = (($196) + ($197))|0;
  $199 = $0;
  $200 = (($199) + ($198<<4)|0);
  $201 = $j;
  $202 = $len2;
  $203 = (($201) + ($202))|0;
  $204 = $0;
  $205 = (($204) + ($203<<4)|0);
  $206 = $1;
  $207 = HEAP32[$206>>2]|0;
  $208 = $j;
  $209 = $len2;
  $210 = (($208) + ($209))|0;
  $211 = (($207) - ($210))|0;
  $212 = $211<<4;
  _memmove(($200|0),($205|0),($212|0))|0;
  $213 = HEAP32[3720>>2]|0;
  $214 = $len2;
  $215 = (($213) - ($214))|0;
  $216 = $1;
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + ($215))|0;
  HEAP32[$216>>2] = $218;
  $219 = $i;
  $220 = $j;
  $221 = ($219|0)>($220|0);
  if ($221) {
   $222 = HEAP32[3720>>2]|0;
   $223 = $len2;
   $224 = (($222) - ($223))|0;
   $225 = $i;
   $226 = (($225) + ($224))|0;
   $i = $226;
  }
  $227 = $j;
  $228 = $0;
  $229 = (($228) + ($227<<4)|0);
  $230 = HEAP32[3688>>2]|0;
  $231 = HEAP32[3720>>2]|0;
  $232 = $231<<4;
  _memmove(($229|0),($230|0),($232|0))|0;
  $233 = $i;
  $234 = HEAP32[3712>>2]|0;
  $235 = (($233) + ($234))|0;
  $236 = (($235) + 1)|0;
  $237 = $0;
  $238 = (($237) + ($236<<4)|0);
  $239 = $i;
  $240 = (($239) + 1)|0;
  $241 = $len1;
  $242 = (($240) + ($241))|0;
  $243 = $0;
  $244 = (($243) + ($242<<4)|0);
  $245 = $1;
  $246 = HEAP32[$245>>2]|0;
  $247 = $i;
  $248 = (($247) + 1)|0;
  $249 = $len1;
  $250 = (($248) + ($249))|0;
  $251 = (($246) - ($250))|0;
  $252 = $251<<4;
  _memmove(($238|0),($244|0),($252|0))|0;
  $253 = HEAP32[3712>>2]|0;
  $254 = $len1;
  $255 = (($253) - ($254))|0;
  $256 = $1;
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + ($255))|0;
  HEAP32[$256>>2] = $258;
  $259 = $i;
  $260 = (($259) + 1)|0;
  $261 = $0;
  $262 = (($261) + ($260<<4)|0);
  $263 = HEAP32[3680>>2]|0;
  $264 = HEAP32[3712>>2]|0;
  $265 = $264<<4;
  _memmove(($262|0),($263|0),($265|0))|0;
  $modified = 1;
 }
 $291 = $modified;
 STACKTOP = sp;return ($291|0);
}
function _div_remainder($equation,$np,$poly_flag,$quick_flag) {
 $equation = $equation|0;
 $np = $np|0;
 $poly_flag = $poly_flag|0;
 $quick_flag = $quick_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $poly_flag;
 $3 = $quick_flag;
 $rv = 0;
 $4 = $3;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = $1;
  _group_proc($6,$7);
 }
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = (_pdiv_recurse($8,$9,0,1,$10)|0);
 $rv = $11;
 $12 = $3;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $16 = $rv;
  STACKTOP = sp;return ($16|0);
 }
 $14 = $0;
 $15 = $1;
 _organize($14,$15);
 $16 = $rv;
 STACKTOP = sp;return ($16|0);
}
function _pdiv_recurse($equation,$np,$loc,$level,$code) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flag = 0, $i = 0, $j = 0, $k = 0, $last_op2 = 0, $len1 = 0, $len2 = 0, $modified = 0, $op = 0, $op2 = 0;
 var $power_flag = 0, $real_len1 = 0, $rv = 0, $zero_remainder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $5 = $code;
 $modified = 0;
 $rv = 0;
 $6 = $3;
 $7 = (($6) + 1)|0;
 $i = $7;
 L1: while(1) {
  $8 = $i;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8|0)<($10|0);
  if ($11) {
   $12 = $i;
   $13 = $1;
   $14 = (($13) + ($12<<4)|0);
   $15 = (($14) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $4;
   $18 = ($16|0)>=($17|0);
   $583 = $18;
  } else {
   $583 = 0;
  }
  if (!($583)) {
   label = 123;
   break;
  }
  $19 = $i;
  $20 = $1;
  $21 = (($20) + ($19<<4)|0);
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = ($23|0)==($24|0);
  if ($25) {
   $26 = $i;
   $27 = $1;
   $28 = (($27) + ($26<<4)|0);
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(5);
   if ($31) {
    $32 = $i;
    $33 = (($32) + 2)|0;
    $k = $33;
    while(1) {
     $34 = $k;
     $35 = $2;
     $36 = HEAP32[$35>>2]|0;
     $37 = ($34|0)>=($36|0);
     if ($37) {
      break;
     }
     $38 = $k;
     $39 = $1;
     $40 = (($39) + ($38<<4)|0);
     $41 = (($40) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $4;
     $44 = ($42|0)<=($43|0);
     if ($44) {
      break;
     }
     $45 = $k;
     $46 = (($45) + 2)|0;
     $k = $46;
    }
    $47 = $k;
    $48 = $i;
    $49 = (($48) + 1)|0;
    $50 = (($47) - ($49))|0;
    $real_len1 = $50;
    $len1 = $50;
    $last_op2 = 0;
    $51 = $3;
    $j = $51;
    while(1) {
     $52 = $j;
     $53 = $2;
     $54 = HEAP32[$53>>2]|0;
     $55 = ($52|0)<($54|0);
     if ($55) {
      $56 = $j;
      $57 = $1;
      $58 = (($57) + ($56<<4)|0);
      $59 = (($58) + 4|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = $4;
      $62 = ($60|0)>=($61|0);
      $584 = $62;
     } else {
      $584 = 0;
     }
     if (!($584)) {
      break;
     }
     $63 = $j;
     $64 = $1;
     $65 = (($64) + ($63<<4)|0);
     $66 = (($65) + 4|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $4;
     $69 = ($67|0)==($68|0);
     if ($69) {
      $70 = $j;
      $71 = $1;
      $72 = (($71) + ($70<<4)|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)==(2);
      if ($74) {
       $75 = $j;
       $76 = $1;
       $77 = (($76) + ($75<<4)|0);
       $78 = (($77) + 8|0);
       $79 = HEAP32[$78>>2]|0;
       $last_op2 = $79;
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
     do {
      if ((label|0) == 21) {
       label = 0;
       $80 = $last_op2;
       $81 = ($80|0)==(5);
       if ($81) {
        break;
       }
       $last_op2 = 5;
       $op = 0;
       $82 = $j;
       $83 = (($82) + 1)|0;
       $k = $83;
       while(1) {
        $84 = $k;
        $85 = $2;
        $86 = HEAP32[$85>>2]|0;
        $87 = ($84|0)<($86|0);
        if ($87) {
         $88 = $k;
         $89 = $1;
         $90 = (($89) + ($88<<4)|0);
         $91 = (($90) + 4|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = $4;
         $94 = ($92|0)>($93|0);
         $585 = $94;
        } else {
         $585 = 0;
        }
        if (!($585)) {
         break;
        }
        $95 = $k;
        $96 = $1;
        $97 = (($96) + ($95<<4)|0);
        $98 = (($97) + 4|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = $4;
        $101 = (($100) + 1)|0;
        $102 = ($99|0)==($101|0);
        if ($102) {
         $103 = $k;
         $104 = $1;
         $105 = (($104) + ($103<<4)|0);
         $106 = (($105) + 8|0);
         $107 = HEAP32[$106>>2]|0;
         $op = $107;
        }
        $108 = $k;
        $109 = (($108) + 2)|0;
        $k = $109;
       }
       $110 = $op;
       $111 = ($110|0)!=(1);
       if ($111) {
        $112 = $op;
        $113 = ($112|0)!=(2);
        if ($113) {
         break;
        }
       }
       $114 = $k;
       $115 = $j;
       $116 = (($114) - ($115))|0;
       $len2 = $116;
       $117 = $5;
       $flag = $117;
       $power_flag = 0;
       $op = 0;
       $op2 = 0;
       $118 = $i;
       $119 = (($118) + 2)|0;
       $k = $119;
       while(1) {
        $120 = $k;
        $121 = $2;
        $122 = HEAP32[$121>>2]|0;
        $123 = ($120|0)<($122|0);
        if ($123) {
         $124 = $k;
         $125 = $1;
         $126 = (($125) + ($124<<4)|0);
         $127 = (($126) + 4|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = $4;
         $130 = ($128|0)>($129|0);
         $586 = $130;
        } else {
         $586 = 0;
        }
        if (!($586)) {
         break;
        }
        $131 = $k;
        $132 = $1;
        $133 = (($132) + ($131<<4)|0);
        $134 = (($133) + 4|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = $4;
        $137 = (($136) + 3)|0;
        $138 = ($135|0)==($137|0);
        if ($138) {
         $139 = $k;
         $140 = $1;
         $141 = (($140) + ($139<<4)|0);
         $142 = (($141) + 8|0);
         $143 = HEAP32[$142>>2]|0;
         if ((($143|0) == 2) | (($143|0) == 1)) {
          $op2 = 1;
         }
        } else {
         $144 = $k;
         $145 = $1;
         $146 = (($145) + ($144<<4)|0);
         $147 = (($146) + 4|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = $4;
         $150 = (($149) + 2)|0;
         $151 = ($148|0)==($150|0);
         if ($151) {
          $152 = $k;
          $153 = $1;
          $154 = (($153) + ($152<<4)|0);
          $155 = (($154) + 8|0);
          $156 = HEAP32[$155>>2]|0;
          $op = $156;
         } else {
          $157 = $k;
          $158 = $1;
          $159 = (($158) + ($157<<4)|0);
          $160 = (($159) + 4|0);
          $161 = HEAP32[$160>>2]|0;
          $162 = $4;
          $163 = (($162) + 1)|0;
          $164 = ($161|0)==($163|0);
          if ($164) {
           label = 45;
           break;
          }
         }
        }
        $183 = $k;
        $184 = (($183) + 2)|0;
        $k = $184;
       }
       if ((label|0) == 45) {
        label = 0;
        $165 = $k;
        $166 = $1;
        $167 = (($166) + ($165<<4)|0);
        $168 = (($167) + 8|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = ($169|0)==(8);
        do {
         if ($170) {
          $171 = $op;
          $172 = ($171|0)==(1);
          if (!($172)) {
           $173 = $op;
           $174 = ($173|0)==(2);
           if (!($174)) {
            $175 = $op;
            $176 = ($175|0)==(4);
            if (!($176)) {
             break;
            }
            $177 = $op2;
            $178 = ($177|0)==(1);
            if (!($178)) {
             break;
            }
           }
          }
          $power_flag = 1;
          $179 = $k;
          $180 = $i;
          $181 = (($180) + 1)|0;
          $182 = (($179) - ($181))|0;
          $len1 = $182;
         }
        } while(0);
       }
       while(1) {
        $185 = $power_flag;
        $186 = ($185|0)!=(0);
        if (!($186)) {
         $187 = $real_len1;
         $len1 = $187;
        }
        $188 = $flag;
        $189 = ($188|0)!=(0);
        if ($189) {
         label = 61;
        } else {
         $190 = $power_flag;
         $191 = ($190|0)!=(0);
         if ($191) {
          label = 61;
         } else {
          $202 = $j;
          $203 = $1;
          $204 = (($203) + ($202<<4)|0);
          $205 = $len2;
          $206 = $i;
          $207 = (($206) + 1)|0;
          $208 = $1;
          $209 = (($208) + ($207<<4)|0);
          $210 = $len1;
          $211 = (_smart_div($204,$205,$209,$210)|0);
          $rv = $211;
         }
        }
        if ((label|0) == 61) {
         label = 0;
         $192 = $j;
         $193 = $1;
         $194 = (($193) + ($192<<4)|0);
         $195 = $len2;
         $196 = $i;
         $197 = (($196) + 1)|0;
         $198 = $1;
         $199 = (($198) + ($197<<4)|0);
         $200 = $len1;
         $201 = (_poly_div($194,$195,$199,$200,0)|0);
         $rv = $201;
        }
        $212 = $rv;
        $213 = ($212|0)>(0);
        if ($213) {
         $214 = HEAP32[3720>>2]|0;
         $215 = ($214|0)==(1);
         do {
          if ($215) {
           $216 = HEAP32[3688>>2]|0;
           $217 = HEAP32[$216>>2]|0;
           $218 = ($217|0)==(0);
           if (!($218)) {
            $587 = 0;
            break;
           }
           $219 = HEAP32[3688>>2]|0;
           $220 = (($219) + 8|0);
           $221 = +HEAPF64[$220>>3];
           $222 = $221 == 0.0;
           $587 = $222;
          } else {
           $587 = 0;
          }
         } while(0);
         $224 = $587;
        } else {
         $224 = 0;
        }
        $223 = $224&1;
        $zero_remainder = $223;
        $225 = $power_flag;
        $226 = ($225|0)!=(0);
        if ($226) {
         $227 = $zero_remainder;
         $228 = ($227|0)!=(0);
         if (!($228)) {
          $rv = 0;
         }
        }
        $229 = $rv;
        $230 = ($229|0)>(0);
        if ($230) {
         $231 = HEAP32[3712>>2]|0;
         $232 = (($231) + 2)|0;
         $233 = HEAP32[3720>>2]|0;
         $234 = (($232) + ($233))|0;
         $235 = $len1;
         $236 = (($234) + ($235))|0;
         $237 = HEAP32[8>>2]|0;
         $238 = ($236|0)>($237|0);
         if ($238) {
          _error_huge();
         }
         $k = 0;
         while(1) {
          $239 = $k;
          $240 = HEAP32[3712>>2]|0;
          $241 = ($239|0)<($240|0);
          if (!($241)) {
           break;
          }
          $242 = $k;
          $243 = HEAP32[3680>>2]|0;
          $244 = (($243) + ($242<<4)|0);
          $245 = (($244) + 4|0);
          $246 = HEAP32[$245>>2]|0;
          $247 = (($246) + 1)|0;
          HEAP32[$245>>2] = $247;
          $248 = $k;
          $249 = (($248) + 1)|0;
          $k = $249;
         }
         $250 = HEAP32[3712>>2]|0;
         $251 = HEAP32[3680>>2]|0;
         $252 = (($251) + ($250<<4)|0);
         $253 = (($252) + 4|0);
         HEAP32[$253>>2] = 1;
         $254 = HEAP32[3712>>2]|0;
         $255 = HEAP32[3680>>2]|0;
         $256 = (($255) + ($254<<4)|0);
         HEAP32[$256>>2] = 2;
         $257 = HEAP32[3712>>2]|0;
         $258 = HEAP32[3680>>2]|0;
         $259 = (($258) + ($257<<4)|0);
         $260 = (($259) + 8|0);
         HEAP32[$260>>2] = 1;
         $261 = HEAP32[3712>>2]|0;
         $262 = (($261) + 1)|0;
         HEAP32[3712>>2] = $262;
         $k = 0;
         while(1) {
          $263 = $k;
          $264 = HEAP32[3720>>2]|0;
          $265 = ($263|0)<($264|0);
          if (!($265)) {
           break;
          }
          $266 = $k;
          $267 = HEAP32[3688>>2]|0;
          $268 = (($267) + ($266<<4)|0);
          $269 = (($268) + 4|0);
          $270 = HEAP32[$269>>2]|0;
          $271 = (($270) + 2)|0;
          HEAP32[$269>>2] = $271;
          $272 = $k;
          $273 = (($272) + 1)|0;
          $k = $273;
         }
         $274 = HEAP32[3712>>2]|0;
         $275 = HEAP32[3680>>2]|0;
         $276 = (($275) + ($274<<4)|0);
         $277 = HEAP32[3688>>2]|0;
         $278 = HEAP32[3720>>2]|0;
         $279 = $278<<4;
         _memmove(($276|0),($277|0),($279|0))|0;
         $280 = HEAP32[3720>>2]|0;
         $281 = HEAP32[3712>>2]|0;
         $282 = (($281) + ($280))|0;
         HEAP32[3712>>2] = $282;
         $283 = HEAP32[3712>>2]|0;
         $284 = HEAP32[3680>>2]|0;
         $285 = (($284) + ($283<<4)|0);
         $286 = (($285) + 4|0);
         HEAP32[$286>>2] = 2;
         $287 = HEAP32[3712>>2]|0;
         $288 = HEAP32[3680>>2]|0;
         $289 = (($288) + ($287<<4)|0);
         HEAP32[$289>>2] = 2;
         $290 = HEAP32[3712>>2]|0;
         $291 = HEAP32[3680>>2]|0;
         $292 = (($291) + ($290<<4)|0);
         $293 = (($292) + 8|0);
         HEAP32[$293>>2] = 5;
         $294 = HEAP32[3712>>2]|0;
         $295 = (($294) + 1)|0;
         HEAP32[3712>>2] = $295;
         $296 = HEAP32[3712>>2]|0;
         $k = $296;
         $297 = HEAP32[3712>>2]|0;
         $298 = HEAP32[3680>>2]|0;
         $299 = (($298) + ($297<<4)|0);
         $300 = $i;
         $301 = (($300) + 1)|0;
         $302 = $1;
         $303 = (($302) + ($301<<4)|0);
         $304 = $len1;
         $305 = $304<<4;
         _memmove(($299|0),($303|0),($305|0))|0;
         $306 = $len1;
         $307 = HEAP32[3712>>2]|0;
         $308 = (($307) + ($306))|0;
         HEAP32[3712>>2] = $308;
         while(1) {
          $309 = $k;
          $310 = HEAP32[3712>>2]|0;
          $311 = ($309|0)<($310|0);
          if (!($311)) {
           break;
          }
          $312 = $k;
          $313 = HEAP32[3680>>2]|0;
          $314 = (($313) + ($312<<4)|0);
          $315 = (($314) + 4|0);
          $316 = HEAP32[$315>>2]|0;
          $317 = (($316) + 2)|0;
          HEAP32[$315>>2] = $317;
          $318 = $k;
          $319 = (($318) + 1)|0;
          $k = $319;
         }
         $320 = HEAP32[3680>>2]|0;
         _simpb_side($320,3712,0,1,3);
         $321 = $power_flag;
         $322 = ($321|0)!=(0);
         if ($322) {
          $323 = HEAP32[3680>>2]|0;
          $324 = HEAP32[3712>>2]|0;
          $325 = (_var_count($323,$324)|0);
          $326 = $j;
          $327 = $1;
          $328 = (($327) + ($326<<4)|0);
          $329 = $len2;
          $330 = (_var_count($328,$329)|0);
          $331 = ($325|0)<=($330|0);
          $332 = $331&1;
          $k = $332;
         } else {
          $333 = HEAP32[3680>>2]|0;
          $334 = HEAP32[3712>>2]|0;
          $335 = (_var_count($333,$334)|0);
          $336 = HEAP32[3712>>2]|0;
          $337 = $len1;
          $338 = (($337) + 1)|0;
          $339 = $len2;
          $340 = (($338) + ($339))|0;
          $341 = ($336|0)>=($340|0);
          $342 = $341&1;
          $343 = (($335) + ($342))|0;
          $344 = $j;
          $345 = $1;
          $346 = (($345) + ($344<<4)|0);
          $347 = $len2;
          $348 = (_var_count($346,$347)|0);
          $349 = $i;
          $350 = (($349) + 1)|0;
          $351 = $1;
          $352 = (($351) + ($350<<4)|0);
          $353 = $len1;
          $354 = (_var_count($352,$353)|0);
          $355 = (($348) + ($354))|0;
          $356 = ($343|0)<=($355|0);
          $357 = $356&1;
          $k = $357;
         }
         $358 = $k;
         $359 = ($358|0)!=(0);
         if ($359) {
          break L1;
         }
        }
        $523 = $power_flag;
        $524 = ($523|0)!=(0);
        if ($524) {
         $power_flag = 0;
         continue;
        }
        $525 = $flag;
        $526 = $5;
        $527 = ($525|0)==($526|0);
        if (!($527)) {
         break;
        }
        $528 = $flag;
        $529 = ($528|0)!=(0);
        $530 = $529 ^ 1;
        $531 = $530&1;
        $flag = $531;
       }
      }
     } while(0);
     $532 = $j;
     $533 = (($532) + 1)|0;
     $j = $533;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
  }
  $534 = $i;
  $535 = (($534) + 2)|0;
  $i = $535;
 }
 if ((label|0) == 123) {
  $536 = $3;
  $i = $536;
  while(1) {
   $537 = $i;
   $538 = $2;
   $539 = HEAP32[$538>>2]|0;
   $540 = ($537|0)<($539|0);
   if ($540) {
    $541 = $i;
    $542 = $1;
    $543 = (($542) + ($541<<4)|0);
    $544 = (($543) + 4|0);
    $545 = HEAP32[$544>>2]|0;
    $546 = $4;
    $547 = ($545|0)>=($546|0);
    $588 = $547;
   } else {
    $588 = 0;
   }
   if (!($588)) {
    break;
   }
   $548 = $i;
   $549 = $1;
   $550 = (($549) + ($548<<4)|0);
   $551 = (($550) + 4|0);
   $552 = HEAP32[$551>>2]|0;
   $553 = $4;
   $554 = ($552|0)>($553|0);
   if (!($554)) {
    $579 = $i;
    $580 = (($579) + 1)|0;
    $i = $580;
    continue;
   }
   $555 = $1;
   $556 = $2;
   $557 = $i;
   $558 = $4;
   $559 = (($558) + 1)|0;
   $560 = $5;
   $561 = (_pdiv_recurse($555,$556,$557,$559,$560)|0);
   $562 = $modified;
   $563 = $562 | $561;
   $modified = $563;
   $564 = $i;
   $565 = (($564) + 1)|0;
   $i = $565;
   while(1) {
    $566 = $i;
    $567 = $2;
    $568 = HEAP32[$567>>2]|0;
    $569 = ($566|0)<($568|0);
    if ($569) {
     $570 = $i;
     $571 = $1;
     $572 = (($571) + ($570<<4)|0);
     $573 = (($572) + 4|0);
     $574 = HEAP32[$573>>2]|0;
     $575 = $4;
     $576 = ($574|0)>($575|0);
     $589 = $576;
    } else {
     $589 = 0;
    }
    if (!($589)) {
     break;
    }
    $577 = $i;
    $578 = (($577) + 2)|0;
    $i = $578;
   }
  }
  $581 = $modified;
  $0 = $581;
  $582 = $0;
  STACKTOP = sp;return ($582|0);
 }
 $k = 0;
 while(1) {
  $360 = $k;
  $361 = HEAP32[3712>>2]|0;
  $362 = ($360|0)<($361|0);
  if (!($362)) {
   break;
  }
  $363 = $4;
  $364 = $k;
  $365 = HEAP32[3680>>2]|0;
  $366 = (($365) + ($364<<4)|0);
  $367 = (($366) + 4|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = (($368) + ($363))|0;
  HEAP32[$367>>2] = $369;
  $370 = $k;
  $371 = (($370) + 1)|0;
  $k = $371;
 }
 $372 = $power_flag;
 $373 = ($372|0)!=(0);
 if ($373) {
  $374 = $2;
  $375 = HEAP32[$374>>2]|0;
  $376 = $len2;
  $377 = (($375) - ($376))|0;
  $378 = HEAP32[3712>>2]|0;
  $379 = (($377) + ($378))|0;
  $380 = (($379) + 2)|0;
  $381 = HEAP32[8>>2]|0;
  $382 = ($380|0)>($381|0);
  if ($382) {
   _error_huge();
  }
  $383 = $i;
  $384 = (($383) + 2)|0;
  $385 = $len1;
  $386 = (($384) + ($385))|0;
  $k = $386;
  while(1) {
   $387 = $k;
   $388 = $i;
   $389 = $real_len1;
   $390 = (($388) + ($389))|0;
   $391 = ($387|0)<=($390|0);
   if (!($391)) {
    break;
   }
   $392 = $k;
   $393 = $1;
   $394 = (($393) + ($392<<4)|0);
   $395 = (($394) + 4|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = (($396) + 1)|0;
   HEAP32[$395>>2] = $397;
   $398 = $k;
   $399 = (($398) + 1)|0;
   $k = $399;
  }
  $400 = $i;
  $401 = $real_len1;
  $402 = (($400) + ($401))|0;
  $403 = (($402) + 3)|0;
  $404 = $1;
  $405 = (($404) + ($403<<4)|0);
  $406 = $k;
  $407 = $1;
  $408 = (($407) + ($406<<4)|0);
  $409 = $2;
  $410 = HEAP32[$409>>2]|0;
  $411 = $k;
  $412 = (($410) - ($411))|0;
  $413 = $412<<4;
  _memmove(($405|0),($408|0),($413|0))|0;
  $414 = $2;
  $415 = HEAP32[$414>>2]|0;
  $416 = (($415) + 2)|0;
  HEAP32[$414>>2] = $416;
  $417 = $4;
  $418 = (($417) + 2)|0;
  $419 = $k;
  $420 = $1;
  $421 = (($420) + ($419<<4)|0);
  $422 = (($421) + 4|0);
  HEAP32[$422>>2] = $418;
  $423 = $k;
  $424 = $1;
  $425 = (($424) + ($423<<4)|0);
  HEAP32[$425>>2] = 2;
  $426 = $k;
  $427 = $1;
  $428 = (($427) + ($426<<4)|0);
  $429 = (($428) + 8|0);
  HEAP32[$429>>2] = 2;
  $430 = $k;
  $431 = (($430) + 1)|0;
  $k = $431;
  $432 = $4;
  $433 = (($432) + 2)|0;
  $434 = $k;
  $435 = $1;
  $436 = (($435) + ($434<<4)|0);
  $437 = (($436) + 4|0);
  HEAP32[$437>>2] = $433;
  $438 = $k;
  $439 = $1;
  $440 = (($439) + ($438<<4)|0);
  HEAP32[$440>>2] = 0;
  $441 = $k;
  $442 = $1;
  $443 = (($442) + ($441<<4)|0);
  $444 = (($443) + 8|0);
  HEAPF64[$444>>3] = 1.0;
  $445 = $i;
  $446 = $j;
  $447 = ($445|0)<($446|0);
  if ($447) {
   $448 = $j;
   $449 = (($448) + 2)|0;
   $j = $449;
  }
 } else {
  $450 = $2;
  $451 = HEAP32[$450>>2]|0;
  $452 = $len1;
  $453 = (($452) + 1)|0;
  $454 = $len2;
  $455 = (($453) + ($454))|0;
  $456 = (($451) - ($455))|0;
  $457 = HEAP32[3712>>2]|0;
  $458 = (($456) + ($457))|0;
  $459 = HEAP32[8>>2]|0;
  $460 = ($458|0)>($459|0);
  if ($460) {
   _error_huge();
  }
  $461 = $i;
  $462 = $1;
  $463 = (($462) + ($461<<4)|0);
  $464 = $i;
  $465 = (($464) + 1)|0;
  $466 = $len1;
  $467 = (($465) + ($466))|0;
  $468 = $1;
  $469 = (($468) + ($467<<4)|0);
  $470 = $2;
  $471 = HEAP32[$470>>2]|0;
  $472 = $i;
  $473 = (($472) + 1)|0;
  $474 = $len1;
  $475 = (($473) + ($474))|0;
  $476 = (($471) - ($475))|0;
  $477 = $476<<4;
  _memmove(($463|0),($469|0),($477|0))|0;
  $478 = $len1;
  $479 = (($478) + 1)|0;
  $480 = $2;
  $481 = HEAP32[$480>>2]|0;
  $482 = (($481) - ($479))|0;
  HEAP32[$480>>2] = $482;
  $483 = $i;
  $484 = $j;
  $485 = ($483|0)<($484|0);
  if ($485) {
   $486 = $len1;
   $487 = (($486) + 1)|0;
   $488 = $j;
   $489 = (($488) - ($487))|0;
   $j = $489;
  }
 }
 $490 = $j;
 $491 = HEAP32[3712>>2]|0;
 $492 = (($490) + ($491))|0;
 $493 = $1;
 $494 = (($493) + ($492<<4)|0);
 $495 = $j;
 $496 = $len2;
 $497 = (($495) + ($496))|0;
 $498 = $1;
 $499 = (($498) + ($497<<4)|0);
 $500 = $2;
 $501 = HEAP32[$500>>2]|0;
 $502 = $j;
 $503 = $len2;
 $504 = (($502) + ($503))|0;
 $505 = (($501) - ($504))|0;
 $506 = $505<<4;
 _memmove(($494|0),($499|0),($506|0))|0;
 $507 = $len2;
 $508 = HEAP32[3712>>2]|0;
 $509 = (($507) - ($508))|0;
 $510 = $2;
 $511 = HEAP32[$510>>2]|0;
 $512 = (($511) - ($509))|0;
 HEAP32[$510>>2] = $512;
 $513 = $j;
 $514 = $1;
 $515 = (($514) + ($513<<4)|0);
 $516 = HEAP32[3680>>2]|0;
 $517 = HEAP32[3712>>2]|0;
 $518 = $517<<4;
 _memmove(($515|0),($516|0),($518|0))|0;
 $519 = $flag;
 $520 = ($519|0)!=(0);
 if ($520) {
  label = 111;
 } else {
  $521 = $power_flag;
  $522 = ($521|0)!=(0);
  if ($522) {
   label = 111;
  } else {
  }
 }
 if ((label|0) == 111) {
 }
 $0 = 1;
 $582 = $0;
 STACKTOP = sp;return ($582|0);
}
function _poly_div_sub($d1,$len1,$d2,$len2,$vp) {
 $d1 = $d1|0;
 $len1 = $len1|0;
 $d2 = $d2|0;
 $len2 = $len2|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0.0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0;
 var $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $d = 0, $divide_flag = 0, $divisor_count = 0, $divisor_power = 0, $i = 0, $last_count = 0;
 var $last_power = 0, $len_t1 = 0, $len_t2 = 0, $sign = 0, $sum_size = 0, $t1 = 0, $t2 = 0, $tmp_v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t1 = sp + 64|0;
 $len_t1 = sp + 60|0;
 $t2 = sp + 56|0;
 $len_t2 = sp + 52|0;
 $divide_flag = sp + 44|0;
 $last_power = sp + 16|0;
 $divisor_power = sp + 8|0;
 $d = sp;
 $tmp_v = sp + 24|0;
 $1 = $d1;
 $2 = $len1;
 $3 = $d2;
 $4 = $len2;
 $5 = $vp;
 HEAP32[$tmp_v>>2] = 0;
 $6 = $5;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $5 = $tmp_v;
 }
 $8 = $2;
 $9 = HEAP32[8>>2]|0;
 $10 = ($8|0)>($9|0);
 if (!($10)) {
  $11 = $4;
  $12 = HEAP32[8>>2]|0;
  $13 = ($11|0)>($12|0);
  if (!($13)) {
   $14 = HEAP32[3688>>2]|0;
   $15 = $1;
   $16 = ($14|0)!=($15|0);
   if ($16) {
    $17 = HEAP32[3688>>2]|0;
    $18 = $1;
    $19 = $2;
    $20 = $19<<4;
    _memmove(($17|0),($18|0),($20|0))|0;
   }
   $21 = $2;
   HEAP32[3720>>2] = $21;
   $22 = HEAP32[3680>>2]|0;
   $23 = $3;
   $24 = ($22|0)!=($23|0);
   if ($24) {
    $25 = HEAP32[3680>>2]|0;
    $26 = $3;
    $27 = $4;
    $28 = $27<<4;
    _memmove(($25|0),($26|0),($28|0))|0;
   }
   $29 = $4;
   HEAP32[3712>>2] = $29;
   $30 = HEAP32[3688>>2]|0;
   _uf_simp($30,3720);
   $31 = HEAP32[3680>>2]|0;
   _uf_simp($31,3712);
   $32 = $5;
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   do {
    if ($34) {
     $35 = HEAP32[3688>>2]|0;
     $36 = HEAP32[3720>>2]|0;
     $37 = HEAP32[3680>>2]|0;
     $38 = HEAP32[3712>>2]|0;
     $39 = $5;
     $40 = (_find_highest_count($35,$36,$37,$38,$39)|0);
     $41 = ($40|0)!=(0);
     if ($41) {
      break;
     }
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
    }
   } while(0);
   HEAP32[$divide_flag>>2] = 2;
   $42 = HEAP32[3688>>2]|0;
   $43 = HEAP32[3720>>2]|0;
   $44 = $5;
   $45 = (_find_greatest_power($42,$43,$44,$last_power,$t1,$len_t1,$divide_flag)|0);
   $last_count = $45;
   $46 = HEAP32[3680>>2]|0;
   $47 = HEAP32[3712>>2]|0;
   $48 = $5;
   $49 = (_find_greatest_power($46,$47,$48,$divisor_power,$t2,$len_t2,$divide_flag)|0);
   $divisor_count = $49;
   $50 = +HEAPF64[$divisor_power>>3];
   $51 = $50 <= 0.0;
   if ($51) {
    label = 16;
   } else {
    $52 = +HEAPF64[$last_power>>3];
    $53 = +HEAPF64[$divisor_power>>3];
    $54 = $52 < $53;
    if ($54) {
     label = 16;
    }
   }
   do {
    if ((label|0) == 16) {
     $55 = HEAP32[$divide_flag>>2]|0;
     $56 = ($55|0)!=(0);
     $57 = $56 ^ 1;
     $58 = $57&1;
     HEAP32[$divide_flag>>2] = $58;
     $59 = HEAP32[3688>>2]|0;
     $60 = HEAP32[3720>>2]|0;
     $61 = $5;
     $62 = (_find_greatest_power($59,$60,$61,$last_power,$t1,$len_t1,$divide_flag)|0);
     $last_count = $62;
     $63 = HEAP32[3680>>2]|0;
     $64 = HEAP32[3712>>2]|0;
     $65 = $5;
     $66 = (_find_greatest_power($63,$64,$65,$divisor_power,$t2,$len_t2,$divide_flag)|0);
     $divisor_count = $66;
     $67 = +HEAPF64[$divisor_power>>3];
     $68 = $67 <= 0.0;
     if (!($68)) {
      $69 = +HEAPF64[$last_power>>3];
      $70 = +HEAPF64[$divisor_power>>3];
      $71 = $69 < $70;
      if (!($71)) {
       break;
      }
     }
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
    }
   } while(0);
   $72 = $divisor_count;
   $73 = ($72|0)>(1);
   if (!($73)) {
    $74 = $last_count;
    $75 = ($74|0)>(50);
    if (!($75)) {
     HEAP32[312048>>2] = 1;
     ;HEAP32[312056+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[312056+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[312056+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[312056+12>>2]=HEAP32[3736+12>>2]|0;
     $76 = HEAP32[3712>>2]|0;
     $77 = ($76|0)>(15000);
     if ($77) {
      $0 = 0;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
     $78 = HEAP32[3680>>2]|0;
     $79 = HEAP32[3712>>2]|0;
     $80 = $79<<4;
     _memmove((552056|0),($78|0),($80|0))|0;
     $81 = HEAP32[3712>>2]|0;
     HEAP32[792056>>2] = $81;
     $82 = HEAP32[3720>>2]|0;
     $83 = HEAP32[312048>>2]|0;
     $84 = (($82) + ($83))|0;
     $sum_size = $84;
     while(1) {
      $85 = HEAP32[$t1>>2]|0;
      $86 = ($85|0)>(0);
      if ($86) {
       $87 = HEAP32[$t1>>2]|0;
       $88 = (($87) - 1)|0;
       $89 = HEAP32[3688>>2]|0;
       $90 = (($89) + ($88<<4)|0);
       $91 = (($90) + 8|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($92|0)==(2);
       if ($93) {
        $sign = 2;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $sign = 1;
      }
      $94 = HEAP32[$t2>>2]|0;
      $95 = ($94|0)>(0);
      if ($95) {
       $96 = HEAP32[$t2>>2]|0;
       $97 = (($96) - 1)|0;
       $98 = (552056 + ($97<<4)|0);
       $99 = (($98) + 8|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = ($100|0)==(2);
       if ($101) {
        $102 = $sign;
        $103 = ($102|0)==(2);
        if ($103) {
         $sign = 1;
        } else {
         $sign = 2;
        }
       }
      }
      $104 = HEAP32[$len_t1>>2]|0;
      $105 = HEAP32[$len_t2>>2]|0;
      $106 = (($104) + ($105))|0;
      $107 = (($106) + 1)|0;
      $108 = HEAP32[8>>2]|0;
      $109 = ($107|0)>($108|0);
      if ($109) {
       label = 37;
       break;
      }
      $110 = HEAP32[3680>>2]|0;
      $111 = HEAP32[$t1>>2]|0;
      $112 = HEAP32[3688>>2]|0;
      $113 = (($112) + ($111<<4)|0);
      $114 = HEAP32[$len_t1>>2]|0;
      $115 = $114<<4;
      _memmove(($110|0),($113|0),($115|0))|0;
      $116 = HEAP32[$len_t1>>2]|0;
      HEAP32[3712>>2] = $116;
      $i = 0;
      while(1) {
       $117 = $i;
       $118 = HEAP32[3712>>2]|0;
       $119 = ($117|0)<($118|0);
       if (!($119)) {
        break;
       }
       $120 = $i;
       $121 = HEAP32[3680>>2]|0;
       $122 = (($121) + ($120<<4)|0);
       $123 = (($122) + 4|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = (($124) + 1)|0;
       HEAP32[$123>>2] = $125;
       $126 = $i;
       $127 = (($126) + 1)|0;
       $i = $127;
      }
      $128 = HEAP32[3712>>2]|0;
      $129 = HEAP32[3680>>2]|0;
      $130 = (($129) + ($128<<4)|0);
      $131 = (($130) + 4|0);
      HEAP32[$131>>2] = 1;
      $132 = HEAP32[3712>>2]|0;
      $133 = HEAP32[3680>>2]|0;
      $134 = (($133) + ($132<<4)|0);
      HEAP32[$134>>2] = 2;
      $135 = HEAP32[3712>>2]|0;
      $136 = HEAP32[3680>>2]|0;
      $137 = (($136) + ($135<<4)|0);
      $138 = (($137) + 8|0);
      HEAP32[$138>>2] = 5;
      $139 = HEAP32[3712>>2]|0;
      $140 = (($139) + 1)|0;
      HEAP32[3712>>2] = $140;
      $141 = HEAP32[3712>>2]|0;
      $142 = HEAP32[3680>>2]|0;
      $143 = (($142) + ($141<<4)|0);
      $144 = HEAP32[$t2>>2]|0;
      $145 = (552056 + ($144<<4)|0);
      $146 = HEAP32[$len_t2>>2]|0;
      $147 = $146<<4;
      _memmove(($143|0),($145|0),($147|0))|0;
      $148 = HEAP32[3712>>2]|0;
      $i = $148;
      $149 = HEAP32[$len_t2>>2]|0;
      $150 = HEAP32[3712>>2]|0;
      $151 = (($150) + ($149))|0;
      HEAP32[3712>>2] = $151;
      while(1) {
       $152 = $i;
       $153 = HEAP32[3712>>2]|0;
       $154 = ($152|0)<($153|0);
       if (!($154)) {
        break;
       }
       $155 = $i;
       $156 = HEAP32[3680>>2]|0;
       $157 = (($156) + ($155<<4)|0);
       $158 = (($157) + 4|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = (($159) + 1)|0;
       HEAP32[$158>>2] = $160;
       $161 = $i;
       $162 = (($161) + 1)|0;
       $i = $162;
      }
      $163 = HEAP32[3680>>2]|0;
      $164 = (_simp_loop($163,3712)|0);
      $165 = ($164|0)!=(0);
      if (!($165)) {
       label = 47;
       break;
      }
      $166 = HEAP32[312048>>2]|0;
      $167 = (($166) + 1)|0;
      $168 = HEAP32[3712>>2]|0;
      $169 = (($167) + ($168))|0;
      $170 = HEAP32[8>>2]|0;
      $171 = (15000)<($170|0);
      if ($171) {
       $174 = 15000;
      } else {
       $172 = HEAP32[8>>2]|0;
       $174 = $172;
      }
      $173 = ($169|0)>($174|0);
      if ($173) {
       label = 52;
       break;
      }
      $i = 0;
      while(1) {
       $175 = $i;
       $176 = HEAP32[3712>>2]|0;
       $177 = ($175|0)<($176|0);
       if (!($177)) {
        break;
       }
       $178 = $i;
       $179 = HEAP32[3680>>2]|0;
       $180 = (($179) + ($178<<4)|0);
       $181 = (($180) + 4|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (($182) + 1)|0;
       HEAP32[$181>>2] = $183;
       $184 = $i;
       $185 = (($184) + 1)|0;
       $i = $185;
      }
      $186 = HEAP32[312048>>2]|0;
      $187 = (312056 + ($186<<4)|0);
      $188 = (($187) + 4|0);
      HEAP32[$188>>2] = 1;
      $189 = HEAP32[312048>>2]|0;
      $190 = (312056 + ($189<<4)|0);
      HEAP32[$190>>2] = 2;
      $191 = $sign;
      $192 = HEAP32[312048>>2]|0;
      $193 = (312056 + ($192<<4)|0);
      $194 = (($193) + 8|0);
      HEAP32[$194>>2] = $191;
      $195 = HEAP32[312048>>2]|0;
      $196 = (($195) + 1)|0;
      HEAP32[312048>>2] = $196;
      $197 = HEAP32[312048>>2]|0;
      $198 = (312056 + ($197<<4)|0);
      $199 = HEAP32[3680>>2]|0;
      $200 = HEAP32[3712>>2]|0;
      $201 = $200<<4;
      _memmove(($198|0),($199|0),($201|0))|0;
      $202 = HEAP32[3712>>2]|0;
      $203 = HEAP32[312048>>2]|0;
      $204 = (($203) + ($202))|0;
      HEAP32[312048>>2] = $204;
      $205 = HEAP32[3720>>2]|0;
      $206 = HEAP32[3712>>2]|0;
      $207 = (($205) + ($206))|0;
      $208 = HEAP32[792056>>2]|0;
      $209 = (($207) + ($208))|0;
      $210 = (($209) + 2)|0;
      $211 = HEAP32[8>>2]|0;
      $212 = ($210|0)>($211|0);
      if ($212) {
       label = 58;
       break;
      }
      $213 = HEAP32[$t1>>2]|0;
      $214 = (($213) + 1)|0;
      $215 = HEAP32[3688>>2]|0;
      $216 = (($215) + ($214<<4)|0);
      $217 = HEAP32[$t1>>2]|0;
      $218 = HEAP32[$len_t1>>2]|0;
      $219 = (($217) + ($218))|0;
      $220 = HEAP32[3688>>2]|0;
      $221 = (($220) + ($219<<4)|0);
      $222 = HEAP32[3720>>2]|0;
      $223 = HEAP32[$t1>>2]|0;
      $224 = HEAP32[$len_t1>>2]|0;
      $225 = (($223) + ($224))|0;
      $226 = (($222) - ($225))|0;
      $227 = $226<<4;
      _memmove(($216|0),($221|0),($227|0))|0;
      $228 = HEAP32[$len_t1>>2]|0;
      $229 = (($228) - 1)|0;
      $230 = HEAP32[3720>>2]|0;
      $231 = (($230) - ($229))|0;
      HEAP32[3720>>2] = $231;
      $232 = HEAP32[$t1>>2]|0;
      $233 = HEAP32[3688>>2]|0;
      $234 = (($233) + ($232<<4)|0);
      ;HEAP32[$234+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$234+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$234+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$234+12>>2]=HEAP32[3736+12>>2]|0;
      $i = 0;
      while(1) {
       $235 = $i;
       $236 = HEAP32[3720>>2]|0;
       $237 = ($235|0)<($236|0);
       if (!($237)) {
        break;
       }
       $238 = $i;
       $239 = HEAP32[3688>>2]|0;
       $240 = (($239) + ($238<<4)|0);
       $241 = (($240) + 4|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = (($242) + 1)|0;
       HEAP32[$241>>2] = $243;
       $244 = $i;
       $245 = (($244) + 1)|0;
       $i = $245;
      }
      $246 = HEAP32[3720>>2]|0;
      $247 = HEAP32[3688>>2]|0;
      $248 = (($247) + ($246<<4)|0);
      $249 = (($248) + 4|0);
      HEAP32[$249>>2] = 1;
      $250 = HEAP32[3720>>2]|0;
      $251 = HEAP32[3688>>2]|0;
      $252 = (($251) + ($250<<4)|0);
      HEAP32[$252>>2] = 2;
      $253 = $sign;
      $254 = ($253|0)==(1);
      if ($254) {
       $255 = HEAP32[3720>>2]|0;
       $256 = HEAP32[3688>>2]|0;
       $257 = (($256) + ($255<<4)|0);
       $258 = (($257) + 8|0);
       HEAP32[$258>>2] = 2;
      } else {
       $259 = HEAP32[3720>>2]|0;
       $260 = HEAP32[3688>>2]|0;
       $261 = (($260) + ($259<<4)|0);
       $262 = (($261) + 8|0);
       HEAP32[$262>>2] = 1;
      }
      $263 = HEAP32[3720>>2]|0;
      $264 = (($263) + 1)|0;
      HEAP32[3720>>2] = $264;
      $265 = HEAP32[3720>>2]|0;
      $266 = HEAP32[3688>>2]|0;
      $267 = (($266) + ($265<<4)|0);
      $268 = HEAP32[3680>>2]|0;
      $269 = HEAP32[3712>>2]|0;
      $270 = $269<<4;
      _memmove(($267|0),($268|0),($270|0))|0;
      $271 = HEAP32[3720>>2]|0;
      $i = $271;
      $272 = HEAP32[3712>>2]|0;
      $273 = HEAP32[3720>>2]|0;
      $274 = (($273) + ($272))|0;
      HEAP32[3720>>2] = $274;
      while(1) {
       $275 = $i;
       $276 = HEAP32[3720>>2]|0;
       $277 = ($275|0)<($276|0);
       if (!($277)) {
        break;
       }
       $278 = $i;
       $279 = HEAP32[3688>>2]|0;
       $280 = (($279) + ($278<<4)|0);
       $281 = (($280) + 4|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = (($282) + 1)|0;
       HEAP32[$281>>2] = $283;
       $284 = $i;
       $285 = (($284) + 1)|0;
       $i = $285;
      }
      $286 = HEAP32[3720>>2]|0;
      $287 = HEAP32[3688>>2]|0;
      $288 = (($287) + ($286<<4)|0);
      $289 = (($288) + 4|0);
      HEAP32[$289>>2] = 2;
      $290 = HEAP32[3720>>2]|0;
      $291 = HEAP32[3688>>2]|0;
      $292 = (($291) + ($290<<4)|0);
      HEAP32[$292>>2] = 2;
      $293 = HEAP32[3720>>2]|0;
      $294 = HEAP32[3688>>2]|0;
      $295 = (($294) + ($293<<4)|0);
      $296 = (($295) + 8|0);
      HEAP32[$296>>2] = 4;
      $297 = HEAP32[3720>>2]|0;
      $298 = (($297) + 1)|0;
      HEAP32[3720>>2] = $298;
      $299 = HEAP32[3720>>2]|0;
      $i = $299;
      $300 = HEAP32[3720>>2]|0;
      $301 = HEAP32[3688>>2]|0;
      $302 = (($301) + ($300<<4)|0);
      $303 = HEAP32[$t2>>2]|0;
      $304 = $303<<4;
      _memmove(($302|0),(552056|0),($304|0))|0;
      $305 = HEAP32[$t2>>2]|0;
      $306 = HEAP32[3720>>2]|0;
      $307 = (($306) + ($305))|0;
      HEAP32[3720>>2] = $307;
      $308 = HEAP32[3720>>2]|0;
      $309 = HEAP32[3688>>2]|0;
      $310 = (($309) + ($308<<4)|0);
      ;HEAP32[$310+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$310+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$310+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$310+12>>2]=HEAP32[3736+12>>2]|0;
      $311 = HEAP32[3720>>2]|0;
      $312 = (($311) + 1)|0;
      HEAP32[3720>>2] = $312;
      $313 = HEAP32[3720>>2]|0;
      $314 = HEAP32[3688>>2]|0;
      $315 = (($314) + ($313<<4)|0);
      $316 = HEAP32[$t2>>2]|0;
      $317 = HEAP32[$len_t2>>2]|0;
      $318 = (($316) + ($317))|0;
      $319 = (552056 + ($318<<4)|0);
      $320 = HEAP32[792056>>2]|0;
      $321 = HEAP32[$t2>>2]|0;
      $322 = HEAP32[$len_t2>>2]|0;
      $323 = (($321) + ($322))|0;
      $324 = (($320) - ($323))|0;
      $325 = $324<<4;
      _memmove(($315|0),($319|0),($325|0))|0;
      $326 = HEAP32[792056>>2]|0;
      $327 = HEAP32[$t2>>2]|0;
      $328 = HEAP32[$len_t2>>2]|0;
      $329 = (($327) + ($328))|0;
      $330 = (($326) - ($329))|0;
      $331 = HEAP32[3720>>2]|0;
      $332 = (($331) + ($330))|0;
      HEAP32[3720>>2] = $332;
      while(1) {
       $333 = $i;
       $334 = HEAP32[3720>>2]|0;
       $335 = ($333|0)<($334|0);
       if (!($335)) {
        break;
       }
       $336 = $i;
       $337 = HEAP32[3688>>2]|0;
       $338 = (($337) + ($336<<4)|0);
       $339 = (($338) + 4|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = (($340) + 2)|0;
       HEAP32[$339>>2] = $341;
       $342 = $i;
       $343 = (($342) + 1)|0;
       $i = $343;
      }
      $344 = HEAP32[3688>>2]|0;
      _uf_repeat($344,3720);
      $345 = HEAP32[3688>>2]|0;
      (_uf_tsimp($345,3720)|0);
      $346 = HEAP32[3688>>2]|0;
      $347 = HEAP32[3720>>2]|0;
      $348 = $5;
      $349 = (_find_greatest_power($346,$347,$348,$d,$t1,$len_t1,$divide_flag)|0);
      $count = $349;
      $350 = +HEAPF64[$d>>3];
      $351 = +HEAPF64[$divisor_power>>3];
      $352 = $350 < $351;
      if ($352) {
       label = 75;
       break;
      }
      $378 = +HEAPF64[$d>>3];
      $379 = +HEAPF64[$last_power>>3];
      $380 = $378 < $379;
      if ($380) {
       $381 = +HEAPF64[$d>>3];
       HEAPF64[$last_power>>3] = $381;
       $382 = $count;
       $last_count = $382;
       $383 = $last_count;
       $384 = ($383|0)>(50);
       if ($384) {
        label = 87;
        break;
       }
      } else {
       $385 = +HEAPF64[$d>>3];
       $386 = +HEAPF64[$last_power>>3];
       $387 = $385 > $386;
       if ($387) {
        label = 90;
        break;
       }
       $388 = $count;
       $389 = $last_count;
       $390 = ($388|0)>=($389|0);
       if ($390) {
        label = 92;
        break;
       }
       $391 = $count;
       $last_count = $391;
      }
     }
     if ((label|0) == 37) {
      $0 = 0;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
     else if ((label|0) == 47) {
      $0 = 0;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
     else if ((label|0) == 52) {
      $0 = 0;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
     else if ((label|0) == 58) {
      $0 = 0;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
     else if ((label|0) == 75) {
      $353 = HEAP32[3680>>2]|0;
      $354 = HEAP32[312048>>2]|0;
      $355 = $354<<4;
      _memmove(($353|0),(312056|0),($355|0))|0;
      $356 = HEAP32[312048>>2]|0;
      HEAP32[3712>>2] = $356;
      $357 = HEAP32[3720>>2]|0;
      $358 = ($357|0)==(1);
      if ($358) {
       $359 = HEAP32[3688>>2]|0;
       $360 = HEAP32[$359>>2]|0;
       $361 = ($360|0)==(0);
       if ($361) {
        $362 = HEAP32[3688>>2]|0;
        $363 = (($362) + 8|0);
        $364 = +HEAPF64[$363>>3];
        $365 = $364 == 0.0;
        if ($365) {
         $0 = 2;
         $392 = $0;
         STACKTOP = sp;return ($392|0);
        }
       }
      }
      $366 = HEAP32[3720>>2]|0;
      $367 = HEAP32[312048>>2]|0;
      $368 = (($366) + ($367))|0;
      $369 = $sum_size;
      $370 = ($368|0)>=($369|0);
      if (!($370)) {
       $0 = 1;
       $392 = $0;
       STACKTOP = sp;return ($392|0);
      }
      $371 = HEAP32[3720>>2]|0;
      $372 = (($371) + 1)|0;
      $373 = $sum_size;
      $374 = ($372|0)>($373|0);
      if ($374) {
       $375 = HEAP32[3720>>2]|0;
       $376 = HEAP32[792056>>2]|0;
       $377 = ($375|0)>($376|0);
       if ($377) {
        $0 = -2;
        $392 = $0;
        STACKTOP = sp;return ($392|0);
       }
      }
      $0 = -1;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
     else if ((label|0) == 87) {
      $0 = 0;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
     else if ((label|0) == 90) {
      $0 = 0;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
     else if ((label|0) == 92) {
      $0 = 0;
      $392 = $0;
      STACKTOP = sp;return ($392|0);
     }
    }
   }
   $0 = 0;
   $392 = $0;
   STACKTOP = sp;return ($392|0);
  }
 }
 $0 = 0;
 $392 = $0;
 STACKTOP = sp;return ($392|0);
}
function _smart_div($d1,$len1,$d2,$len2) {
 $d1 = $d1|0;
 $len1 = $len1|0;
 $d2 = $d2|0;
 $len2 = $len2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $count = 0, $dcount = 0, $flag = 0, $i = 0, $j = 0, $k = 0, $len_t1 = 0, $len_t2 = 0, $old_n_quotient = 0, $q_size = 0, $qp = 0, $sign = 0, $skip_count = 0, $skip_terms = 0, $sum_size = 0, $t1 = 0, $t2 = 0;
 var $term_count = 0, $term_pos = 0, $term_size = 0, $trhs_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t1 = sp + 468|0;
 $len_t1 = sp + 464|0;
 $skip_terms = sp + 32|0;
 $1 = $d1;
 $2 = $len1;
 $3 = $d2;
 $4 = $len2;
 $t2 = 0;
 $len_t2 = 0;
 $term_size = 0;
 $term_pos = 0;
 $dcount = 0;
 $5 = HEAP32[3688>>2]|0;
 $6 = $1;
 $7 = $2;
 $8 = $7<<4;
 _memmove(($5|0),($6|0),($8|0))|0;
 $9 = $2;
 HEAP32[3720>>2] = $9;
 $10 = HEAP32[3680>>2]|0;
 $11 = $3;
 $12 = $4;
 $13 = $12<<4;
 _memmove(($10|0),($11|0),($13|0))|0;
 $14 = $4;
 HEAP32[3712>>2] = $14;
 $15 = HEAP32[3688>>2]|0;
 _uf_simp_no_repeat($15,3720);
 $16 = HEAP32[3680>>2]|0;
 _uf_simp_no_repeat($16,3712);
 $i = 0;
 $j = 0;
 $k = 0;
 $flag = 0;
 while(1) {
  $17 = $i;
  $18 = HEAP32[3712>>2]|0;
  $19 = ($17|0)>=($18|0);
  do {
   if ($19) {
    label = 7;
   } else {
    $20 = $i;
    $21 = HEAP32[3680>>2]|0;
    $22 = (($21) + ($20<<4)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(2);
    if ($24) {
     $25 = $i;
     $26 = HEAP32[3680>>2]|0;
     $27 = (($26) + ($25<<4)|0);
     $28 = (($27) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(1);
     if ($30) {
      $31 = $i;
      $32 = HEAP32[3680>>2]|0;
      $33 = (($32) + ($31<<4)|0);
      $34 = (($33) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(1);
      if ($36) {
       label = 7;
       break;
      }
      $37 = $i;
      $38 = HEAP32[3680>>2]|0;
      $39 = (($38) + ($37<<4)|0);
      $40 = (($39) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($41|0)==(2);
      if ($42) {
       label = 7;
       break;
      }
     }
    }
    $69 = $i;
    $70 = HEAP32[3680>>2]|0;
    $71 = (($70) + ($69<<4)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(1);
    if ($73) {
     $74 = $i;
     $75 = HEAP32[3680>>2]|0;
     $76 = (($75) + ($74<<4)|0);
     $77 = (($76) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)!=(3);
     if ($79) {
      $flag = 1;
     }
    }
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $43 = $dcount;
   $44 = (($43) + 1)|0;
   $dcount = $44;
   $45 = $flag;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $len_t2;
    $48 = ($47|0)==(0);
    if ($48) {
     label = 10;
    } else {
     $49 = $j;
     $50 = HEAP32[3680>>2]|0;
     $51 = (($50) + ($49<<4)|0);
     $52 = $i;
     $53 = $j;
     $54 = (($52) - ($53))|0;
     $55 = (_var_count($51,$54)|0);
     $56 = $k;
     $57 = ($55|0)<($56|0);
     if ($57) {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     label = 0;
     $58 = $i;
     $59 = $j;
     $60 = (($58) - ($59))|0;
     $len_t2 = $60;
     $61 = $j;
     $t2 = $61;
     $62 = $t2;
     $63 = HEAP32[3680>>2]|0;
     $64 = (($63) + ($62<<4)|0);
     $65 = $len_t2;
     $66 = (_var_count($64,$65)|0);
     $k = $66;
    }
   }
   $flag = 0;
   $67 = $i;
   $68 = (($67) + 1)|0;
   $j = $68;
  }
  $80 = $i;
  $81 = HEAP32[3712>>2]|0;
  $82 = ($80|0)>=($81|0);
  if ($82) {
   break;
  }
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 $85 = $len_t2;
 $86 = ($85|0)<=(0);
 if ($86) {
  $0 = 0;
  $522 = $0;
  STACKTOP = sp;return ($522|0);
 }
 HEAP32[312048>>2] = 1;
 ;HEAP32[312056+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[312056+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[312056+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[312056+12>>2]=HEAP32[3736+12>>2]|0;
 $87 = HEAP32[3712>>2]|0;
 $88 = ($87|0)>(15000);
 if ($88) {
  $0 = 0;
  $522 = $0;
  STACKTOP = sp;return ($522|0);
 }
 $89 = HEAP32[3680>>2]|0;
 $90 = HEAP32[3712>>2]|0;
 $91 = $90<<4;
 _memmove((552056|0),($89|0),($91|0))|0;
 $92 = HEAP32[3712>>2]|0;
 HEAP32[792056>>2] = $92;
 L37: while(1) {
  $93 = HEAP32[3720>>2]|0;
  $trhs_size = $93;
  $skip_count = 0;
  $count = 0;
  L39: while(1) {
   $94 = HEAP32[3720>>2]|0;
   $95 = HEAP32[312048>>2]|0;
   $96 = (($94) + ($95))|0;
   $sum_size = $96;
   $term_count = 1;
   $q_size = 0;
   L41: while(1) {
    $97 = HEAP32[3688>>2]|0;
    $98 = HEAP32[3720>>2]|0;
    $99 = $term_count;
    $100 = (_get_term($97,$98,$99,$t1,$len_t1)|0);
    $101 = ($100|0)!=(0);
    if (!($101)) {
     label = 29;
     break;
    }
    $flag = 0;
    $i = 0;
    while(1) {
     $102 = $i;
     $103 = $skip_count;
     $104 = ($102|0)<($103|0);
     if (!($104)) {
      break;
     }
     $105 = $i;
     $106 = (($skip_terms) + ($105<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = HEAP32[$t1>>2]|0;
     $109 = ($107|0)==($108|0);
     if ($109) {
      label = 33;
      break;
     }
     $110 = $i;
     $111 = (($110) + 1)|0;
     $i = $111;
    }
    if ((label|0) == 33) {
     label = 0;
     $flag = 1;
    }
    $112 = $flag;
    $113 = ($112|0)!=(0);
    do {
     if ($113) {
     } else {
      $114 = HEAP32[$len_t1>>2]|0;
      $115 = $len_t2;
      $116 = (($114) + ($115))|0;
      $117 = (($116) + 1)|0;
      $118 = HEAP32[8>>2]|0;
      $119 = ($117|0)>($118|0);
      if ($119) {
       label = 39;
       break L37;
      }
      $120 = HEAP32[3680>>2]|0;
      $121 = HEAP32[$t1>>2]|0;
      $122 = HEAP32[3688>>2]|0;
      $123 = (($122) + ($121<<4)|0);
      $124 = HEAP32[$len_t1>>2]|0;
      $125 = $124<<4;
      _memmove(($120|0),($123|0),($125|0))|0;
      $126 = HEAP32[$len_t1>>2]|0;
      HEAP32[3712>>2] = $126;
      $i = 0;
      while(1) {
       $127 = $i;
       $128 = HEAP32[3712>>2]|0;
       $129 = ($127|0)<($128|0);
       if (!($129)) {
        break;
       }
       $130 = $i;
       $131 = HEAP32[3680>>2]|0;
       $132 = (($131) + ($130<<4)|0);
       $133 = (($132) + 4|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = (($134) + 1)|0;
       HEAP32[$133>>2] = $135;
       $136 = $i;
       $137 = (($136) + 1)|0;
       $i = $137;
      }
      $138 = HEAP32[3712>>2]|0;
      $139 = HEAP32[3680>>2]|0;
      $140 = (($139) + ($138<<4)|0);
      $141 = (($140) + 4|0);
      HEAP32[$141>>2] = 1;
      $142 = HEAP32[3712>>2]|0;
      $143 = HEAP32[3680>>2]|0;
      $144 = (($143) + ($142<<4)|0);
      HEAP32[$144>>2] = 2;
      $145 = HEAP32[3712>>2]|0;
      $146 = HEAP32[3680>>2]|0;
      $147 = (($146) + ($145<<4)|0);
      $148 = (($147) + 8|0);
      HEAP32[$148>>2] = 5;
      $149 = HEAP32[3712>>2]|0;
      $150 = (($149) + 1)|0;
      HEAP32[3712>>2] = $150;
      $151 = HEAP32[3712>>2]|0;
      $152 = HEAP32[3680>>2]|0;
      $153 = (($152) + ($151<<4)|0);
      $154 = $t2;
      $155 = (552056 + ($154<<4)|0);
      $156 = $len_t2;
      $157 = $156<<4;
      _memmove(($153|0),($155|0),($157|0))|0;
      $158 = HEAP32[3712>>2]|0;
      $i = $158;
      $159 = $len_t2;
      $160 = HEAP32[3712>>2]|0;
      $161 = (($160) + ($159))|0;
      HEAP32[3712>>2] = $161;
      while(1) {
       $162 = $i;
       $163 = HEAP32[3712>>2]|0;
       $164 = ($162|0)<($163|0);
       if (!($164)) {
        break;
       }
       $165 = $i;
       $166 = HEAP32[3680>>2]|0;
       $167 = (($166) + ($165<<4)|0);
       $168 = (($167) + 4|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = (($169) + 1)|0;
       HEAP32[$168>>2] = $170;
       $171 = $i;
       $172 = (($171) + 1)|0;
       $i = $172;
      }
      $173 = HEAP32[3680>>2]|0;
      $174 = (_simp_loop($173,3712)|0);
      $175 = ($174|0)!=(0);
      if (!($175)) {
       break;
      }
      $176 = HEAP32[3680>>2]|0;
      $177 = HEAP32[3712>>2]|0;
      $178 = (_basic_size($176,$177)|0);
      $179 = HEAP32[$t1>>2]|0;
      $180 = HEAP32[3688>>2]|0;
      $181 = (($180) + ($179<<4)|0);
      $182 = HEAP32[$len_t1>>2]|0;
      $183 = (_basic_size($181,$182)|0);
      $184 = ($178|0)<=($183|0);
      if ($184) {
       label = 51;
       break L41;
      }
     }
    } while(0);
    $188 = $term_count;
    $189 = (($188) + 1)|0;
    $term_count = $189;
   }
   if ((label|0) == 29) {
    label = 0;
   }
   else if ((label|0) == 51) {
    label = 0;
    $185 = HEAP32[3712>>2]|0;
    $q_size = $185;
    $186 = HEAP32[$t1>>2]|0;
    $term_pos = $186;
    $187 = HEAP32[$len_t1>>2]|0;
    $term_size = $187;
   }
   $190 = $q_size;
   $191 = ($190|0)<=(0);
   if ($191) {
    break;
   }
   $209 = $term_pos;
   HEAP32[$t1>>2] = $209;
   $210 = $term_size;
   HEAP32[$len_t1>>2] = $210;
   $211 = HEAP32[$t1>>2]|0;
   $212 = ($211|0)>(0);
   if ($212) {
    $213 = HEAP32[$t1>>2]|0;
    $214 = (($213) - 1)|0;
    $215 = HEAP32[3688>>2]|0;
    $216 = (($215) + ($214<<4)|0);
    $217 = (($216) + 8|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)==(2);
    if ($219) {
     $sign = 2;
    } else {
     label = 69;
    }
   } else {
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $sign = 1;
   }
   $220 = $t2;
   $221 = ($220|0)>(0);
   if ($221) {
    $222 = $t2;
    $223 = (($222) - 1)|0;
    $224 = (552056 + ($223<<4)|0);
    $225 = (($224) + 8|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = ($226|0)==(2);
    if ($227) {
     $228 = $sign;
     $229 = ($228|0)==(2);
     if ($229) {
      $sign = 1;
     } else {
      $sign = 2;
     }
    }
   }
   $230 = HEAP32[$len_t1>>2]|0;
   $231 = $len_t2;
   $232 = (($230) + ($231))|0;
   $233 = (($232) + 1)|0;
   $234 = HEAP32[8>>2]|0;
   $235 = ($233|0)>($234|0);
   if ($235) {
    label = 77;
    break L37;
   }
   $236 = HEAP32[3680>>2]|0;
   $237 = HEAP32[$t1>>2]|0;
   $238 = HEAP32[3688>>2]|0;
   $239 = (($238) + ($237<<4)|0);
   $240 = HEAP32[$len_t1>>2]|0;
   $241 = $240<<4;
   _memmove(($236|0),($239|0),($241|0))|0;
   $242 = HEAP32[$len_t1>>2]|0;
   HEAP32[3712>>2] = $242;
   $i = 0;
   while(1) {
    $243 = $i;
    $244 = HEAP32[3712>>2]|0;
    $245 = ($243|0)<($244|0);
    if (!($245)) {
     break;
    }
    $246 = $i;
    $247 = HEAP32[3680>>2]|0;
    $248 = (($247) + ($246<<4)|0);
    $249 = (($248) + 4|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = (($250) + 1)|0;
    HEAP32[$249>>2] = $251;
    $252 = $i;
    $253 = (($252) + 1)|0;
    $i = $253;
   }
   $254 = HEAP32[3712>>2]|0;
   $255 = HEAP32[3680>>2]|0;
   $256 = (($255) + ($254<<4)|0);
   $257 = (($256) + 4|0);
   HEAP32[$257>>2] = 1;
   $258 = HEAP32[3712>>2]|0;
   $259 = HEAP32[3680>>2]|0;
   $260 = (($259) + ($258<<4)|0);
   HEAP32[$260>>2] = 2;
   $261 = HEAP32[3712>>2]|0;
   $262 = HEAP32[3680>>2]|0;
   $263 = (($262) + ($261<<4)|0);
   $264 = (($263) + 8|0);
   HEAP32[$264>>2] = 5;
   $265 = HEAP32[3712>>2]|0;
   $266 = (($265) + 1)|0;
   HEAP32[3712>>2] = $266;
   $267 = HEAP32[3712>>2]|0;
   $268 = HEAP32[3680>>2]|0;
   $269 = (($268) + ($267<<4)|0);
   $270 = $t2;
   $271 = (552056 + ($270<<4)|0);
   $272 = $len_t2;
   $273 = $272<<4;
   _memmove(($269|0),($271|0),($273|0))|0;
   $274 = HEAP32[3712>>2]|0;
   $i = $274;
   $275 = $len_t2;
   $276 = HEAP32[3712>>2]|0;
   $277 = (($276) + ($275))|0;
   HEAP32[3712>>2] = $277;
   while(1) {
    $278 = $i;
    $279 = HEAP32[3712>>2]|0;
    $280 = ($278|0)<($279|0);
    if (!($280)) {
     break;
    }
    $281 = $i;
    $282 = HEAP32[3680>>2]|0;
    $283 = (($282) + ($281<<4)|0);
    $284 = (($283) + 4|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($285) + 1)|0;
    HEAP32[$284>>2] = $286;
    $287 = $i;
    $288 = (($287) + 1)|0;
    $i = $288;
   }
   $289 = HEAP32[3680>>2]|0;
   (_simp_loop($289,3712)|0);
   $290 = HEAP32[312048>>2]|0;
   $291 = (($290) + 1)|0;
   $292 = HEAP32[3712>>2]|0;
   $293 = (($291) + ($292))|0;
   $294 = HEAP32[8>>2]|0;
   $295 = (15000)<($294|0);
   if ($295) {
    $298 = 15000;
   } else {
    $296 = HEAP32[8>>2]|0;
    $298 = $296;
   }
   $297 = ($293|0)>($298|0);
   if ($297) {
    label = 90;
    break L37;
   }
   $i = 0;
   while(1) {
    $299 = $i;
    $300 = HEAP32[3712>>2]|0;
    $301 = ($299|0)<($300|0);
    if (!($301)) {
     break;
    }
    $302 = $i;
    $303 = HEAP32[3680>>2]|0;
    $304 = (($303) + ($302<<4)|0);
    $305 = (($304) + 4|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (($306) + 1)|0;
    HEAP32[$305>>2] = $307;
    $308 = $i;
    $309 = (($308) + 1)|0;
    $i = $309;
   }
   $310 = HEAP32[312048>>2]|0;
   $old_n_quotient = $310;
   $311 = HEAP32[312048>>2]|0;
   $312 = (312056 + ($311<<4)|0);
   $313 = (($312) + 4|0);
   HEAP32[$313>>2] = 1;
   $314 = HEAP32[312048>>2]|0;
   $315 = (312056 + ($314<<4)|0);
   HEAP32[$315>>2] = 2;
   $316 = $sign;
   $317 = HEAP32[312048>>2]|0;
   $318 = (312056 + ($317<<4)|0);
   $319 = (($318) + 8|0);
   HEAP32[$319>>2] = $316;
   $320 = HEAP32[312048>>2]|0;
   $321 = (($320) + 1)|0;
   HEAP32[312048>>2] = $321;
   $322 = HEAP32[312048>>2]|0;
   $323 = (312056 + ($322<<4)|0);
   $qp = $323;
   $324 = HEAP32[3712>>2]|0;
   $q_size = $324;
   $325 = HEAP32[312048>>2]|0;
   $326 = (312056 + ($325<<4)|0);
   $327 = HEAP32[3680>>2]|0;
   $328 = HEAP32[3712>>2]|0;
   $329 = $328<<4;
   _memmove(($326|0),($327|0),($329|0))|0;
   $330 = HEAP32[3712>>2]|0;
   $331 = HEAP32[312048>>2]|0;
   $332 = (($331) + ($330))|0;
   HEAP32[312048>>2] = $332;
   $333 = HEAP32[3720>>2]|0;
   $334 = $q_size;
   $335 = (($333) + ($334))|0;
   $336 = HEAP32[792056>>2]|0;
   $337 = (($335) + ($336))|0;
   $338 = (($337) + 2)|0;
   $339 = HEAP32[8>>2]|0;
   $340 = ($338|0)>($339|0);
   if ($340) {
    label = 96;
    break L37;
   }
   $341 = HEAP32[3680>>2]|0;
   $342 = HEAP32[3688>>2]|0;
   $343 = HEAP32[3720>>2]|0;
   $344 = $343<<4;
   _memmove(($341|0),($342|0),($344|0))|0;
   $345 = HEAP32[3720>>2]|0;
   HEAP32[3712>>2] = $345;
   $346 = HEAP32[$t1>>2]|0;
   $347 = (($346) + 1)|0;
   $348 = HEAP32[3688>>2]|0;
   $349 = (($348) + ($347<<4)|0);
   $350 = HEAP32[$t1>>2]|0;
   $351 = HEAP32[$len_t1>>2]|0;
   $352 = (($350) + ($351))|0;
   $353 = HEAP32[3688>>2]|0;
   $354 = (($353) + ($352<<4)|0);
   $355 = HEAP32[3720>>2]|0;
   $356 = HEAP32[$t1>>2]|0;
   $357 = HEAP32[$len_t1>>2]|0;
   $358 = (($356) + ($357))|0;
   $359 = (($355) - ($358))|0;
   $360 = $359<<4;
   _memmove(($349|0),($354|0),($360|0))|0;
   $361 = HEAP32[$len_t1>>2]|0;
   $362 = (($361) - 1)|0;
   $363 = HEAP32[3720>>2]|0;
   $364 = (($363) - ($362))|0;
   HEAP32[3720>>2] = $364;
   $365 = HEAP32[$t1>>2]|0;
   $366 = HEAP32[3688>>2]|0;
   $367 = (($366) + ($365<<4)|0);
   ;HEAP32[$367+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$367+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$367+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$367+12>>2]=HEAP32[3736+12>>2]|0;
   $i = 0;
   while(1) {
    $368 = $i;
    $369 = HEAP32[3720>>2]|0;
    $370 = ($368|0)<($369|0);
    if (!($370)) {
     break;
    }
    $371 = $i;
    $372 = HEAP32[3688>>2]|0;
    $373 = (($372) + ($371<<4)|0);
    $374 = (($373) + 4|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (($375) + 1)|0;
    HEAP32[$374>>2] = $376;
    $377 = $i;
    $378 = (($377) + 1)|0;
    $i = $378;
   }
   $379 = HEAP32[3720>>2]|0;
   $380 = HEAP32[3688>>2]|0;
   $381 = (($380) + ($379<<4)|0);
   $382 = (($381) + 4|0);
   HEAP32[$382>>2] = 1;
   $383 = HEAP32[3720>>2]|0;
   $384 = HEAP32[3688>>2]|0;
   $385 = (($384) + ($383<<4)|0);
   HEAP32[$385>>2] = 2;
   $386 = $sign;
   $387 = ($386|0)==(1);
   if ($387) {
    $388 = HEAP32[3720>>2]|0;
    $389 = HEAP32[3688>>2]|0;
    $390 = (($389) + ($388<<4)|0);
    $391 = (($390) + 8|0);
    HEAP32[$391>>2] = 2;
   } else {
    $392 = HEAP32[3720>>2]|0;
    $393 = HEAP32[3688>>2]|0;
    $394 = (($393) + ($392<<4)|0);
    $395 = (($394) + 8|0);
    HEAP32[$395>>2] = 1;
   }
   $396 = HEAP32[3720>>2]|0;
   $397 = (($396) + 1)|0;
   HEAP32[3720>>2] = $397;
   $398 = HEAP32[3720>>2]|0;
   $399 = HEAP32[3688>>2]|0;
   $400 = (($399) + ($398<<4)|0);
   $401 = $qp;
   $402 = $q_size;
   $403 = $402<<4;
   _memmove(($400|0),($401|0),($403|0))|0;
   $404 = HEAP32[3720>>2]|0;
   $i = $404;
   $405 = $q_size;
   $406 = HEAP32[3720>>2]|0;
   $407 = (($406) + ($405))|0;
   HEAP32[3720>>2] = $407;
   while(1) {
    $408 = $i;
    $409 = HEAP32[3720>>2]|0;
    $410 = ($408|0)<($409|0);
    if (!($410)) {
     break;
    }
    $411 = $i;
    $412 = HEAP32[3688>>2]|0;
    $413 = (($412) + ($411<<4)|0);
    $414 = (($413) + 4|0);
    $415 = HEAP32[$414>>2]|0;
    $416 = (($415) + 1)|0;
    HEAP32[$414>>2] = $416;
    $417 = $i;
    $418 = (($417) + 1)|0;
    $i = $418;
   }
   $419 = HEAP32[3720>>2]|0;
   $420 = HEAP32[3688>>2]|0;
   $421 = (($420) + ($419<<4)|0);
   $422 = (($421) + 4|0);
   HEAP32[$422>>2] = 2;
   $423 = HEAP32[3720>>2]|0;
   $424 = HEAP32[3688>>2]|0;
   $425 = (($424) + ($423<<4)|0);
   HEAP32[$425>>2] = 2;
   $426 = HEAP32[3720>>2]|0;
   $427 = HEAP32[3688>>2]|0;
   $428 = (($427) + ($426<<4)|0);
   $429 = (($428) + 8|0);
   HEAP32[$429>>2] = 4;
   $430 = HEAP32[3720>>2]|0;
   $431 = (($430) + 1)|0;
   HEAP32[3720>>2] = $431;
   $432 = HEAP32[3720>>2]|0;
   $i = $432;
   $433 = HEAP32[3720>>2]|0;
   $434 = HEAP32[3688>>2]|0;
   $435 = (($434) + ($433<<4)|0);
   $436 = $t2;
   $437 = $436<<4;
   _memmove(($435|0),(552056|0),($437|0))|0;
   $438 = $t2;
   $439 = HEAP32[3720>>2]|0;
   $440 = (($439) + ($438))|0;
   HEAP32[3720>>2] = $440;
   $441 = HEAP32[3720>>2]|0;
   $442 = HEAP32[3688>>2]|0;
   $443 = (($442) + ($441<<4)|0);
   ;HEAP32[$443+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$443+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$443+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$443+12>>2]=HEAP32[3736+12>>2]|0;
   $444 = HEAP32[3720>>2]|0;
   $445 = (($444) + 1)|0;
   HEAP32[3720>>2] = $445;
   $446 = HEAP32[3720>>2]|0;
   $447 = HEAP32[3688>>2]|0;
   $448 = (($447) + ($446<<4)|0);
   $449 = $t2;
   $450 = $len_t2;
   $451 = (($449) + ($450))|0;
   $452 = (552056 + ($451<<4)|0);
   $453 = HEAP32[792056>>2]|0;
   $454 = $t2;
   $455 = $len_t2;
   $456 = (($454) + ($455))|0;
   $457 = (($453) - ($456))|0;
   $458 = $457<<4;
   _memmove(($448|0),($452|0),($458|0))|0;
   $459 = HEAP32[792056>>2]|0;
   $460 = $t2;
   $461 = $len_t2;
   $462 = (($460) + ($461))|0;
   $463 = (($459) - ($462))|0;
   $464 = HEAP32[3720>>2]|0;
   $465 = (($464) + ($463))|0;
   HEAP32[3720>>2] = $465;
   while(1) {
    $466 = $i;
    $467 = HEAP32[3720>>2]|0;
    $468 = ($466|0)<($467|0);
    if (!($468)) {
     break;
    }
    $469 = $i;
    $470 = HEAP32[3688>>2]|0;
    $471 = (($470) + ($469<<4)|0);
    $472 = (($471) + 4|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = (($473) + 2)|0;
    HEAP32[$472>>2] = $474;
    $475 = $i;
    $476 = (($475) + 1)|0;
    $i = $476;
   }
   $477 = HEAP32[3688>>2]|0;
   (_uf_tsimp($477,3720)|0);
   $478 = HEAP32[3720>>2]|0;
   $479 = ($478|0)==(1);
   if ($479) {
    $480 = HEAP32[3688>>2]|0;
    $481 = HEAP32[$480>>2]|0;
    $482 = ($481|0)==(0);
    if ($482) {
     $483 = HEAP32[3688>>2]|0;
     $484 = (($483) + 8|0);
     $485 = +HEAPF64[$484>>3];
     $486 = $485 == 0.0;
     if ($486) {
      label = 115;
      break L37;
     }
    }
   }
   $487 = $dcount;
   $488 = ($487|0)>(1);
   do {
    if ($488) {
     $489 = HEAP32[3720>>2]|0;
     $490 = HEAP32[312048>>2]|0;
     $491 = (($489) + ($490))|0;
     $492 = $sum_size;
     $493 = ($491|0)>=($492|0);
     if (!($493)) {
      break;
     }
     $494 = $skip_count;
     $495 = ($494|0)>=(100);
     if ($495) {
      label = 119;
      break L37;
     }
     $504 = $term_pos;
     $505 = $skip_count;
     $506 = (($skip_terms) + ($505<<2)|0);
     HEAP32[$506>>2] = $504;
     $507 = $skip_count;
     $508 = (($507) + 1)|0;
     $skip_count = $508;
     $509 = $old_n_quotient;
     HEAP32[312048>>2] = $509;
     $510 = HEAP32[3688>>2]|0;
     $511 = HEAP32[3680>>2]|0;
     $512 = HEAP32[3712>>2]|0;
     $513 = $512<<4;
     _memmove(($510|0),($511|0),($513|0))|0;
     $514 = HEAP32[3712>>2]|0;
     HEAP32[3720>>2] = $514;
     continue L39;
    }
   } while(0);
   $515 = HEAP32[3720>>2]|0;
   $516 = ($515|0)==(1);
   if ($516) {
    $517 = HEAP32[3688>>2]|0;
    $518 = HEAP32[$517>>2]|0;
    $519 = ($518|0)==(0);
    if ($519) {
     label = 126;
     break L37;
    }
   }
   $skip_count = 0;
   $520 = $count;
   $521 = (($520) + 1)|0;
   $count = $521;
  }
  $192 = $count;
  $193 = ($192|0)<=(0);
  if (!($193)) {
   label = 59;
   break;
  }
  $194 = $dcount;
  $195 = ($194|0)>(1);
  if (!($195)) {
   label = 58;
   break;
  }
  $dcount = 1;
  $t2 = 0;
  $196 = HEAP32[792056>>2]|0;
  $len_t2 = $196;
 }
 do {
  if ((label|0) == 39) {
   $0 = 0;
   $522 = $0;
   STACKTOP = sp;return ($522|0);
  }
  else if ((label|0) == 58) {
   $0 = 0;
   $522 = $0;
   STACKTOP = sp;return ($522|0);
  }
  else if ((label|0) == 59) {
   label = 60;
  }
  else if ((label|0) == 77) {
   $0 = 0;
   $522 = $0;
   STACKTOP = sp;return ($522|0);
  }
  else if ((label|0) == 90) {
   $0 = 0;
   $522 = $0;
   STACKTOP = sp;return ($522|0);
  }
  else if ((label|0) == 96) {
   $0 = 0;
   $522 = $0;
   STACKTOP = sp;return ($522|0);
  }
  else if ((label|0) == 115) {
  }
  else if ((label|0) == 119) {
   $496 = $count;
   $497 = ($496|0)==(0);
   if (!($497)) {
    $498 = $old_n_quotient;
    HEAP32[312048>>2] = $498;
    $499 = HEAP32[3688>>2]|0;
    $500 = HEAP32[3680>>2]|0;
    $501 = HEAP32[3712>>2]|0;
    $502 = $501<<4;
    _memmove(($499|0),($500|0),($502|0))|0;
    $503 = HEAP32[3712>>2]|0;
    HEAP32[3720>>2] = $503;
    label = 60;
    break;
   }
   $0 = 0;
   $522 = $0;
   STACKTOP = sp;return ($522|0);
  }
  else if ((label|0) == 126) {
   label = 60;
  }
 } while(0);
 if ((label|0) == 60) {
  $197 = $dcount;
  $198 = ($197|0)>(1);
  do {
   if ($198) {
    $199 = HEAP32[312048>>2]|0;
    $200 = HEAP32[3720>>2]|0;
    $201 = (($199) + ($200))|0;
    $202 = $trhs_size;
    $203 = (($202) + 1)|0;
    $204 = ($201|0)>=($203|0);
    if (!($204)) {
     break;
    }
    $0 = 0;
    $522 = $0;
    STACKTOP = sp;return ($522|0);
   }
  } while(0);
 }
 $205 = HEAP32[3680>>2]|0;
 $206 = HEAP32[312048>>2]|0;
 $207 = $206<<4;
 _memmove(($205|0),(312056|0),($207|0))|0;
 $208 = HEAP32[312048>>2]|0;
 HEAP32[3712>>2] = $208;
 $0 = 1;
 $522 = $0;
 STACKTOP = sp;return ($522|0);
}
function _get_term($p1,$n1,$count,$tp1,$lentp1) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 $count = $count|0;
 $tp1 = $tp1|0;
 $lentp1 = $lentp1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $no = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n1;
 $3 = $count;
 $4 = $tp1;
 $5 = $lentp1;
 $no = 0;
 $i = 1;
 $j = 0;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = ($6|0)>=($7|0);
  if ($8) {
   label = 6;
  } else {
   $9 = $i;
   $10 = $1;
   $11 = (($10) + ($9<<4)|0);
   $12 = (($11) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(1);
   if ($14) {
    $15 = $i;
    $16 = $1;
    $17 = (($16) + ($15<<4)|0);
    $18 = (($17) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(1);
    if ($20) {
     label = 6;
    } else {
     $21 = $i;
     $22 = $1;
     $23 = (($22) + ($21<<4)|0);
     $24 = (($23) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(2);
     if ($26) {
      label = 6;
     }
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $27 = $no;
   $28 = (($27) + 1)|0;
   $no = $28;
   $29 = $no;
   $30 = $3;
   $31 = ($29|0)>=($30|0);
   if ($31) {
    label = 7;
    break;
   }
   $38 = $i;
   $39 = (($38) + 1)|0;
   $j = $39;
  }
  $40 = $i;
  $41 = $2;
  $42 = ($40|0)>=($41|0);
  if ($42) {
   label = 10;
   break;
  }
  $43 = $i;
  $44 = (($43) + 2)|0;
  $i = $44;
 }
 if ((label|0) == 7) {
  $32 = $j;
  $33 = $4;
  HEAP32[$33>>2] = $32;
  $34 = $i;
  $35 = $j;
  $36 = (($34) - ($35))|0;
  $37 = $5;
  HEAP32[$37>>2] = $36;
  $0 = 1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 return 0|0;
}
function _basic_size($p1,$len) {
 $p1 = $p1|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $constant_flag = 0, $i = 0, $j = 0, $level = 0;
 var $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $len;
 $constant_flag = 1;
 $2 = $1;
 $rv = $2;
 $3 = $0;
 $4 = $1;
 $5 = (_min_level($3,$4)|0);
 $level = $5;
 $i = 0;
 $j = -1;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $0;
  $11 = (($10) + ($9<<4)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(2);
  if ($13) {
   $14 = $i;
   $15 = $0;
   $16 = (($15) + ($14<<4)|0);
   $17 = (($16) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $level;
   $20 = ($18|0)==($19|0);
   do {
    if ($20) {
     $21 = $i;
     $22 = $0;
     $23 = (($22) + ($21<<4)|0);
     $24 = (($23) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(4);
     if (!($26)) {
      $27 = $i;
      $28 = $0;
      $29 = (($28) + ($27<<4)|0);
      $30 = (($29) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(5);
      if (!($32)) {
       break;
      }
     }
     $33 = $constant_flag;
     $34 = ($33|0)!=(0);
     if ($34) {
      $35 = $i;
      $36 = $j;
      $37 = (($35) - ($36))|0;
      $38 = $rv;
      $39 = (($38) - ($37))|0;
      $rv = $39;
     }
     $40 = $i;
     $j = $40;
     $constant_flag = 1;
    }
   } while(0);
  } else {
   $41 = $i;
   $42 = $0;
   $43 = (($42) + ($41<<4)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)!=(0);
   if ($45) {
    $constant_flag = 0;
   }
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 $48 = $constant_flag;
 $49 = ($48|0)!=(0);
 if (!($49)) {
  $55 = $rv;
  STACKTOP = sp;return ($55|0);
 }
 $50 = $i;
 $51 = $j;
 $52 = (($50) - ($51))|0;
 $53 = $rv;
 $54 = (($53) - ($52))|0;
 $rv = $54;
 $55 = $rv;
 STACKTOP = sp;return ($55|0);
}
function _term_value($dp,$p1,$n1,$loc) {
 $dp = $dp|0;
 $p1 = $p1|0;
 $n1 = $n1|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0.0, $div_level = 0, $divide_flag = 0, $i = 0, $j = 0, $k = 0, $level = 0, $sub_count = 0.0, $sub_sum = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dp;
 $1 = $p1;
 $2 = $n1;
 $3 = $loc;
 $divide_flag = 0;
 $div_level = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(3);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<3)|0);
  HEAPF64[$8>>3] = 0.0;
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 $11 = $3;
 $i = $11;
 L6: while(1) {
  $12 = $i;
  $13 = $2;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $1;
  $17 = (($16) + ($15<<4)|0);
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $level = $19;
  $20 = $i;
  $21 = $1;
  $22 = (($21) + ($20<<4)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(1);
  do {
   if ($24) {
    $25 = $divide_flag;
    $26 = ($25|0)!=(0);
    if ($26) {
     $27 = $0;
     $28 = +HEAPF64[$27>>3];
     $29 = $28 - 1.0;
     HEAPF64[$27>>3] = $29;
     $30 = $i;
     $31 = $1;
     $32 = (($31) + ($30<<4)|0);
     $33 = (($32) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (+($34|0));
     $36 = $0;
     $37 = (($36) + 8|0);
     $38 = +HEAPF64[$37>>3];
     $39 = $38 - $35;
     HEAPF64[$37>>3] = $39;
     $40 = $i;
     $41 = $1;
     $42 = (($41) + ($40<<4)|0);
     $43 = (($42) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (+($44|0));
     $46 = $0;
     $47 = (($46) + 16|0);
     $48 = +HEAPF64[$47>>3];
     $49 = $48 - $45;
     HEAPF64[$47>>3] = $49;
    } else {
     $50 = $0;
     $51 = +HEAPF64[$50>>3];
     $52 = $51 + 1.0;
     HEAPF64[$50>>3] = $52;
     $53 = $i;
     $54 = $1;
     $55 = (($54) + ($53<<4)|0);
     $56 = (($55) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (+($57|0));
     $59 = $0;
     $60 = (($59) + 8|0);
     $61 = +HEAPF64[$60>>3];
     $62 = $61 + $58;
     HEAPF64[$60>>3] = $62;
     $63 = $i;
     $64 = $1;
     $65 = (($64) + ($63<<4)|0);
     $66 = (($65) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (+($67|0));
     $69 = $0;
     $70 = (($69) + 16|0);
     $71 = +HEAPF64[$70>>3];
     $72 = $71 + $68;
     HEAPF64[$70>>3] = $72;
    }
    label = 28;
   } else {
    $73 = $i;
    $74 = $1;
    $75 = (($74) + ($73<<4)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==(2);
    if ($77) {
     $78 = $level;
     $79 = ($78|0)==(1);
     if ($79) {
      $80 = $i;
      $81 = $1;
      $82 = (($81) + ($80<<4)|0);
      $83 = (($82) + 8|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($84|0)==(1);
      if ($85) {
       label = 16;
       break L6;
      }
      $86 = $i;
      $87 = $1;
      $88 = (($87) + ($86<<4)|0);
      $89 = (($88) + 8|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)==(2);
      if ($91) {
       label = 16;
       break L6;
      }
     }
     $92 = $i;
     $93 = $1;
     $94 = (($93) + ($92<<4)|0);
     $95 = (($94) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)==(5);
     if ($97) {
      $98 = $divide_flag;
      $99 = ($98|0)!=(0);
      if ($99) {
       $100 = $level;
       $101 = $div_level;
       $102 = ($100|0)>=($101|0);
       if ($102) {
        break;
       }
      }
      $103 = $level;
      $div_level = $103;
      $divide_flag = 1;
     } else {
      $104 = $divide_flag;
      $105 = ($104|0)!=(0);
      if ($105) {
       $106 = $level;
       $107 = $div_level;
       $108 = ($106|0)<=($107|0);
       if ($108) {
        $divide_flag = 0;
       }
      }
     }
    }
    label = 28;
   }
  } while(0);
  if ((label|0) == 28) {
   label = 0;
  }
  $109 = $i;
  $110 = (($109) + 1)|0;
  $i = $110;
 }
 if ((label|0) == 16) {
 }
 $divide_flag = 0;
 $111 = $3;
 $112 = (($111) + 1)|0;
 $j = $112;
 while(1) {
  $113 = $j;
  $114 = $i;
  $115 = ($113|0)<($114|0);
  if (!($115)) {
   break;
  }
  $116 = $j;
  $117 = $1;
  $118 = (($117) + ($116<<4)|0);
  $119 = (($118) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $level = $120;
  $121 = $j;
  $122 = $1;
  $123 = (($122) + ($121<<4)|0);
  $124 = (($123) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)==(5);
  do {
   if ($126) {
    $127 = $divide_flag;
    $128 = ($127|0)!=(0);
    if ($128) {
     $129 = $level;
     $130 = $div_level;
     $131 = ($129|0)>=($130|0);
     if ($131) {
      break;
     }
    }
    $132 = $level;
    $div_level = $132;
    $divide_flag = 1;
    label = 41;
   } else {
    $133 = $divide_flag;
    $134 = ($133|0)!=(0);
    if ($134) {
     $135 = $level;
     $136 = $div_level;
     $137 = ($135|0)<=($136|0);
     if ($137) {
      $divide_flag = 0;
     }
    }
    label = 41;
   }
  } while(0);
  if ((label|0) == 41) {
   label = 0;
   $138 = $j;
   $139 = $1;
   $140 = (($139) + ($138<<4)|0);
   $141 = (($140) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(8);
   if ($143) {
    $144 = $level;
    $145 = $j;
    $146 = (($145) + 1)|0;
    $147 = $1;
    $148 = (($147) + ($146<<4)|0);
    $149 = (($148) + 4|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ($144|0)==($150|0);
    if ($151) {
     $152 = $j;
     $153 = (($152) + 1)|0;
     $154 = $1;
     $155 = (($154) + ($153<<4)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==(0);
     if ($157) {
      $158 = $j;
      $159 = (($158) + 1)|0;
      $160 = $1;
      $161 = (($160) + ($159<<4)|0);
      $162 = (($161) + 8|0);
      $163 = +HEAPF64[$162>>3];
      $164 = $163 - 1.0;
      $d = $164;
      $sub_count = 0.0;
      $sub_sum = 0.0;
      $165 = $j;
      $166 = (($165) - 1)|0;
      $k = $166;
      while(1) {
       $167 = $k;
       $168 = $3;
       $169 = ($167|0)>=($168|0);
       if ($169) {
        $170 = $k;
        $171 = $1;
        $172 = (($171) + ($170<<4)|0);
        $173 = (($172) + 4|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = $level;
        $176 = ($174|0)>=($175|0);
        $224 = $176;
       } else {
        $224 = 0;
       }
       if (!($224)) {
        break;
       }
       $177 = $k;
       $178 = $1;
       $179 = (($178) + ($177<<4)|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(1);
       if ($181) {
        $182 = $sub_count;
        $183 = $182 + 1.0;
        $sub_count = $183;
        $184 = $k;
        $185 = $1;
        $186 = (($185) + ($184<<4)|0);
        $187 = (($186) + 8|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = (+($188|0));
        $190 = $sub_sum;
        $191 = $190 + $189;
        $sub_sum = $191;
       }
       $192 = $k;
       $193 = (($192) + -1)|0;
       $k = $193;
      }
      $194 = $divide_flag;
      $195 = ($194|0)!=(0);
      if ($195) {
       $196 = $d;
       $197 = $sub_count;
       $198 = $196 * $197;
       $199 = $0;
       $200 = +HEAPF64[$199>>3];
       $201 = $200 - $198;
       HEAPF64[$199>>3] = $201;
       $202 = $d;
       $203 = $sub_sum;
       $204 = $202 * $203;
       $205 = $0;
       $206 = (($205) + 16|0);
       $207 = +HEAPF64[$206>>3];
       $208 = $207 - $204;
       HEAPF64[$206>>3] = $208;
      } else {
       $209 = $d;
       $210 = $sub_count;
       $211 = $209 * $210;
       $212 = $0;
       $213 = +HEAPF64[$212>>3];
       $214 = $213 + $211;
       HEAPF64[$212>>3] = $214;
       $215 = $d;
       $216 = $sub_sum;
       $217 = $215 * $216;
       $218 = $0;
       $219 = (($218) + 16|0);
       $220 = +HEAPF64[$219>>3];
       $221 = $220 + $217;
       HEAPF64[$219>>3] = $221;
      }
     }
    }
   }
  }
  $222 = $j;
  $223 = (($222) + 2)|0;
  $j = $223;
 }
 STACKTOP = sp;return;
}
function _find_greatest_power($p1,$n1,$vp1,$pp1,$tp1,$lentp1,$dcodep) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 $vp1 = $vp1|0;
 $pp1 = $pp1|0;
 $tp1 = $tp1|0;
 $lentp1 = $lentp1|0;
 $dcodep = $dcodep|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0.0, $count = 0, $d = 0.0, $div_level = 0, $divide_flag = 0, $flag = 0, $i = 0, $ii = 0, $j = 0, $k = 0, $last_va = 0, $level = 0, $rv = 0, $v = 0, $va = 0, $was_power = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $last_va = sp + 24|0;
 $va = sp;
 $0 = $p1;
 $1 = $n1;
 $2 = $vp1;
 $3 = $pp1;
 $4 = $tp1;
 $5 = $lentp1;
 $6 = $dcodep;
 $divide_flag = 0;
 $div_level = 0;
 $v = 0;
 $was_power = 0;
 $count = 0;
 ;HEAP32[$last_va+0>>2]=0|0;HEAP32[$last_va+4>>2]=0|0;HEAP32[$last_va+8>>2]=0|0;HEAP32[$last_va+12>>2]=0|0;HEAP32[$last_va+16>>2]=0|0;HEAP32[$last_va+20>>2]=0|0;
 $7 = $3;
 HEAPF64[$7>>3] = 0.0;
 $8 = $4;
 HEAP32[$8>>2] = -1;
 $9 = $5;
 HEAP32[$9>>2] = 0;
 $10 = $6;
 $11 = HEAP32[$10>>2]|0;
 $rv = $11;
 $j = 0;
 $i = 1;
 while(1) {
  $12 = $i;
  $13 = $1;
  $14 = ($12|0)>=($13|0);
  L3: do {
   if ($14) {
    label = 6;
   } else {
    $15 = $i;
    $16 = $0;
    $17 = (($16) + ($15<<4)|0);
    $18 = (($17) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(1);
    if ($20) {
     label = 5;
    } else {
     $21 = $i;
     $22 = $0;
     $23 = (($22) + ($21<<4)|0);
     $24 = (($23) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(2);
     if ($26) {
      label = 5;
     }
    }
    if ((label|0) == 5) {
     label = 0;
     $27 = $i;
     $28 = $0;
     $29 = (($28) + ($27<<4)|0);
     $30 = (($29) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(1);
     if ($32) {
      label = 6;
      break;
     }
    }
    $202 = $i;
    $203 = $0;
    $204 = (($203) + ($202<<4)|0);
    $205 = (($204) + 4|0);
    $206 = HEAP32[$205>>2]|0;
    $level = $206;
    $207 = $i;
    $208 = $0;
    $209 = (($208) + ($207<<4)|0);
    $210 = (($209) + 8|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ($211|0)==(5);
    if ($212) {
     $213 = $divide_flag;
     $214 = ($213|0)!=(0);
     if ($214) {
      $215 = $level;
      $216 = $div_level;
      $217 = ($215|0)>=($216|0);
      if ($217) {
       break;
      }
     }
     $218 = $level;
     $div_level = $218;
     $divide_flag = 1;
    } else {
     $219 = $divide_flag;
     $220 = ($219|0)!=(0);
     if ($220) {
      $221 = $level;
      $222 = $div_level;
      $223 = ($221|0)<=($222|0);
      if ($223) {
       $divide_flag = 0;
      }
     }
    }
    $224 = $i;
    $225 = $0;
    $226 = (($225) + ($224<<4)|0);
    $227 = (($226) + 8|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ($228|0)==(8);
    do {
     if ($229) {
      $230 = $i;
      $231 = (($230) + 1)|0;
      $232 = $0;
      $233 = (($232) + ($231<<4)|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ($234|0)==(0);
      if ($235) {
       $236 = $2;
       $237 = HEAP32[$236>>2]|0;
       $238 = ($237|0)!=(0);
       if (!($238)) {
        $239 = $level;
        $240 = $i;
        $241 = (($240) + 1)|0;
        $242 = $0;
        $243 = (($242) + ($241<<4)|0);
        $244 = (($243) + 4|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = ($239|0)==($245|0);
        if (!($246)) {
         break;
        }
       }
       $247 = $6;
       $248 = HEAP32[$247>>2]|0;
       $249 = ($248|0)<=(1);
       if ($249) {
        $250 = $6;
        $251 = HEAP32[$250>>2]|0;
        $252 = $divide_flag;
        $253 = ($251|0)!=($252|0);
        if ($253) {
         break L3;
        }
       }
       $254 = $i;
       $255 = (($254) + 1)|0;
       $256 = $0;
       $257 = (($256) + ($255<<4)|0);
       $258 = (($257) + 8|0);
       $259 = +HEAPF64[$258>>3];
       $d = $259;
       $260 = $i;
       $k = $260;
       while(1) {
        $261 = $k;
        $262 = (($261) - 1)|0;
        $263 = $0;
        $264 = (($263) + ($262<<4)|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = ($265|0)==(1);
        if ($266) {
         $267 = $2;
         $268 = HEAP32[$267>>2]|0;
         $269 = ($268|0)!=(0);
         if ($269) {
          $270 = $k;
          $271 = (($270) - 1)|0;
          $272 = $0;
          $273 = (($272) + ($271<<4)|0);
          $274 = (($273) + 8|0);
          $275 = HEAP32[$274>>2]|0;
          $276 = $2;
          $277 = HEAP32[$276>>2]|0;
          $278 = ($275|0)==($277|0);
          if ($278) {
           label = 89;
           break;
          }
         } else {
          $339 = $k;
          $340 = (($339) - 1)|0;
          $341 = $0;
          $342 = (($341) + ($340<<4)|0);
          $343 = (($342) + 8|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = $344 & 16383;
          $346 = ($345|0)>(4);
          if ($346) {
           label = 114;
           break;
          }
         }
        }
        $362 = $k;
        $363 = (($362) - 2)|0;
        $k = $363;
        $364 = $k;
        $365 = $j;
        $366 = ($364|0)<=($365|0);
        if ($366) {
         label = 120;
         break;
        }
        $367 = $k;
        $368 = $0;
        $369 = (($368) + ($367<<4)|0);
        $370 = (($369) + 4|0);
        $371 = HEAP32[$370>>2]|0;
        $372 = $level;
        $373 = ($371|0)<=($372|0);
        if ($373) {
         label = 122;
         break;
        }
       }
       if ((label|0) == 89) {
        label = 0;
        $was_power = 1;
        $279 = $0;
        $280 = $1;
        $281 = $j;
        _term_value($va,$279,$280,$281);
        $282 = $d;
        $283 = $3;
        $284 = +HEAPF64[$283>>3];
        $285 = $282 == $284;
        if ($285) {
         $286 = $rv;
         $287 = $divide_flag;
         $288 = ($286|0)>($287|0);
         $290 = $288;
        } else {
         $290 = 0;
        }
        $289 = $290&1;
        $flag = $289;
        $291 = $d;
        $292 = $3;
        $293 = +HEAPF64[$292>>3];
        $294 = $291 == $293;
        if ($294) {
         $295 = $rv;
         $296 = $divide_flag;
         $297 = ($295|0)==($296|0);
         if ($297) {
          $298 = $4;
          $299 = HEAP32[$298>>2]|0;
          $300 = $j;
          $301 = ($299|0)!=($300|0);
          if ($301) {
           $302 = $count;
           $303 = (($302) + 1)|0;
           $count = $303;
          }
          $ii = 0;
          while(1) {
           $304 = $ii;
           $305 = ($304|0)<(3);
           if (!($305)) {
            break;
           }
           $306 = $ii;
           $307 = (($va) + ($306<<3)|0);
           $308 = +HEAPF64[$307>>3];
           $309 = $ii;
           $310 = (($last_va) + ($309<<3)|0);
           $311 = +HEAPF64[$310>>3];
           $312 = $308 == $311;
           if (!($312)) {
            label = 99;
            break;
           }
           $320 = $ii;
           $321 = (($320) + 1)|0;
           $ii = $321;
          }
          if ((label|0) == 99) {
           label = 0;
           $313 = $ii;
           $314 = (($va) + ($313<<3)|0);
           $315 = +HEAPF64[$314>>3];
           $316 = $ii;
           $317 = (($last_va) + ($316<<3)|0);
           $318 = +HEAPF64[$317>>3];
           $319 = $315 < $318;
           if ($319) {
            $flag = 1;
           }
          }
         } else {
          label = 104;
         }
        } else {
         label = 104;
        }
        if ((label|0) == 104) {
         label = 0;
         $322 = $d;
         $323 = $3;
         $324 = +HEAPF64[$323>>3];
         $325 = $322 > $324;
         if ($325) {
          label = 106;
         } else {
          $326 = $flag;
          $327 = ($326|0)!=(0);
          if ($327) {
           label = 106;
          }
         }
         if ((label|0) == 106) {
          label = 0;
          $count = 1;
         }
        }
        $328 = $d;
        $329 = $3;
        $330 = +HEAPF64[$329>>3];
        $331 = $328 > $330;
        if ($331) {
         label = 110;
        } else {
         $332 = $flag;
         $333 = ($332|0)!=(0);
         if ($333) {
          label = 110;
         }
        }
        if ((label|0) == 110) {
         label = 0;
         _memmove(($last_va|0),($va|0),24)|0;
         $334 = $d;
         $335 = $3;
         HEAPF64[$335>>3] = $334;
         $336 = $j;
         $337 = $4;
         HEAP32[$337>>2] = $336;
         $338 = $divide_flag;
         $rv = $338;
        }
       }
       else if ((label|0) == 114) {
        label = 0;
        $was_power = 1;
        $347 = $d;
        $348 = $3;
        $349 = +HEAPF64[$348>>3];
        $350 = $347 > $349;
        if ($350) {
         $351 = $k;
         $352 = (($351) - 1)|0;
         $353 = $0;
         $354 = (($353) + ($352<<4)|0);
         $355 = (($354) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $v = $356;
         $357 = $d;
         $358 = $3;
         HEAPF64[$358>>3] = $357;
         $359 = $j;
         $360 = $4;
         HEAP32[$360>>2] = $359;
         $361 = $divide_flag;
         $rv = $361;
        }
       }
       else if ((label|0) == 120) {
        label = 0;
       }
       else if ((label|0) == 122) {
        label = 0;
       }
      }
     }
    } while(0);
   }
  } while(0);
  if ((label|0) == 6) {
   label = 0;
   $divide_flag = 0;
   $33 = $was_power;
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $35 = $3;
    $36 = +HEAPF64[$35>>3];
    $37 = $36 <= 1.0;
    if ($37) {
     $38 = $j;
     $k = $38;
     L93: while(1) {
      $39 = $k;
      $40 = $i;
      $41 = ($39|0)<($40|0);
      if (!($41)) {
       break;
      }
      $42 = $k;
      $43 = $0;
      $44 = (($43) + ($42<<4)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==(1);
      do {
       if ($46) {
        $47 = $6;
        $48 = HEAP32[$47>>2]|0;
        $49 = ($48|0)<=(1);
        if ($49) {
         $50 = $6;
         $51 = HEAP32[$50>>2]|0;
         $52 = $divide_flag;
         $53 = ($51|0)!=($52|0);
         if ($53) {
          break;
         }
        }
        $54 = $2;
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)!=(0);
        if ($56) {
         $57 = $k;
         $58 = $0;
         $59 = (($58) + ($57<<4)|0);
         $60 = (($59) + 8|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = $2;
         $63 = HEAP32[$62>>2]|0;
         $64 = ($61|0)==($63|0);
         if ($64) {
          label = 16;
          break L93;
         }
        } else {
         $120 = $k;
         $121 = $0;
         $122 = (($121) + ($120<<4)|0);
         $123 = (($122) + 8|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = $124 & 16383;
         $126 = ($125|0)>(4);
         if ($126) {
          label = 41;
          break L93;
         }
        }
        label = 63;
       } else {
        $136 = $k;
        $137 = $0;
        $138 = (($137) + ($136<<4)|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = ($139|0)==(2);
        if ($140) {
         $141 = $k;
         $142 = $0;
         $143 = (($142) + ($141<<4)|0);
         $144 = (($143) + 8|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = ($145|0)==(5);
         if ($146) {
          $147 = $divide_flag;
          $148 = ($147|0)!=(0);
          if ($148) {
           $149 = $k;
           $150 = $0;
           $151 = (($150) + ($149<<4)|0);
           $152 = (($151) + 4|0);
           $153 = HEAP32[$152>>2]|0;
           $154 = $div_level;
           $155 = ($153|0)>=($154|0);
           if ($155) {
            break;
           }
          }
          $156 = $k;
          $157 = $0;
          $158 = (($157) + ($156<<4)|0);
          $159 = (($158) + 4|0);
          $160 = HEAP32[$159>>2]|0;
          $div_level = $160;
          $divide_flag = 1;
         } else {
          $161 = $divide_flag;
          $162 = ($161|0)!=(0);
          if ($162) {
           $163 = $k;
           $164 = $0;
           $165 = (($164) + ($163<<4)|0);
           $166 = (($165) + 4|0);
           $167 = HEAP32[$166>>2]|0;
           $168 = $div_level;
           $169 = ($167|0)<=($168|0);
           if ($169) {
            $divide_flag = 0;
           }
          }
         }
         $170 = $k;
         $171 = $0;
         $172 = (($171) + ($170<<4)|0);
         $173 = (($172) + 8|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==(8);
         if ($175) {
          $176 = $k;
          $177 = $0;
          $178 = (($177) + ($176<<4)|0);
          $179 = (($178) + 4|0);
          $180 = HEAP32[$179>>2]|0;
          $level = $180;
          while(1) {
           $181 = $k;
           $182 = (($181) + 2)|0;
           $k = $182;
           $183 = $k;
           $184 = $i;
           $185 = ($183|0)<($184|0);
           if ($185) {
            $186 = $k;
            $187 = $0;
            $188 = (($187) + ($186<<4)|0);
            $189 = (($188) + 4|0);
            $190 = HEAP32[$189>>2]|0;
            $191 = $level;
            $192 = ($190|0)>($191|0);
            $421 = $192;
           } else {
            $421 = 0;
           }
           if (!($421)) {
            break;
           }
          }
          $193 = $k;
          $194 = (($193) + -1)|0;
          $k = $194;
         }
        }
        label = 63;
       }
      } while(0);
      if ((label|0) == 63) {
       label = 0;
      }
      $195 = $k;
      $196 = (($195) + 1)|0;
      $k = $196;
     }
     if ((label|0) == 16) {
      label = 0;
      $65 = $0;
      $66 = $1;
      $67 = $j;
      _term_value($va,$65,$66,$67);
      $68 = $3;
      $69 = +HEAPF64[$68>>3];
      $70 = $69 == 1.0;
      if ($70) {
       $71 = $rv;
       $72 = $divide_flag;
       $73 = ($71|0)>($72|0);
       $75 = $73;
      } else {
       $75 = 0;
      }
      $74 = $75&1;
      $flag = $74;
      $76 = $3;
      $77 = +HEAPF64[$76>>3];
      $78 = $77 == 1.0;
      if ($78) {
       $79 = $rv;
       $80 = $divide_flag;
       $81 = ($79|0)==($80|0);
       if ($81) {
        $82 = $4;
        $83 = HEAP32[$82>>2]|0;
        $84 = $j;
        $85 = ($83|0)!=($84|0);
        if ($85) {
         $86 = $count;
         $87 = (($86) + 1)|0;
         $count = $87;
        }
        $ii = 0;
        while(1) {
         $88 = $ii;
         $89 = ($88|0)<(3);
         if (!($89)) {
          break;
         }
         $90 = $ii;
         $91 = (($va) + ($90<<3)|0);
         $92 = +HEAPF64[$91>>3];
         $93 = $ii;
         $94 = (($last_va) + ($93<<3)|0);
         $95 = +HEAPF64[$94>>3];
         $96 = $92 == $95;
         if (!($96)) {
          label = 26;
          break;
         }
         $104 = $ii;
         $105 = (($104) + 1)|0;
         $ii = $105;
        }
        if ((label|0) == 26) {
         label = 0;
         $97 = $ii;
         $98 = (($va) + ($97<<3)|0);
         $99 = +HEAPF64[$98>>3];
         $100 = $ii;
         $101 = (($last_va) + ($100<<3)|0);
         $102 = +HEAPF64[$101>>3];
         $103 = $99 < $102;
         if ($103) {
          $flag = 1;
         }
        }
       } else {
        label = 31;
       }
      } else {
       label = 31;
      }
      if ((label|0) == 31) {
       label = 0;
       $106 = $3;
       $107 = +HEAPF64[$106>>3];
       $108 = $107 < 1.0;
       if ($108) {
        label = 33;
       } else {
        $109 = $flag;
        $110 = ($109|0)!=(0);
        if ($110) {
         label = 33;
        }
       }
       if ((label|0) == 33) {
        label = 0;
        $count = 1;
       }
      }
      $111 = $3;
      $112 = +HEAPF64[$111>>3];
      $113 = $112 < 1.0;
      if ($113) {
       label = 37;
      } else {
       $114 = $flag;
       $115 = ($114|0)!=(0);
       if ($115) {
        label = 37;
       }
      }
      if ((label|0) == 37) {
       label = 0;
       _memmove(($last_va|0),($va|0),24)|0;
       $116 = $3;
       HEAPF64[$116>>3] = 1.0;
       $117 = $j;
       $118 = $4;
       HEAP32[$118>>2] = $117;
       $119 = $divide_flag;
       $rv = $119;
      }
     }
     else if ((label|0) == 41) {
      label = 0;
      $127 = $k;
      $128 = $0;
      $129 = (($128) + ($127<<4)|0);
      $130 = (($129) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $v = $131;
      $132 = $3;
      HEAPF64[$132>>3] = 1.0;
      $133 = $j;
      $134 = $4;
      HEAP32[$134>>2] = $133;
      $135 = $divide_flag;
      $rv = $135;
     }
    }
   }
   $197 = $i;
   $198 = $1;
   $199 = ($197|0)>=($198|0);
   if ($199) {
    break;
   }
   $200 = $i;
   $201 = (($200) + 1)|0;
   $j = $201;
   $was_power = 0;
   $divide_flag = 0;
  }
  $374 = $i;
  $375 = (($374) + 2)|0;
  $i = $375;
 }
 $376 = $2;
 $377 = HEAP32[$376>>2]|0;
 $378 = ($377|0)==(0);
 if ($378) {
  $379 = $v;
  $380 = $2;
  HEAP32[$380>>2] = $379;
 }
 $381 = $4;
 $382 = HEAP32[$381>>2]|0;
 $383 = ($382|0)>=(0);
 if ($383) {
  $384 = $4;
  $385 = HEAP32[$384>>2]|0;
  $386 = (($385) + 1)|0;
  $i = $386;
  while(1) {
   $387 = $i;
   $388 = $1;
   $389 = ($387|0)<($388|0);
   if (!($389)) {
    break;
   }
   $390 = $i;
   $391 = $0;
   $392 = (($391) + ($390<<4)|0);
   $393 = (($392) + 8|0);
   $394 = HEAP32[$393>>2]|0;
   $395 = ($394|0)==(1);
   if ($395) {
    label = 134;
   } else {
    $396 = $i;
    $397 = $0;
    $398 = (($397) + ($396<<4)|0);
    $399 = (($398) + 8|0);
    $400 = HEAP32[$399>>2]|0;
    $401 = ($400|0)==(2);
    if ($401) {
     label = 134;
    }
   }
   if ((label|0) == 134) {
    label = 0;
    $402 = $i;
    $403 = $0;
    $404 = (($403) + ($402<<4)|0);
    $405 = (($404) + 4|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = ($406|0)==(1);
    if ($407) {
     label = 135;
     break;
    }
   }
   $408 = $i;
   $409 = (($408) + 2)|0;
   $i = $409;
  }
  if ((label|0) == 135) {
  }
  $410 = $i;
  $411 = $4;
  $412 = HEAP32[$411>>2]|0;
  $413 = (($410) - ($412))|0;
  $414 = $5;
  HEAP32[$414>>2] = $413;
 }
 $415 = $6;
 $416 = HEAP32[$415>>2]|0;
 $417 = ($416|0)==(2);
 if (!($417)) {
  $420 = $count;
  STACKTOP = sp;return ($420|0);
 }
 $418 = $rv;
 $419 = $6;
 HEAP32[$419>>2] = $418;
 $420 = $count;
 STACKTOP = sp;return ($420|0);
}
function _find_highest_count($p1,$n1,$p2,$n2,$vp1) {
 $p1 = $p1|0;
 $n1 = $n1|0;
 $p2 = $p2|0;
 $n2 = $n2|0;
 $vp1 = $vp1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0;
 var $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt = 0, $count1 = 0, $count2 = 0, $cv = 0, $d1 = 0, $d2 = 0, $divide_flag = 0, $i = 0, $last_v = 0, $len_t1 = 0, $len_t2 = 0, $t1 = 0, $t2 = 0;
 var $v1 = 0, $va = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $va = sp + 48|0;
 $divide_flag = sp + 40|0;
 $t1 = sp + 36|0;
 $len_t1 = sp + 32|0;
 $t2 = sp + 28|0;
 $len_t2 = sp + 24|0;
 $d1 = sp + 8|0;
 $d2 = sp;
 $1 = $p1;
 $2 = $n1;
 $3 = $p2;
 $4 = $n2;
 $5 = $vp1;
 $last_v = 0;
 $vc = 0;
 while(1) {
  $6 = $vc;
  $7 = ($6|0)<(1000);
  if (!($7)) {
   break;
  }
  $cnt = 0;
  $v1 = -1;
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = $2;
   $10 = ($8|0)<($9|0);
   if (!($10)) {
    break;
   }
   $11 = $i;
   $12 = $1;
   $13 = (($12) + ($11<<4)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(1);
   if ($15) {
    $16 = $i;
    $17 = $1;
    $18 = (($17) + ($16<<4)|0);
    $19 = (($18) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $last_v;
    $22 = ($20|0)>($21|0);
    if ($22) {
     $23 = $v1;
     $24 = ($23|0)==(-1);
     if ($24) {
      label = 9;
     } else {
      $25 = $i;
      $26 = $1;
      $27 = (($26) + ($25<<4)|0);
      $28 = (($27) + 8|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $v1;
      $31 = ($29|0)<($30|0);
      if ($31) {
       label = 9;
      } else {
       $37 = $i;
       $38 = $1;
       $39 = (($38) + ($37<<4)|0);
       $40 = (($39) + 8|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = $v1;
       $43 = ($41|0)==($42|0);
       if ($43) {
        $44 = $cnt;
        $45 = (($44) + 1)|0;
        $cnt = $45;
       }
      }
     }
     if ((label|0) == 9) {
      label = 0;
      $32 = $i;
      $33 = $1;
      $34 = (($33) + ($32<<4)|0);
      $35 = (($34) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $v1 = $36;
      $cnt = 1;
     }
    }
   }
   $46 = $i;
   $47 = (($46) + 2)|0;
   $i = $47;
  }
  $48 = $v1;
  $49 = ($48|0)==(-1);
  if ($49) {
   label = 17;
   break;
  }
  $50 = $v1;
  $last_v = $50;
  $51 = $v1;
  $52 = $vc;
  $53 = (($va) + ($52<<3)|0);
  HEAP32[$53>>2] = $51;
  $54 = $cnt;
  $55 = $vc;
  $56 = (($va) + ($55<<3)|0);
  $57 = (($56) + 4|0);
  HEAP32[$57>>2] = $54;
  $58 = $vc;
  $59 = (($58) + 1)|0;
  $vc = $59;
 }
 if ((label|0) == 17) {
 }
 $60 = $vc;
 $61 = ($60|0)<=(0);
 if ($61) {
  $0 = 0;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 $62 = $vc;
 _qsort($va,$62,8,87);
 $cv = 4;
 $63 = $cv;
 $64 = ($63|0)>(0);
 do {
  if ($64) {
   $i = 0;
   while(1) {
    $65 = $i;
    $66 = $vc;
    $67 = ($65|0)<($66|0);
    if (!($67)) {
     label = 39;
     break;
    }
    $68 = $cv;
    $69 = ($68|0)>(3);
    if ($69) {
     $70 = $i;
     $71 = (($va) + ($70<<3)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 & 16383;
     $74 = ($73|0)<=(4);
     if ($74) {
      label = 28;
     } else {
      label = 29;
     }
    } else {
     $75 = $i;
     $76 = (($va) + ($75<<3)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $cv;
     $79 = ($77|0)!=($78|0);
     if ($79) {
      label = 28;
     } else {
      label = 29;
     }
    }
    if ((label|0) == 28) {
     label = 0;
    }
    else if ((label|0) == 29) {
     label = 0;
     $80 = $i;
     $81 = (($va) + ($80<<3)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $5;
     HEAP32[$83>>2] = $82;
     HEAP32[$divide_flag>>2] = 2;
     $84 = $1;
     $85 = $2;
     $86 = $5;
     $87 = (_find_greatest_power($84,$85,$86,$d1,$t1,$len_t1,$divide_flag)|0);
     $count1 = $87;
     $88 = $3;
     $89 = $4;
     $90 = $5;
     $91 = (_find_greatest_power($88,$89,$90,$d2,$t2,$len_t2,$divide_flag)|0);
     $count2 = $91;
     $92 = +HEAPF64[$d2>>3];
     $93 = $92 <= 0.0;
     if (!($93)) {
      $94 = +HEAPF64[$d1>>3];
      $95 = +HEAPF64[$d2>>3];
      $96 = $94 < $95;
      if (!($96)) {
       $97 = $count2;
       $98 = $count1;
       $99 = ($97|0)>($98|0);
       if (!($99)) {
        break;
       }
      }
     }
     $100 = HEAP32[$divide_flag>>2]|0;
     $101 = ($100|0)!=(0);
     $102 = $101 ^ 1;
     $103 = $102&1;
     HEAP32[$divide_flag>>2] = $103;
     $104 = $1;
     $105 = $2;
     $106 = $5;
     $107 = (_find_greatest_power($104,$105,$106,$d1,$t1,$len_t1,$divide_flag)|0);
     $count1 = $107;
     $108 = $3;
     $109 = $4;
     $110 = $5;
     $111 = (_find_greatest_power($108,$109,$110,$d2,$t2,$len_t2,$divide_flag)|0);
     $count2 = $111;
     $112 = +HEAPF64[$d2>>3];
     $113 = $112 <= 0.0;
     if (!($113)) {
      $114 = +HEAPF64[$d1>>3];
      $115 = +HEAPF64[$d2>>3];
      $116 = $114 < $115;
      if (!($116)) {
       $117 = $count2;
       $118 = $count1;
       $119 = ($117|0)>($118|0);
       if (!($119)) {
        label = 36;
        break;
       }
      }
     }
    }
    $124 = $i;
    $125 = (($124) + 1)|0;
    $i = $125;
   }
   if ((label|0) == 36) {
   }
   else if ((label|0) == 39) {
    break;
   }
   $120 = $i;
   $121 = (($va) + ($120<<3)|0);
   $122 = (($121) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $0 = $123;
   $126 = $0;
   STACKTOP = sp;return ($126|0);
  }
 } while(0);
 $0 = 0;
 $126 = $0;
 STACKTOP = sp;return ($126|0);
}
function _vcmp888($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $p2;
 $3 = $2;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($8|0);
 do {
  if ($9) {
   $10 = $1;
   $11 = HEAP32[$10>>2]|0;
   $12 = $2;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)<($13|0);
   if ($14) {
    $0 = -1;
    break;
   }
   $15 = $1;
   $16 = HEAP32[$15>>2]|0;
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  } else {
   $20 = $2;
   $21 = (($20) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $1;
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($22) - ($25))|0;
   $0 = $26;
  }
 } while(0);
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _pf_sub($equation,$np,$loc,$len,$level,$do_repeat) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $len = $len|0;
 $level = $level|0;
 $do_repeat = $do_repeat|0;
 var $$0 = 0, $$0$phi = 0, $$0128 = 0, $$1 = 0, $$2 = 0, $$2$phi = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$reg2mem118$0 = 0, $$reg2mem120$0 = 0, $$reg2mem122$0 = 0, $$reg2mem124$0 = 0, $$reg2mem126$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$2 = 0, $cnt$3 = 0, $cnt$4 = 0, $cnt$5 = 0, $cnt$6 = 0;
 var $count$0 = 0, $d = 0, $div_flag = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $j = 0, $k = 0, $last_v$0 = 0, $last_v$1 = 0, $last_v$2 = 0, $len2$0 = 0, $len2$0$phi = 0, $len2$1 = 0, $len2$2 = 0, $len_first$0 = 0, $len_first$0$phi = 0, $len_first$1 = 0;
 var $len_first$2 = 0, $lent$0 = 0, $loc1$0 = 0, $loc1$0$phi = 0, $loc1$1 = 0, $loc1$2 = 0, $loc1$3 = 0, $loc1$4 = 0, $loc2$0 = 0, $loc2$0$phi = 0, $loc2$1 = 0, $loc2$2 = 0, $loct$0 = 0, $modified$0 = 0, $modified$0$phi = 0, $modified$1 = 0, $save_save = 0, $symbolic_modified$0 = 0, $symbolic_modified$0$phi = 0, $symbolic_modified$1 = 0;
 var $symbolic_modified$1$phi = 0, $symbolic_modified$2 = 0, $symbolic_modified$3 = 0, $v = 0, $v1$0 = 0, $v1$1 = 0, $v1$2 = 0, $va = 0, $vc$0 = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $j = sp + 8176|0;
 $k = sp + 8172|0;
 $v = sp + 8168|0;
 $save_save = sp + 8012|0;
 $div_flag = sp + 8008|0;
 $va = sp + 8|0;
 $d = sp;
 HEAP32[$v>>2] = 0;
 HEAP32[$div_flag>>2] = 3;
 $0 = HEAP32[41216>>2]|0;
 $1 = (($equation) + ($loc<<4)|0);
 __THREW__ = 0;
 (invoke_iiiiiiii(88,($1|0),($len|0),($v|0),($d|0),($j|0),($k|0),($div_flag|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 if ((($2|0) != 0) & ((threwValue|0) != 0)) { $3 = _testSetjmp(HEAP32[$2>>2]|0, _setjmpTable)|0; if (($3|0) == 0) { _longjmp($2|0, threwValue|0); } tempRet0 = threwValue; } else { $3 = -1; };
 $4 = tempRet0;
 do {
  if ((($3|0) == 1)) {
   $$0 = $len;$$reg2mem126$0 = $4;$len2$0 = 0;$len_first$0 = 0;$loc1$0 = $loc;$loc2$0 = $loc;$modified$0 = 0;$symbolic_modified$0 = 0;
  } else {
   $5 = HEAP32[$v>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0128 = 0;
    STACKTOP = sp;return ($$0128|0);
   } else {
    _memmove(($save_save|0),(41032|0),156)|0;
    _saveSetjmp(41032,1,_setjmpTable|0)|0;
    __THREW__ = 0;
    $7 = __THREW__; __THREW__ = 0;
    if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = threwValue; } else { $8 = -1; };
    $9 = tempRet0;
    if ((($8|0) == 1)) {
     $$0 = $len;$$reg2mem126$0 = $9;$len2$0 = 0;$len_first$0 = 0;$loc1$0 = $loc;$loc2$0 = $loc;$modified$0 = 0;$symbolic_modified$0 = 0;
     break;
    }
    $$0 = $len;$$reg2mem126$0 = 0;$len2$0 = 0;$len_first$0 = 0;$loc1$0 = $loc;$loc2$0 = $loc;$modified$0 = 0;$symbolic_modified$0 = 0;
    break;
   }
  }
 } while(0);
 L8: while(1) {
  $10 = ($$reg2mem126$0|0)!=(0);
  if ($10) {
   HEAP32[41216>>2] = $0;
   _memmove((41032|0),($save_save|0),156)|0;
   $11 = ($$reg2mem126$0|0)==(13);
   if (!($11)) {
    label = 10;
    break;
   }
   __THREW__ = 0;
   invoke_vii(57,(41032|0),($$reg2mem126$0|0));
   $12 = __THREW__; __THREW__ = 0;
   if ((($12|0) != 0) & ((threwValue|0) != 0)) { $13 = _testSetjmp(HEAP32[$12>>2]|0, _setjmpTable)|0; if (($13|0) == 0) { _longjmp($12|0, threwValue|0); } tempRet0 = threwValue; } else { $13 = -1; };
   $14 = tempRet0;
   if ((($13|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$modified$0$phi = $modified$0;$loc2$0$phi = $loc2$0;$loc1$0$phi = $loc1$0;$len_first$0$phi = $len_first$0;$len2$0$phi = $len2$0;$$0$phi = $$0;$$reg2mem126$0 = $14;$symbolic_modified$0 = $symbolic_modified$0$phi;$modified$0 = $modified$0$phi;$loc2$0 = $loc2$0$phi;$loc1$0 = $loc1$0$phi;$len_first$0 = $len_first$0$phi;$len2$0 = $len2$0$phi;$$0 = $$0$phi;
    continue;
   } else {
    label = 9;
    break;
   }
  }
  $$1 = $$0;$count$0 = 1;$len2$1 = $len2$0;$len_first$1 = $len_first$0;$loc1$1 = $loc1$0;$loc2$1 = $loc2$0;$modified$1 = $modified$0;
  while(1) {
   $18 = ($do_repeat|0)!=(0);
   if (!($18)) {
    label = 90;
    break;
   }
   $19 = HEAP32[3688>>2]|0;
   $20 = (($equation) + ($loc1$1<<4)|0);
   $21 = $$1<<4;
   _memmove(($19|0),($20|0),($21|0))|0;
   HEAP32[3720>>2] = $$1;
   HEAP32[41216>>2] = 0;
   $22 = HEAP32[3688>>2]|0;
   __THREW__ = 0;
   invoke_vii(89,($22|0),(3720|0));
   $23 = __THREW__; __THREW__ = 0;
   if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
   $25 = tempRet0;
   if ((($24|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $25;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
    continue L8;
   }
   HEAP32[41216>>2] = $0;
   $26 = HEAP32[3688>>2]|0;
   $27 = HEAP32[3720>>2]|0;
   __THREW__ = 0;
   $28 = (invoke_iii(90,($26|0),($27|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = threwValue; } else { $30 = -1; };
   $31 = tempRet0;
   if ((($30|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $31;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
    continue L8;
   }
   $32 = ($28|0)<(2);
   if ($32) {
    label = 18;
    break;
   }
   $last_v$0 = 0;$vc$0 = 0;
   while(1) {
    $33 = ($vc$0|0)<(1000);
    if (!($33)) {
     break;
    }
    $cnt$0 = 0;$i$0 = 0;$v1$0 = -1;
    while(1) {
     $34 = HEAP32[3720>>2]|0;
     $35 = ($i$0|0)<($34|0);
     if (!($35)) {
      break;
     }
     $36 = HEAP32[3688>>2]|0;
     $37 = (($36) + ($i$0<<4)|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==(1);
     if ($39) {
      $40 = HEAP32[3688>>2]|0;
      $41 = (($40) + ($i$0<<4)|0);
      $42 = (($41) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)>($last_v$0|0);
      if ($44) {
       $45 = ($v1$0|0)==(-1);
       if ($45) {
        label = 27;
       } else {
        $46 = HEAP32[3688>>2]|0;
        $47 = (($46) + ($i$0<<4)|0);
        $48 = (($47) + 8|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ($49|0)<($v1$0|0);
        if ($50) {
         label = 27;
        } else {
         $55 = HEAP32[3688>>2]|0;
         $56 = (($55) + ($i$0<<4)|0);
         $57 = (($56) + 8|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = ($58|0)==($v1$0|0);
         if ($59) {
          $60 = (($cnt$0) + 1)|0;
          $cnt$1 = $60;
         } else {
          $cnt$1 = $cnt$0;
         }
         $cnt$2 = $cnt$1;$v1$1 = $v1$0;
        }
       }
       if ((label|0) == 27) {
        label = 0;
        $51 = HEAP32[3688>>2]|0;
        $52 = (($51) + ($i$0<<4)|0);
        $53 = (($52) + 8|0);
        $54 = HEAP32[$53>>2]|0;
        $cnt$2 = 1;$v1$1 = $54;
       }
       $cnt$3 = $cnt$2;$v1$2 = $v1$1;
      } else {
       $cnt$3 = $cnt$0;$v1$2 = $v1$0;
      }
     } else {
      $cnt$3 = $cnt$0;$v1$2 = $v1$0;
     }
     $61 = (($i$0) + 2)|0;
     $cnt$0 = $cnt$3;$i$0 = $61;$v1$0 = $v1$2;
    }
    $62 = ($v1$0|0)==(-1);
    if ($62) {
     label = 35;
     break;
    }
    $63 = (($va) + ($vc$0<<3)|0);
    HEAP32[$63>>2] = $v1$0;
    $64 = (($va) + ($vc$0<<3)|0);
    $65 = (($64) + 4|0);
    HEAP32[$65>>2] = $cnt$0;
    $66 = (($vc$0) + 1)|0;
    $last_v$0 = $v1$0;$vc$0 = $66;
   }
   if ((label|0) == 35) {
    label = 0;
   }
   $67 = HEAP32[$v>>2]|0;
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = ($vc$0|0)>(1);
    if ($69) {
     $70 = HEAP32[3688>>2]|0;
     $71 = HEAP32[3720>>2]|0;
     $72 = HEAP32[$v>>2]|0;
     __THREW__ = 0;
     $73 = (invoke_iiiii(91,($70|0),($71|0),($72|0),1)|0);
     $74 = __THREW__; __THREW__ = 0;
     if ((($74|0) != 0) & ((threwValue|0) != 0)) { $75 = _testSetjmp(HEAP32[$74>>2]|0, _setjmpTable)|0; if (($75|0) == 0) { _longjmp($74|0, threwValue|0); } tempRet0 = threwValue; } else { $75 = -1; };
     $76 = tempRet0;
     if ((($75|0) == 1)) {
      $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $76;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
      continue L8;
     }
     $77 = ($73|0)!=(0);
     if (!($77)) {
      HEAP32[$v>>2] = 0;
     }
    }
   }
   $cnt$4 = -1;$i$1 = 0;
   while(1) {
    $78 = ($i$1|0)<($vc$0|0);
    if (!($78)) {
     break;
    }
    $79 = (($va) + ($i$1<<3)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 16383;
    $82 = ($81|0)<=(4);
    if ($82) {
     $cnt$6 = $cnt$4;
    } else {
     $83 = HEAP32[$v>>2]|0;
     $84 = ($83|0)==(0);
     if ($84) {
      $85 = HEAP32[3688>>2]|0;
      $86 = HEAP32[3720>>2]|0;
      $87 = (($va) + ($i$1<<3)|0);
      $88 = HEAP32[$87>>2]|0;
      __THREW__ = 0;
      $89 = (invoke_iiiii(91,($85|0),($86|0),($88|0),1)|0);
      $90 = __THREW__; __THREW__ = 0;
      if ((($90|0) != 0) & ((threwValue|0) != 0)) { $91 = _testSetjmp(HEAP32[$90>>2]|0, _setjmpTable)|0; if (($91|0) == 0) { _longjmp($90|0, threwValue|0); } tempRet0 = threwValue; } else { $91 = -1; };
      $92 = tempRet0;
      if ((($91|0) == 1)) {
       $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $92;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
       continue L8;
      }
      $93 = ($89|0)!=(0);
      if ($93) {
       $94 = (($va) + ($i$1<<3)|0);
       $95 = HEAP32[$94>>2]|0;
       HEAP32[$v>>2] = $95;
      }
     }
     $96 = ($cnt$4|0)<(0);
     if ($96) {
      label = 54;
     } else {
      $97 = (($va) + ($i$1<<3)|0);
      $98 = (($97) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99|0)<($cnt$4|0);
      if ($100) {
       label = 54;
      } else {
       $cnt$5 = $cnt$4;
      }
     }
     if ((label|0) == 54) {
      label = 0;
      $101 = (($va) + ($i$1<<3)|0);
      $102 = (($101) + 4|0);
      $103 = HEAP32[$102>>2]|0;
      $cnt$5 = $103;
     }
     $cnt$6 = $cnt$5;
    }
    $104 = (($i$1) + 1)|0;
    $cnt$4 = $cnt$6;$i$1 = $104;
   }
   $105 = ($cnt$4|0)<=(1);
   if ($105) {
    label = 58;
    break;
   }
   $106 = HEAP32[$v>>2]|0;
   $107 = ($106|0)==(0);
   if ($107) {
    label = 60;
    break;
   }
   $108 = HEAP32[3680>>2]|0;
   $109 = HEAP32[3688>>2]|0;
   $110 = HEAP32[3720>>2]|0;
   $111 = $110<<4;
   _memmove(($108|0),($109|0),($111|0))|0;
   $112 = HEAP32[3720>>2]|0;
   HEAP32[3712>>2] = $112;
   $113 = HEAP32[3680>>2]|0;
   $114 = HEAP32[$v>>2]|0;
   __THREW__ = 0;
   $115 = (invoke_iiii(92,($113|0),(3712|0),($114|0))|0);
   $116 = __THREW__; __THREW__ = 0;
   if ((($116|0) != 0) & ((threwValue|0) != 0)) { $117 = _testSetjmp(HEAP32[$116>>2]|0, _setjmpTable)|0; if (($117|0) == 0) { _longjmp($116|0, threwValue|0); } tempRet0 = threwValue; } else { $117 = -1; };
   $118 = tempRet0;
   if ((($117|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $118;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
    continue L8;
   }
   $119 = ($115|0)!=(0);
   if (!($119)) {
    label = 63;
    break;
   }
   $120 = HEAP32[3680>>2]|0;
   __THREW__ = 0;
   (invoke_iii(63,($120|0),(3712|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   if ((($121|0) != 0) & ((threwValue|0) != 0)) { $122 = _testSetjmp(HEAP32[$121>>2]|0, _setjmpTable)|0; if (($122|0) == 0) { _longjmp($121|0, threwValue|0); } tempRet0 = threwValue; } else { $122 = -1; };
   $123 = tempRet0;
   if ((($122|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $123;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
    continue L8;
   }
   $124 = HEAP32[3712>>2]|0;
   $125 = (($124) + 2)|0;
   $126 = HEAP32[8>>2]|0;
   $127 = (15000)<($126|0);
   if ($127) {
    $$reg2mem122$0 = 15000;
   } else {
    $128 = HEAP32[8>>2]|0;
    $$reg2mem122$0 = $128;
   }
   $129 = ($125|0)>($$reg2mem122$0|0);
   if ($129) {
    label = 70;
    break;
   }
   $i$2 = 0;
   while(1) {
    $130 = HEAP32[3712>>2]|0;
    $131 = ($i$2|0)<($130|0);
    if (!($131)) {
     break;
    }
    $132 = HEAP32[3680>>2]|0;
    $133 = (($132) + ($i$2<<4)|0);
    $134 = (($133) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + 1)|0;
    HEAP32[$134>>2] = $136;
    $137 = (($i$2) + 1)|0;
    $i$2 = $137;
   }
   $138 = HEAP32[3712>>2]|0;
   $139 = HEAP32[3680>>2]|0;
   $140 = (($139) + ($138<<4)|0);
   HEAP32[$140>>2] = 2;
   $141 = HEAP32[3712>>2]|0;
   $142 = HEAP32[3680>>2]|0;
   $143 = (($142) + ($141<<4)|0);
   $144 = (($143) + 4|0);
   HEAP32[$144>>2] = 1;
   $145 = HEAP32[3712>>2]|0;
   $146 = HEAP32[3680>>2]|0;
   $147 = (($146) + ($145<<4)|0);
   $148 = (($147) + 8|0);
   HEAP32[$148>>2] = 4;
   $149 = HEAP32[3712>>2]|0;
   $150 = (($149) + 1)|0;
   HEAP32[3712>>2] = $150;
   $151 = HEAP32[3712>>2]|0;
   $152 = HEAP32[3680>>2]|0;
   $153 = (($152) + ($151<<4)|0);
   HEAP32[$153>>2] = 1;
   $154 = HEAP32[3712>>2]|0;
   $155 = HEAP32[3680>>2]|0;
   $156 = (($155) + ($154<<4)|0);
   $157 = (($156) + 4|0);
   HEAP32[$157>>2] = 1;
   $158 = HEAP32[$v>>2]|0;
   $159 = HEAP32[3712>>2]|0;
   $160 = HEAP32[3680>>2]|0;
   $161 = (($160) + ($159<<4)|0);
   $162 = (($161) + 8|0);
   HEAP32[$162>>2] = $158;
   $163 = HEAP32[3712>>2]|0;
   $164 = (($163) + 1)|0;
   HEAP32[3712>>2] = $164;
   $165 = HEAP32[3680>>2]|0;
   __THREW__ = 0;
   invoke_vii(89,($165|0),(3712|0));
   $166 = __THREW__; __THREW__ = 0;
   if ((($166|0) != 0) & ((threwValue|0) != 0)) { $167 = _testSetjmp(HEAP32[$166>>2]|0, _setjmpTable)|0; if (($167|0) == 0) { _longjmp($166|0, threwValue|0); } tempRet0 = threwValue; } else { $167 = -1; };
   $168 = tempRet0;
   if ((($167|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $168;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
    continue L8;
   }
   $169 = (($equation) + ($loc1$1<<4)|0);
   $170 = HEAP32[3680>>2]|0;
   $171 = HEAP32[3712>>2]|0;
   $172 = HEAP32[$v>>2]|0;
   __THREW__ = 0;
   $173 = (invoke_iiiiii(93,($169|0),($$1|0),($170|0),($171|0),($172|0))|0);
   $174 = __THREW__; __THREW__ = 0;
   if ((($174|0) != 0) & ((threwValue|0) != 0)) { $175 = _testSetjmp(HEAP32[$174>>2]|0, _setjmpTable)|0; if (($175|0) == 0) { _longjmp($174|0, threwValue|0); } tempRet0 = threwValue; } else { $175 = -1; };
   $176 = tempRet0;
   if ((($175|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $176;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
    continue L8;
   }
   $177 = ($173|0)<=(0);
   if ($177) {
    label = 78;
    break;
   }
   $178 = HEAP32[3680>>2]|0;
   $179 = HEAP32[3712>>2]|0;
   __THREW__ = 0;
   $180 = (invoke_iii(90,($178|0),($179|0))|0);
   $181 = __THREW__; __THREW__ = 0;
   if ((($181|0) != 0) & ((threwValue|0) != 0)) { $182 = _testSetjmp(HEAP32[$181>>2]|0, _setjmpTable)|0; if (($182|0) == 0) { _longjmp($181|0, threwValue|0); } tempRet0 = threwValue; } else { $182 = -1; };
   $183 = tempRet0;
   if ((($182|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $183;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
    continue L8;
   }
   $184 = ($180|0)==(0);
   if ($184) {
    label = 81;
    break;
   }
   __THREW__ = 0;
   $185 = (invoke_iiiiii(94,($equation|0),($np|0),($loc1$1|0),($$1|0),($level|0))|0);
   $186 = __THREW__; __THREW__ = 0;
   if ((($186|0) != 0) & ((threwValue|0) != 0)) { $187 = _testSetjmp(HEAP32[$186>>2]|0, _setjmpTable)|0; if (($187|0) == 0) { _longjmp($186|0, threwValue|0); } tempRet0 = threwValue; } else { $187 = -1; };
   $188 = tempRet0;
   if ((($187|0) == 1)) {
    $symbolic_modified$0$phi = $symbolic_modified$0;$$0 = $$1;$$reg2mem126$0 = $188;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$0$phi;
    continue L8;
   }
   $189 = ($185|0)!=(0);
   if (!($189)) {
    label = 84;
    break;
   }
   $190 = HEAP32[3712>>2]|0;
   $191 = (($190) + 1)|0;
   $192 = (($loc1$1) + ($191))|0;
   $193 = HEAP32[3720>>2]|0;
   if ((($count$0|0) == 1)) {
    $194 = HEAP32[3712>>2]|0;
    $len2$2 = $len2$1;$len_first$2 = $194;$loc2$2 = $192;
   } else if ((($count$0|0) == 2)) {
    $195 = HEAP32[3712>>2]|0;
    $len2$2 = $195;$len_first$2 = $len_first$1;$loc2$2 = $loc2$1;
   } else {
    $len2$2 = $len2$1;$len_first$2 = $len_first$1;$loc2$2 = $loc2$1;
   }
   $196 = (($count$0) + 1)|0;
   $$1 = $193;$count$0 = $196;$len2$1 = $len2$2;$len_first$1 = $len_first$2;$loc1$1 = $192;$loc2$1 = $loc2$2;$modified$1 = 1;
  }
  if ((label|0) == 18) {
   label = 0;
   $$4 = $$1;$symbolic_modified$3 = $symbolic_modified$0;
  }
  else if ((label|0) == 58) {
   label = 0;
   $$4 = $$1;$symbolic_modified$3 = $symbolic_modified$0;
  }
  else if ((label|0) == 60) {
   label = 0;
   $$4 = $$1;$symbolic_modified$3 = $symbolic_modified$0;
  }
  else if ((label|0) == 63) {
   label = 0;
   label = 90;
  }
  else if ((label|0) == 70) {
   label = 0;
   label = 90;
  }
  else if ((label|0) == 78) {
   label = 0;
   label = 90;
  }
  else if ((label|0) == 81) {
   label = 0;
   label = 90;
  }
  else if ((label|0) == 84) {
   label = 0;
   label = 90;
  }
  do {
   if ((label|0) == 90) {
    label = 0;
    $197 = ($modified$1|0)!=(0);
    if ($197) {
     $$3 = $$1;$symbolic_modified$2 = $symbolic_modified$0;
    } else {
     $$2 = $$1;$last_v$1 = 0;$symbolic_modified$1 = $symbolic_modified$0;
     L114: while(1) {
      $198 = (($equation) + ($loc1$1<<4)|0);
      $199 = HEAP32[3688>>2]|0;
      $200 = $$2<<4;
      _memmove(($199|0),($198|0),($200|0))|0;
      HEAP32[3720>>2] = $$2;
      $201 = HEAP32[3688>>2]|0;
      __THREW__ = 0;
      invoke_vii(95,($201|0),(3720|0));
      $202 = __THREW__; __THREW__ = 0;
      if ((($202|0) != 0) & ((threwValue|0) != 0)) { $203 = _testSetjmp(HEAP32[$202>>2]|0, _setjmpTable)|0; if (($203|0) == 0) { _longjmp($202|0, threwValue|0); } tempRet0 = threwValue; } else { $203 = -1; };
      $204 = tempRet0;
      if ((($203|0) == 1)) {
       $$0 = $$2;$$reg2mem126$0 = $204;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
       continue L8;
      }
      $205 = HEAP32[3688>>2]|0;
      $206 = HEAP32[3720>>2]|0;
      __THREW__ = 0;
      $207 = (invoke_iii(90,($205|0),($206|0))|0);
      $208 = __THREW__; __THREW__ = 0;
      if ((($208|0) != 0) & ((threwValue|0) != 0)) { $209 = _testSetjmp(HEAP32[$208>>2]|0, _setjmpTable)|0; if (($209|0) == 0) { _longjmp($208|0, threwValue|0); } tempRet0 = threwValue; } else { $209 = -1; };
      $210 = tempRet0;
      if ((($209|0) == 1)) {
       $$0 = $$2;$$reg2mem126$0 = $210;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
       continue L8;
      }
      $211 = ($207|0)<(2);
      if ($211) {
       label = 95;
       break;
      }
      $last_v$2 = $last_v$1;
      while(1) {
       HEAP32[$v>>2] = -1;
       $i$3 = 0;
       while(1) {
        $212 = ($i$3|0)<($$2|0);
        if (!($212)) {
         break;
        }
        $213 = (($198) + ($i$3<<4)|0);
        $214 = HEAP32[$213>>2]|0;
        $215 = ($214|0)==(1);
        if ($215) {
         $216 = (($198) + ($i$3<<4)|0);
         $217 = (($216) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $219 = ($218|0)>($last_v$2|0);
         if ($219) {
          $220 = HEAP32[$v>>2]|0;
          $221 = ($220|0)==(-1);
          if ($221) {
           label = 103;
          } else {
           $222 = (($198) + ($i$3<<4)|0);
           $223 = (($222) + 8|0);
           $224 = HEAP32[$223>>2]|0;
           $225 = HEAP32[$v>>2]|0;
           $226 = ($224|0)<($225|0);
           if ($226) {
            label = 103;
           }
          }
          if ((label|0) == 103) {
           label = 0;
           $227 = (($198) + ($i$3<<4)|0);
           $228 = (($227) + 8|0);
           $229 = HEAP32[$228>>2]|0;
           HEAP32[$v>>2] = $229;
          }
         }
        }
        $230 = (($i$3) + 2)|0;
        $i$3 = $230;
       }
       $231 = HEAP32[$v>>2]|0;
       $232 = ($231|0)==(-1);
       if ($232) {
        label = 108;
        break L114;
       }
       $233 = HEAP32[$v>>2]|0;
       $234 = HEAP32[3688>>2]|0;
       $235 = HEAP32[3720>>2]|0;
       __THREW__ = 0;
       $236 = (invoke_iiiiiiii(88,($234|0),($235|0),($v|0),($d|0),($j|0),($k|0),($div_flag|0))|0);
       $237 = __THREW__; __THREW__ = 0;
       if ((($237|0) != 0) & ((threwValue|0) != 0)) { $238 = _testSetjmp(HEAP32[$237>>2]|0, _setjmpTable)|0; if (($238|0) == 0) { _longjmp($237|0, threwValue|0); } tempRet0 = threwValue; } else { $238 = -1; };
       $239 = tempRet0;
       if ((($238|0) == 1)) {
        $$0 = $$2;$$reg2mem126$0 = $239;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
        continue L8;
       }
       $240 = ($236|0)<=(1);
       if ($240) {
        $last_v$2 = $233;
        continue;
       }
       $241 = HEAP32[3680>>2]|0;
       $242 = HEAP32[3688>>2]|0;
       $243 = HEAP32[3720>>2]|0;
       $244 = $243<<4;
       _memmove(($241|0),($242|0),($244|0))|0;
       $245 = HEAP32[3720>>2]|0;
       HEAP32[3712>>2] = $245;
       while(1) {
        $246 = HEAP32[3680>>2]|0;
        $247 = HEAP32[$v>>2]|0;
        __THREW__ = 0;
        $248 = (invoke_iiiid(96,($246|0),(3712|0),($247|0),0.0)|0);
        $249 = __THREW__; __THREW__ = 0;
        if ((($249|0) != 0) & ((threwValue|0) != 0)) { $250 = _testSetjmp(HEAP32[$249>>2]|0, _setjmpTable)|0; if (($250|0) == 0) { _longjmp($249|0, threwValue|0); } tempRet0 = threwValue; } else { $250 = -1; };
        $251 = tempRet0;
        if ((($250|0) == 1)) {
         $$0 = $$2;$$reg2mem126$0 = $251;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
         continue L8;
        }
        $252 = ($248|0)!=(0);
        if (!($252)) {
         break;
        }
        $253 = HEAP32[3680>>2]|0;
        __THREW__ = 0;
        (invoke_iii(63,($253|0),(3712|0))|0);
        $254 = __THREW__; __THREW__ = 0;
        if ((($254|0) != 0) & ((threwValue|0) != 0)) { $255 = _testSetjmp(HEAP32[$254>>2]|0, _setjmpTable)|0; if (($255|0) == 0) { _longjmp($254|0, threwValue|0); } tempRet0 = threwValue; } else { $255 = -1; };
        $256 = tempRet0;
        if ((($255|0) == 1)) {
         $$0 = $$2;$$reg2mem126$0 = $256;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
         continue L8;
        }
       }
       $257 = HEAP32[3680>>2]|0;
       $258 = HEAP32[3712>>2]|0;
       __THREW__ = 0;
       $259 = (invoke_iiiiiiii(88,($257|0),($258|0),($v|0),($d|0),($j|0),($k|0),($div_flag|0))|0);
       $260 = __THREW__; __THREW__ = 0;
       if ((($260|0) != 0) & ((threwValue|0) != 0)) { $261 = _testSetjmp(HEAP32[$260>>2]|0, _setjmpTable)|0; if (($261|0) == 0) { _longjmp($260|0, threwValue|0); } tempRet0 = threwValue; } else { $261 = -1; };
       $262 = tempRet0;
       if ((($261|0) == 1)) {
        $$0 = $$2;$$reg2mem126$0 = $262;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
        continue L8;
       }
       $263 = ($259|0)!=(1);
       if (!($263)) {
        break;
       }
       $last_v$2 = $233;
      }
      $264 = HEAP32[$j>>2]|0;
      $265 = ($264|0)!=(0);
      if ($265) {
       $266 = HEAP32[3680>>2]|0;
       $267 = HEAP32[$j>>2]|0;
       $268 = HEAP32[3680>>2]|0;
       $269 = (($268) + ($267<<4)|0);
       $270 = HEAP32[$k>>2]|0;
       $271 = $270<<4;
       _memmove(($266|0),($269|0),($271|0))|0;
      }
      $272 = HEAP32[$k>>2]|0;
      HEAP32[3712>>2] = $272;
      $273 = (($equation) + ($loc1$1<<4)|0);
      $274 = HEAP32[3680>>2]|0;
      $275 = HEAP32[3712>>2]|0;
      __THREW__ = 0;
      $276 = (invoke_iiiiii(93,($273|0),($$2|0),($274|0),($275|0),0)|0);
      $277 = __THREW__; __THREW__ = 0;
      if ((($277|0) != 0) & ((threwValue|0) != 0)) { $278 = _testSetjmp(HEAP32[$277>>2]|0, _setjmpTable)|0; if (($278|0) == 0) { _longjmp($277|0, threwValue|0); } tempRet0 = threwValue; } else { $278 = -1; };
      $279 = tempRet0;
      if ((($278|0) == 1)) {
       $$0 = $$2;$$reg2mem126$0 = $279;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
       continue L8;
      }
      $280 = ($276|0)<=(0);
      if ($280) {
       $symbolic_modified$1$phi = $symbolic_modified$1;$$2$phi = $$2;$last_v$1 = $233;$symbolic_modified$1 = $symbolic_modified$1$phi;$$2 = $$2$phi;
       continue;
      }
      $281 = HEAP32[3680>>2]|0;
      $282 = HEAP32[3712>>2]|0;
      __THREW__ = 0;
      $283 = (invoke_iii(90,($281|0),($282|0))|0);
      $284 = __THREW__; __THREW__ = 0;
      if ((($284|0) != 0) & ((threwValue|0) != 0)) { $285 = _testSetjmp(HEAP32[$284>>2]|0, _setjmpTable)|0; if (($285|0) == 0) { _longjmp($284|0, threwValue|0); } tempRet0 = threwValue; } else { $285 = -1; };
      $286 = tempRet0;
      if ((($285|0) == 1)) {
       $$0 = $$2;$$reg2mem126$0 = $286;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
       continue L8;
      }
      $287 = ($283|0)==(0);
      if ($287) {
       $symbolic_modified$1$phi = $symbolic_modified$1;$$2$phi = $$2;$last_v$1 = $233;$symbolic_modified$1 = $symbolic_modified$1$phi;$$2 = $$2$phi;
       continue;
      }
      $288 = ($symbolic_modified$1|0)!=(0);
      if ($288) {
      } else {
      }
      __THREW__ = 0;
      $289 = (invoke_iiiiii(94,($equation|0),($np|0),($loc1$1|0),($$2|0),($level|0))|0);
      $290 = __THREW__; __THREW__ = 0;
      if ((($290|0) != 0) & ((threwValue|0) != 0)) { $291 = _testSetjmp(HEAP32[$290>>2]|0, _setjmpTable)|0; if (($291|0) == 0) { _longjmp($290|0, threwValue|0); } tempRet0 = threwValue; } else { $291 = -1; };
      $292 = tempRet0;
      if ((($291|0) == 1)) {
       $$0 = $$2;$$reg2mem126$0 = $292;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$1;
       continue L8;
      }
      $293 = ($289|0)!=(0);
      if (!($293)) {
       label = 133;
       break;
      }
      $294 = HEAP32[3712>>2]|0;
      $$2 = $294;$last_v$1 = 0;$symbolic_modified$1 = 1;
     }
     if ((label|0) == 95) {
      label = 0;
      $$4 = $$2;$symbolic_modified$3 = $symbolic_modified$1;
      break;
     }
     else if ((label|0) == 108) {
      label = 0;
     }
     else if ((label|0) == 133) {
      label = 0;
     }
     $$3 = $$2;$symbolic_modified$2 = $symbolic_modified$1;
    }
    $$4 = $$3;$symbolic_modified$3 = $symbolic_modified$2;
   }
  } while(0);
  _memmove((41032|0),($save_save|0),156)|0;
  $295 = ($modified$1|0)!=(0);
  if (!($295)) {
   break;
  }
  $296 = ($len2$1|0)!=(0);
  if ($296) {
   $lent$0 = $len2$1;$loct$0 = $loc2$1;
  } else {
   $lent$0 = $len_first$1;$loct$0 = $loc;
  }
  $297 = (($equation) + ($loc1$1<<4)|0);
  $298 = (($equation) + ($loct$0<<4)|0);
  $299 = HEAP32[$v>>2]|0;
  __THREW__ = 0;
  $300 = (invoke_iiiiii(93,($297|0),($$4|0),($298|0),($lent$0|0),($299|0))|0);
  $301 = __THREW__; __THREW__ = 0;
  if ((($301|0) != 0) & ((threwValue|0) != 0)) { $302 = _testSetjmp(HEAP32[$301>>2]|0, _setjmpTable)|0; if (($302|0) == 0) { _longjmp($301|0, threwValue|0); } tempRet0 = threwValue; } else { $302 = -1; };
  $303 = tempRet0;
  if ((($302|0) == 1)) {
   $$0 = $$4;$$reg2mem126$0 = $303;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$3;
   continue;
  }
  $304 = ($300|0)>(0);
  if ($304) {
   __THREW__ = 0;
   $305 = (invoke_iiiiii(94,($equation|0),($np|0),($loc1$1|0),($$4|0),($level|0))|0);
   $306 = __THREW__; __THREW__ = 0;
   if ((($306|0) != 0) & ((threwValue|0) != 0)) { $307 = _testSetjmp(HEAP32[$306>>2]|0, _setjmpTable)|0; if (($307|0) == 0) { _longjmp($306|0, threwValue|0); } tempRet0 = threwValue; } else { $307 = -1; };
   $308 = tempRet0;
   if ((($307|0) == 1)) {
    $$0 = $$4;$$reg2mem126$0 = $308;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$1;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$3;
    continue;
   }
   $309 = ($305|0)!=(0);
   if ($309) {
    $310 = HEAP32[3712>>2]|0;
    $311 = (($310) + 1)|0;
    $312 = (($loc1$1) + ($311))|0;
    $313 = HEAP32[3720>>2]|0;
    $$5 = $313;$loc1$2 = $312;
   } else {
    $$5 = $$4;$loc1$2 = $loc1$1;
   }
   $$6 = $$5;$loc1$3 = $loc1$2;
  } else {
   $$6 = $$4;$loc1$3 = $loc1$1;
  }
  $314 = ($len2$1|0)!=(0);
  if ($314) {
   $$7 = $len2$1;$loc1$4 = $loc2$1;
  } else {
   $$7 = $$6;$loc1$4 = $loc1$3;
  }
  $315 = (($equation) + ($loc<<4)|0);
  $316 = (($equation) + ($loc1$4<<4)|0);
  __THREW__ = 0;
  $317 = (invoke_iiiiii(93,($315|0),($len_first$1|0),($316|0),($$7|0),0)|0);
  $318 = __THREW__; __THREW__ = 0;
  if ((($318|0) != 0) & ((threwValue|0) != 0)) { $319 = _testSetjmp(HEAP32[$318>>2]|0, _setjmpTable)|0; if (($319|0) == 0) { _longjmp($318|0, threwValue|0); } tempRet0 = threwValue; } else { $319 = -1; };
  $320 = tempRet0;
  if ((($319|0) == 1)) {
   $$0 = $$7;$$reg2mem126$0 = $320;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$4;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$3;
   continue;
  }
  $321 = ($317|0)>(0);
  if (!($321)) {
   label = 153;
   break;
  }
  __THREW__ = 0;
  (invoke_iiiiii(94,($equation|0),($np|0),($loc|0),($len_first$1|0),($level|0))|0);
  $322 = __THREW__; __THREW__ = 0;
  if ((($322|0) != 0) & ((threwValue|0) != 0)) { $323 = _testSetjmp(HEAP32[$322>>2]|0, _setjmpTable)|0; if (($323|0) == 0) { _longjmp($322|0, threwValue|0); } tempRet0 = threwValue; } else { $323 = -1; };
  $324 = tempRet0;
  if ((($323|0) == 1)) {
   $$0 = $$7;$$reg2mem126$0 = $324;$len2$0 = $len2$1;$len_first$0 = $len_first$1;$loc1$0 = $loc1$4;$loc2$0 = $loc2$1;$modified$0 = $modified$1;$symbolic_modified$0 = $symbolic_modified$3;
  } else {
   label = 152;
   break;
  }
 }
 if ((label|0) == 9) {
  // unreachable;
 }
 else if ((label|0) == 10) {
  $15 = ($modified$0|0)!=(0);
  if ($15) {
   $$reg2mem124$0 = 1;
  } else {
   $16 = ($symbolic_modified$0|0)!=(0);
   $$reg2mem124$0 = $16;
  }
  $17 = $$reg2mem124$0&1;
  $$0128 = $17;
  STACKTOP = sp;return ($$0128|0);
 }
 else if ((label|0) == 152) {
  label = 153;
 }
 if ((label|0) == 153) {
 }
 $325 = ($modified$1|0)!=(0);
 if ($325) {
  label = 156;
 } else {
  $326 = ($symbolic_modified$3|0)!=(0);
  if ($326) {
   label = 156;
  }
 }
 if ((label|0) == 156) {
  $i$4 = $loc;
  while(1) {
   $327 = HEAP32[$np>>2]|0;
   $328 = ($i$4|0)<($327|0);
   if ($328) {
    $329 = (($equation) + ($i$4<<4)|0);
    $330 = (($329) + 4|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = ($331|0)>=($level|0);
    $$reg2mem120$0 = $332;
   } else {
    $$reg2mem120$0 = 0;
   }
   if (!($$reg2mem120$0)) {
    break;
   }
   $333 = (($i$4) + 1)|0;
   $i$4 = $333;
  }
 }
 $334 = ($modified$1|0)!=(0);
 if ($334) {
  $$reg2mem118$0 = 1;
 } else {
  $335 = ($symbolic_modified$3|0)!=(0);
  $$reg2mem118$0 = $335;
 }
 $336 = $$reg2mem118$0&1;
 $$0128 = $336;
 STACKTOP = sp;return ($$0128|0);
}
function _save_factors($equation,$np,$loc1,$len,$level) {
 $equation = $equation|0;
 $np = $np|0;
 $loc1 = $loc1|0;
 $len = $len|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc1;
 $4 = $len;
 $5 = $level;
 $6 = HEAP32[3712>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = HEAP32[3720>>2]|0;
 $9 = (($7) + ($8))|0;
 $i = $9;
 $10 = $i;
 $11 = $4;
 $12 = ($11*3)|0;
 $13 = ($10|0)>($12|0);
 do {
  if ($13) {
  } else {
   $14 = $2;
   $15 = HEAP32[$14>>2]|0;
   $16 = $i;
   $17 = $4;
   $18 = (($16) - ($17))|0;
   $19 = (($15) + ($18))|0;
   $20 = HEAP32[8>>2]|0;
   $21 = ($19|0)>($20|0);
   if ($21) {
    break;
   }
   $22 = $3;
   $23 = $i;
   $24 = (($22) + ($23))|0;
   $25 = $1;
   $26 = (($25) + ($24<<4)|0);
   $27 = $3;
   $28 = $4;
   $29 = (($27) + ($28))|0;
   $30 = $1;
   $31 = (($30) + ($29<<4)|0);
   $32 = $2;
   $33 = HEAP32[$32>>2]|0;
   $34 = $3;
   $35 = $4;
   $36 = (($34) + ($35))|0;
   $37 = (($33) - ($36))|0;
   $38 = $37<<4;
   _memmove(($26|0),($31|0),($38|0))|0;
   $39 = $i;
   $40 = $4;
   $41 = (($39) - ($40))|0;
   $42 = $2;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($41))|0;
   HEAP32[$42>>2] = $44;
   $45 = $3;
   $46 = $1;
   $47 = (($46) + ($45<<4)|0);
   $48 = HEAP32[3680>>2]|0;
   $49 = HEAP32[3712>>2]|0;
   $50 = $49<<4;
   _memmove(($47|0),($48|0),($50|0))|0;
   $51 = $3;
   $52 = HEAP32[3712>>2]|0;
   $53 = (($51) + ($52))|0;
   $i = $53;
   $54 = $i;
   $55 = $1;
   $56 = (($55) + ($54<<4)|0);
   $57 = (($56) + 4|0);
   HEAP32[$57>>2] = 0;
   $58 = $i;
   $59 = $1;
   $60 = (($59) + ($58<<4)|0);
   HEAP32[$60>>2] = 2;
   $61 = $i;
   $62 = $1;
   $63 = (($62) + ($61<<4)|0);
   $64 = (($63) + 8|0);
   HEAP32[$64>>2] = 4;
   $65 = $i;
   $66 = (($65) + 1)|0;
   $i = $66;
   $67 = $i;
   $68 = $1;
   $69 = (($68) + ($67<<4)|0);
   $70 = HEAP32[3688>>2]|0;
   $71 = HEAP32[3720>>2]|0;
   $72 = $71<<4;
   _memmove(($69|0),($70|0),($72|0))|0;
   $73 = HEAP32[3720>>2]|0;
   $74 = $i;
   $75 = (($74) + ($73))|0;
   $i = $75;
   $76 = $3;
   $j = $76;
   while(1) {
    $77 = $j;
    $78 = $i;
    $79 = ($77|0)<($78|0);
    if (!($79)) {
     break;
    }
    $80 = $5;
    $81 = $j;
    $82 = $1;
    $83 = (($82) + ($81<<4)|0);
    $84 = (($83) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + ($80))|0;
    HEAP32[$84>>2] = $86;
    $87 = $j;
    $88 = (($87) + 1)|0;
    $j = $88;
   }
   $0 = 1;
   $89 = $0;
   STACKTOP = sp;return ($89|0);
  }
 } while(0);
 $0 = 0;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function _differentiate($equation,$np,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $v;
 $3 = $0;
 $4 = $1;
 _organize($3,$4);
 $i = 1;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $0;
  $11 = (($10) + ($9<<4)|0);
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  if ((($13|0) == 5) | (($13|0) == 4)) {
   $14 = $0;
   $15 = $1;
   $16 = HEAP32[$15>>2]|0;
   $17 = $i;
   _binary_parenthesize($14,$16,$17);
  }
  $18 = $i;
  $19 = (($18) + 2)|0;
  $i = $19;
 }
 $20 = $0;
 $21 = $1;
 $22 = $2;
 $23 = (_d_recurse($20,$21,0,1,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _d_recurse($equation,$np,$loc,$level,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $c$byval_copy = 0, $endloc = 0, $i = 0;
 var $j = 0, $n = 0, $op = 0, $oploc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c$byval_copy = sp + 32|0;
 $c = sp + 16|0;
 $6 = sp;
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $5 = $v;
 $7 = $3;
 $8 = $1;
 $9 = (($8) + ($7<<4)|0);
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ($11|0)<($12|0);
 if ($13) {
  $14 = $3;
  $15 = $1;
  $16 = (($15) + ($14<<4)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(1);
  do {
   if ($18) {
    $19 = $5;
    $20 = ($19|0)==(5);
    if ($20) {
     $21 = $3;
     $22 = $1;
     $23 = (($22) + ($21<<4)|0);
     $24 = (($23) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $25 & 16383;
     $27 = ($26|0)>(4);
     if (!($27)) {
      label = 5;
     }
    } else {
     label = 5;
    }
    if ((label|0) == 5) {
     $28 = $3;
     $29 = $1;
     $30 = (($29) + ($28<<4)|0);
     $31 = (($30) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $5;
     $34 = ($32|0)==($33|0);
     if (!($34)) {
      label = 7;
      break;
     }
    }
    $35 = $3;
    $36 = $1;
    $37 = (($36) + ($35<<4)|0);
    HEAP32[$37>>2] = 0;
    $38 = $3;
    $39 = $1;
    $40 = (($39) + ($38<<4)|0);
    $41 = (($40) + 8|0);
    HEAPF64[$41>>3] = 1.0;
   } else {
    label = 7;
   }
  } while(0);
  if ((label|0) == 7) {
   $42 = $3;
   $43 = $1;
   $44 = (($43) + ($42<<4)|0);
   HEAP32[$44>>2] = 0;
   $45 = $3;
   $46 = $1;
   $47 = (($46) + ($45<<4)|0);
   $48 = (($47) + 8|0);
   HEAPF64[$48>>3] = 0.0;
  }
  $0 = 1;
  $812 = $0;
  STACKTOP = sp;return ($812|0);
 }
 $op = 0;
 $49 = $3;
 $50 = (($49) + 1)|0;
 $endloc = $50;
 $oploc = $50;
 while(1) {
  $51 = $endloc;
  $52 = $2;
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51|0)<($53|0);
  if ($54) {
   $55 = $endloc;
   $56 = $1;
   $57 = (($56) + ($55<<4)|0);
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $4;
   $61 = ($59|0)>=($60|0);
   $813 = $61;
  } else {
   $813 = 0;
  }
  if (!($813)) {
   break;
  }
  $62 = $endloc;
  $63 = $1;
  $64 = (($63) + ($62<<4)|0);
  $65 = (($64) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $4;
  $68 = ($66|0)==($67|0);
  if ($68) {
   $69 = $op;
   if (!((($69|0) == 2) | (($69|0) == 1) | (($69|0) == 0))) {
    label = 16;
    break;
   }
   $70 = $endloc;
   $71 = $1;
   $72 = (($71) + ($70<<4)|0);
   $73 = (($72) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $op = $74;
   $75 = $endloc;
   $oploc = $75;
  }
  $76 = $endloc;
  $77 = (($76) + 2)|0;
  $endloc = $77;
 }
 if ((label|0) == 16) {
  _error_bug(793240);
  $0 = 0;
  $812 = $0;
  STACKTOP = sp;return ($812|0);
 }
 $78 = $op;
 switch ($78|0) {
 case 8:  {
  $417 = $oploc;
  $i = $417;
  while(1) {
   $418 = $i;
   $419 = $endloc;
   $420 = ($418|0)<($419|0);
   if (!($420)) {
    break;
   }
   $421 = $i;
   $422 = $1;
   $423 = (($422) + ($421<<4)|0);
   $424 = HEAP32[$423>>2]|0;
   $425 = ($424|0)==(1);
   if ($425) {
    $426 = $5;
    $427 = ($426|0)==(5);
    if ($427) {
     $428 = $i;
     $429 = $1;
     $430 = (($429) + ($428<<4)|0);
     $431 = (($430) + 8|0);
     $432 = HEAP32[$431>>2]|0;
     $433 = $432 & 16383;
     $434 = ($433|0)>(4);
     if ($434) {
      label = 75;
      break;
     }
    }
    $435 = $i;
    $436 = $1;
    $437 = (($436) + ($435<<4)|0);
    $438 = (($437) + 8|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $5;
    $441 = ($439|0)==($440|0);
    if ($441) {
     label = 75;
     break;
    }
   }
   $615 = $i;
   $616 = (($615) + 1)|0;
   $i = $616;
  }
  if ((label|0) == 75) {
   $442 = $3;
   $443 = $1;
   $444 = (($443) + ($442<<4)|0);
   $445 = $oploc;
   $446 = $3;
   $447 = (($445) - ($446))|0;
   $448 = (_parse_complex($444,$447,$c)|0);
   $449 = ($448|0)!=(0);
   if (!($449)) {
    $0 = 0;
    $812 = $0;
    STACKTOP = sp;return ($812|0);
   }
   ;HEAP32[$c$byval_copy+0>>2]=HEAP32[$c+0>>2]|0;HEAP32[$c$byval_copy+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$c$byval_copy+8>>2]=HEAP32[$c+8>>2]|0;HEAP32[$c$byval_copy+12>>2]=HEAP32[$c+12>>2]|0;
   _complex_log($6,$c$byval_copy);
   ;HEAP32[$c+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$c+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$c+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$c+12>>2]=HEAP32[$6+12>>2]|0;
   $450 = $endloc;
   $451 = $oploc;
   $452 = (($450) - ($451))|0;
   $453 = (($452) + 6)|0;
   $n = $453;
   $454 = $2;
   $455 = HEAP32[$454>>2]|0;
   $456 = $n;
   $457 = (($455) + ($456))|0;
   $458 = HEAP32[8>>2]|0;
   $459 = ($457|0)>($458|0);
   if ($459) {
    _error_huge();
   }
   $460 = $endloc;
   $461 = $n;
   $462 = (($460) + ($461))|0;
   $463 = $1;
   $464 = (($463) + ($462<<4)|0);
   $465 = $endloc;
   $466 = $1;
   $467 = (($466) + ($465<<4)|0);
   $468 = $2;
   $469 = HEAP32[$468>>2]|0;
   $470 = $endloc;
   $471 = (($469) - ($470))|0;
   $472 = $471<<4;
   _memmove(($464|0),($467|0),($472|0))|0;
   $473 = $n;
   $474 = $2;
   $475 = HEAP32[$474>>2]|0;
   $476 = (($475) + ($473))|0;
   HEAP32[$474>>2] = $476;
   $477 = $endloc;
   $n = $477;
   $478 = $4;
   $479 = $n;
   $480 = $1;
   $481 = (($480) + ($479<<4)|0);
   $482 = (($481) + 4|0);
   HEAP32[$482>>2] = $478;
   $483 = $n;
   $484 = $1;
   $485 = (($484) + ($483<<4)|0);
   HEAP32[$485>>2] = 2;
   $486 = $n;
   $487 = $1;
   $488 = (($487) + ($486<<4)|0);
   $489 = (($488) + 8|0);
   HEAP32[$489>>2] = 4;
   $490 = $n;
   $491 = (($490) + 1)|0;
   $n = $491;
   $492 = $4;
   $493 = (($492) + 1)|0;
   $494 = $n;
   $495 = $1;
   $496 = (($495) + ($494<<4)|0);
   $497 = (($496) + 4|0);
   HEAP32[$497>>2] = $493;
   $498 = $n;
   $499 = $1;
   $500 = (($499) + ($498<<4)|0);
   HEAP32[$500>>2] = 0;
   $501 = +HEAPF64[$c>>3];
   $502 = $n;
   $503 = $1;
   $504 = (($503) + ($502<<4)|0);
   $505 = (($504) + 8|0);
   HEAPF64[$505>>3] = $501;
   $506 = $n;
   $507 = (($506) + 1)|0;
   $n = $507;
   $508 = $4;
   $509 = (($508) + 1)|0;
   $510 = $n;
   $511 = $1;
   $512 = (($511) + ($510<<4)|0);
   $513 = (($512) + 4|0);
   HEAP32[$513>>2] = $509;
   $514 = $n;
   $515 = $1;
   $516 = (($515) + ($514<<4)|0);
   HEAP32[$516>>2] = 2;
   $517 = $n;
   $518 = $1;
   $519 = (($518) + ($517<<4)|0);
   $520 = (($519) + 8|0);
   HEAP32[$520>>2] = 1;
   $521 = $n;
   $522 = (($521) + 1)|0;
   $n = $522;
   $523 = $4;
   $524 = (($523) + 2)|0;
   $525 = $n;
   $526 = $1;
   $527 = (($526) + ($525<<4)|0);
   $528 = (($527) + 4|0);
   HEAP32[$528>>2] = $524;
   $529 = $n;
   $530 = $1;
   $531 = (($530) + ($529<<4)|0);
   HEAP32[$531>>2] = 0;
   $532 = (($c) + 8|0);
   $533 = +HEAPF64[$532>>3];
   $534 = $n;
   $535 = $1;
   $536 = (($535) + ($534<<4)|0);
   $537 = (($536) + 8|0);
   HEAPF64[$537>>3] = $533;
   $538 = $n;
   $539 = (($538) + 1)|0;
   $n = $539;
   $540 = $4;
   $541 = (($540) + 2)|0;
   $542 = $n;
   $543 = $1;
   $544 = (($543) + ($542<<4)|0);
   $545 = (($544) + 4|0);
   HEAP32[$545>>2] = $541;
   $546 = $n;
   $547 = $1;
   $548 = (($547) + ($546<<4)|0);
   HEAP32[$548>>2] = 2;
   $549 = $n;
   $550 = $1;
   $551 = (($550) + ($549<<4)|0);
   $552 = (($551) + 8|0);
   HEAP32[$552>>2] = 4;
   $553 = $n;
   $554 = (($553) + 1)|0;
   $n = $554;
   $555 = $4;
   $556 = (($555) + 2)|0;
   $557 = $n;
   $558 = $1;
   $559 = (($558) + ($557<<4)|0);
   $560 = (($559) + 4|0);
   HEAP32[$560>>2] = $556;
   $561 = $n;
   $562 = $1;
   $563 = (($562) + ($561<<4)|0);
   HEAP32[$563>>2] = 1;
   $564 = $n;
   $565 = $1;
   $566 = (($565) + ($564<<4)|0);
   $567 = (($566) + 8|0);
   HEAP32[$567>>2] = 3;
   $568 = $n;
   $569 = (($568) + 1)|0;
   $n = $569;
   $570 = $4;
   $571 = $n;
   $572 = $1;
   $573 = (($572) + ($571<<4)|0);
   $574 = (($573) + 4|0);
   HEAP32[$574>>2] = $570;
   $575 = $n;
   $576 = $1;
   $577 = (($576) + ($575<<4)|0);
   HEAP32[$577>>2] = 2;
   $578 = $n;
   $579 = $1;
   $580 = (($579) + ($578<<4)|0);
   $581 = (($580) + 8|0);
   HEAP32[$581>>2] = 4;
   $582 = $n;
   $583 = (($582) + 1)|0;
   $n = $583;
   $584 = $n;
   $585 = $1;
   $586 = (($585) + ($584<<4)|0);
   $587 = $oploc;
   $588 = (($587) + 1)|0;
   $589 = $1;
   $590 = (($589) + ($588<<4)|0);
   $591 = $endloc;
   $592 = $oploc;
   $593 = (($592) + 1)|0;
   $594 = (($591) - ($593))|0;
   $595 = $594<<4;
   _memmove(($586|0),($590|0),($595|0))|0;
   $596 = $3;
   $i = $596;
   while(1) {
    $597 = $i;
    $598 = $endloc;
    $599 = ($597|0)<($598|0);
    if (!($599)) {
     break;
    }
    $600 = $i;
    $601 = $1;
    $602 = (($601) + ($600<<4)|0);
    $603 = (($602) + 4|0);
    $604 = HEAP32[$603>>2]|0;
    $605 = (($604) + 1)|0;
    HEAP32[$603>>2] = $605;
    $606 = $i;
    $607 = (($606) + 1)|0;
    $i = $607;
   }
   $608 = $1;
   $609 = $2;
   $610 = $n;
   $611 = $4;
   $612 = (($611) + 1)|0;
   $613 = $5;
   $614 = (_d_recurse($608,$609,$610,$612,$613)|0);
   $0 = $614;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  }
  $617 = HEAP32[3704>>2]|0;
  $618 = $oploc;
  $619 = (($618) + 1)|0;
  $620 = $1;
  $621 = (($620) + ($619<<4)|0);
  $622 = $endloc;
  $623 = $oploc;
  $624 = (($623) + 1)|0;
  $625 = (($622) - ($624))|0;
  $626 = $625<<4;
  _memmove(($617|0),($621|0),($626|0))|0;
  $627 = $endloc;
  $628 = $oploc;
  $629 = (($628) + 1)|0;
  $630 = (($627) - ($629))|0;
  $n = $630;
  $631 = $4;
  $632 = $n;
  $633 = HEAP32[3704>>2]|0;
  $634 = (($633) + ($632<<4)|0);
  $635 = (($634) + 4|0);
  HEAP32[$635>>2] = $631;
  $636 = $n;
  $637 = HEAP32[3704>>2]|0;
  $638 = (($637) + ($636<<4)|0);
  HEAP32[$638>>2] = 2;
  $639 = $n;
  $640 = HEAP32[3704>>2]|0;
  $641 = (($640) + ($639<<4)|0);
  $642 = (($641) + 8|0);
  HEAP32[$642>>2] = 4;
  $643 = $n;
  $644 = (($643) + 1)|0;
  $n = $644;
  $645 = $n;
  $646 = $endloc;
  $647 = $3;
  $648 = (($646) - ($647))|0;
  $649 = (($645) + ($648))|0;
  $650 = (($649) + 2)|0;
  $651 = HEAP32[8>>2]|0;
  $652 = ($650|0)>($651|0);
  if ($652) {
   _error_huge();
  }
  $653 = $n;
  $654 = HEAP32[3704>>2]|0;
  $655 = (($654) + ($653<<4)|0);
  $656 = $3;
  $657 = $1;
  $658 = (($657) + ($656<<4)|0);
  $659 = $endloc;
  $660 = $3;
  $661 = (($659) - ($660))|0;
  $662 = $661<<4;
  _memmove(($655|0),($658|0),($662|0))|0;
  $663 = $n;
  $i = $663;
  $664 = $oploc;
  $665 = (($664) + 1)|0;
  $666 = $3;
  $667 = (($665) - ($666))|0;
  $668 = $n;
  $669 = (($668) + ($667))|0;
  $n = $669;
  while(1) {
   $670 = $i;
   $671 = $n;
   $672 = ($670|0)<($671|0);
   if (!($672)) {
    break;
   }
   $673 = $i;
   $674 = HEAP32[3704>>2]|0;
   $675 = (($674) + ($673<<4)|0);
   $676 = (($675) + 4|0);
   $677 = HEAP32[$676>>2]|0;
   $678 = (($677) + 1)|0;
   HEAP32[$676>>2] = $678;
   $679 = $i;
   $680 = (($679) + 1)|0;
   $i = $680;
  }
  $681 = $endloc;
  $682 = $oploc;
  $683 = (($682) + 1)|0;
  $684 = (($681) - ($683))|0;
  $685 = $n;
  $686 = (($685) + ($684))|0;
  $n = $686;
  while(1) {
   $687 = $i;
   $688 = $n;
   $689 = ($687|0)<($688|0);
   if (!($689)) {
    break;
   }
   $690 = $i;
   $691 = HEAP32[3704>>2]|0;
   $692 = (($691) + ($690<<4)|0);
   $693 = (($692) + 4|0);
   $694 = HEAP32[$693>>2]|0;
   $695 = (($694) + 2)|0;
   HEAP32[$693>>2] = $695;
   $696 = $i;
   $697 = (($696) + 1)|0;
   $i = $697;
  }
  $698 = $4;
  $699 = (($698) + 2)|0;
  $700 = $n;
  $701 = HEAP32[3704>>2]|0;
  $702 = (($701) + ($700<<4)|0);
  $703 = (($702) + 4|0);
  HEAP32[$703>>2] = $699;
  $704 = $n;
  $705 = HEAP32[3704>>2]|0;
  $706 = (($705) + ($704<<4)|0);
  HEAP32[$706>>2] = 2;
  $707 = $n;
  $708 = HEAP32[3704>>2]|0;
  $709 = (($708) + ($707<<4)|0);
  $710 = (($709) + 8|0);
  HEAP32[$710>>2] = 2;
  $711 = $n;
  $712 = (($711) + 1)|0;
  $n = $712;
  $713 = $4;
  $714 = (($713) + 2)|0;
  $715 = $n;
  $716 = HEAP32[3704>>2]|0;
  $717 = (($716) + ($715<<4)|0);
  $718 = (($717) + 4|0);
  HEAP32[$718>>2] = $714;
  $719 = $n;
  $720 = HEAP32[3704>>2]|0;
  $721 = (($720) + ($719<<4)|0);
  HEAP32[$721>>2] = 0;
  $722 = $n;
  $723 = HEAP32[3704>>2]|0;
  $724 = (($723) + ($722<<4)|0);
  $725 = (($724) + 8|0);
  HEAPF64[$725>>3] = 1.0;
  $726 = $n;
  $727 = (($726) + 1)|0;
  $n = $727;
  $728 = $n;
  $729 = $oploc;
  $730 = $3;
  $731 = (($729) - ($730))|0;
  $732 = (($728) + ($731))|0;
  $733 = (($732) + 1)|0;
  $734 = HEAP32[8>>2]|0;
  $735 = ($733|0)>($734|0);
  if ($735) {
   _error_huge();
  }
  $736 = $4;
  $737 = $n;
  $738 = HEAP32[3704>>2]|0;
  $739 = (($738) + ($737<<4)|0);
  $740 = (($739) + 4|0);
  HEAP32[$740>>2] = $736;
  $741 = $n;
  $742 = HEAP32[3704>>2]|0;
  $743 = (($742) + ($741<<4)|0);
  HEAP32[$743>>2] = 2;
  $744 = $n;
  $745 = HEAP32[3704>>2]|0;
  $746 = (($745) + ($744<<4)|0);
  $747 = (($746) + 8|0);
  HEAP32[$747>>2] = 4;
  $748 = $n;
  $749 = (($748) + 1)|0;
  $n = $749;
  $750 = $n;
  $j = $750;
  $751 = $n;
  $752 = HEAP32[3704>>2]|0;
  $753 = (($752) + ($751<<4)|0);
  $754 = $3;
  $755 = $1;
  $756 = (($755) + ($754<<4)|0);
  $757 = $oploc;
  $758 = $3;
  $759 = (($757) - ($758))|0;
  $760 = $759<<4;
  _memmove(($753|0),($756|0),($760|0))|0;
  $761 = $oploc;
  $762 = $3;
  $763 = (($761) - ($762))|0;
  $764 = $n;
  $765 = (($764) + ($763))|0;
  $n = $765;
  $766 = $2;
  $767 = HEAP32[$766>>2]|0;
  $768 = $endloc;
  $769 = $3;
  $770 = (($768) - ($769))|0;
  $771 = (($767) - ($770))|0;
  $772 = $n;
  $773 = (($771) + ($772))|0;
  $774 = HEAP32[8>>2]|0;
  $775 = ($773|0)>($774|0);
  if ($775) {
   _error_huge();
  }
  $776 = $3;
  $777 = $n;
  $778 = (($776) + ($777))|0;
  $779 = $1;
  $780 = (($779) + ($778<<4)|0);
  $781 = $endloc;
  $782 = $1;
  $783 = (($782) + ($781<<4)|0);
  $784 = $2;
  $785 = HEAP32[$784>>2]|0;
  $786 = $endloc;
  $787 = (($785) - ($786))|0;
  $788 = $787<<4;
  _memmove(($780|0),($783|0),($788|0))|0;
  $789 = $3;
  $790 = $n;
  $791 = (($789) + ($790))|0;
  $792 = $endloc;
  $793 = (($791) - ($792))|0;
  $794 = $2;
  $795 = HEAP32[$794>>2]|0;
  $796 = (($795) + ($793))|0;
  HEAP32[$794>>2] = $796;
  $797 = $3;
  $798 = $1;
  $799 = (($798) + ($797<<4)|0);
  $800 = HEAP32[3704>>2]|0;
  $801 = $n;
  $802 = $801<<4;
  _memmove(($799|0),($800|0),($802|0))|0;
  $803 = $1;
  $804 = $2;
  $805 = $3;
  $806 = $j;
  $807 = (($805) + ($806))|0;
  $808 = $4;
  $809 = (($808) + 1)|0;
  $810 = $5;
  $811 = (_d_recurse($803,$804,$807,$809,$810)|0);
  $0 = $811;
  $812 = $0;
  STACKTOP = sp;return ($812|0);
  break;
 }
 case 2: case 1: case 0:  {
  $137 = $3;
  $i = $137;
  while(1) {
   $138 = $i;
   $139 = $2;
   $140 = HEAP32[$139>>2]|0;
   $141 = ($138|0)<($140|0);
   if ($141) {
    $142 = $i;
    $143 = $1;
    $144 = (($143) + ($142<<4)|0);
    $145 = (($144) + 4|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = $4;
    $148 = ($146|0)>=($147|0);
    $814 = $148;
   } else {
    $814 = 0;
   }
   if (!($814)) {
    label = 50;
    break;
   }
   $149 = $i;
   $150 = $1;
   $151 = (($150) + ($149<<4)|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($152|0)!=(2);
   if (!($153)) {
    $177 = $i;
    $178 = (($177) + 1)|0;
    $i = $178;
    continue;
   }
   $154 = $1;
   $155 = $2;
   $156 = $i;
   $157 = $4;
   $158 = (($157) + 1)|0;
   $159 = $5;
   $160 = (_d_recurse($154,$155,$156,$158,$159)|0);
   $161 = ($160|0)!=(0);
   if (!($161)) {
    label = 41;
    break;
   }
   $162 = $i;
   $163 = (($162) + 1)|0;
   $i = $163;
   while(1) {
    $164 = $i;
    $165 = $2;
    $166 = HEAP32[$165>>2]|0;
    $167 = ($164|0)<($166|0);
    if ($167) {
     $168 = $i;
     $169 = $1;
     $170 = (($169) + ($168<<4)|0);
     $171 = (($170) + 4|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $4;
     $174 = ($172|0)>($173|0);
     $815 = $174;
    } else {
     $815 = 0;
    }
    if (!($815)) {
     break;
    }
    $175 = $i;
    $176 = (($175) + 2)|0;
    $i = $176;
   }
  }
  if ((label|0) == 41) {
   $0 = 0;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  }
  else if ((label|0) == 50) {
   $0 = 1;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  }
  break;
 }
 case 5:  {
  $251 = $2;
  $252 = HEAP32[$251>>2]|0;
  $253 = (($252) + 3)|0;
  $254 = $endloc;
  $255 = $3;
  $256 = (($254) - ($255))|0;
  $257 = (($253) + ($256))|0;
  $258 = $endloc;
  $259 = $oploc;
  $260 = (($258) - ($259))|0;
  $261 = (($257) + ($260))|0;
  $262 = HEAP32[8>>2]|0;
  $263 = ($261|0)>($262|0);
  if ($263) {
   _error_huge();
  }
  $264 = $3;
  $i = $264;
  while(1) {
   $265 = $i;
   $266 = $endloc;
   $267 = ($265|0)<($266|0);
   if (!($267)) {
    break;
   }
   $268 = $i;
   $269 = $1;
   $270 = (($269) + ($268<<4)|0);
   $271 = (($270) + 4|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + 2)|0;
   HEAP32[$271>>2] = $273;
   $274 = $i;
   $275 = (($274) + 1)|0;
   $i = $275;
  }
  $276 = $oploc;
  $277 = $1;
  $278 = (($277) + ($276<<4)|0);
  $279 = (($278) + 8|0);
  HEAP32[$279>>2] = 4;
  $280 = $endloc;
  $281 = $3;
  $282 = (($280) - ($281))|0;
  $283 = (1 + ($282))|0;
  $j = $283;
  $284 = $endloc;
  $285 = (($284) + 1)|0;
  $286 = $1;
  $287 = (($286) + ($285<<4)|0);
  $288 = $3;
  $289 = $1;
  $290 = (($289) + ($288<<4)|0);
  $291 = $2;
  $292 = HEAP32[$291>>2]|0;
  $293 = $3;
  $294 = (($292) - ($293))|0;
  $295 = $294<<4;
  _memmove(($287|0),($290|0),($295|0))|0;
  $296 = $j;
  $297 = $2;
  $298 = HEAP32[$297>>2]|0;
  $299 = (($298) + ($296))|0;
  HEAP32[$297>>2] = $299;
  $300 = $4;
  $301 = (($300) + 1)|0;
  $302 = $endloc;
  $303 = $1;
  $304 = (($303) + ($302<<4)|0);
  $305 = (($304) + 4|0);
  HEAP32[$305>>2] = $301;
  $306 = $endloc;
  $307 = $1;
  $308 = (($307) + ($306<<4)|0);
  HEAP32[$308>>2] = 2;
  $309 = $endloc;
  $310 = $1;
  $311 = (($310) + ($309<<4)|0);
  $312 = (($311) + 8|0);
  HEAP32[$312>>2] = 2;
  $313 = $endloc;
  $314 = $j;
  $315 = (($314) + ($313))|0;
  $j = $315;
  $316 = $j;
  $317 = (($316) + 2)|0;
  $318 = $endloc;
  $319 = $oploc;
  $320 = (($318) - ($319))|0;
  $321 = (($317) + ($320))|0;
  $322 = $1;
  $323 = (($322) + ($321<<4)|0);
  $324 = $j;
  $325 = $1;
  $326 = (($325) + ($324<<4)|0);
  $327 = $2;
  $328 = HEAP32[$327>>2]|0;
  $329 = $j;
  $330 = (($328) - ($329))|0;
  $331 = $330<<4;
  _memmove(($323|0),($326|0),($331|0))|0;
  $332 = $endloc;
  $333 = $oploc;
  $334 = (($332) - ($333))|0;
  $335 = (2 + ($334))|0;
  $336 = $2;
  $337 = HEAP32[$336>>2]|0;
  $338 = (($337) + ($335))|0;
  HEAP32[$336>>2] = $338;
  $339 = $4;
  $340 = $j;
  $341 = $1;
  $342 = (($341) + ($340<<4)|0);
  $343 = (($342) + 4|0);
  HEAP32[$343>>2] = $339;
  $344 = $j;
  $345 = $1;
  $346 = (($345) + ($344<<4)|0);
  HEAP32[$346>>2] = 2;
  $347 = $j;
  $348 = $1;
  $349 = (($348) + ($347<<4)|0);
  $350 = (($349) + 8|0);
  HEAP32[$350>>2] = 5;
  $351 = $j;
  $352 = (($351) + 1)|0;
  $353 = $1;
  $354 = (($353) + ($352<<4)|0);
  $355 = $oploc;
  $356 = (($355) + 1)|0;
  $357 = $1;
  $358 = (($357) + ($356<<4)|0);
  $359 = $endloc;
  $360 = $oploc;
  $361 = (($360) + 1)|0;
  $362 = (($359) - ($361))|0;
  $363 = $362<<4;
  _memmove(($354|0),($358|0),($363|0))|0;
  $364 = $endloc;
  $365 = $oploc;
  $366 = (($364) - ($365))|0;
  $367 = $j;
  $368 = (($367) + ($366))|0;
  $j = $368;
  $369 = $4;
  $370 = (($369) + 1)|0;
  $371 = $j;
  $372 = $1;
  $373 = (($372) + ($371<<4)|0);
  $374 = (($373) + 4|0);
  HEAP32[$374>>2] = $370;
  $375 = $j;
  $376 = $1;
  $377 = (($376) + ($375<<4)|0);
  HEAP32[$377>>2] = 2;
  $378 = $j;
  $379 = $1;
  $380 = (($379) + ($378<<4)|0);
  $381 = (($380) + 8|0);
  HEAP32[$381>>2] = 8;
  $382 = $j;
  $383 = (($382) + 1)|0;
  $j = $383;
  $384 = $4;
  $385 = (($384) + 1)|0;
  $386 = $j;
  $387 = $1;
  $388 = (($387) + ($386<<4)|0);
  $389 = (($388) + 4|0);
  HEAP32[$389>>2] = $385;
  $390 = $j;
  $391 = $1;
  $392 = (($391) + ($390<<4)|0);
  HEAP32[$392>>2] = 0;
  $393 = $j;
  $394 = $1;
  $395 = (($394) + ($393<<4)|0);
  $396 = (($395) + 8|0);
  HEAPF64[$396>>3] = 2.0;
  $397 = $1;
  $398 = $2;
  $399 = $endloc;
  $400 = $oploc;
  $401 = $3;
  $402 = (($400) - ($401))|0;
  $403 = (($399) + ($402))|0;
  $404 = (($403) + 2)|0;
  $405 = $4;
  $406 = (($405) + 3)|0;
  $407 = $5;
  $408 = (_d_recurse($397,$398,$404,$406,$407)|0);
  $409 = ($408|0)!=(0);
  if ($409) {
   $410 = $1;
   $411 = $2;
   $412 = $3;
   $413 = $4;
   $414 = (($413) + 3)|0;
   $415 = $5;
   $416 = (_d_recurse($410,$411,$412,$414,$415)|0);
   $0 = $416;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  } else {
   $0 = 0;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  }
  break;
 }
 case 4:  {
  $179 = $2;
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + 1)|0;
  $182 = $endloc;
  $183 = $3;
  $184 = (($182) - ($183))|0;
  $185 = (($181) + ($184))|0;
  $186 = HEAP32[8>>2]|0;
  $187 = ($185|0)>($186|0);
  if ($187) {
   _error_huge();
  }
  $188 = $3;
  $i = $188;
  while(1) {
   $189 = $i;
   $190 = $endloc;
   $191 = ($189|0)<($190|0);
   if (!($191)) {
    break;
   }
   $192 = $i;
   $193 = $1;
   $194 = (($193) + ($192<<4)|0);
   $195 = (($194) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($196) + 1)|0;
   HEAP32[$195>>2] = $197;
   $198 = $i;
   $199 = (($198) + 1)|0;
   $i = $199;
  }
  $200 = $endloc;
  $201 = (($200) + 1)|0;
  $202 = $1;
  $203 = (($202) + ($201<<4)|0);
  $204 = $3;
  $205 = $1;
  $206 = (($205) + ($204<<4)|0);
  $207 = $2;
  $208 = HEAP32[$207>>2]|0;
  $209 = $3;
  $210 = (($208) - ($209))|0;
  $211 = $210<<4;
  _memmove(($203|0),($206|0),($211|0))|0;
  $212 = $endloc;
  $213 = $3;
  $214 = (($212) - ($213))|0;
  $215 = (1 + ($214))|0;
  $216 = $2;
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + ($215))|0;
  HEAP32[$216>>2] = $218;
  $219 = $4;
  $220 = $endloc;
  $221 = $1;
  $222 = (($221) + ($220<<4)|0);
  $223 = (($222) + 4|0);
  HEAP32[$223>>2] = $219;
  $224 = $endloc;
  $225 = $1;
  $226 = (($225) + ($224<<4)|0);
  HEAP32[$226>>2] = 2;
  $227 = $endloc;
  $228 = $1;
  $229 = (($228) + ($227<<4)|0);
  $230 = (($229) + 8|0);
  HEAP32[$230>>2] = 1;
  $231 = $1;
  $232 = $2;
  $233 = $endloc;
  $234 = $oploc;
  $235 = $3;
  $236 = (($234) - ($235))|0;
  $237 = (($233) + ($236))|0;
  $238 = (($237) + 2)|0;
  $239 = $4;
  $240 = (($239) + 2)|0;
  $241 = $5;
  $242 = (_d_recurse($231,$232,$238,$240,$241)|0);
  $243 = ($242|0)!=(0);
  if ($243) {
   $244 = $1;
   $245 = $2;
   $246 = $3;
   $247 = $4;
   $248 = (($247) + 2)|0;
   $249 = $5;
   $250 = (_d_recurse($244,$245,$246,$248,$249)|0);
   $0 = $250;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  } else {
   $0 = 0;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  }
  break;
 }
 default: {
  $79 = $3;
  $i = $79;
  while(1) {
   $80 = $i;
   $81 = $endloc;
   $82 = ($80|0)<($81|0);
   if (!($82)) {
    label = 34;
    break;
   }
   $83 = $i;
   $84 = $1;
   $85 = (($84) + ($83<<4)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)==(1);
   if ($87) {
    $88 = $5;
    $89 = ($88|0)==(5);
    if ($89) {
     $90 = $i;
     $91 = $1;
     $92 = (($91) + ($90<<4)|0);
     $93 = (($92) + 8|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $94 & 16383;
     $96 = ($95|0)>(4);
     if ($96) {
      label = 31;
      break;
     }
    }
    $97 = $i;
    $98 = $1;
    $99 = (($98) + ($97<<4)|0);
    $100 = (($99) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $5;
    $103 = ($101|0)==($102|0);
    if ($103) {
     label = 31;
     break;
    }
   }
   $104 = $i;
   $105 = (($104) + 2)|0;
   $i = $105;
  }
  if ((label|0) == 31) {
   $0 = 0;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  }
  else if ((label|0) == 34) {
   $106 = $3;
   $107 = (($106) + 1)|0;
   $108 = $1;
   $109 = (($108) + ($107<<4)|0);
   $110 = $endloc;
   $111 = $1;
   $112 = (($111) + ($110<<4)|0);
   $113 = $2;
   $114 = HEAP32[$113>>2]|0;
   $115 = $endloc;
   $116 = (($114) - ($115))|0;
   $117 = $116<<4;
   _memmove(($109|0),($112|0),($117|0))|0;
   $118 = $endloc;
   $119 = $3;
   $120 = (($119) + 1)|0;
   $121 = (($118) - ($120))|0;
   $122 = $2;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($123) - ($121))|0;
   HEAP32[$122>>2] = $124;
   $125 = $4;
   $126 = $3;
   $127 = $1;
   $128 = (($127) + ($126<<4)|0);
   $129 = (($128) + 4|0);
   HEAP32[$129>>2] = $125;
   $130 = $3;
   $131 = $1;
   $132 = (($131) + ($130<<4)|0);
   HEAP32[$132>>2] = 0;
   $133 = $3;
   $134 = $1;
   $135 = (($134) + ($133<<4)|0);
   $136 = (($135) + 8|0);
   HEAPF64[$136>>3] = 0.0;
   $0 = 1;
   $812 = $0;
   STACKTOP = sp;return ($812|0);
  }
 }
 }
 return 0|0;
}
function _derivative_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dest = 0, $i = 0, $l1 = 0, $len = 0, $n1 = 0;
 var $np = 0, $nps = 0, $order = 0, $simplify_flag = 0, $solved = 0, $source = 0, $v = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = sp + 52|0;
 $v = sp + 40|0;
 $n1 = sp + 20|0;
 HEAP32[$1>>2] = $cp;
 HEAP32[$v>>2] = 0;
 $order = 1;
 $simplify_flag = 1;
 $2 = (_current_not_defined()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $0 = 0;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 $4 = HEAP32[472>>2]|0;
 $5 = (_solved_equation($4)|0);
 $solved = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = (_strcmp_tospace($6,792112)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $simplify_flag = 0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (_skip_param($9)|0);
  HEAP32[$1>>2] = $10;
 }
 $11 = (_next_espace()|0);
 $i = $11;
 $12 = HEAP32[472>>2]|0;
 $13 = (2880 + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $solved;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   _warning(792128);
  }
  $18 = HEAP32[472>>2]|0;
  $19 = (1280 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $source = $20;
  $21 = HEAP32[472>>2]|0;
  $22 = (2880 + ($21<<2)|0);
  $nps = $22;
  $23 = $i;
  $24 = (1280 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $dest = $25;
  $26 = $i;
  $27 = (2880 + ($26<<2)|0);
  $np = $27;
 } else {
  $28 = HEAP32[472>>2]|0;
  $29 = (480 + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $source = $30;
  $31 = HEAP32[472>>2]|0;
  $32 = (2080 + ($31<<2)|0);
  $nps = $32;
  $33 = $i;
  $34 = (480 + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $dest = $35;
  $36 = $i;
  $37 = (2080 + ($36<<2)|0);
  $np = $37;
 }
 $38 = HEAP32[$1>>2]|0;
 $39 = HEAP8[$38>>0]|0;
 $40 = ($39<<24>>24)!=(0);
 do {
  if ($40) {
   $41 = HEAP32[$1>>2]|0;
   $42 = (_is_all($41)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = HEAP32[$1>>2]|0;
    $45 = (_skip_param($44)|0);
    HEAP32[$1>>2] = $45;
    HEAP32[$v>>2] = 5;
   } else {
    $46 = HEAP32[$1>>2]|0;
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = (_isvarchar($48)|0);
    $50 = ($49|0)!=(0);
    do {
     if ($50) {
      $51 = HEAP32[$1>>2]|0;
      $52 = (_parse_var2($v,$51)|0);
      HEAP32[$1>>2] = $52;
      $53 = HEAP32[$1>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       break;
      }
      $0 = 0;
      $173 = $0;
      STACKTOP = sp;return ($173|0);
     }
    } while(0);
   }
   $55 = HEAP32[$1>>2]|0;
   $56 = HEAP8[$55>>0]|0;
   $57 = ($56<<24>>24)!=(0);
   if ($57) {
    $58 = HEAP32[$1>>2]|0;
    $59 = (_decstrtol($58,$1)|0);
    $order = $59;
   }
   $60 = $order;
   $61 = ($60|0)<=(0);
   if ($61) {
    _error(792192);
    $0 = 0;
    $173 = $0;
    STACKTOP = sp;return ($173|0);
   }
   $62 = HEAP32[$1>>2]|0;
   $63 = (_extra_characters($62)|0);
   $64 = ($63|0)!=(0);
   if (!($64)) {
    break;
   }
   $0 = 0;
   $173 = $0;
   STACKTOP = sp;return ($173|0);
  }
 } while(0);
 $65 = $source;
 $66 = $nps;
 $67 = HEAP32[$66>>2]|0;
 $68 = (_no_vars($65,$67,$v)|0);
 $69 = ($68|0)!=(0);
 if ($69) {
  _warning(792232);
 } else {
  $70 = HEAP32[$v>>2]|0;
  $71 = ($70|0)==(0);
  do {
   if ($71) {
    $72 = (_prompt_var($v)|0);
    $73 = ($72|0)!=(0);
    if ($73) {
     break;
    }
    $0 = 0;
    $173 = $0;
    STACKTOP = sp;return ($173|0);
   }
  } while(0);
  $74 = HEAP32[$v>>2]|0;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = HEAP32[$v>>2]|0;
   $77 = ($76|0)!=(5);
   if ($77) {
    $78 = $source;
    $79 = $nps;
    $80 = HEAP32[$79>>2]|0;
    $81 = HEAP32[$v>>2]|0;
    $82 = (_found_var($78,$80,$81)|0);
    $83 = ($82|0)!=(0);
    if (!($83)) {
     _warning(792304);
    }
   }
  }
 }
 $84 = HEAP32[$v>>2]|0;
 $85 = ($84|0)==(0);
 if ($85) {
  _error(792368);
  $0 = 0;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 $86 = $dest;
 $87 = $source;
 $88 = $nps;
 $89 = HEAP32[$88>>2]|0;
 $90 = $89<<4;
 _memmove(($86|0),($87|0),($90|0))|0;
 $91 = $nps;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$n1>>2] = $92;
 $l1 = 0;
 while(1) {
  $93 = $l1;
  $94 = $order;
  $95 = ($93|0)<($94|0);
  if (!($95)) {
   break;
  }
  $96 = $order;
  $97 = ($96|0)!=(1);
  if ($97) {
   $98 = HEAP32[$n1>>2]|0;
   $99 = ($98|0)==(1);
   if ($99) {
    $100 = $dest;
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)==(0);
    if ($102) {
     $103 = $dest;
     $104 = (($103) + 8|0);
     $105 = +HEAPF64[$104>>3];
     $106 = $105 == 0.0;
     if ($106) {
      label = 44;
      break;
     }
    }
   }
  }
  $110 = $dest;
  $111 = HEAP32[$v>>2]|0;
  $112 = (_differentiate($110,$n1,$111)|0);
  $113 = ($112|0)!=(0);
  if (!($113)) {
   label = 47;
   break;
  }
  $114 = $simplify_flag;
  $115 = ($114|0)!=(0);
  if ($115) {
   $116 = $dest;
   _simpa_repeat_side($116,$n1,1,0);
  } else {
   $117 = $dest;
   _elim_loop($117,$n1);
  }
  $118 = $l1;
  $119 = (($118) + 1)|0;
  $l1 = $119;
 }
 if ((label|0) == 44) {
  $107 = HEAP32[41008>>2]|0;
  $108 = $l1;
  HEAP32[$vararg_buffer>>2] = $108;
  (_fprintf(($107|0),(792408|0),($vararg_buffer|0))|0);
  $109 = $l1;
  $order = $109;
 }
 else if ((label|0) == 47) {
  _error(792448);
  $0 = 0;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 $120 = HEAP32[$n1>>2]|0;
 $121 = $np;
 HEAP32[$121>>2] = $120;
 $122 = HEAP32[472>>2]|0;
 $123 = (2880 + ($122<<2)|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)!=(0);
 if ($125) {
  $126 = $i;
  $127 = (480 + ($126<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = HEAP32[472>>2]|0;
  $130 = (480 + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = HEAP32[472>>2]|0;
  $133 = (2080 + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $134<<4;
  _memmove(($128|0),($131|0),($135|0))|0;
  $136 = HEAP32[472>>2]|0;
  $137 = (2080 + ($136<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $i;
  $140 = (2080 + ($139<<2)|0);
  HEAP32[$140>>2] = $138;
  $141 = $solved;
  $142 = ($141|0)!=(0);
  if ($142) {
   $143 = (_isvarchar(39)|0);
   $144 = ($143|0)!=(0);
   if ($144) {
    $145 = $i;
    $146 = (480 + ($145<<2)|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + 8|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (_list_var($149,0)|0);
    $len = $150;
    $l1 = 0;
    while(1) {
     $151 = $l1;
     $152 = $order;
     $153 = ($151|0)<($152|0);
     if ($153) {
      $154 = $len;
      $155 = ($154|0)<(99);
      $174 = $155;
     } else {
      $174 = 0;
     }
     if (!($174)) {
      break;
     }
     $156 = $len;
     $157 = (($156) + 1)|0;
     $len = $157;
     $158 = (35800 + ($156)|0);
     HEAP8[$158>>0] = 39;
     $159 = $l1;
     $160 = (($159) + 1)|0;
     $l1 = $160;
    }
    $161 = $len;
    $162 = (35800 + ($161)|0);
    HEAP8[$162>>0] = 0;
    $163 = $l1;
    $164 = $order;
    $165 = ($163|0)==($164|0);
    if ($165) {
     $166 = $i;
     $167 = (480 + ($166<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($168) + 8|0);
     (_parse_var($169,35800)|0);
    }
   }
  }
 }
 $170 = $i;
 HEAP32[472>>2] = $170;
 $171 = HEAP32[472>>2]|0;
 $172 = (_return_result($171)|0);
 $0 = $172;
 $173 = $0;
 STACKTOP = sp;return ($173|0);
}
function _extrema_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $l1 = 0;
 var $n = 0, $order = 0, $source = 0, $v = 0, $want = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 40|0;
 $v = sp + 32|0;
 $want = sp;
 $n = sp + 16|0;
 HEAP32[$1>>2] = $cp;
 HEAP32[$v>>2] = 0;
 $order = 1;
 $2 = (_current_not_defined()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $0 = 0;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $4 = (_next_espace()|0);
 $i = $4;
 $5 = HEAP32[472>>2]|0;
 $6 = (2880 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = HEAP32[472>>2]|0;
   $10 = (_solved_equation($9)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = HEAP32[472>>2]|0;
    $13 = (1280 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $source = $14;
    $15 = HEAP32[472>>2]|0;
    $16 = (2880 + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    HEAP32[$n>>2] = $17;
    break;
   }
   _error(792472);
   $0 = 0;
   $117 = $0;
   STACKTOP = sp;return ($117|0);
  } else {
   $18 = HEAP32[472>>2]|0;
   $19 = (480 + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $source = $20;
   $21 = HEAP32[472>>2]|0;
   $22 = (2080 + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$n>>2] = $23;
  }
 } while(0);
 $24 = HEAP32[$1>>2]|0;
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25<<24>>24)!=(0);
 do {
  if ($26) {
   $27 = HEAP32[$1>>2]|0;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = (_isvarchar($29)|0);
   $31 = ($30|0)!=(0);
   do {
    if ($31) {
     $32 = HEAP32[$1>>2]|0;
     $33 = (_parse_var2($v,$32)|0);
     HEAP32[$1>>2] = $33;
     $34 = HEAP32[$1>>2]|0;
     $35 = ($34|0)==(0|0);
     if (!($35)) {
      break;
     }
     $0 = 0;
     $117 = $0;
     STACKTOP = sp;return ($117|0);
    }
   } while(0);
   $36 = HEAP32[$1>>2]|0;
   $37 = HEAP8[$36>>0]|0;
   $38 = ($37<<24>>24)!=(0);
   if ($38) {
    $39 = HEAP32[$1>>2]|0;
    $40 = (_decstrtol($39,$1)|0);
    $order = $40;
   }
   $41 = $order;
   $42 = ($41|0)<=(0);
   if ($42) {
    _error(792192);
    $0 = 0;
    $117 = $0;
    STACKTOP = sp;return ($117|0);
   }
   $43 = HEAP32[$1>>2]|0;
   $44 = (_extra_characters($43)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    break;
   }
   $0 = 0;
   $117 = $0;
   STACKTOP = sp;return ($117|0);
  }
 } while(0);
 HEAP32[41304>>2] = 0;
 $46 = $source;
 $47 = HEAP32[$n>>2]|0;
 $48 = (_no_vars($46,$47,$v)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  _error(792528);
  $0 = 0;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $50 = HEAP32[$v>>2]|0;
 $51 = ($50|0)==(0);
 do {
  if ($51) {
   $52 = (_prompt_var($v)|0);
   $53 = ($52|0)!=(0);
   if ($53) {
    break;
   }
   $0 = 0;
   $117 = $0;
   STACKTOP = sp;return ($117|0);
  }
 } while(0);
 $54 = $source;
 $55 = HEAP32[$n>>2]|0;
 $56 = HEAP32[$v>>2]|0;
 $57 = (_found_var($54,$55,$56)|0);
 $58 = ($57|0)!=(0);
 if (!($58)) {
  _error(792576);
  $0 = 0;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $59 = $i;
 $60 = (1280 + ($59<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $source;
 $63 = HEAP32[$n>>2]|0;
 $64 = $63<<4;
 _memmove(($61|0),($62|0),($64|0))|0;
 $l1 = 0;
 while(1) {
  $65 = $l1;
  $66 = $order;
  $67 = ($65|0)<($66|0);
  if (!($67)) {
   break;
  }
  $68 = $i;
  $69 = (1280 + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = HEAP32[$v>>2]|0;
  $72 = (_differentiate($70,$n,$71)|0);
  $73 = ($72|0)!=(0);
  if (!($73)) {
   label = 31;
   break;
  }
  $74 = $i;
  $75 = (1280 + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  _simpa_repeat_side($76,$n,1,0);
  $77 = $l1;
  $78 = (($77) + 1)|0;
  $l1 = $78;
 }
 if ((label|0) == 31) {
  _error(792448);
  $0 = 0;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $79 = $i;
 $80 = (1280 + ($79<<2)|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = HEAP32[$n>>2]|0;
 $83 = HEAP32[$v>>2]|0;
 $84 = (_found_var($81,$82,$83)|0);
 $85 = ($84|0)!=(0);
 if (!($85)) {
  _error(792640);
  $0 = 0;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $86 = HEAP32[$n>>2]|0;
 $87 = $i;
 $88 = (2880 + ($87<<2)|0);
 HEAP32[$88>>2] = $86;
 $89 = $i;
 $90 = (2080 + ($89<<2)|0);
 HEAP32[$90>>2] = 1;
 $91 = $i;
 $92 = (480 + ($91<<2)|0);
 $93 = HEAP32[$92>>2]|0;
 ;HEAP32[$93+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$93+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$93+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$93+12>>2]=HEAP32[3736+12>>2]|0;
 $94 = $i;
 HEAP32[472>>2] = $94;
 $95 = (($want) + 4|0);
 HEAP32[$95>>2] = 1;
 HEAP32[$want>>2] = 1;
 $96 = HEAP32[$v>>2]|0;
 $97 = (($want) + 8|0);
 HEAP32[$97>>2] = $96;
 $98 = $i;
 $99 = (480 + ($98<<2)|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $i;
 $102 = (2080 + ($101<<2)|0);
 $103 = $i;
 $104 = (1280 + ($103<<2)|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $i;
 $107 = (2880 + ($106<<2)|0);
 $108 = (_solve_sub($want,1,$100,$102,$105,$107)|0);
 $109 = ($108|0)<=(0);
 if ($109) {
  _error(792664);
  $0 = 0;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 } else {
  $110 = $i;
  $111 = (1280 + ($110<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $i;
  $114 = (2880 + ($113<<2)|0);
  _simpa_repeat_side($112,$114,0,0);
  $115 = HEAP32[472>>2]|0;
  $116 = (_return_result($115)|0);
  $0 = $116;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 return 0|0;
}
function _taylor_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $cp1 = 0, $cp_start = 0, $d = 0.0, $dest = 0, $ep = 0, $i = 0, $i1 = 0, $j = 0, $k = 0;
 var $l1 = 0, $level = 0, $n = 0, $n1 = 0, $np = 0, $nps = 0, $order = 0, $our = 0, $our_nlhs = 0, $our_nrhs = 0, $simplify_flag = 0, $source = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 92|0;
 $v = sp + 88|0;
 $cp1 = sp + 48|0;
 $buf = sp + 104|0;
 $our_nlhs = sp + 40|0;
 $our_nrhs = sp + 36|0;
 $n1 = sp + 20|0;
 HEAP32[$1>>2] = $cp;
 HEAP32[$v>>2] = 0;
 $order = -1;
 HEAP32[$cp1>>2] = 0;
 $simplify_flag = 1;
 $2 = HEAP32[$1>>2]|0;
 $cp_start = $2;
 $3 = (_current_not_defined()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $449 = $0;
  STACKTOP = sp;return ($449|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (_strcmp_tospace($5,792112)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $simplify_flag = 0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (_skip_param($8)|0);
  HEAP32[$1>>2] = $9;
 }
 $10 = (_next_espace()|0);
 $i = $10;
 $11 = $i;
 $12 = (480 + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[472>>2]|0;
 $15 = (480 + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[472>>2]|0;
 $18 = (2080 + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19<<4;
 _memmove(($13|0),($16|0),($20|0))|0;
 $21 = HEAP32[472>>2]|0;
 $22 = (2080 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $i;
 $25 = (2080 + ($24<<2)|0);
 HEAP32[$25>>2] = $23;
 $26 = $i;
 $27 = (2880 + ($26<<2)|0);
 HEAP32[$27>>2] = 0;
 $28 = (_alloc_next_espace()|0);
 $our = $28;
 $29 = $i;
 $30 = (2080 + ($29<<2)|0);
 HEAP32[$30>>2] = 0;
 $31 = $our;
 $32 = ($31|0)<(0);
 if ($32) {
  _error(792680);
  HEAP32[41304>>2] = 0;
  $0 = 0;
  $449 = $0;
  STACKTOP = sp;return ($449|0);
 }
 $33 = HEAP32[472>>2]|0;
 $34 = (2880 + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = HEAP32[472>>2]|0;
  $38 = (1280 + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $source = $39;
  $40 = HEAP32[472>>2]|0;
  $41 = (2880 + ($40<<2)|0);
  $nps = $41;
  $42 = $i;
  $43 = (1280 + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $dest = $44;
  $45 = $i;
  $46 = (2880 + ($45<<2)|0);
  $np = $46;
 } else {
  $47 = HEAP32[472>>2]|0;
  $48 = (480 + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $source = $49;
  $50 = HEAP32[472>>2]|0;
  $51 = (2080 + ($50<<2)|0);
  $nps = $51;
  $52 = $i;
  $53 = (480 + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $dest = $54;
  $55 = $i;
  $56 = (2080 + ($55<<2)|0);
  $np = $56;
 }
 $57 = HEAP32[$1>>2]|0;
 $58 = HEAP8[$57>>0]|0;
 $59 = $58 << 24 >> 24;
 $60 = ($59|0)!=(0);
 do {
  if ($60) {
   $61 = HEAP32[$1>>2]|0;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62 << 24 >> 24;
   $64 = (_isvarchar($63)|0);
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = HEAP32[$1>>2]|0;
    $67 = (_parse_var2($v,$66)|0);
    HEAP32[$1>>2] = $67;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     break;
    }
    $0 = 0;
    $449 = $0;
    STACKTOP = sp;return ($449|0);
   }
  }
 } while(0);
 $70 = HEAP32[$1>>2]|0;
 $71 = HEAP8[$70>>0]|0;
 $72 = ($71<<24>>24)!=(0);
 do {
  if ($72) {
   $73 = HEAP32[$1>>2]|0;
   $74 = (_decstrtol($73,$cp1)|0);
   $order = $74;
   $75 = HEAP32[$cp1>>2]|0;
   $76 = HEAP32[$1>>2]|0;
   $77 = (_skip_param($76)|0);
   $78 = ($75|0)!=($77|0);
   if (!($78)) {
    $79 = $order;
    $80 = ($79|0)<(0);
    if (!($80)) {
     $81 = HEAP32[$cp1>>2]|0;
     HEAP32[$1>>2] = $81;
     break;
    }
   }
   _error(792712);
   $0 = 0;
   $449 = $0;
   STACKTOP = sp;return ($449|0);
  }
 } while(0);
 HEAP32[41304>>2] = 0;
 $82 = $source;
 $83 = $nps;
 $84 = HEAP32[$83>>2]|0;
 (_no_vars($82,$84,$v)|0);
 $85 = HEAP32[$v>>2]|0;
 $86 = ($85|0)==(0);
 do {
  if ($86) {
   $87 = (_prompt_var($v)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    break;
   }
   $0 = 0;
   $449 = $0;
   STACKTOP = sp;return ($449|0);
  }
 } while(0);
 $89 = $source;
 $90 = $nps;
 $91 = HEAP32[$90>>2]|0;
 $92 = HEAP32[$v>>2]|0;
 $93 = (_found_var($89,$91,$92)|0);
 $94 = ($93|0)!=(0);
 if (!($94)) {
  _warning(792752);
 }
 $95 = $our;
 $96 = (1280 + ($95<<2)|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $source;
 $99 = $nps;
 $100 = HEAP32[$99>>2]|0;
 $101 = $100<<4;
 _memmove(($97|0),($98|0),($101|0))|0;
 $102 = $nps;
 $103 = HEAP32[$102>>2]|0;
 HEAP32[$our_nrhs>>2] = $103;
 $104 = $our;
 $105 = (1280 + ($104<<2)|0);
 $106 = HEAP32[$105>>2]|0;
 _uf_simp($106,$our_nrhs);
 $107 = $our;
 $108 = (1280 + ($107<<2)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = HEAP32[$v>>2]|0;
 $111 = (_differentiate($109,$our_nrhs,$110)|0);
 $112 = ($111|0)!=(0);
 if (!($112)) {
  _error(792448);
  $0 = 0;
  $449 = $0;
  STACKTOP = sp;return ($449|0);
 }
 $113 = HEAP32[$1>>2]|0;
 $114 = HEAP8[$113>>0]|0;
 $115 = ($114<<24>>24)!=(0);
 do {
  if ($115) {
   $116 = HEAP32[$1>>2]|0;
   $117 = $cp_start;
   $118 = $116;
   $119 = $117;
   $120 = (($118) - ($119))|0;
   $121 = HEAP32[41240>>2]|0;
   $122 = (($121) + ($120))|0;
   HEAP32[41240>>2] = $122;
   $123 = $our;
   $124 = (480 + ($123<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = HEAP32[$1>>2]|0;
   $127 = (_parse_expr($125,$our_nlhs,$126,1)|0);
   HEAP32[$1>>2] = $127;
   $128 = HEAP32[$1>>2]|0;
   $129 = ($128|0)==(0|0);
   if (!($129)) {
    $130 = HEAP32[$1>>2]|0;
    $131 = (_extra_characters($130)|0);
    $132 = ($131|0)!=(0);
    if (!($132)) {
     $133 = HEAP32[$our_nlhs>>2]|0;
     $134 = ($133|0)<=(0);
     if (!($134)) {
      break;
     }
    }
   }
   HEAP32[41304>>2] = 1;
   $0 = 0;
   $449 = $0;
   STACKTOP = sp;return ($449|0);
  } else {
   (_my_strlcpy(35984,792824,80)|0);
   $135 = $our;
   $136 = (480 + ($135<<2)|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (_get_expr($137,$our_nlhs)|0);
   $139 = ($138|0)!=(0);
   if ($139) {
    break;
   }
   $0 = 0;
   $449 = $0;
   STACKTOP = sp;return ($449|0);
  }
 } while(0);
 $140 = $order;
 $141 = ($140|0)<(0);
 if ($141) {
  (_my_strlcpy(35984,792872,80)|0);
  $142 = (_get_string($buf,4096)|0);
  HEAP32[$cp1>>2] = $142;
  $143 = ($142|0)==(0|0);
  if ($143) {
   $0 = 0;
   $449 = $0;
   STACKTOP = sp;return ($449|0);
  }
  $144 = HEAP32[$cp1>>2]|0;
  $145 = HEAP8[$144>>0]|0;
  $146 = ($145<<24>>24)!=(0);
  do {
   if ($146) {
    HEAP32[$1>>2] = 0;
    $147 = HEAP32[$cp1>>2]|0;
    $148 = (_decstrtol($147,$1)|0);
    $order = $148;
    $149 = HEAP32[$1>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[$1>>2]|0;
     $152 = HEAP8[$151>>0]|0;
     $153 = $152 << 24 >> 24;
     $154 = ($153|0)!=(0);
     if (!($154)) {
      $155 = $order;
      $156 = ($155|0)<(0);
      if (!($156)) {
       break;
      }
     }
    }
    _error(792712);
    $0 = 0;
    $449 = $0;
    STACKTOP = sp;return ($449|0);
   } else {
    $order = 2147483646;
   }
  } while(0);
 }
 $n = 0;
 $i1 = 0;
 $157 = $dest;
 $158 = $source;
 $159 = $nps;
 $160 = HEAP32[$159>>2]|0;
 $161 = $160<<4;
 _memmove(($157|0),($158|0),($161|0))|0;
 $162 = $nps;
 $163 = HEAP32[$162>>2]|0;
 HEAP32[$n1>>2] = $163;
 while(1) {
  $164 = $i1;
  $k = $164;
  while(1) {
   $165 = $k;
   $166 = HEAP32[$n1>>2]|0;
   $167 = ($165|0)<($166|0);
   if (!($167)) {
    break;
   }
   $168 = $k;
   $169 = $dest;
   $170 = (($169) + ($168<<4)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)==(1);
   if ($172) {
    $173 = $k;
    $174 = $dest;
    $175 = (($174) + ($173<<4)|0);
    $176 = (($175) + 8|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = HEAP32[$v>>2]|0;
    $179 = ($177|0)==($178|0);
    if ($179) {
     $180 = $k;
     $181 = $dest;
     $182 = (($181) + ($180<<4)|0);
     $183 = (($182) + 4|0);
     $184 = HEAP32[$183>>2]|0;
     $level = $184;
     $185 = HEAP32[$n1>>2]|0;
     $186 = HEAP32[$our_nlhs>>2]|0;
     $187 = (($185) + ($186))|0;
     $188 = (($187) - 1)|0;
     $189 = HEAP32[8>>2]|0;
     $190 = ($188|0)>($189|0);
     if ($190) {
      _error_huge();
     }
     $191 = $k;
     $192 = HEAP32[$our_nlhs>>2]|0;
     $193 = (($191) + ($192))|0;
     $194 = $dest;
     $195 = (($194) + ($193<<4)|0);
     $196 = $k;
     $197 = (($196) + 1)|0;
     $198 = $dest;
     $199 = (($198) + ($197<<4)|0);
     $200 = HEAP32[$n1>>2]|0;
     $201 = $k;
     $202 = (($201) + 1)|0;
     $203 = (($200) - ($202))|0;
     $204 = $203<<4;
     _memmove(($195|0),($199|0),($204|0))|0;
     $205 = HEAP32[$our_nlhs>>2]|0;
     $206 = (($205) - 1)|0;
     $207 = HEAP32[$n1>>2]|0;
     $208 = (($207) + ($206))|0;
     HEAP32[$n1>>2] = $208;
     $209 = $k;
     $j = $209;
     $210 = $k;
     $211 = $dest;
     $212 = (($211) + ($210<<4)|0);
     $213 = $our;
     $214 = (480 + ($213<<2)|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = HEAP32[$our_nlhs>>2]|0;
     $217 = $216<<4;
     _memmove(($212|0),($215|0),($217|0))|0;
     $218 = HEAP32[$our_nlhs>>2]|0;
     $219 = $k;
     $220 = (($219) + ($218))|0;
     $k = $220;
     while(1) {
      $221 = $j;
      $222 = $k;
      $223 = ($221|0)<($222|0);
      if (!($223)) {
       break;
      }
      $224 = $level;
      $225 = $j;
      $226 = $dest;
      $227 = (($226) + ($225<<4)|0);
      $228 = (($227) + 4|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = (($229) + ($224))|0;
      HEAP32[$228>>2] = $230;
      $231 = $j;
      $232 = (($231) + 1)|0;
      $j = $232;
     }
     $233 = $k;
     $234 = (($233) + -1)|0;
     $k = $234;
    }
   }
   $235 = $k;
   $236 = (($235) + 2)|0;
   $k = $236;
  }
  $237 = HEAP32[$n1>>2]|0;
  $238 = HEAP32[$our_nlhs>>2]|0;
  $239 = (($237) + ($238))|0;
  $240 = (($239) + 7)|0;
  $241 = HEAP32[8>>2]|0;
  $242 = ($240|0)>($241|0);
  if ($242) {
   _error_huge();
  }
  $243 = $i1;
  $k = $243;
  while(1) {
   $244 = $k;
   $245 = HEAP32[$n1>>2]|0;
   $246 = ($244|0)<($245|0);
   if (!($246)) {
    break;
   }
   $247 = $k;
   $248 = $dest;
   $249 = (($248) + ($247<<4)|0);
   $250 = (($249) + 4|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (($251) + 1)|0;
   HEAP32[$250>>2] = $252;
   $253 = $k;
   $254 = (($253) + 1)|0;
   $k = $254;
  }
  $255 = HEAP32[$n1>>2]|0;
  $256 = $dest;
  $257 = (($256) + ($255<<4)|0);
  $ep = $257;
  $258 = $ep;
  $259 = (($258) + 4|0);
  HEAP32[$259>>2] = 1;
  $260 = $ep;
  HEAP32[$260>>2] = 2;
  $261 = $ep;
  $262 = (($261) + 8|0);
  HEAP32[$262>>2] = 4;
  $263 = $ep;
  $264 = (($263) + 16|0);
  $ep = $264;
  $265 = $ep;
  $266 = (($265) + 4|0);
  HEAP32[$266>>2] = 3;
  $267 = $ep;
  HEAP32[$267>>2] = 1;
  $268 = HEAP32[$v>>2]|0;
  $269 = $ep;
  $270 = (($269) + 8|0);
  HEAP32[$270>>2] = $268;
  $271 = $ep;
  $272 = (($271) + 16|0);
  $ep = $272;
  $273 = $ep;
  $274 = (($273) + 4|0);
  HEAP32[$274>>2] = 3;
  $275 = $ep;
  HEAP32[$275>>2] = 2;
  $276 = $ep;
  $277 = (($276) + 8|0);
  HEAP32[$277>>2] = 2;
  $278 = HEAP32[$n1>>2]|0;
  $279 = (($278) + 3)|0;
  HEAP32[$n1>>2] = $279;
  $280 = HEAP32[$n1>>2]|0;
  $j = $280;
  $281 = HEAP32[$n1>>2]|0;
  $282 = $dest;
  $283 = (($282) + ($281<<4)|0);
  $284 = $our;
  $285 = (480 + ($284<<2)|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = HEAP32[$our_nlhs>>2]|0;
  $288 = $287<<4;
  _memmove(($283|0),($286|0),($288|0))|0;
  $289 = HEAP32[$our_nlhs>>2]|0;
  $290 = HEAP32[$n1>>2]|0;
  $291 = (($290) + ($289))|0;
  HEAP32[$n1>>2] = $291;
  while(1) {
   $292 = $j;
   $293 = HEAP32[$n1>>2]|0;
   $294 = ($292|0)<($293|0);
   if (!($294)) {
    break;
   }
   $295 = $j;
   $296 = $dest;
   $297 = (($296) + ($295<<4)|0);
   $298 = (($297) + 4|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = (($299) + 3)|0;
   HEAP32[$298>>2] = $300;
   $301 = $j;
   $302 = (($301) + 1)|0;
   $j = $302;
  }
  $303 = HEAP32[$n1>>2]|0;
  $304 = $dest;
  $305 = (($304) + ($303<<4)|0);
  $ep = $305;
  $306 = $ep;
  $307 = (($306) + 4|0);
  HEAP32[$307>>2] = 2;
  $308 = $ep;
  HEAP32[$308>>2] = 2;
  $309 = $ep;
  $310 = (($309) + 8|0);
  HEAP32[$310>>2] = 8;
  $311 = $ep;
  $312 = (($311) + 16|0);
  $ep = $312;
  $313 = $ep;
  $314 = (($313) + 4|0);
  HEAP32[$314>>2] = 2;
  $315 = $ep;
  HEAP32[$315>>2] = 0;
  $316 = $n;
  $317 = (+($316|0));
  $318 = $ep;
  $319 = (($318) + 8|0);
  HEAPF64[$319>>3] = $317;
  $320 = $ep;
  $321 = (($320) + 16|0);
  $ep = $321;
  $322 = $ep;
  $323 = (($322) + 4|0);
  HEAP32[$323>>2] = 1;
  $324 = $ep;
  HEAP32[$324>>2] = 2;
  $325 = $ep;
  $326 = (($325) + 8|0);
  HEAP32[$326>>2] = 5;
  $327 = $ep;
  $328 = (($327) + 16|0);
  $ep = $328;
  $d = 1.0;
  $l1 = 2;
  while(1) {
   $329 = $l1;
   $330 = $n;
   $331 = ($329|0)<=($330|0);
   if (!($331)) {
    break;
   }
   $332 = $l1;
   $333 = (+($332|0));
   $334 = $d;
   $335 = $334 * $333;
   $d = $335;
   $336 = $l1;
   $337 = (($336) + 1)|0;
   $l1 = $337;
  }
  $338 = $ep;
  $339 = (($338) + 4|0);
  HEAP32[$339>>2] = 1;
  $340 = $ep;
  HEAP32[$340>>2] = 0;
  $341 = $d;
  $342 = $ep;
  $343 = (($342) + 8|0);
  HEAPF64[$343>>3] = $341;
  $344 = HEAP32[$n1>>2]|0;
  $345 = (($344) + 4)|0;
  HEAP32[$n1>>2] = $345;
  while(1) {
   $346 = $i1;
   $347 = HEAP32[$n1>>2]|0;
   $348 = ($346|0)<($347|0);
   if (!($348)) {
    break;
   }
   $349 = $i1;
   $350 = $dest;
   $351 = (($350) + ($349<<4)|0);
   $352 = (($351) + 4|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = (($353) + 1)|0;
   HEAP32[$352>>2] = $354;
   $355 = $i1;
   $356 = (($355) + 1)|0;
   $i1 = $356;
  }
  $357 = $simplify_flag;
  $358 = ($357|0)!=(0);
  if ($358) {
   $359 = $dest;
   _uf_simp($359,$n1);
  }
  $360 = $dest;
  $361 = HEAP32[$n1>>2]|0;
  $362 = (_exp_contains_infinity($360,$361)|0);
  $363 = ($362|0)!=(0);
  if ($363) {
   label = 83;
   break;
  }
  $364 = $n;
  $365 = $order;
  $366 = ($364|0)<($365|0);
  if (!($366)) {
   break;
  }
  $367 = $n;
  $368 = ($367|0)>(0);
  if ($368) {
   $369 = $our;
   $370 = (1280 + ($369<<2)|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = HEAP32[$v>>2]|0;
   $373 = (_differentiate($371,$our_nrhs,$372)|0);
   $374 = ($373|0)!=(0);
   if (!($374)) {
    label = 87;
    break;
   }
  }
  $375 = $our;
  $376 = (1280 + ($375<<2)|0);
  $377 = HEAP32[$376>>2]|0;
  _simpa_repeat_side($377,$our_nrhs,1,0);
  $378 = HEAP32[$our_nrhs>>2]|0;
  $379 = ($378|0)!=(1);
  if (!($379)) {
   $380 = $our;
   $381 = (1280 + ($380<<2)|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = HEAP32[$382>>2]|0;
   $384 = ($383|0)!=(0);
   if (!($384)) {
    $385 = $our;
    $386 = (1280 + ($385<<2)|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = (($387) + 8|0);
    $389 = +HEAPF64[$388>>3];
    $390 = $389 != 0.0;
    if (!($390)) {
     label = 99;
     break;
    }
   }
  }
  $391 = HEAP32[$n1>>2]|0;
  $i1 = $391;
  $392 = $i1;
  $393 = (($392) + 1)|0;
  $394 = HEAP32[$our_nrhs>>2]|0;
  $395 = (($393) + ($394))|0;
  $396 = HEAP32[8>>2]|0;
  $397 = ($395|0)>($396|0);
  if ($397) {
   _error_huge();
  }
  $j = 0;
  while(1) {
   $398 = $j;
   $399 = $i1;
   $400 = ($398|0)<($399|0);
   if (!($400)) {
    break;
   }
   $401 = $j;
   $402 = $dest;
   $403 = (($402) + ($401<<4)|0);
   $404 = (($403) + 4|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = (($405) + 1)|0;
   HEAP32[$404>>2] = $406;
   $407 = $j;
   $408 = (($407) + 1)|0;
   $j = $408;
  }
  $409 = $i1;
  $410 = $dest;
  $411 = (($410) + ($409<<4)|0);
  $412 = (($411) + 4|0);
  HEAP32[$412>>2] = 1;
  $413 = $i1;
  $414 = $dest;
  $415 = (($414) + ($413<<4)|0);
  HEAP32[$415>>2] = 2;
  $416 = $i1;
  $417 = $dest;
  $418 = (($417) + ($416<<4)|0);
  $419 = (($418) + 8|0);
  HEAP32[$419>>2] = 1;
  $420 = $i1;
  $421 = (($420) + 1)|0;
  $i1 = $421;
  $422 = $i1;
  $423 = $dest;
  $424 = (($423) + ($422<<4)|0);
  $425 = $our;
  $426 = (1280 + ($425<<2)|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = HEAP32[$our_nrhs>>2]|0;
  $429 = $428<<4;
  _memmove(($424|0),($427|0),($429|0))|0;
  $430 = $i1;
  $431 = HEAP32[$our_nrhs>>2]|0;
  $432 = (($430) + ($431))|0;
  HEAP32[$n1>>2] = $432;
  $433 = $n;
  $434 = (($433) + 1)|0;
  $n = $434;
 }
 if ((label|0) == 83) {
  _error(792920);
  $0 = 0;
  $449 = $0;
  STACKTOP = sp;return ($449|0);
 }
 else if ((label|0) == 87) {
  _error(792448);
  $0 = 0;
  $449 = $0;
  STACKTOP = sp;return ($449|0);
 }
 else if ((label|0) == 99) {
 }
 $435 = HEAP32[472>>2]|0;
 $436 = (2880 + ($435<<2)|0);
 $437 = HEAP32[$436>>2]|0;
 $438 = ($437|0)!=(0);
 if ($438) {
  $439 = HEAP32[472>>2]|0;
  $440 = (2080 + ($439<<2)|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = $i;
  $443 = (2080 + ($442<<2)|0);
  HEAP32[$443>>2] = $441;
 }
 $444 = HEAP32[$n1>>2]|0;
 $445 = $np;
 HEAP32[$445>>2] = $444;
 $446 = $i;
 HEAP32[472>>2] = $446;
 $447 = HEAP32[472>>2]|0;
 $448 = (_return_result($447)|0);
 $0 = $448;
 $449 = $0;
 STACKTOP = sp;return ($449|0);
}
function _limit_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp_start = 0, $i = 0, $solved_v = 0;
 var $v = 0, $vararg_buffer = 0, $want = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 32|0;
 $v = sp + 40|0;
 $solved_v = sp + 16|0;
 $want = sp;
 $1 = $cp;
 HEAP32[$v>>2] = 0;
 $2 = $1;
 $cp_start = $2;
 $3 = (_current_not_defined()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 $5 = (_next_espace()|0);
 $i = $5;
 $6 = HEAP32[472>>2]|0;
 $7 = (2880 + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[472>>2]|0;
  $11 = (1280 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[472>>2]|0;
  $14 = (480 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[472>>2]|0;
  $17 = (2080 + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18<<4;
  _memmove(($12|0),($15|0),($19|0))|0;
  $20 = HEAP32[472>>2]|0;
  $21 = (2080 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[472>>2]|0;
  $24 = (2880 + ($23<<2)|0);
  HEAP32[$24>>2] = $22;
  $25 = HEAP32[472>>2]|0;
  $26 = (2080 + ($25<<2)|0);
  HEAP32[$26>>2] = 1;
  $27 = HEAP32[472>>2]|0;
  $28 = (480 + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 4|0);
  HEAP32[$30>>2] = 1;
  $31 = HEAP32[472>>2]|0;
  $32 = (480 + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$33>>2] = 1;
  $34 = HEAP32[472>>2]|0;
  $35 = (480 + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 8|0);
  (_parse_var($37,792976)|0);
 }
 $38 = HEAP32[472>>2]|0;
 $39 = (_solved_equation($38)|0);
 $40 = ($39|0)!=(0);
 if (!($40)) {
  _error(792472);
  $0 = 0;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 $41 = HEAP32[472>>2]|0;
 $42 = (480 + ($41<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 ;HEAP32[$solved_v+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$solved_v+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$solved_v+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$solved_v+12>>2]=HEAP32[$43+12>>2]|0;
 $44 = $1;
 $45 = HEAP8[$44>>0]|0;
 $46 = ($45<<24>>24)!=(0);
 do {
  if ($46) {
   $47 = $1;
   $48 = (_parse_var2($v,$47)|0);
   $1 = $48;
   $49 = $1;
   $50 = ($49|0)==(0|0);
   if (!($50)) {
    break;
   }
   $0 = 0;
   $216 = $0;
   STACKTOP = sp;return ($216|0);
  }
 } while(0);
 HEAP32[41304>>2] = 0;
 $51 = HEAP32[472>>2]|0;
 $52 = (1280 + ($51<<2)|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP32[472>>2]|0;
 $55 = (2880 + ($54<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_no_vars($53,$56,$v)|0);
 $58 = ($57|0)!=(0);
 if ($58) {
  _warning(792984);
  $59 = HEAP32[472>>2]|0;
  $60 = (_return_result($59)|0);
  $0 = $60;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 $61 = HEAP32[$v>>2]|0;
 $62 = ($61|0)==(0);
 do {
  if ($62) {
   $63 = (_prompt_var($v)|0);
   $64 = ($63|0)!=(0);
   if ($64) {
    break;
   }
   $0 = 0;
   $216 = $0;
   STACKTOP = sp;return ($216|0);
  }
 } while(0);
 $65 = HEAP32[472>>2]|0;
 $66 = (1280 + ($65<<2)|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[472>>2]|0;
 $69 = (2880 + ($68<<2)|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$v>>2]|0;
 $72 = (_found_var($67,$70,$71)|0);
 $73 = ($72|0)!=(0);
 if (!($73)) {
  _warning(793048);
  $74 = HEAP32[472>>2]|0;
  $75 = (_return_result($74)|0);
  $0 = $75;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 $76 = $1;
 $77 = HEAP8[$76>>0]|0;
 $78 = $77 << 24 >> 24;
 $79 = ($78|0)==(61);
 if ($79) {
  $80 = $1;
  $81 = (($80) + 1|0);
  $82 = (_skip_space($81)|0);
  $1 = $82;
 }
 $83 = $1;
 $84 = HEAP8[$83>>0]|0;
 $85 = ($84<<24>>24)!=(0);
 do {
  if ($85) {
   $86 = $1;
   $87 = $cp_start;
   $88 = $86;
   $89 = $87;
   $90 = (($88) - ($89))|0;
   $91 = HEAP32[41240>>2]|0;
   $92 = (($91) + ($90))|0;
   HEAP32[41240>>2] = $92;
   $93 = HEAP32[3696>>2]|0;
   $94 = $1;
   $95 = (_parse_expr($93,3728,$94,1)|0);
   $1 = $95;
   $96 = $1;
   $97 = ($96|0)==(0|0);
   if (!($97)) {
    $98 = $1;
    $99 = (_extra_characters($98)|0);
    $100 = ($99|0)!=(0);
    if (!($100)) {
     $101 = HEAP32[3728>>2]|0;
     $102 = ($101|0)<=(0);
     if (!($102)) {
      break;
     }
    }
   }
   HEAP32[41304>>2] = 1;
   $0 = 0;
   $216 = $0;
   STACKTOP = sp;return ($216|0);
  } else {
   $103 = HEAP32[$v>>2]|0;
   (_list_var($103,0)|0);
   HEAP32[$vararg_buffer>>2] = 35800;
   (_snprintf(35984,80,793112,$vararg_buffer)|0);
   $104 = HEAP32[3696>>2]|0;
   $105 = (_get_expr($104,3728)|0);
   $106 = ($105|0)!=(0);
   if ($106) {
    break;
   }
   $0 = 0;
   $216 = $0;
   STACKTOP = sp;return ($216|0);
  }
 } while(0);
 $107 = HEAP32[3696>>2]|0;
 (_simp_loop($107,3728)|0);
 $108 = HEAP32[472>>2]|0;
 $109 = $i;
 _copy_espace($108,$109);
 $110 = $i;
 $111 = (1280 + ($110<<2)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $i;
 $114 = (2880 + ($113<<2)|0);
 _simpa_side($112,$114,0,0);
 $115 = HEAP32[3728>>2]|0;
 $116 = ($115|0)==(1);
 if ($116) {
  $117 = HEAP32[3696>>2]|0;
  $118 = HEAP32[$117>>2]|0;
  $119 = ($118|0)==(0);
  if ($119) {
   $120 = HEAP32[3696>>2]|0;
   $121 = (($120) + 8|0);
   $122 = +HEAPF64[$121>>3];
   $123 = $122 == inf;
   if ($123) {
    HEAP32[3728>>2] = 1;
    $124 = HEAP32[3696>>2]|0;
    ;HEAP32[$124+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$124+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$124+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$124+12>>2]=HEAP32[3736+12>>2]|0;
    $125 = HEAP32[3680>>2]|0;
    ;HEAP32[$125+0>>2]=HEAP32[3752+0>>2]|0;HEAP32[$125+4>>2]=HEAP32[3752+4>>2]|0;HEAP32[$125+8>>2]=HEAP32[3752+8>>2]|0;HEAP32[$125+12>>2]=HEAP32[3752+12>>2]|0;
    $126 = HEAP32[3680>>2]|0;
    $127 = (($126) + 16|0);
    $128 = (($127) + 4|0);
    HEAP32[$128>>2] = 1;
    $129 = HEAP32[3680>>2]|0;
    $130 = (($129) + 16|0);
    HEAP32[$130>>2] = 2;
    $131 = HEAP32[3680>>2]|0;
    $132 = (($131) + 16|0);
    $133 = (($132) + 8|0);
    HEAP32[$133>>2] = 5;
    $134 = HEAP32[3680>>2]|0;
    $135 = (($134) + 32|0);
    $136 = (($135) + 4|0);
    HEAP32[$136>>2] = 1;
    $137 = HEAP32[3680>>2]|0;
    $138 = (($137) + 32|0);
    HEAP32[$138>>2] = 1;
    $139 = HEAP32[$v>>2]|0;
    $140 = HEAP32[3680>>2]|0;
    $141 = (($140) + 32|0);
    $142 = (($141) + 8|0);
    HEAP32[$142>>2] = $139;
    HEAP32[3712>>2] = 3;
    $143 = $i;
    $144 = (1280 + ($143<<2)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $i;
    $147 = (2880 + ($146<<2)|0);
    $148 = HEAP32[3680>>2]|0;
    $149 = HEAP32[3712>>2]|0;
    $150 = HEAP32[$v>>2]|0;
    (_subst_var_with_exp($145,$147,$148,$149,$150)|0);
   }
  }
 }
 $151 = (($want) + 4|0);
 HEAP32[$151>>2] = 1;
 HEAP32[$want>>2] = 1;
 $152 = HEAP32[$v>>2]|0;
 $153 = (($want) + 8|0);
 HEAP32[$153>>2] = $152;
 $154 = $i;
 $155 = (480 + ($154<<2)|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $i;
 $158 = (2080 + ($157<<2)|0);
 $159 = $i;
 $160 = (1280 + ($159<<2)|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $i;
 $163 = (2880 + ($162<<2)|0);
 $164 = (_solve_sub($want,1,$156,$158,$161,$163)|0);
 $165 = ($164|0)<=(0);
 if ($165) {
  _error(793128);
  $0 = 0;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 $166 = $i;
 $167 = (480 + ($166<<2)|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = HEAP32[3696>>2]|0;
 $170 = HEAP32[3728>>2]|0;
 $171 = $170<<4;
 _memmove(($168|0),($169|0),($171|0))|0;
 $172 = HEAP32[3728>>2]|0;
 $173 = $i;
 $174 = (2080 + ($173<<2)|0);
 HEAP32[$174>>2] = $172;
 $175 = HEAP32[448>>2]|0;
 HEAP32[41224>>2] = $175;
 $176 = $i;
 $177 = (1280 + ($176<<2)|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $i;
 $180 = (2880 + ($179<<2)|0);
 _simpa_side($178,$180,0,0);
 HEAP32[41224>>2] = 0;
 $181 = $i;
 $182 = (1280 + ($181<<2)|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = $i;
 $185 = (2880 + ($184<<2)|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = (_exp_contains_nan($183,$186)|0);
 $188 = ($187|0)!=(0);
 if ($188) {
  _error(793176);
  $0 = 0;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 $189 = $i;
 $190 = (480 + ($189<<2)|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $i;
 $193 = (2080 + ($192<<2)|0);
 $194 = $i;
 $195 = (1280 + ($194<<2)|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = $i;
 $198 = (2880 + ($197<<2)|0);
 $199 = (_solve_sub($solved_v,1,$191,$193,$196,$198)|0);
 $200 = ($199|0)<=(0);
 if ($200) {
  _error(793128);
  $0 = 0;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 $201 = $i;
 $202 = (1280 + ($201<<2)|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = $i;
 $205 = (2880 + ($204<<2)|0);
 _simpa_side($203,$205,0,0);
 $206 = $i;
 $207 = (1280 + ($206<<2)|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = $i;
 $210 = (2880 + ($209<<2)|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = (_exp_contains_nan($208,$211)|0);
 $213 = ($212|0)!=(0);
 if ($213) {
  _error(793176);
  $0 = 0;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 } else {
  $214 = $i;
  $215 = (_return_result($214)|0);
  $0 = $215;
  $216 = $0;
  STACKTOP = sp;return ($216|0);
 }
 return 0|0;
}
function _make_powers($equation,$np,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $level = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $v;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = (($8) + ($7<<4)|0);
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $level = $11;
  $12 = $i;
  $13 = $0;
  $14 = (($13) + ($12<<4)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(2);
  if ($16) {
   $17 = $i;
   $18 = $0;
   $19 = (($18) + ($17<<4)|0);
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(8);
   if ($22) {
    $23 = $i;
    $24 = (($23) + 2)|0;
    $i = $24;
    while(1) {
     $25 = $i;
     $26 = $1;
     $27 = HEAP32[$26>>2]|0;
     $28 = ($25|0)<($27|0);
     if ($28) {
      $29 = $i;
      $30 = $0;
      $31 = (($30) + ($29<<4)|0);
      $32 = (($31) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $level;
      $35 = ($33|0)>=($34|0);
      $119 = $35;
     } else {
      $119 = 0;
     }
     if (!($119)) {
      break;
     }
     $36 = $i;
     $37 = (($36) + 2)|0;
     $i = $37;
    }
    continue;
   }
  }
  $38 = $i;
  $39 = $0;
  $40 = (($39) + ($38<<4)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(1);
  if ($42) {
   $43 = $i;
   $44 = $0;
   $45 = (($44) + ($43<<4)|0);
   $46 = (($45) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $2;
   $49 = ($47|0)==($48|0);
   if ($49) {
    $50 = $i;
    $51 = (($50) + 1)|0;
    $52 = $1;
    $53 = HEAP32[$52>>2]|0;
    $54 = ($51|0)>=($53|0);
    if ($54) {
     label = 16;
    } else {
     $55 = $i;
     $56 = (($55) + 1)|0;
     $57 = $0;
     $58 = (($57) + ($56<<4)|0);
     $59 = (($58) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=(8);
     if ($61) {
      label = 16;
     }
    }
    if ((label|0) == 16) {
     label = 0;
     $62 = $1;
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + 2)|0;
     $65 = HEAP32[8>>2]|0;
     $66 = ($64|0)>($65|0);
     if ($66) {
      _error_huge();
     }
     $67 = $level;
     $68 = (($67) + 1)|0;
     $level = $68;
     $69 = $level;
     $70 = $i;
     $71 = $0;
     $72 = (($71) + ($70<<4)|0);
     $73 = (($72) + 4|0);
     HEAP32[$73>>2] = $69;
     $74 = $i;
     $75 = (($74) + 1)|0;
     $i = $75;
     $76 = $i;
     $77 = (($76) + 2)|0;
     $78 = $0;
     $79 = (($78) + ($77<<4)|0);
     $80 = $i;
     $81 = $0;
     $82 = (($81) + ($80<<4)|0);
     $83 = $1;
     $84 = HEAP32[$83>>2]|0;
     $85 = $i;
     $86 = (($84) - ($85))|0;
     $87 = $86<<4;
     _memmove(($79|0),($82|0),($87|0))|0;
     $88 = $1;
     $89 = HEAP32[$88>>2]|0;
     $90 = (($89) + 2)|0;
     HEAP32[$88>>2] = $90;
     $91 = $level;
     $92 = $i;
     $93 = $0;
     $94 = (($93) + ($92<<4)|0);
     $95 = (($94) + 4|0);
     HEAP32[$95>>2] = $91;
     $96 = $i;
     $97 = $0;
     $98 = (($97) + ($96<<4)|0);
     HEAP32[$98>>2] = 2;
     $99 = $i;
     $100 = $0;
     $101 = (($100) + ($99<<4)|0);
     $102 = (($101) + 8|0);
     HEAP32[$102>>2] = 8;
     $103 = $i;
     $104 = (($103) + 1)|0;
     $i = $104;
     $105 = $level;
     $106 = $i;
     $107 = $0;
     $108 = (($107) + ($106<<4)|0);
     $109 = (($108) + 4|0);
     HEAP32[$109>>2] = $105;
     $110 = $i;
     $111 = $0;
     $112 = (($111) + ($110<<4)|0);
     HEAP32[$112>>2] = 0;
     $113 = $i;
     $114 = $0;
     $115 = (($114) + ($113<<4)|0);
     $116 = (($115) + 8|0);
     HEAPF64[$116>>3] = 1.0;
    }
   }
  }
  $117 = $i;
  $118 = (($117) + 1)|0;
  $i = $118;
 }
 STACKTOP = sp;return;
}
function _int_dispatch($equation,$np,$v,$func) {
 $equation = $equation|0;
 $np = $np|0;
 $v = $v|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $v;
 $4 = $func;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _make_powers($5,$6,$7);
 $j = 0;
 $i = 1;
 L1: while(1) {
  $8 = $i;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8|0)>=($10|0);
  if ($11) {
   label = 3;
   break;
  }
  $19 = $i;
  $20 = $1;
  $21 = (($20) + ($19<<4)|0);
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(1);
  do {
   if ($24) {
    $25 = $i;
    $26 = $1;
    $27 = (($26) + ($25<<4)|0);
    $28 = (($27) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(1);
    if (!($30)) {
     $31 = $i;
     $32 = $1;
     $33 = (($32) + ($31<<4)|0);
     $34 = (($33) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35|0)==(2);
     if (!($36)) {
      break;
     }
    }
    $37 = $4;
    $38 = $1;
    $39 = $2;
    $40 = $j;
    $41 = $i;
    $42 = $3;
    $43 = (FUNCTION_TABLE_iiiiii[$37 & 127]($38,$39,$40,$41,$42)|0);
    $44 = ($43|0)!=(0);
    if (!($44)) {
     label = 8;
     break L1;
    }
    $45 = $j;
    $46 = (($45) + 1)|0;
    $i = $46;
    while(1) {
     $47 = $i;
     $48 = $2;
     $49 = HEAP32[$48>>2]|0;
     $50 = ($47|0)>=($49|0);
     if ($50) {
      label = 11;
      break L1;
     }
     $51 = $i;
     $52 = $1;
     $53 = (($52) + ($51<<4)|0);
     $54 = (($53) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(1);
     if ($56) {
      break;
     }
     $59 = $i;
     $60 = (($59) + 2)|0;
     $i = $60;
    }
    $57 = $i;
    $58 = (($57) + 1)|0;
    $j = $58;
   }
  } while(0);
  $61 = $i;
  $62 = (($61) + 2)|0;
  $i = $62;
 }
 if ((label|0) == 3) {
  $12 = $4;
  $13 = $1;
  $14 = $2;
  $15 = $j;
  $16 = $i;
  $17 = $3;
  $18 = (FUNCTION_TABLE_iiiiii[$12 & 127]($13,$14,$15,$16,$17)|0);
  $0 = $18;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 11) {
  $0 = 1;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 return 0|0;
}
function _integrate_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $constant_flag = 0, $cp_start = 0, $definite_flag = 0;
 var $dest = 0, $i = 0, $integrate_order = 0.0, $j = 0, $l1 = 0, $len = 0, $n1 = 0, $n2 = 0, $np = 0, $nps = 0, $solved = 0, $source = 0, $v = 0, $var_name_buf = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $1 = sp + 72|0;
 $v = sp + 56|0;
 $n1 = sp + 44|0;
 $n2 = sp + 40|0;
 $var_name_buf = sp + 80|0;
 HEAP32[$1>>2] = $cp;
 HEAP32[$v>>2] = 0;
 $definite_flag = 0;
 $constant_flag = 0;
 $integrate_order = 1.0;
 $2 = HEAP32[$1>>2]|0;
 $cp_start = $2;
 $3 = (_current_not_defined()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 HEAP32[3712>>2] = 0;
 HEAP32[3720>>2] = 0;
 $5 = HEAP32[472>>2]|0;
 $6 = (_solved_equation($5)|0);
 $solved = $6;
 $7 = (_next_espace()|0);
 $i = $7;
 while(1) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (_strcmp_tospace($8,793336)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $definite_flag = 1;
  } else {
   $11 = HEAP32[$1>>2]|0;
   $12 = (_strcmp_tospace($11,793352)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    break;
   }
   $constant_flag = 1;
  }
  $14 = HEAP32[$1>>2]|0;
  $15 = (_skip_param($14)|0);
  HEAP32[$1>>2] = $15;
 }
 $16 = $constant_flag;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $definite_flag;
  $19 = ($18|0)!=(0);
  if ($19) {
   _error(793368);
   $0 = 0;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
 }
 $20 = HEAP32[472>>2]|0;
 $21 = (2880 + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $solved;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   _warning(793400);
  }
  $26 = HEAP32[472>>2]|0;
  $27 = (1280 + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $source = $28;
  $29 = HEAP32[472>>2]|0;
  $30 = (2880 + ($29<<2)|0);
  $nps = $30;
  $31 = $i;
  $32 = (1280 + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $dest = $33;
  $34 = $i;
  $35 = (2880 + ($34<<2)|0);
  $np = $35;
 } else {
  $36 = HEAP32[472>>2]|0;
  $37 = (480 + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $source = $38;
  $39 = HEAP32[472>>2]|0;
  $40 = (2080 + ($39<<2)|0);
  $nps = $40;
  $41 = $i;
  $42 = (480 + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $dest = $43;
  $44 = $i;
  $45 = (2080 + ($44<<2)|0);
  $np = $45;
 }
 $46 = HEAP32[$1>>2]|0;
 $47 = HEAP8[$46>>0]|0;
 $48 = ($47<<24>>24)!=(0);
 do {
  if ($48) {
   $49 = HEAP32[$1>>2]|0;
   $50 = HEAP8[$49>>0]|0;
   $51 = $50 << 24 >> 24;
   $52 = (_isvarchar($51)|0);
   $53 = ($52|0)!=(0);
   do {
    if ($53) {
     $54 = HEAP32[$1>>2]|0;
     $55 = (_parse_var2($v,$54)|0);
     HEAP32[$1>>2] = $55;
     $56 = HEAP32[$1>>2]|0;
     $57 = ($56|0)==(0|0);
     if (!($57)) {
      break;
     }
     $0 = 0;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
   } while(0);
   $58 = HEAP32[$1>>2]|0;
   $59 = HEAP8[$58>>0]|0;
   $60 = ($59<<24>>24)!=(0);
   if ($60) {
    $61 = HEAP32[$1>>2]|0;
    $62 = (+_strtod($61,$1));
    $integrate_order = $62;
   }
   do {
    if (0) {
     $63 = $integrate_order;
     $64 = $63;
     $65 = (___FLOAT_BITS946($64)|0);
     $66 = $65 & 2147483647;
     $67 = ($66>>>0)<(2139095040);
     if ($67) {
      label = 30;
     }
    } else {
     if (1) {
      $68 = $integrate_order;
      $69 = (___DOUBLE_BITS947($68)|0);
      $70 = tempRet0;
      $71 = $70 & 2147483647;
      $72 = ($71>>>0)<(2146435072);
      $73 = ($71|0)==(2146435072);
      $74 = ($69>>>0)<(0);
      $75 = $73 & $74;
      $76 = $72 | $75;
      if ($76) {
       label = 30;
       break;
      } else {
       break;
      }
     } else {
      $77 = $integrate_order;
      $78 = (___fpclassifyl((+$77))|0);
      $79 = ($78|0)>(1);
      if ($79) {
       label = 30;
       break;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 30) {
    $80 = $integrate_order;
    $81 = $80 <= 0.0;
    if (!($81)) {
     $82 = $integrate_order;
     $83 = (+_fmod((+$82),1.0));
     $84 = $83 != 0.0;
     if (!($84)) {
      break;
     }
    }
   }
   _error(793424);
   $0 = 0;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
 } while(0);
 $85 = HEAP32[$1>>2]|0;
 $86 = HEAP8[$85>>0]|0;
 $87 = ($86<<24>>24)!=(0);
 do {
  if ($87) {
   $88 = HEAP32[$1>>2]|0;
   $89 = (_skip_comma_space($88)|0);
   HEAP32[$1>>2] = $89;
   $90 = HEAP32[$1>>2]|0;
   $91 = $cp_start;
   $92 = $90;
   $93 = $91;
   $94 = (($92) - ($93))|0;
   $95 = HEAP32[41240>>2]|0;
   $96 = (($95) + ($94))|0;
   HEAP32[41240>>2] = $96;
   $97 = HEAP32[3680>>2]|0;
   $98 = HEAP32[$1>>2]|0;
   $99 = (_parse_expr($97,3712,$98,0)|0);
   HEAP32[$1>>2] = $99;
   $100 = HEAP32[$1>>2]|0;
   $101 = ($100|0)==(0|0);
   if (!($101)) {
    $102 = HEAP32[3712>>2]|0;
    $103 = ($102|0)<=(0);
    if (!($103)) {
     break;
    }
   }
   $0 = 0;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
 } while(0);
 $104 = HEAP32[$1>>2]|0;
 $105 = HEAP8[$104>>0]|0;
 $106 = ($105<<24>>24)!=(0);
 do {
  if ($106) {
   $107 = HEAP32[$1>>2]|0;
   $cp_start = $107;
   $108 = HEAP32[$1>>2]|0;
   $109 = (_skip_comma_space($108)|0);
   HEAP32[$1>>2] = $109;
   $110 = HEAP32[$1>>2]|0;
   $111 = $cp_start;
   $112 = $110;
   $113 = $111;
   $114 = (($112) - ($113))|0;
   $115 = HEAP32[41240>>2]|0;
   $116 = (($115) + ($114))|0;
   HEAP32[41240>>2] = $116;
   $117 = HEAP32[3688>>2]|0;
   $118 = HEAP32[$1>>2]|0;
   $119 = (_parse_expr($117,3720,$118,0)|0);
   HEAP32[$1>>2] = $119;
   $120 = HEAP32[$1>>2]|0;
   $121 = ($120|0)==(0|0);
   if (!($121)) {
    $122 = HEAP32[$1>>2]|0;
    $123 = (_extra_characters($122)|0);
    $124 = ($123|0)!=(0);
    if (!($124)) {
     $125 = HEAP32[3720>>2]|0;
     $126 = ($125|0)<=(0);
     if (!($126)) {
      break;
     }
    }
   }
   $0 = 0;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
 } while(0);
 HEAP32[41304>>2] = 0;
 $127 = HEAP32[$v>>2]|0;
 $128 = ($127|0)==(0);
 do {
  if ($128) {
   $129 = (_prompt_var($v)|0);
   $130 = ($129|0)!=(0);
   if ($130) {
    break;
   }
   $0 = 0;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
 } while(0);
 HEAP32[41216>>2] = 0;
 $131 = $source;
 $132 = $nps;
 _uf_simp($131,$132);
 HEAP32[41216>>2] = 1;
 $133 = $source;
 $134 = $nps;
 $135 = HEAP32[$v>>2]|0;
 _factorv($133,$134,$135);
 $136 = $dest;
 $137 = $source;
 $138 = $nps;
 $139 = HEAP32[$138>>2]|0;
 $140 = $139<<4;
 _memmove(($136|0),($137|0),($140|0))|0;
 $141 = $nps;
 $142 = HEAP32[$141>>2]|0;
 HEAP32[$n1>>2] = $142;
 $l1 = 0;
 while(1) {
  $143 = $l1;
  $144 = (+($143|0));
  $145 = $integrate_order;
  $146 = $144 < $145;
  if (!($146)) {
   label = 67;
   break;
  }
  $147 = $dest;
  $148 = HEAP32[$v>>2]|0;
  $149 = (_int_dispatch($147,$n1,$148,97)|0);
  $150 = ($149|0)!=(0);
  if (!($150)) {
   label = 52;
   break;
  }
  $151 = $constant_flag;
  $152 = ($151|0)!=(0);
  if ($152) {
   $153 = HEAP32[$n1>>2]|0;
   $154 = (($153) + 2)|0;
   $155 = HEAP32[8>>2]|0;
   $156 = ($154|0)>($155|0);
   if ($156) {
    _error_huge();
   }
   $j = 0;
   while(1) {
    $157 = $j;
    $158 = HEAP32[$n1>>2]|0;
    $159 = ($157|0)<($158|0);
    if (!($159)) {
     break;
    }
    $160 = $j;
    $161 = $dest;
    $162 = (($161) + ($160<<4)|0);
    $163 = (($162) + 4|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (($164) + 1)|0;
    HEAP32[$163>>2] = $165;
    $166 = $j;
    $167 = (($166) + 1)|0;
    $j = $167;
   }
   $168 = HEAP32[$n1>>2]|0;
   $169 = $dest;
   $170 = (($169) + ($168<<4)|0);
   HEAP32[$170>>2] = 2;
   $171 = HEAP32[$n1>>2]|0;
   $172 = $dest;
   $173 = (($172) + ($171<<4)|0);
   $174 = (($173) + 4|0);
   HEAP32[$174>>2] = 1;
   $175 = HEAP32[$n1>>2]|0;
   $176 = $dest;
   $177 = (($176) + ($175<<4)|0);
   $178 = (($177) + 8|0);
   HEAP32[$178>>2] = 1;
   $179 = HEAP32[$n1>>2]|0;
   $180 = (($179) + 1)|0;
   HEAP32[$n1>>2] = $180;
   $181 = HEAP32[$n1>>2]|0;
   $182 = $dest;
   $183 = (($182) + ($181<<4)|0);
   HEAP32[$183>>2] = 1;
   $184 = HEAP32[$n1>>2]|0;
   $185 = $dest;
   $186 = (($185) + ($184<<4)|0);
   $187 = (($186) + 4|0);
   HEAP32[$187>>2] = 1;
   $188 = HEAP32[793512>>2]|0;
   HEAP32[$vararg_buffer>>2] = $188;
   (_snprintf($var_name_buf,100,793504,$vararg_buffer)|0);
   $189 = HEAP32[$n1>>2]|0;
   $190 = $dest;
   $191 = (($190) + ($189<<4)|0);
   $192 = (($191) + 8|0);
   $193 = (_parse_var($192,$var_name_buf)|0);
   $194 = ($193|0)==(0|0);
   if ($194) {
    label = 61;
    break;
   }
   $195 = HEAP32[$n1>>2]|0;
   $196 = (($195) + 1)|0;
   HEAP32[$n1>>2] = $196;
   $197 = HEAP32[793512>>2]|0;
   $198 = (($197) + 1)|0;
   HEAP32[793512>>2] = $198;
   $199 = HEAP32[793512>>2]|0;
   $200 = ($199|0)<(0);
   if ($200) {
    HEAP32[793512>>2] = 1;
   }
  }
  $201 = $dest;
  (_simp_loop($201,$n1)|0);
  $202 = $l1;
  $203 = (($202) + 1)|0;
  $l1 = $203;
 }
 if ((label|0) == 52) {
  _error(793464);
  $0 = 0;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 61) {
  $0 = 0;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 67) {
  $204 = $definite_flag;
  $205 = ($204|0)!=(0);
  if ($205) {
   $206 = HEAP32[3712>>2]|0;
   $207 = ($206|0)==(0);
   do {
    if ($207) {
     (_my_strlcpy(35984,793520,80)|0);
     $208 = HEAP32[3680>>2]|0;
     $209 = (_get_expr($208,3712)|0);
     $210 = ($209|0)!=(0);
     if ($210) {
      break;
     }
     $0 = 0;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
   } while(0);
   $211 = HEAP32[3720>>2]|0;
   $212 = ($211|0)==(0);
   do {
    if ($212) {
     (_my_strlcpy(35984,793544,80)|0);
     $213 = HEAP32[3688>>2]|0;
     $214 = (_get_expr($213,3720)|0);
     $215 = ($214|0)!=(0);
     if ($215) {
      break;
     }
     $0 = 0;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
   } while(0);
   $216 = HEAP32[3704>>2]|0;
   $217 = $dest;
   $218 = HEAP32[$n1>>2]|0;
   $219 = $218<<4;
   _memmove(($216|0),($217|0),($219|0))|0;
   $220 = HEAP32[$n1>>2]|0;
   HEAP32[$n2>>2] = $220;
   $221 = HEAP32[3704>>2]|0;
   $222 = HEAP32[3680>>2]|0;
   $223 = HEAP32[3712>>2]|0;
   $224 = HEAP32[$v>>2]|0;
   (_subst_var_with_exp($221,$n2,$222,$223,$224)|0);
   $225 = $dest;
   $226 = HEAP32[3688>>2]|0;
   $227 = HEAP32[3720>>2]|0;
   $228 = HEAP32[$v>>2]|0;
   (_subst_var_with_exp($225,$n1,$226,$227,$228)|0);
   $229 = HEAP32[$n1>>2]|0;
   $230 = (($229) + 1)|0;
   $231 = HEAP32[$n2>>2]|0;
   $232 = (($230) + ($231))|0;
   $233 = HEAP32[8>>2]|0;
   $234 = ($232|0)>($233|0);
   if ($234) {
    _error_huge();
   }
   $j = 0;
   while(1) {
    $235 = $j;
    $236 = HEAP32[$n1>>2]|0;
    $237 = ($235|0)<($236|0);
    if (!($237)) {
     break;
    }
    $238 = $j;
    $239 = $dest;
    $240 = (($239) + ($238<<4)|0);
    $241 = (($240) + 4|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = (($242) + 1)|0;
    HEAP32[$241>>2] = $243;
    $244 = $j;
    $245 = (($244) + 1)|0;
    $j = $245;
   }
   $j = 0;
   while(1) {
    $246 = $j;
    $247 = HEAP32[$n2>>2]|0;
    $248 = ($246|0)<($247|0);
    if (!($248)) {
     break;
    }
    $249 = $j;
    $250 = HEAP32[3704>>2]|0;
    $251 = (($250) + ($249<<4)|0);
    $252 = (($251) + 4|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + 1)|0;
    HEAP32[$252>>2] = $254;
    $255 = $j;
    $256 = (($255) + 1)|0;
    $j = $256;
   }
   $257 = HEAP32[$n1>>2]|0;
   $258 = $dest;
   $259 = (($258) + ($257<<4)|0);
   HEAP32[$259>>2] = 2;
   $260 = HEAP32[$n1>>2]|0;
   $261 = $dest;
   $262 = (($261) + ($260<<4)|0);
   $263 = (($262) + 4|0);
   HEAP32[$263>>2] = 1;
   $264 = HEAP32[$n1>>2]|0;
   $265 = $dest;
   $266 = (($265) + ($264<<4)|0);
   $267 = (($266) + 8|0);
   HEAP32[$267>>2] = 2;
   $268 = HEAP32[$n1>>2]|0;
   $269 = (($268) + 1)|0;
   HEAP32[$n1>>2] = $269;
   $270 = HEAP32[$n1>>2]|0;
   $271 = $dest;
   $272 = (($271) + ($270<<4)|0);
   $273 = HEAP32[3704>>2]|0;
   $274 = HEAP32[$n2>>2]|0;
   $275 = $274<<4;
   _memmove(($272|0),($273|0),($275|0))|0;
   $276 = HEAP32[$n2>>2]|0;
   $277 = HEAP32[$n1>>2]|0;
   $278 = (($277) + ($276))|0;
   HEAP32[$n1>>2] = $278;
  }
  $279 = $dest;
  _simpa_side($279,$n1,0,0);
  $280 = HEAP32[$n1>>2]|0;
  $281 = $np;
  HEAP32[$281>>2] = $280;
  $282 = HEAP32[472>>2]|0;
  $283 = (2880 + ($282<<2)|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = ($284|0)!=(0);
  if ($285) {
   $286 = $i;
   $287 = (480 + ($286<<2)|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = HEAP32[472>>2]|0;
   $290 = (480 + ($289<<2)|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = HEAP32[472>>2]|0;
   $293 = (2080 + ($292<<2)|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $294<<4;
   _memmove(($288|0),($291|0),($295|0))|0;
   $296 = HEAP32[472>>2]|0;
   $297 = (2080 + ($296<<2)|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = $i;
   $300 = (2080 + ($299<<2)|0);
   HEAP32[$300>>2] = $298;
   $301 = $solved;
   $302 = ($301|0)!=(0);
   if ($302) {
    $303 = (_isvarchar(39)|0);
    $304 = ($303|0)!=(0);
    if ($304) {
     $305 = $i;
     $306 = (480 + ($305<<2)|0);
     $307 = HEAP32[$306>>2]|0;
     $308 = (($307) + 8|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = (_list_var($309,0)|0);
     $len = $310;
     $l1 = 0;
     while(1) {
      $311 = $l1;
      $312 = (+($311|0));
      $313 = $integrate_order;
      $314 = $312 < $313;
      if ($314) {
       $315 = $len;
       $316 = ($315|0)>(0);
       if ($316) {
        $317 = $len;
        $318 = (($317) - 1)|0;
        $319 = (35800 + ($318)|0);
        $320 = HEAP8[$319>>0]|0;
        $321 = $320 << 24 >> 24;
        $322 = ($321|0)==(39);
        $336 = $322;
       } else {
        $336 = 0;
       }
      } else {
       $336 = 0;
      }
      if (!($336)) {
       break;
      }
      $323 = $len;
      $324 = (($323) + -1)|0;
      $len = $324;
      $325 = (35800 + ($324)|0);
      HEAP8[$325>>0] = 0;
      $326 = $l1;
      $327 = (($326) + 1)|0;
      $l1 = $327;
     }
     $328 = $i;
     $329 = (480 + ($328<<2)|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = (($330) + 8|0);
     (_parse_var($331,35800)|0);
    }
   }
  }
  $332 = $i;
  HEAP32[472>>2] = $332;
  $333 = HEAP32[472>>2]|0;
  $334 = (_return_result($333)|0);
  $0 = $334;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 return 0|0;
}
function ___FLOAT_BITS946($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS947($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _integrate_sub($equation,$np,$loc,$eloc,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $eloc = $eloc|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $div_flag = 0, $i = 0, $j = 0;
 var $k = 0, $len = 0, $level = 0, $mlevel = 0, $vlevel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $eloc;
 $5 = $v;
 $6 = $3;
 $7 = $1;
 $8 = (($7) + ($6<<4)|0);
 $9 = $4;
 $10 = $3;
 $11 = (($9) - ($10))|0;
 $12 = (_min_level($8,$11)|0);
 $level = $12;
 $13 = $3;
 $i = $13;
 $count = 0;
 L1: while(1) {
  $14 = $i;
  $15 = $4;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   label = 31;
   break;
  }
  $17 = $i;
  $18 = $1;
  $19 = (($18) + ($17<<4)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(1);
  do {
   if ($21) {
    $22 = $i;
    $23 = $1;
    $24 = (($23) + ($22<<4)|0);
    $25 = (($24) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $5;
    $28 = ($26|0)==($27|0);
    if ($28) {
     $29 = $count;
     $30 = (($29) + 1)|0;
     $count = $30;
     $31 = $count;
     $32 = ($31|0)>(1);
     if ($32) {
      label = 6;
      break L1;
     }
     $33 = $i;
     $34 = $1;
     $35 = (($34) + ($33<<4)|0);
     $36 = (($35) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $vlevel = $37;
     $38 = $vlevel;
     $39 = $level;
     $40 = ($38|0)==($39|0);
     if (!($40)) {
      $41 = $vlevel;
      $42 = $level;
      $43 = (($42) + 1)|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       label = 28;
       break L1;
      }
     }
     $45 = $3;
     $46 = (($45) + 1)|0;
     $k = $46;
     while(1) {
      $47 = $k;
      $48 = $4;
      $49 = ($47|0)<($48|0);
      if (!($49)) {
       break;
      }
      $50 = $k;
      $51 = $1;
      $52 = (($51) + ($50<<4)|0);
      $53 = (($52) + 4|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = $level;
      $56 = ($54|0)==($55|0);
      do {
       if ($56) {
        $57 = $k;
        $58 = $1;
        $59 = (($58) + ($57<<4)|0);
        $60 = (($59) + 8|0);
        $61 = HEAP32[$60>>2]|0;
        if ((($61|0) == 4) | (($61|0) == 5)) {
         break;
        } else if (!((($61|0) == 8))) {
         label = 17;
         break L1;
        }
        $62 = $k;
        $63 = $i;
        $64 = (($63) + 1)|0;
        $65 = ($62|0)==($64|0);
        if (!($65)) {
         label = 16;
         break L1;
        }
       } else {
       }
      } while(0);
      $66 = $k;
      $67 = (($66) + 2)|0;
      $k = $67;
     }
     $68 = $vlevel;
     $69 = $level;
     $70 = (($69) + 1)|0;
     $71 = ($68|0)==($70|0);
     if (!($71)) {
      break;
     }
     $72 = $i;
     $73 = (($72) + 1)|0;
     $74 = $4;
     $75 = ($73|0)<($74|0);
     if (!($75)) {
      label = 25;
      break L1;
     }
     $76 = $i;
     $77 = (($76) + 1)|0;
     $78 = $1;
     $79 = (($78) + ($77<<4)|0);
     $80 = (($79) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $vlevel;
     $83 = ($81|0)==($82|0);
     if (!($83)) {
      label = 25;
      break L1;
     }
     $84 = $i;
     $85 = (($84) + 1)|0;
     $86 = $1;
     $87 = (($86) + ($85<<4)|0);
     $88 = (($87) + 8|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)==(8);
     if (!($90)) {
      label = 25;
      break L1;
     }
    } else {
     label = 29;
    }
   } else {
    label = 29;
   }
  } while(0);
  if ((label|0) == 29) {
   label = 0;
  }
  $91 = $i;
  $92 = (($91) + 2)|0;
  $i = $92;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 else if ((label|0) == 16) {
  label = 17;
 }
 else if ((label|0) == 25) {
  label = 28;
 }
 else if ((label|0) == 31) {
  $93 = $level;
  $94 = (($93) + 1)|0;
  $mlevel = $94;
  $95 = $3;
  $j = $95;
  while(1) {
   $96 = $j;
   $97 = $4;
   $98 = ($96|0)<($97|0);
   if (!($98)) {
    break;
   }
   $99 = $j;
   $100 = $1;
   $101 = (($100) + ($99<<4)|0);
   $102 = (($101) + 4|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + 2)|0;
   HEAP32[$102>>2] = $104;
   $105 = $j;
   $106 = (($105) + 1)|0;
   $j = $106;
  }
  $107 = $3;
  $i = $107;
  while(1) {
   $108 = $i;
   $109 = $4;
   $110 = ($108|0)<($109|0);
   if (!($110)) {
    label = 69;
    break;
   }
   $111 = $i;
   $112 = $1;
   $113 = (($112) + ($111<<4)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)==(1);
   if ($115) {
    $116 = $i;
    $117 = $1;
    $118 = (($117) + ($116<<4)|0);
    $119 = (($118) + 8|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $5;
    $122 = ($120|0)==($121|0);
    if ($122) {
     break;
    }
   }
   $364 = $i;
   $365 = (($364) + 2)|0;
   $i = $365;
  }
  if ((label|0) == 69) {
   $366 = $2;
   $367 = HEAP32[$366>>2]|0;
   $368 = (($367) + 2)|0;
   $369 = HEAP32[8>>2]|0;
   $370 = ($368|0)>($369|0);
   if ($370) {
    _error_huge();
   }
   $371 = $4;
   $372 = (($371) + 2)|0;
   $373 = $1;
   $374 = (($373) + ($372<<4)|0);
   $375 = $4;
   $376 = $1;
   $377 = (($376) + ($375<<4)|0);
   $378 = $2;
   $379 = HEAP32[$378>>2]|0;
   $380 = $4;
   $381 = (($379) - ($380))|0;
   $382 = $381<<4;
   _memmove(($374|0),($377|0),($382|0))|0;
   $383 = $2;
   $384 = HEAP32[$383>>2]|0;
   $385 = (($384) + 2)|0;
   HEAP32[$383>>2] = $385;
   $386 = $mlevel;
   $387 = $4;
   $388 = $1;
   $389 = (($388) + ($387<<4)|0);
   $390 = (($389) + 4|0);
   HEAP32[$390>>2] = $386;
   $391 = $4;
   $392 = $1;
   $393 = (($392) + ($391<<4)|0);
   HEAP32[$393>>2] = 2;
   $394 = $4;
   $395 = $1;
   $396 = (($395) + ($394<<4)|0);
   $397 = (($396) + 8|0);
   HEAP32[$397>>2] = 4;
   $398 = $4;
   $399 = (($398) + 1)|0;
   $4 = $399;
   $400 = $mlevel;
   $401 = $4;
   $402 = $1;
   $403 = (($402) + ($401<<4)|0);
   $404 = (($403) + 4|0);
   HEAP32[$404>>2] = $400;
   $405 = $4;
   $406 = $1;
   $407 = (($406) + ($405<<4)|0);
   HEAP32[$407>>2] = 1;
   $408 = $5;
   $409 = $4;
   $410 = $1;
   $411 = (($410) + ($409<<4)|0);
   $412 = (($411) + 8|0);
   HEAP32[$412>>2] = $408;
   $0 = 1;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
  }
  $123 = $i;
  $124 = $3;
  $125 = ($123|0)>($124|0);
  if ($125) {
   $126 = $i;
   $127 = (($126) - 1)|0;
   $128 = $1;
   $129 = (($128) + ($127<<4)|0);
   $130 = (($129) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)==(5);
   $134 = $132;
  } else {
   $134 = 0;
  }
  $133 = $134&1;
  $div_flag = $133;
  $135 = $i;
  $136 = (($135) + 1)|0;
  $i = $136;
  $137 = $i;
  $138 = $4;
  $139 = ($137|0)>=($138|0);
  if (!($139)) {
   $140 = $i;
   $141 = $1;
   $142 = (($141) + ($140<<4)|0);
   $143 = (($142) + 8|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($144|0)!=(8);
   if (!($145)) {
    $146 = $i;
    $147 = $1;
    $148 = (($147) + ($146<<4)|0);
    $149 = (($148) + 4|0);
    $150 = HEAP32[$149>>2]|0;
    $level = $150;
    $151 = $i;
    $152 = (($151) + 1)|0;
    $i = $152;
    $153 = $div_flag;
    $154 = ($153|0)!=(0);
    if ($154) {
     $155 = $i;
     $156 = $1;
     $157 = (($156) + ($155<<4)|0);
     $158 = (($157) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $level;
     $161 = ($159|0)==($160|0);
     if ($161) {
      $162 = $i;
      $163 = $1;
      $164 = (($163) + ($162<<4)|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==(0);
      if ($166) {
       $167 = $i;
       $168 = $1;
       $169 = (($168) + ($167<<4)|0);
       $170 = (($169) + 8|0);
       $171 = +HEAPF64[$170>>3];
       $172 = $171 == 1.0;
       if ($172) {
        $0 = 0;
        $413 = $0;
        STACKTOP = sp;return ($413|0);
       }
      }
     }
     $173 = $2;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($174) + 2)|0;
     $176 = HEAP32[8>>2]|0;
     $177 = ($175|0)>($176|0);
     if ($177) {
      _error_huge();
     }
     $178 = $i;
     $j = $178;
     while(1) {
      $179 = $j;
      $180 = $4;
      $181 = ($179|0)<($180|0);
      if ($181) {
       $182 = $j;
       $183 = $1;
       $184 = (($183) + ($182<<4)|0);
       $185 = (($184) + 4|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = $level;
       $188 = ($186|0)>=($187|0);
       $414 = $188;
      } else {
       $414 = 0;
      }
      if (!($414)) {
       break;
      }
      $189 = $j;
      $190 = $1;
      $191 = (($190) + ($189<<4)|0);
      $192 = (($191) + 4|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193) + 1)|0;
      HEAP32[$192>>2] = $194;
      $195 = $j;
      $196 = (($195) + 1)|0;
      $j = $196;
     }
     $197 = $i;
     $198 = (($197) - 3)|0;
     $199 = $1;
     $200 = (($199) + ($198<<4)|0);
     $201 = (($200) + 8|0);
     HEAP32[$201>>2] = 4;
     $202 = $i;
     $203 = (($202) + 2)|0;
     $204 = $1;
     $205 = (($204) + ($203<<4)|0);
     $206 = $i;
     $207 = $1;
     $208 = (($207) + ($206<<4)|0);
     $209 = $2;
     $210 = HEAP32[$209>>2]|0;
     $211 = $i;
     $212 = (($210) - ($211))|0;
     $213 = $212<<4;
     _memmove(($205|0),($208|0),($213|0))|0;
     $214 = $2;
     $215 = HEAP32[$214>>2]|0;
     $216 = (($215) + 2)|0;
     HEAP32[$214>>2] = $216;
     $217 = $4;
     $218 = (($217) + 2)|0;
     $4 = $218;
     $219 = $level;
     $220 = (($219) + 1)|0;
     $221 = $i;
     $222 = $1;
     $223 = (($222) + ($221<<4)|0);
     $224 = (($223) + 4|0);
     HEAP32[$224>>2] = $220;
     $225 = $i;
     $226 = $1;
     $227 = (($226) + ($225<<4)|0);
     HEAP32[$227>>2] = 0;
     $228 = $i;
     $229 = $1;
     $230 = (($229) + ($228<<4)|0);
     $231 = (($230) + 8|0);
     HEAPF64[$231>>3] = -1.0;
     $232 = $level;
     $233 = (($232) + 1)|0;
     $234 = $i;
     $235 = (($234) + 1)|0;
     $236 = $1;
     $237 = (($236) + ($235<<4)|0);
     $238 = (($237) + 4|0);
     HEAP32[$238>>2] = $233;
     $239 = $i;
     $240 = (($239) + 1)|0;
     $241 = $1;
     $242 = (($241) + ($240<<4)|0);
     HEAP32[$242>>2] = 2;
     $243 = $i;
     $244 = (($243) + 1)|0;
     $245 = $1;
     $246 = (($245) + ($244<<4)|0);
     $247 = (($246) + 8|0);
     HEAP32[$247>>2] = 4;
    }
    $248 = $i;
    $j = $248;
    while(1) {
     $249 = $j;
     $250 = $4;
     $251 = ($249|0)<($250|0);
     if ($251) {
      $252 = $j;
      $253 = $1;
      $254 = (($253) + ($252<<4)|0);
      $255 = (($254) + 4|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = $level;
      $258 = ($256|0)>=($257|0);
      $415 = $258;
     } else {
      $415 = 0;
     }
     if (!($415)) {
      break;
     }
     $259 = $j;
     $260 = $1;
     $261 = (($260) + ($259<<4)|0);
     $262 = (($261) + 4|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = (($263) + 1)|0;
     HEAP32[$262>>2] = $264;
     $265 = $j;
     $266 = (($265) + 1)|0;
     $j = $266;
    }
    $267 = $j;
    $268 = $i;
    $269 = (($267) - ($268))|0;
    $len = $269;
    $270 = $2;
    $271 = HEAP32[$270>>2]|0;
    $272 = $len;
    $273 = (($271) + ($272))|0;
    $274 = (($273) + 5)|0;
    $275 = HEAP32[8>>2]|0;
    $276 = ($274|0)>($275|0);
    if ($276) {
     _error_huge();
    }
    $277 = $j;
    $278 = (($277) + 2)|0;
    $279 = $1;
    $280 = (($279) + ($278<<4)|0);
    $281 = $j;
    $282 = $1;
    $283 = (($282) + ($281<<4)|0);
    $284 = $2;
    $285 = HEAP32[$284>>2]|0;
    $286 = $j;
    $287 = (($285) - ($286))|0;
    $288 = $287<<4;
    _memmove(($280|0),($283|0),($288|0))|0;
    $289 = $2;
    $290 = HEAP32[$289>>2]|0;
    $291 = (($290) + 2)|0;
    HEAP32[$289>>2] = $291;
    $292 = $4;
    $293 = (($292) + 2)|0;
    $4 = $293;
    $294 = $len;
    $295 = (($294) + 2)|0;
    $len = $295;
    $296 = $level;
    $297 = (($296) + 1)|0;
    $level = $297;
    $298 = $level;
    $299 = $j;
    $300 = $1;
    $301 = (($300) + ($299<<4)|0);
    $302 = (($301) + 4|0);
    HEAP32[$302>>2] = $298;
    $303 = $j;
    $304 = $1;
    $305 = (($304) + ($303<<4)|0);
    HEAP32[$305>>2] = 2;
    $306 = $j;
    $307 = $1;
    $308 = (($307) + ($306<<4)|0);
    $309 = (($308) + 8|0);
    HEAP32[$309>>2] = 1;
    $310 = $j;
    $311 = (($310) + 1)|0;
    $j = $311;
    $312 = $level;
    $313 = $j;
    $314 = $1;
    $315 = (($314) + ($313<<4)|0);
    $316 = (($315) + 4|0);
    HEAP32[$316>>2] = $312;
    $317 = $j;
    $318 = $1;
    $319 = (($318) + ($317<<4)|0);
    HEAP32[$319>>2] = 0;
    $320 = $j;
    $321 = $1;
    $322 = (($321) + ($320<<4)|0);
    $323 = (($322) + 8|0);
    HEAPF64[$323>>3] = 1.0;
    $324 = $4;
    $325 = $len;
    $326 = (($324) + ($325))|0;
    $327 = (($326) + 1)|0;
    $328 = $1;
    $329 = (($328) + ($327<<4)|0);
    $330 = $4;
    $331 = $1;
    $332 = (($331) + ($330<<4)|0);
    $333 = $2;
    $334 = HEAP32[$333>>2]|0;
    $335 = $4;
    $336 = (($334) - ($335))|0;
    $337 = $336<<4;
    _memmove(($329|0),($332|0),($337|0))|0;
    $338 = $len;
    $339 = (($338) + 1)|0;
    $340 = $2;
    $341 = HEAP32[$340>>2]|0;
    $342 = (($341) + ($339))|0;
    HEAP32[$340>>2] = $342;
    $343 = $mlevel;
    $344 = $4;
    $345 = $1;
    $346 = (($345) + ($344<<4)|0);
    $347 = (($346) + 4|0);
    HEAP32[$347>>2] = $343;
    $348 = $4;
    $349 = $1;
    $350 = (($349) + ($348<<4)|0);
    HEAP32[$350>>2] = 2;
    $351 = $4;
    $352 = $1;
    $353 = (($352) + ($351<<4)|0);
    $354 = (($353) + 8|0);
    HEAP32[$354>>2] = 5;
    $355 = $4;
    $356 = (($355) + 1)|0;
    $357 = $1;
    $358 = (($357) + ($356<<4)|0);
    $359 = $i;
    $360 = $1;
    $361 = (($360) + ($359<<4)|0);
    $362 = $len;
    $363 = $362<<4;
    _memmove(($358|0),($361|0),($363|0))|0;
    $0 = 1;
    $413 = $0;
    STACKTOP = sp;return ($413|0);
   }
  }
  $0 = 0;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 if ((label|0) == 17) {
  $0 = 0;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 else if ((label|0) == 28) {
  $0 = 0;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 return 0|0;
}
function _laplace_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dest = 0, $i = 0, $inverse_flag = 0, $n1 = 0, $np = 0, $nps = 0, $solved = 0;
 var $source = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 28|0;
 $n1 = sp + 8|0;
 $1 = $cp;
 HEAP32[$v>>2] = 0;
 $2 = (_current_not_defined()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $0 = 0;
  $112 = $0;
  STACKTOP = sp;return ($112|0);
 }
 $4 = HEAP32[472>>2]|0;
 $5 = (_solved_equation($4)|0);
 $solved = $5;
 $6 = (_next_espace()|0);
 $i = $6;
 $7 = HEAP32[472>>2]|0;
 $8 = (2880 + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $solved;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   _warning(793400);
  }
  $13 = HEAP32[472>>2]|0;
  $14 = (1280 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $source = $15;
  $16 = HEAP32[472>>2]|0;
  $17 = (2880 + ($16<<2)|0);
  $nps = $17;
  $18 = $i;
  $19 = (1280 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $dest = $20;
  $21 = $i;
  $22 = (2880 + ($21<<2)|0);
  $np = $22;
 } else {
  $23 = HEAP32[472>>2]|0;
  $24 = (480 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $source = $25;
  $26 = HEAP32[472>>2]|0;
  $27 = (2080 + ($26<<2)|0);
  $nps = $27;
  $28 = $i;
  $29 = (480 + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $dest = $30;
  $31 = $i;
  $32 = (2080 + ($31<<2)|0);
  $np = $32;
 }
 $33 = $1;
 $34 = (_strcmp_tospace($33,793568)|0);
 $35 = ($34|0)==(0);
 $36 = $35&1;
 $inverse_flag = $36;
 $37 = $inverse_flag;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $1;
  $40 = (_skip_param($39)|0);
  $1 = $40;
 }
 $41 = $1;
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)!=(0);
 do {
  if ($43) {
   $44 = $1;
   $45 = (_parse_var2($v,$44)|0);
   $1 = $45;
   $46 = $1;
   $47 = ($46|0)==(0|0);
   if ($47) {
    $0 = 0;
    $112 = $0;
    STACKTOP = sp;return ($112|0);
   }
   $48 = $1;
   $49 = (_extra_characters($48)|0);
   $50 = ($49|0)!=(0);
   if (!($50)) {
    break;
   }
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  }
 } while(0);
 HEAP32[41304>>2] = 0;
 $51 = HEAP32[$v>>2]|0;
 $52 = ($51|0)==(0);
 do {
  if ($52) {
   $53 = (_prompt_var($v)|0);
   $54 = ($53|0)!=(0);
   if ($54) {
    break;
   }
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  }
 } while(0);
 HEAP32[41216>>2] = 0;
 $55 = $source;
 $56 = $nps;
 _uf_simp($55,$56);
 HEAP32[41216>>2] = 1;
 $57 = $source;
 $58 = $nps;
 $59 = HEAP32[$v>>2]|0;
 _factorv($57,$58,$59);
 $60 = $dest;
 $61 = $source;
 $62 = $nps;
 $63 = HEAP32[$62>>2]|0;
 $64 = $63<<4;
 _memmove(($60|0),($61|0),($64|0))|0;
 $65 = $nps;
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$n1>>2] = $66;
 $67 = $inverse_flag;
 $68 = ($67|0)!=(0);
 do {
  if ($68) {
   $69 = $dest;
   $70 = HEAP32[$n1>>2]|0;
   $71 = HEAP32[$v>>2]|0;
   $72 = (_poly_in_v($69,$70,$71,1)|0);
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $dest;
    $75 = HEAP32[$v>>2]|0;
    $76 = (_int_dispatch($74,$n1,$75,98)|0);
    $77 = ($76|0)!=(0);
    if ($77) {
     break;
    }
   }
   _error(793576);
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  } else {
   $78 = $dest;
   $79 = HEAP32[$n1>>2]|0;
   $80 = HEAP32[$v>>2]|0;
   $81 = (_poly_in_v($78,$79,$80,0)|0);
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = $dest;
    $84 = HEAP32[$v>>2]|0;
    $85 = (_int_dispatch($83,$n1,$84,99)|0);
    $86 = ($85|0)!=(0);
    if ($86) {
     break;
    }
   }
   _error(793616);
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;return ($112|0);
  }
 } while(0);
 $87 = $dest;
 (_simp_loop($87,$n1)|0);
 $88 = HEAP32[472>>2]|0;
 $89 = (2880 + ($88<<2)|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)!=(0);
 if ($91) {
  $92 = $i;
  $93 = (480 + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[472>>2]|0;
  $96 = (480 + ($95<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = HEAP32[472>>2]|0;
  $99 = (2080 + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $100<<4;
  _memmove(($94|0),($97|0),($101|0))|0;
  $102 = HEAP32[472>>2]|0;
  $103 = (2080 + ($102<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $i;
  $106 = (2080 + ($105<<2)|0);
  HEAP32[$106>>2] = $104;
 }
 $107 = HEAP32[$n1>>2]|0;
 $108 = $np;
 HEAP32[$108>>2] = $107;
 $109 = $i;
 HEAP32[472>>2] = $109;
 $110 = HEAP32[472>>2]|0;
 $111 = (_return_result($110)|0);
 $0 = $111;
 $112 = $0;
 STACKTOP = sp;return ($112|0);
}
function _inv_laplace_sub($equation,$np,$loc,$eloc,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $eloc = $eloc|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $level = 0, $mlevel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $eloc;
 $5 = $v;
 $6 = $3;
 $7 = $1;
 $8 = (($7) + ($6<<4)|0);
 $9 = $4;
 $10 = $3;
 $11 = (($9) - ($10))|0;
 $12 = (_min_level($8,$11)|0);
 $13 = (($12) + 1)|0;
 $mlevel = $13;
 $14 = $3;
 $j = $14;
 while(1) {
  $15 = $j;
  $16 = $4;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $j;
  $19 = $1;
  $20 = (($19) + ($18<<4)|0);
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 2)|0;
  HEAP32[$21>>2] = $23;
  $24 = $j;
  $25 = (($24) + 1)|0;
  $j = $25;
 }
 $26 = $3;
 $i = $26;
 while(1) {
  $27 = $i;
  $28 = $4;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   label = 26;
   break;
  }
  $30 = $i;
  $31 = $1;
  $32 = (($31) + ($30<<4)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(1);
  if ($34) {
   $35 = $i;
   $36 = $1;
   $37 = (($36) + ($35<<4)|0);
   $38 = (($37) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $5;
   $41 = ($39|0)==($40|0);
   if ($41) {
    break;
   }
  }
  $225 = $i;
  $226 = (($225) + 2)|0;
  $i = $226;
 }
 if ((label|0) == 26) {
  $0 = 0;
  $227 = $0;
  STACKTOP = sp;return ($227|0);
 }
 $42 = $i;
 $43 = (($42) + 1)|0;
 $i = $43;
 $44 = $i;
 $45 = $4;
 $46 = ($44|0)>=($45|0);
 if (!($46)) {
  $47 = $i;
  $48 = $1;
  $49 = (($48) + ($47<<4)|0);
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(8);
  if (!($52)) {
   $53 = $i;
   $54 = (($53) - 2)|0;
   $55 = $3;
   $56 = ($54|0)<=($55|0);
   if (!($56)) {
    $57 = $i;
    $58 = (($57) - 2)|0;
    $59 = $1;
    $60 = (($59) + ($58<<4)|0);
    $61 = (($60) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)!=(5);
    if (!($63)) {
     $64 = $i;
     $65 = $1;
     $66 = (($65) + ($64<<4)|0);
     $67 = (($66) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $level = $68;
     $69 = $i;
     $70 = (($69) + 1)|0;
     $i = $70;
     $71 = $i;
     $j = $71;
     while(1) {
      $72 = $j;
      $73 = $4;
      $74 = ($72|0)<($73|0);
      if ($74) {
       $75 = $j;
       $76 = $1;
       $77 = (($76) + ($75<<4)|0);
       $78 = (($77) + 4|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = $level;
       $81 = ($79|0)>=($80|0);
       $228 = $81;
      } else {
       $228 = 0;
      }
      if (!($228)) {
       break;
      }
      $82 = $j;
      $83 = $1;
      $84 = (($83) + ($82<<4)|0);
      $85 = (($84) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (($86) + 1)|0;
      HEAP32[$85>>2] = $87;
      $88 = $j;
      $89 = (($88) + 1)|0;
      $j = $89;
     }
     $90 = $j;
     $91 = $i;
     $92 = (($90) - ($91))|0;
     $len = $92;
     $93 = $2;
     $94 = HEAP32[$93>>2]|0;
     $95 = $len;
     $96 = (($94) + ($95))|0;
     $97 = (($96) + 7)|0;
     $98 = HEAP32[8>>2]|0;
     $99 = ($97|0)>($98|0);
     if ($99) {
      _error_huge();
     }
     $100 = $i;
     $101 = (($100) - 3)|0;
     $102 = $1;
     $103 = (($102) + ($101<<4)|0);
     $104 = (($103) + 8|0);
     HEAP32[$104>>2] = 4;
     $105 = $j;
     $106 = (($105) + 2)|0;
     $107 = $1;
     $108 = (($107) + ($106<<4)|0);
     $109 = $j;
     $110 = $1;
     $111 = (($110) + ($109<<4)|0);
     $112 = $2;
     $113 = HEAP32[$112>>2]|0;
     $114 = $j;
     $115 = (($113) - ($114))|0;
     $116 = $115<<4;
     _memmove(($108|0),($111|0),($116|0))|0;
     $117 = $2;
     $118 = HEAP32[$117>>2]|0;
     $119 = (($118) + 2)|0;
     HEAP32[$117>>2] = $119;
     $120 = $4;
     $121 = (($120) + 2)|0;
     $4 = $121;
     $122 = $len;
     $123 = (($122) + 2)|0;
     $len = $123;
     $124 = $level;
     $125 = (($124) + 1)|0;
     $level = $125;
     $126 = $level;
     $127 = $j;
     $128 = $1;
     $129 = (($128) + ($127<<4)|0);
     $130 = (($129) + 4|0);
     HEAP32[$130>>2] = $126;
     $131 = $j;
     $132 = $1;
     $133 = (($132) + ($131<<4)|0);
     HEAP32[$133>>2] = 2;
     $134 = $j;
     $135 = $1;
     $136 = (($135) + ($134<<4)|0);
     $137 = (($136) + 8|0);
     HEAP32[$137>>2] = 2;
     $138 = $j;
     $139 = (($138) + 1)|0;
     $j = $139;
     $140 = $level;
     $141 = $j;
     $142 = $1;
     $143 = (($142) + ($141<<4)|0);
     $144 = (($143) + 4|0);
     HEAP32[$144>>2] = $140;
     $145 = $j;
     $146 = $1;
     $147 = (($146) + ($145<<4)|0);
     HEAP32[$147>>2] = 0;
     $148 = $j;
     $149 = $1;
     $150 = (($149) + ($148<<4)|0);
     $151 = (($150) + 8|0);
     HEAPF64[$151>>3] = 1.0;
     $152 = $4;
     $153 = $len;
     $154 = (($152) + ($153))|0;
     $155 = (($154) + 3)|0;
     $156 = $1;
     $157 = (($156) + ($155<<4)|0);
     $158 = $4;
     $159 = $1;
     $160 = (($159) + ($158<<4)|0);
     $161 = $2;
     $162 = HEAP32[$161>>2]|0;
     $163 = $4;
     $164 = (($162) - ($163))|0;
     $165 = $164<<4;
     _memmove(($157|0),($160|0),($165|0))|0;
     $166 = $len;
     $167 = (($166) + 3)|0;
     $168 = $2;
     $169 = HEAP32[$168>>2]|0;
     $170 = (($169) + ($167))|0;
     HEAP32[$168>>2] = $170;
     $171 = $4;
     $k = $171;
     $172 = $mlevel;
     $173 = $k;
     $174 = $1;
     $175 = (($174) + ($173<<4)|0);
     $176 = (($175) + 4|0);
     HEAP32[$176>>2] = $172;
     $177 = $k;
     $178 = $1;
     $179 = (($178) + ($177<<4)|0);
     HEAP32[$179>>2] = 2;
     $180 = $k;
     $181 = $1;
     $182 = (($181) + ($180<<4)|0);
     $183 = (($182) + 8|0);
     HEAP32[$183>>2] = 5;
     $184 = $k;
     $185 = (($184) + 1)|0;
     $k = $185;
     $186 = $k;
     $187 = $1;
     $188 = (($187) + ($186<<4)|0);
     $189 = $i;
     $190 = $1;
     $191 = (($190) + ($189<<4)|0);
     $192 = $len;
     $193 = $192<<4;
     _memmove(($188|0),($191|0),($193|0))|0;
     $194 = $len;
     $195 = $k;
     $196 = (($195) + ($194))|0;
     $k = $196;
     $197 = $mlevel;
     $198 = (($197) + 1)|0;
     $199 = $k;
     $200 = $1;
     $201 = (($200) + ($199<<4)|0);
     $202 = (($201) + 4|0);
     HEAP32[$202>>2] = $198;
     $203 = $k;
     $204 = $1;
     $205 = (($204) + ($203<<4)|0);
     HEAP32[$205>>2] = 2;
     $206 = $k;
     $207 = $1;
     $208 = (($207) + ($206<<4)|0);
     $209 = (($208) + 8|0);
     HEAP32[$209>>2] = 9;
     $210 = $k;
     $211 = (($210) + 1)|0;
     $k = $211;
     $212 = $mlevel;
     $213 = (($212) + 1)|0;
     $214 = $k;
     $215 = $1;
     $216 = (($215) + ($214<<4)|0);
     $217 = (($216) + 4|0);
     HEAP32[$217>>2] = $213;
     $218 = $k;
     $219 = $1;
     $220 = (($219) + ($218<<4)|0);
     HEAP32[$220>>2] = 0;
     $221 = $k;
     $222 = $1;
     $223 = (($222) + ($221<<4)|0);
     $224 = (($223) + 8|0);
     HEAPF64[$224>>3] = 1.0;
     $0 = 1;
     $227 = $0;
     STACKTOP = sp;return ($227|0);
    }
   }
   $0 = 0;
   $227 = $0;
   STACKTOP = sp;return ($227|0);
  }
 }
 $0 = 0;
 $227 = $0;
 STACKTOP = sp;return ($227|0);
}
function _laplace_sub($equation,$np,$loc,$eloc,$v) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $eloc = $eloc|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0;
 var $k = 0, $len = 0, $level = 0, $mlevel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $eloc;
 $5 = $v;
 $6 = $3;
 $7 = $1;
 $8 = (($7) + ($6<<4)|0);
 $9 = $4;
 $10 = $3;
 $11 = (($9) - ($10))|0;
 $12 = (_min_level($8,$11)|0);
 $13 = (($12) + 1)|0;
 $mlevel = $13;
 $14 = $3;
 $j = $14;
 while(1) {
  $15 = $j;
  $16 = $4;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $j;
  $19 = $1;
  $20 = (($19) + ($18<<4)|0);
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 2)|0;
  HEAP32[$21>>2] = $23;
  $24 = $j;
  $25 = (($24) + 1)|0;
  $j = $25;
 }
 $26 = $3;
 $i = $26;
 while(1) {
  $27 = $i;
  $28 = $4;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   label = 27;
   break;
  }
  $30 = $i;
  $31 = $1;
  $32 = (($31) + ($30<<4)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(1);
  if ($34) {
   $35 = $i;
   $36 = $1;
   $37 = (($36) + ($35<<4)|0);
   $38 = (($37) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $5;
   $41 = ($39|0)==($40|0);
   if ($41) {
    break;
   }
  }
  $247 = $i;
  $248 = (($247) + 2)|0;
  $i = $248;
 }
 if ((label|0) == 27) {
  $249 = $2;
  $250 = HEAP32[$249>>2]|0;
  $251 = (($250) + 2)|0;
  $252 = HEAP32[8>>2]|0;
  $253 = ($251|0)>($252|0);
  if ($253) {
   _error_huge();
  }
  $254 = $4;
  $255 = (($254) + 2)|0;
  $256 = $1;
  $257 = (($256) + ($255<<4)|0);
  $258 = $4;
  $259 = $1;
  $260 = (($259) + ($258<<4)|0);
  $261 = $2;
  $262 = HEAP32[$261>>2]|0;
  $263 = $4;
  $264 = (($262) - ($263))|0;
  $265 = $264<<4;
  _memmove(($257|0),($260|0),($265|0))|0;
  $266 = $2;
  $267 = HEAP32[$266>>2]|0;
  $268 = (($267) + 2)|0;
  HEAP32[$266>>2] = $268;
  $269 = $mlevel;
  $270 = $4;
  $271 = $1;
  $272 = (($271) + ($270<<4)|0);
  $273 = (($272) + 4|0);
  HEAP32[$273>>2] = $269;
  $274 = $4;
  $275 = $1;
  $276 = (($275) + ($274<<4)|0);
  HEAP32[$276>>2] = 2;
  $277 = $4;
  $278 = $1;
  $279 = (($278) + ($277<<4)|0);
  $280 = (($279) + 8|0);
  HEAP32[$280>>2] = 5;
  $281 = $4;
  $282 = (($281) + 1)|0;
  $4 = $282;
  $283 = $mlevel;
  $284 = $4;
  $285 = $1;
  $286 = (($285) + ($284<<4)|0);
  $287 = (($286) + 4|0);
  HEAP32[$287>>2] = $283;
  $288 = $4;
  $289 = $1;
  $290 = (($289) + ($288<<4)|0);
  HEAP32[$290>>2] = 1;
  $291 = $5;
  $292 = $4;
  $293 = $1;
  $294 = (($293) + ($292<<4)|0);
  $295 = (($294) + 8|0);
  HEAP32[$295>>2] = $291;
  $0 = 1;
  $296 = $0;
  STACKTOP = sp;return ($296|0);
 }
 $42 = $i;
 $43 = (($42) + 1)|0;
 $i = $43;
 $44 = $i;
 $45 = $4;
 $46 = ($44|0)>=($45|0);
 if (!($46)) {
  $47 = $i;
  $48 = $1;
  $49 = (($48) + ($47<<4)|0);
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(8);
  if (!($52)) {
   $53 = $i;
   $54 = $1;
   $55 = (($54) + ($53<<4)|0);
   $56 = (($55) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $level = $57;
   $58 = $i;
   $59 = (($58) + 1)|0;
   $i = $59;
   $60 = $i;
   $j = $60;
   while(1) {
    $61 = $j;
    $62 = $4;
    $63 = ($61|0)<($62|0);
    if ($63) {
     $64 = $j;
     $65 = $1;
     $66 = (($65) + ($64<<4)|0);
     $67 = (($66) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $level;
     $70 = ($68|0)>=($69|0);
     $297 = $70;
    } else {
     $297 = 0;
    }
    if (!($297)) {
     break;
    }
    $71 = $j;
    $72 = $1;
    $73 = (($72) + ($71<<4)|0);
    $74 = (($73) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + 1)|0;
    HEAP32[$74>>2] = $76;
    $77 = $j;
    $78 = (($77) + 1)|0;
    $j = $78;
   }
   $79 = $j;
   $80 = $i;
   $81 = (($79) - ($80))|0;
   $len = $81;
   $82 = $2;
   $83 = HEAP32[$82>>2]|0;
   $84 = $len;
   $85 = (($83) + ($84))|0;
   $86 = (($85) + 7)|0;
   $87 = HEAP32[8>>2]|0;
   $88 = ($86|0)>($87|0);
   if ($88) {
    _error_huge();
   }
   $89 = $j;
   $90 = (($89) + 4)|0;
   $91 = $1;
   $92 = (($91) + ($90<<4)|0);
   $93 = $j;
   $94 = $1;
   $95 = (($94) + ($93<<4)|0);
   $96 = $2;
   $97 = HEAP32[$96>>2]|0;
   $98 = $j;
   $99 = (($97) - ($98))|0;
   $100 = $99<<4;
   _memmove(($92|0),($95|0),($100|0))|0;
   $101 = $2;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($102) + 4)|0;
   HEAP32[$101>>2] = $103;
   $104 = $4;
   $105 = (($104) + 4)|0;
   $4 = $105;
   $106 = $level;
   $107 = (($106) + 1)|0;
   $level = $107;
   $108 = $level;
   $109 = $j;
   $110 = $1;
   $111 = (($110) + ($109<<4)|0);
   $112 = (($111) + 4|0);
   HEAP32[$112>>2] = $108;
   $113 = $j;
   $114 = $1;
   $115 = (($114) + ($113<<4)|0);
   HEAP32[$115>>2] = 2;
   $116 = $j;
   $117 = $1;
   $118 = (($117) + ($116<<4)|0);
   $119 = (($118) + 8|0);
   HEAP32[$119>>2] = 1;
   $120 = $j;
   $121 = (($120) + 1)|0;
   $j = $121;
   $122 = $level;
   $123 = $j;
   $124 = $1;
   $125 = (($124) + ($123<<4)|0);
   $126 = (($125) + 4|0);
   HEAP32[$126>>2] = $122;
   $127 = $j;
   $128 = $1;
   $129 = (($128) + ($127<<4)|0);
   HEAP32[$129>>2] = 0;
   $130 = $j;
   $131 = $1;
   $132 = (($131) + ($130<<4)|0);
   $133 = (($132) + 8|0);
   HEAPF64[$133>>3] = 1.0;
   $134 = $j;
   $135 = (($134) + 1)|0;
   $j = $135;
   $136 = $i;
   $k = $136;
   while(1) {
    $137 = $k;
    $138 = $j;
    $139 = ($137|0)<($138|0);
    if (!($139)) {
     break;
    }
    $140 = $k;
    $141 = $1;
    $142 = (($141) + ($140<<4)|0);
    $143 = (($142) + 4|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + 1)|0;
    HEAP32[$143>>2] = $145;
    $146 = $k;
    $147 = (($146) + 1)|0;
    $k = $147;
   }
   $148 = $level;
   $149 = $j;
   $150 = $1;
   $151 = (($150) + ($149<<4)|0);
   $152 = (($151) + 4|0);
   HEAP32[$152>>2] = $148;
   $153 = $j;
   $154 = $1;
   $155 = (($154) + ($153<<4)|0);
   HEAP32[$155>>2] = 2;
   $156 = $j;
   $157 = $1;
   $158 = (($157) + ($156<<4)|0);
   $159 = (($158) + 8|0);
   HEAP32[$159>>2] = 4;
   $160 = $j;
   $161 = (($160) + 1)|0;
   $j = $161;
   $162 = $level;
   $163 = $j;
   $164 = $1;
   $165 = (($164) + ($163<<4)|0);
   $166 = (($165) + 4|0);
   HEAP32[$166>>2] = $162;
   $167 = $j;
   $168 = $1;
   $169 = (($168) + ($167<<4)|0);
   HEAP32[$169>>2] = 0;
   $170 = $j;
   $171 = $1;
   $172 = (($171) + ($170<<4)|0);
   $173 = (($172) + 8|0);
   HEAPF64[$173>>3] = -1.0;
   $174 = $4;
   $175 = $len;
   $176 = (($174) + ($175))|0;
   $177 = (($176) + 3)|0;
   $178 = $1;
   $179 = (($178) + ($177<<4)|0);
   $180 = $4;
   $181 = $1;
   $182 = (($181) + ($180<<4)|0);
   $183 = $2;
   $184 = HEAP32[$183>>2]|0;
   $185 = $4;
   $186 = (($184) - ($185))|0;
   $187 = $186<<4;
   _memmove(($179|0),($182|0),($187|0))|0;
   $188 = $len;
   $189 = (($188) + 3)|0;
   $190 = $2;
   $191 = HEAP32[$190>>2]|0;
   $192 = (($191) + ($189))|0;
   HEAP32[$190>>2] = $192;
   $193 = $4;
   $k = $193;
   $194 = $mlevel;
   $195 = $k;
   $196 = $1;
   $197 = (($196) + ($195<<4)|0);
   $198 = (($197) + 4|0);
   HEAP32[$198>>2] = $194;
   $199 = $k;
   $200 = $1;
   $201 = (($200) + ($199<<4)|0);
   HEAP32[$201>>2] = 2;
   $202 = $k;
   $203 = $1;
   $204 = (($203) + ($202<<4)|0);
   $205 = (($204) + 8|0);
   HEAP32[$205>>2] = 4;
   $206 = $k;
   $207 = (($206) + 1)|0;
   $k = $207;
   $208 = $k;
   $209 = $1;
   $210 = (($209) + ($208<<4)|0);
   $211 = $i;
   $212 = $1;
   $213 = (($212) + ($211<<4)|0);
   $214 = $len;
   $215 = $214<<4;
   _memmove(($210|0),($213|0),($215|0))|0;
   $216 = $len;
   $217 = $k;
   $218 = (($217) + ($216))|0;
   $k = $218;
   $219 = $mlevel;
   $220 = (($219) + 1)|0;
   $221 = $k;
   $222 = $1;
   $223 = (($222) + ($221<<4)|0);
   $224 = (($223) + 4|0);
   HEAP32[$224>>2] = $220;
   $225 = $k;
   $226 = $1;
   $227 = (($226) + ($225<<4)|0);
   HEAP32[$227>>2] = 2;
   $228 = $k;
   $229 = $1;
   $230 = (($229) + ($228<<4)|0);
   $231 = (($230) + 8|0);
   HEAP32[$231>>2] = 9;
   $232 = $k;
   $233 = (($232) + 1)|0;
   $k = $233;
   $234 = $mlevel;
   $235 = (($234) + 1)|0;
   $236 = $k;
   $237 = $1;
   $238 = (($237) + ($236<<4)|0);
   $239 = (($238) + 4|0);
   HEAP32[$239>>2] = $235;
   $240 = $k;
   $241 = $1;
   $242 = (($241) + ($240<<4)|0);
   HEAP32[$242>>2] = 0;
   $243 = $k;
   $244 = $1;
   $245 = (($244) + ($243<<4)|0);
   $246 = (($245) + 8|0);
   HEAPF64[$246>>3] = 1.0;
   $0 = 1;
   $296 = $0;
   STACKTOP = sp;return ($296|0);
  }
 }
 $0 = 0;
 $296 = $0;
 STACKTOP = sp;return ($296|0);
}
function _nintegrate_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp_start = 0, $dest = 0, $ep = 0, $first_size = 0, $i = 0, $i1 = 0, $i2 = 0, $iterations = 0, $j = 0, $k = 0;
 var $len = 0, $level = 0, $n1 = 0, $np = 0, $nps = 0, $singularity = 0, $solved = 0, $source = 0, $trap_flag = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 80|0;
 $v = sp + 76|0;
 $n1 = sp + 12|0;
 HEAP32[$1>>2] = $cp;
 HEAP32[$v>>2] = 0;
 $iterations = 1000;
 $first_size = 0;
 $2 = HEAP32[$1>>2]|0;
 $cp_start = $2;
 $3 = (_current_not_defined()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $628 = $0;
  STACKTOP = sp;return ($628|0);
 }
 HEAP32[3712>>2] = 0;
 HEAP32[3720>>2] = 0;
 $5 = HEAP32[472>>2]|0;
 $6 = (_solved_equation($5)|0);
 $solved = $6;
 $7 = (_next_espace()|0);
 $i = $7;
 $8 = HEAP32[472>>2]|0;
 $9 = (2880 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $solved;
  $13 = ($12|0)!=(0);
  if (!($13)) {
   _warning(793400);
  }
  $14 = HEAP32[472>>2]|0;
  $15 = (1280 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $source = $16;
  $17 = HEAP32[472>>2]|0;
  $18 = (2880 + ($17<<2)|0);
  $nps = $18;
  $19 = $i;
  $20 = (1280 + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $dest = $21;
  $22 = $i;
  $23 = (2880 + ($22<<2)|0);
  $np = $23;
 } else {
  $24 = HEAP32[472>>2]|0;
  $25 = (480 + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $source = $26;
  $27 = HEAP32[472>>2]|0;
  $28 = (2080 + ($27<<2)|0);
  $nps = $28;
  $29 = $i;
  $30 = (480 + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $dest = $31;
  $32 = $i;
  $33 = (2080 + ($32<<2)|0);
  $np = $33;
 }
 $34 = HEAP32[$1>>2]|0;
 $35 = (_strncasecmp($34,793672,4)|0);
 $36 = ($35|0)==(0);
 $37 = $36&1;
 $trap_flag = $37;
 $38 = $trap_flag;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = HEAP32[$1>>2]|0;
  $41 = (_skip_param($40)|0);
  HEAP32[$1>>2] = $41;
 }
 $42 = HEAP32[$1>>2]|0;
 $43 = HEAP8[$42>>0]|0;
 $44 = ($43<<24>>24)!=(0);
 do {
  if ($44) {
   $45 = HEAP32[$1>>2]|0;
   $46 = (_parse_var2($v,$45)|0);
   HEAP32[$1>>2] = $46;
   $47 = HEAP32[$1>>2]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    $0 = 0;
    $628 = $0;
    STACKTOP = sp;return ($628|0);
   }
   $49 = HEAP32[$1>>2]|0;
   $50 = HEAP8[$49>>0]|0;
   $51 = ($50<<24>>24)!=(0);
   if ($51) {
    $52 = HEAP32[$1>>2]|0;
    $53 = (_decstrtol($52,$1)|0);
    $iterations = $53;
   }
   $54 = $iterations;
   $55 = ($54|0)<=(0);
   if (!($55)) {
    $56 = $iterations;
    $57 = (($56|0) % 2)&-1;
    $58 = ($57|0)!=(0);
    if (!($58)) {
     break;
    }
   }
   _error(793680);
   $0 = 0;
   $628 = $0;
   STACKTOP = sp;return ($628|0);
  }
 } while(0);
 $59 = HEAP32[$1>>2]|0;
 $60 = HEAP8[$59>>0]|0;
 $61 = ($60<<24>>24)!=(0);
 do {
  if ($61) {
   $62 = HEAP32[$1>>2]|0;
   $63 = $cp_start;
   $64 = $62;
   $65 = $63;
   $66 = (($64) - ($65))|0;
   $67 = HEAP32[41240>>2]|0;
   $68 = (($67) + ($66))|0;
   HEAP32[41240>>2] = $68;
   $69 = HEAP32[3680>>2]|0;
   $70 = HEAP32[$1>>2]|0;
   $71 = (_parse_expr($69,3712,$70,0)|0);
   HEAP32[$1>>2] = $71;
   $72 = HEAP32[$1>>2]|0;
   $73 = ($72|0)==(0|0);
   if (!($73)) {
    $74 = HEAP32[3712>>2]|0;
    $75 = ($74|0)<=(0);
    if (!($75)) {
     break;
    }
   }
   $0 = 0;
   $628 = $0;
   STACKTOP = sp;return ($628|0);
  }
 } while(0);
 $76 = HEAP32[$1>>2]|0;
 $77 = HEAP8[$76>>0]|0;
 $78 = ($77<<24>>24)!=(0);
 do {
  if ($78) {
   $79 = HEAP32[$1>>2]|0;
   $cp_start = $79;
   $80 = HEAP32[$1>>2]|0;
   $81 = (_skip_comma_space($80)|0);
   HEAP32[$1>>2] = $81;
   $82 = HEAP32[$1>>2]|0;
   $83 = $cp_start;
   $84 = $82;
   $85 = $83;
   $86 = (($84) - ($85))|0;
   $87 = HEAP32[41240>>2]|0;
   $88 = (($87) + ($86))|0;
   HEAP32[41240>>2] = $88;
   $89 = HEAP32[3688>>2]|0;
   $90 = HEAP32[$1>>2]|0;
   $91 = (_parse_expr($89,3720,$90,0)|0);
   HEAP32[$1>>2] = $91;
   $92 = HEAP32[$1>>2]|0;
   $93 = ($92|0)==(0|0);
   if (!($93)) {
    $94 = HEAP32[$1>>2]|0;
    $95 = (_extra_characters($94)|0);
    $96 = ($95|0)!=(0);
    if (!($96)) {
     $97 = HEAP32[3720>>2]|0;
     $98 = ($97|0)<=(0);
     if (!($98)) {
      break;
     }
    }
   }
   $0 = 0;
   $628 = $0;
   STACKTOP = sp;return ($628|0);
  }
 } while(0);
 HEAP32[41304>>2] = 0;
 $99 = HEAP32[$v>>2]|0;
 $100 = ($99|0)==(0);
 do {
  if ($100) {
   $101 = (_prompt_var($v)|0);
   $102 = ($101|0)!=(0);
   if ($102) {
    break;
   }
   $0 = 0;
   $628 = $0;
   STACKTOP = sp;return ($628|0);
  }
 } while(0);
 $singularity = 0;
 $j = 1;
 while(1) {
  $103 = $j;
  $104 = $nps;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($103|0)<($105|0);
  if (!($106)) {
   break;
  }
  $107 = $j;
  $108 = $source;
  $109 = (($108) + ($107<<4)|0);
  $110 = (($109) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)==(5);
  if ($112) {
   $113 = $j;
   $114 = (($113) + 1)|0;
   $k = $114;
   while(1) {
    $115 = $k;
    $116 = $nps;
    $117 = HEAP32[$116>>2]|0;
    $118 = ($115|0)<($117|0);
    if ($118) {
     $119 = $k;
     $120 = $source;
     $121 = (($120) + ($119<<4)|0);
     $122 = (($121) + 4|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $j;
     $125 = $source;
     $126 = (($125) + ($124<<4)|0);
     $127 = (($126) + 4|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($123|0)>=($128|0);
     $629 = $129;
    } else {
     $629 = 0;
    }
    if (!($629)) {
     break;
    }
    $130 = $k;
    $131 = $source;
    $132 = (($131) + ($130<<4)|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)==(1);
    if ($134) {
     $135 = $k;
     $136 = $source;
     $137 = (($136) + ($135<<4)|0);
     $138 = (($137) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = HEAP32[$v>>2]|0;
     $141 = ($139|0)==($140|0);
     if ($141) {
      $singularity = 1;
     }
    }
    $142 = $k;
    $143 = $source;
    $144 = (($143) + ($142<<4)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(2);
    if ($146) {
     $147 = $k;
     $148 = $source;
     $149 = (($148) + ($147<<4)|0);
     $150 = (($149) + 4|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = $j;
     $153 = $source;
     $154 = (($153) + ($152<<4)|0);
     $155 = (($154) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($151|0)==($156|0);
     if ($157) {
      label = 46;
      break;
     }
    }
    $158 = $k;
    $159 = (($158) + 1)|0;
    $k = $159;
   }
   if ((label|0) == 46) {
    label = 0;
   }
  }
  $160 = $j;
  $161 = (($160) + 2)|0;
  $j = $161;
 }
 $162 = $singularity;
 $163 = ($162|0)!=(0);
 if ($163) {
  _warning(793736);
 }
 $164 = HEAP32[3712>>2]|0;
 $165 = ($164|0)==(0);
 do {
  if ($165) {
   (_my_strlcpy(35984,793520,80)|0);
   $166 = HEAP32[3680>>2]|0;
   $167 = (_get_expr($166,3712)|0);
   $168 = ($167|0)!=(0);
   if ($168) {
    break;
   }
   $0 = 0;
   $628 = $0;
   STACKTOP = sp;return ($628|0);
  }
 } while(0);
 $169 = HEAP32[3680>>2]|0;
 (_subst_constants($169,3712)|0);
 $170 = HEAP32[3680>>2]|0;
 (_simp_loop($170,3712)|0);
 $171 = HEAP32[3680>>2]|0;
 $172 = HEAP32[3712>>2]|0;
 $173 = (_exp_contains_infinity($171,$172)|0);
 $174 = ($173|0)!=(0);
 if ($174) {
  _error(793808);
  $0 = 0;
  $628 = $0;
  STACKTOP = sp;return ($628|0);
 }
 $175 = HEAP32[3720>>2]|0;
 $176 = ($175|0)==(0);
 do {
  if ($176) {
   (_my_strlcpy(35984,793544,80)|0);
   $177 = HEAP32[3688>>2]|0;
   $178 = (_get_expr($177,3720)|0);
   $179 = ($178|0)!=(0);
   if ($179) {
    break;
   }
   $0 = 0;
   $628 = $0;
   STACKTOP = sp;return ($628|0);
  }
 } while(0);
 $180 = HEAP32[3688>>2]|0;
 (_subst_constants($180,3720)|0);
 $181 = HEAP32[3688>>2]|0;
 (_simp_loop($181,3720)|0);
 $182 = HEAP32[3688>>2]|0;
 $183 = HEAP32[3720>>2]|0;
 $184 = (_exp_contains_infinity($182,$183)|0);
 $185 = ($184|0)!=(0);
 if ($185) {
  _error(793872);
  $0 = 0;
  $628 = $0;
  STACKTOP = sp;return ($628|0);
 }
 $186 = HEAP32[3712>>2]|0;
 $187 = HEAP32[3720>>2]|0;
 $188 = (($186) + ($187))|0;
 $189 = (($188) + 3)|0;
 $190 = HEAP32[8>>2]|0;
 $191 = ($189|0)>($190|0);
 if ($191) {
  _error_huge();
 }
 $192 = $source;
 $193 = $nps;
 (_subst_constants($192,$193)|0);
 $194 = $source;
 $195 = $nps;
 (_simp_loop($194,$195)|0);
 $j = 0;
 while(1) {
  $196 = $j;
  $197 = HEAP32[3720>>2]|0;
  $198 = ($196|0)<($197|0);
  if (!($198)) {
   break;
  }
  $199 = $j;
  $200 = HEAP32[3688>>2]|0;
  $201 = (($200) + ($199<<4)|0);
  $202 = (($201) + 4|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) + 2)|0;
  HEAP32[$202>>2] = $204;
  $205 = $j;
  $206 = (($205) + 1)|0;
  $j = $206;
 }
 $207 = HEAP32[3720>>2]|0;
 $208 = HEAP32[3688>>2]|0;
 $209 = (($208) + ($207<<4)|0);
 $210 = (($209) + 4|0);
 HEAP32[$210>>2] = 2;
 $211 = HEAP32[3720>>2]|0;
 $212 = HEAP32[3688>>2]|0;
 $213 = (($212) + ($211<<4)|0);
 HEAP32[$213>>2] = 2;
 $214 = HEAP32[3720>>2]|0;
 $215 = HEAP32[3688>>2]|0;
 $216 = (($215) + ($214<<4)|0);
 $217 = (($216) + 8|0);
 HEAP32[$217>>2] = 2;
 $218 = HEAP32[3720>>2]|0;
 $219 = (($218) + 1)|0;
 HEAP32[3720>>2] = $219;
 $220 = HEAP32[3720>>2]|0;
 $j = $220;
 $221 = HEAP32[3720>>2]|0;
 $222 = HEAP32[3688>>2]|0;
 $223 = (($222) + ($221<<4)|0);
 $224 = HEAP32[3680>>2]|0;
 $225 = HEAP32[3712>>2]|0;
 $226 = $225<<4;
 _memmove(($223|0),($224|0),($226|0))|0;
 $227 = HEAP32[3712>>2]|0;
 $228 = HEAP32[3720>>2]|0;
 $229 = (($228) + ($227))|0;
 HEAP32[3720>>2] = $229;
 while(1) {
  $230 = $j;
  $231 = HEAP32[3720>>2]|0;
  $232 = ($230|0)<($231|0);
  if (!($232)) {
   break;
  }
  $233 = $j;
  $234 = HEAP32[3688>>2]|0;
  $235 = (($234) + ($233<<4)|0);
  $236 = (($235) + 4|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (($237) + 2)|0;
  HEAP32[$236>>2] = $238;
  $239 = $j;
  $240 = (($239) + 1)|0;
  $j = $240;
 }
 $241 = HEAP32[3720>>2]|0;
 $242 = HEAP32[3688>>2]|0;
 $243 = (($242) + ($241<<4)|0);
 $244 = (($243) + 4|0);
 HEAP32[$244>>2] = 1;
 $245 = HEAP32[3720>>2]|0;
 $246 = HEAP32[3688>>2]|0;
 $247 = (($246) + ($245<<4)|0);
 HEAP32[$247>>2] = 2;
 $248 = HEAP32[3720>>2]|0;
 $249 = HEAP32[3688>>2]|0;
 $250 = (($249) + ($248<<4)|0);
 $251 = (($250) + 8|0);
 HEAP32[$251>>2] = 5;
 $252 = HEAP32[3720>>2]|0;
 $253 = (($252) + 1)|0;
 HEAP32[3720>>2] = $253;
 $254 = HEAP32[3720>>2]|0;
 $255 = HEAP32[3688>>2]|0;
 $256 = (($255) + ($254<<4)|0);
 $257 = (($256) + 4|0);
 HEAP32[$257>>2] = 1;
 $258 = HEAP32[3720>>2]|0;
 $259 = HEAP32[3688>>2]|0;
 $260 = (($259) + ($258<<4)|0);
 HEAP32[$260>>2] = 0;
 $261 = $iterations;
 $262 = (+($261|0));
 $263 = HEAP32[3720>>2]|0;
 $264 = HEAP32[3688>>2]|0;
 $265 = (($264) + ($263<<4)|0);
 $266 = (($265) + 8|0);
 HEAPF64[$266>>3] = $262;
 $267 = HEAP32[3720>>2]|0;
 $268 = (($267) + 1)|0;
 HEAP32[3720>>2] = $268;
 $269 = HEAP32[3688>>2]|0;
 (_simp_loop($269,3720)|0);
 $270 = $dest;
 ;HEAP32[$270+0>>2]=HEAP32[3736+0>>2]|0;HEAP32[$270+4>>2]=HEAP32[3736+4>>2]|0;HEAP32[$270+8>>2]=HEAP32[3736+8>>2]|0;HEAP32[$270+12>>2]=HEAP32[3736+12>>2]|0;
 HEAP32[$n1>>2] = 1;
 $j = 0;
 while(1) {
  $271 = $j;
  $272 = $iterations;
  $273 = ($271|0)<=($272|0);
  if (!($273)) {
   label = 128;
   break;
  }
  $274 = HEAP32[$n1>>2]|0;
  $275 = (($274) + 1)|0;
  $276 = $nps;
  $277 = HEAP32[$276>>2]|0;
  $278 = (($275) + ($277))|0;
  $279 = HEAP32[8>>2]|0;
  $280 = ($278|0)>($279|0);
  if ($280) {
   _error_huge();
  }
  $k = 0;
  while(1) {
   $281 = $k;
   $282 = HEAP32[$n1>>2]|0;
   $283 = ($281|0)<($282|0);
   if (!($283)) {
    break;
   }
   $284 = $k;
   $285 = $dest;
   $286 = (($285) + ($284<<4)|0);
   $287 = (($286) + 4|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (($288) + 1)|0;
   HEAP32[$287>>2] = $289;
   $290 = $k;
   $291 = (($290) + 1)|0;
   $k = $291;
  }
  $292 = HEAP32[$n1>>2]|0;
  $293 = $dest;
  $294 = (($293) + ($292<<4)|0);
  $ep = $294;
  $295 = $ep;
  $296 = (($295) + 4|0);
  HEAP32[$296>>2] = 1;
  $297 = $ep;
  HEAP32[$297>>2] = 2;
  $298 = $ep;
  $299 = (($298) + 8|0);
  HEAP32[$299>>2] = 1;
  $300 = HEAP32[$n1>>2]|0;
  $301 = (($300) + 1)|0;
  HEAP32[$n1>>2] = $301;
  $302 = HEAP32[$n1>>2]|0;
  $i1 = $302;
  $303 = $i1;
  $304 = $dest;
  $305 = (($304) + ($303<<4)|0);
  $306 = $source;
  $307 = $nps;
  $308 = HEAP32[$307>>2]|0;
  $309 = $308<<4;
  _memmove(($305|0),($306|0),($309|0))|0;
  $310 = $nps;
  $311 = HEAP32[$310>>2]|0;
  $312 = HEAP32[$n1>>2]|0;
  $313 = (($312) + ($311))|0;
  HEAP32[$n1>>2] = $313;
  $314 = $i1;
  $k = $314;
  while(1) {
   $315 = $k;
   $316 = HEAP32[$n1>>2]|0;
   $317 = ($315|0)<($316|0);
   if (!($317)) {
    break;
   }
   $318 = $k;
   $319 = $dest;
   $320 = (($319) + ($318<<4)|0);
   $321 = (($320) + 4|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = (($322) + 2)|0;
   HEAP32[$321>>2] = $323;
   $324 = $k;
   $325 = (($324) + 1)|0;
   $k = $325;
  }
  $326 = $i1;
  $k = $326;
  while(1) {
   $327 = $k;
   $328 = HEAP32[$n1>>2]|0;
   $329 = ($327|0)<($328|0);
   if (!($329)) {
    break;
   }
   $330 = $k;
   $331 = $dest;
   $332 = (($331) + ($330<<4)|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = ($333|0)==(1);
   do {
    if ($334) {
     $335 = $k;
     $336 = $dest;
     $337 = (($336) + ($335<<4)|0);
     $338 = (($337) + 8|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = HEAP32[$v>>2]|0;
     $341 = ($339|0)==($340|0);
     if (!($341)) {
      break;
     }
     $342 = $k;
     $343 = $dest;
     $344 = (($343) + ($342<<4)|0);
     $345 = (($344) + 4|0);
     $346 = HEAP32[$345>>2]|0;
     $level = $346;
     $347 = HEAP32[3712>>2]|0;
     $348 = (($347) + 2)|0;
     $349 = HEAP32[3720>>2]|0;
     $350 = (($348) + ($349))|0;
     $i2 = $350;
     $351 = HEAP32[$n1>>2]|0;
     $352 = $i2;
     $353 = (($351) + ($352))|0;
     $354 = HEAP32[8>>2]|0;
     $355 = ($353|0)>($354|0);
     if ($355) {
      _error_huge();
     }
     $356 = $k;
     $357 = (($356) + 1)|0;
     $358 = $i2;
     $359 = (($357) + ($358))|0;
     $360 = $dest;
     $361 = (($360) + ($359<<4)|0);
     $362 = $k;
     $363 = (($362) + 1)|0;
     $364 = $dest;
     $365 = (($364) + ($363<<4)|0);
     $366 = HEAP32[$n1>>2]|0;
     $367 = $k;
     $368 = (($367) + 1)|0;
     $369 = (($366) - ($368))|0;
     $370 = $369<<4;
     _memmove(($361|0),($365|0),($370|0))|0;
     $371 = $i2;
     $372 = HEAP32[$n1>>2]|0;
     $373 = (($372) + ($371))|0;
     HEAP32[$n1>>2] = $373;
     $374 = $k;
     $i2 = $374;
     $375 = $k;
     $376 = $dest;
     $377 = (($376) + ($375<<4)|0);
     $378 = HEAP32[3680>>2]|0;
     $379 = HEAP32[3712>>2]|0;
     $380 = $379<<4;
     _memmove(($377|0),($378|0),($380|0))|0;
     $381 = HEAP32[3712>>2]|0;
     $382 = $k;
     $383 = (($382) + ($381))|0;
     $k = $383;
     $384 = $level;
     $385 = (($384) + 1)|0;
     $level = $385;
     while(1) {
      $386 = $i2;
      $387 = $k;
      $388 = ($386|0)<($387|0);
      if (!($388)) {
       break;
      }
      $389 = $level;
      $390 = $i2;
      $391 = $dest;
      $392 = (($391) + ($390<<4)|0);
      $393 = (($392) + 4|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = (($394) + ($389))|0;
      HEAP32[$393>>2] = $395;
      $396 = $i2;
      $397 = (($396) + 1)|0;
      $i2 = $397;
     }
     $398 = $k;
     $399 = $dest;
     $400 = (($399) + ($398<<4)|0);
     $ep = $400;
     $401 = $level;
     $402 = $ep;
     $403 = (($402) + 4|0);
     HEAP32[$403>>2] = $401;
     $404 = $ep;
     HEAP32[$404>>2] = 2;
     $405 = $ep;
     $406 = (($405) + 8|0);
     HEAP32[$406>>2] = 1;
     $407 = $ep;
     $408 = (($407) + 16|0);
     $ep = $408;
     $409 = $level;
     $410 = (($409) + 1)|0;
     $level = $410;
     $411 = $level;
     $412 = $ep;
     $413 = (($412) + 4|0);
     HEAP32[$413>>2] = $411;
     $414 = $ep;
     HEAP32[$414>>2] = 0;
     $415 = $j;
     $416 = (+($415|0));
     $417 = $ep;
     $418 = (($417) + 8|0);
     HEAPF64[$418>>3] = $416;
     $419 = $ep;
     $420 = (($419) + 16|0);
     $ep = $420;
     $421 = $level;
     $422 = $ep;
     $423 = (($422) + 4|0);
     HEAP32[$423>>2] = $421;
     $424 = $ep;
     HEAP32[$424>>2] = 2;
     $425 = $ep;
     $426 = (($425) + 8|0);
     HEAP32[$426>>2] = 4;
     $427 = $k;
     $428 = (($427) + 3)|0;
     $k = $428;
     $429 = $k;
     $i2 = $429;
     $430 = $k;
     $431 = $dest;
     $432 = (($431) + ($430<<4)|0);
     $433 = HEAP32[3688>>2]|0;
     $434 = HEAP32[3720>>2]|0;
     $435 = $434<<4;
     _memmove(($432|0),($433|0),($435|0))|0;
     $436 = HEAP32[3720>>2]|0;
     $437 = $k;
     $438 = (($437) + ($436))|0;
     $k = $438;
     while(1) {
      $439 = $i2;
      $440 = $k;
      $441 = ($439|0)<($440|0);
      if (!($441)) {
       break;
      }
      $442 = $level;
      $443 = $i2;
      $444 = $dest;
      $445 = (($444) + ($443<<4)|0);
      $446 = (($445) + 4|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = (($447) + ($442))|0;
      HEAP32[$446>>2] = $448;
      $449 = $i2;
      $450 = (($449) + 1)|0;
      $i2 = $450;
     }
     $451 = $k;
     $452 = (($451) + -1)|0;
     $k = $452;
    }
   } while(0);
   $453 = $k;
   $454 = (($453) + 2)|0;
   $k = $454;
  }
  $455 = $j;
  $456 = ($455|0)>(0);
  if ($456) {
   $457 = $j;
   $458 = $iterations;
   $459 = ($457|0)<($458|0);
   if ($459) {
    $460 = HEAP32[$n1>>2]|0;
    $461 = (($460) + 2)|0;
    $462 = HEAP32[8>>2]|0;
    $463 = ($461|0)>($462|0);
    if ($463) {
     _error_huge();
    }
    $464 = HEAP32[$n1>>2]|0;
    $465 = $dest;
    $466 = (($465) + ($464<<4)|0);
    $ep = $466;
    $467 = $ep;
    $468 = (($467) + 4|0);
    HEAP32[$468>>2] = 2;
    $469 = $ep;
    HEAP32[$469>>2] = 2;
    $470 = $ep;
    $471 = (($470) + 8|0);
    HEAP32[$471>>2] = 4;
    $472 = $ep;
    $473 = (($472) + 16|0);
    $ep = $473;
    $474 = $ep;
    $475 = (($474) + 4|0);
    HEAP32[$475>>2] = 2;
    $476 = $ep;
    HEAP32[$476>>2] = 0;
    $477 = $trap_flag;
    $478 = ($477|0)!=(0);
    if ($478) {
     $479 = $ep;
     $480 = (($479) + 8|0);
     HEAPF64[$480>>3] = 2.0;
    } else {
     $481 = $j;
     $482 = $481 & 1;
     $483 = ($482|0)==(1);
     if ($483) {
      $484 = $ep;
      $485 = (($484) + 8|0);
      HEAPF64[$485>>3] = 4.0;
     } else {
      $486 = $ep;
      $487 = (($486) + 8|0);
      HEAPF64[$487>>3] = 2.0;
     }
    }
    $488 = HEAP32[$n1>>2]|0;
    $489 = (($488) + 2)|0;
    HEAP32[$n1>>2] = $489;
   }
  }
  HEAP32[41264>>2] = 1;
  $490 = $dest;
  _elim_loop($490,$n1);
  $491 = $dest;
  (_ufactor($491,$n1)|0);
  $492 = $dest;
  _simp_divide($492,$n1);
  $493 = $dest;
  (_factor_imaginary($493,$n1)|0);
  HEAP32[41264>>2] = 0;
  $494 = $dest;
  $495 = HEAP32[$n1>>2]|0;
  $496 = (_exp_contains_infinity($494,$495)|0);
  $497 = ($496|0)!=(0);
  if ($497) {
   label = 117;
   break;
  }
  $498 = $j;
  if ((($498|0) == 0)) {
  } else if ((($498|0) == 1)) {
   $499 = HEAP32[$n1>>2]|0;
   $first_size = $499;
   $500 = $first_size;
   $501 = ($500|0)<(4);
   if ($501) {
    $first_size = 4;
   }
  } else {
   $502 = HEAP32[$n1>>2]|0;
   $503 = (($502|0) / 8)&-1;
   $504 = $first_size;
   $505 = ($503|0)>=($504|0);
   if ($505) {
    label = 124;
    break;
   }
  }
  $506 = $j;
  $507 = (($506) + 1)|0;
  $j = $507;
 }
 if ((label|0) == 117) {
  _error(793936);
  $0 = 0;
  $628 = $0;
  STACKTOP = sp;return ($628|0);
 }
 else if ((label|0) == 124) {
  _error(794016);
  $0 = 0;
  $628 = $0;
  STACKTOP = sp;return ($628|0);
 }
 else if ((label|0) == 128) {
  $508 = HEAP32[$n1>>2]|0;
  $509 = (($508) + 3)|0;
  $510 = HEAP32[3720>>2]|0;
  $511 = (($509) + ($510))|0;
  $512 = HEAP32[8>>2]|0;
  $513 = ($511|0)>($512|0);
  if ($513) {
   _error_huge();
  }
  $k = 0;
  while(1) {
   $514 = $k;
   $515 = HEAP32[$n1>>2]|0;
   $516 = ($514|0)<($515|0);
   if (!($516)) {
    break;
   }
   $517 = $k;
   $518 = $dest;
   $519 = (($518) + ($517<<4)|0);
   $520 = (($519) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = (($521) + 1)|0;
   HEAP32[$520>>2] = $522;
   $523 = $k;
   $524 = (($523) + 1)|0;
   $k = $524;
  }
  $525 = HEAP32[$n1>>2]|0;
  $526 = $dest;
  $527 = (($526) + ($525<<4)|0);
  $ep = $527;
  $528 = $ep;
  $529 = (($528) + 4|0);
  HEAP32[$529>>2] = 1;
  $530 = $ep;
  HEAP32[$530>>2] = 2;
  $531 = $ep;
  $532 = (($531) + 8|0);
  HEAP32[$532>>2] = 5;
  $533 = $ep;
  $534 = (($533) + 16|0);
  $ep = $534;
  $535 = $ep;
  $536 = (($535) + 4|0);
  HEAP32[$536>>2] = 1;
  $537 = $ep;
  HEAP32[$537>>2] = 0;
  $538 = $trap_flag;
  $539 = ($538|0)!=(0);
  if ($539) {
   $540 = $ep;
   $541 = (($540) + 8|0);
   HEAPF64[$541>>3] = 2.0;
  } else {
   $542 = $ep;
   $543 = (($542) + 8|0);
   HEAPF64[$543>>3] = 3.0;
  }
  $544 = $ep;
  $545 = (($544) + 16|0);
  $ep = $545;
  $546 = $ep;
  $547 = (($546) + 4|0);
  HEAP32[$547>>2] = 1;
  $548 = $ep;
  HEAP32[$548>>2] = 2;
  $549 = $ep;
  $550 = (($549) + 8|0);
  HEAP32[$550>>2] = 4;
  $551 = HEAP32[$n1>>2]|0;
  $552 = (($551) + 3)|0;
  HEAP32[$n1>>2] = $552;
  $553 = HEAP32[$n1>>2]|0;
  $k = $553;
  $554 = $k;
  $555 = $dest;
  $556 = (($555) + ($554<<4)|0);
  $557 = HEAP32[3688>>2]|0;
  $558 = HEAP32[3720>>2]|0;
  $559 = $558<<4;
  _memmove(($556|0),($557|0),($559|0))|0;
  $560 = HEAP32[3720>>2]|0;
  $561 = HEAP32[$n1>>2]|0;
  $562 = (($561) + ($560))|0;
  HEAP32[$n1>>2] = $562;
  while(1) {
   $563 = $k;
   $564 = HEAP32[$n1>>2]|0;
   $565 = ($563|0)<($564|0);
   if (!($565)) {
    break;
   }
   $566 = $k;
   $567 = $dest;
   $568 = (($567) + ($566<<4)|0);
   $569 = (($568) + 4|0);
   $570 = HEAP32[$569>>2]|0;
   $571 = (($570) + 1)|0;
   HEAP32[$569>>2] = $571;
   $572 = $k;
   $573 = (($572) + 1)|0;
   $k = $573;
  }
  HEAP32[41264>>2] = 1;
  while(1) {
   $574 = $dest;
   _elim_loop($574,$n1);
   $575 = $dest;
   (_ufactor($575,$n1)|0);
   $576 = $dest;
   _simp_divide($576,$n1);
   $577 = $dest;
   $578 = (_factor_imaginary($577,$n1)|0);
   $579 = ($578|0)!=(0);
   if (!($579)) {
    break;
   }
  }
  HEAP32[41264>>2] = 0;
  $580 = HEAP32[$n1>>2]|0;
  $581 = $np;
  HEAP32[$581>>2] = $580;
  $582 = HEAP32[472>>2]|0;
  $583 = (2880 + ($582<<2)|0);
  $584 = HEAP32[$583>>2]|0;
  $585 = ($584|0)!=(0);
  if ($585) {
   $586 = $i;
   $587 = (480 + ($586<<2)|0);
   $588 = HEAP32[$587>>2]|0;
   $589 = HEAP32[472>>2]|0;
   $590 = (480 + ($589<<2)|0);
   $591 = HEAP32[$590>>2]|0;
   $592 = HEAP32[472>>2]|0;
   $593 = (2080 + ($592<<2)|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = $594<<4;
   _memmove(($588|0),($591|0),($595|0))|0;
   $596 = HEAP32[472>>2]|0;
   $597 = (2080 + ($596<<2)|0);
   $598 = HEAP32[$597>>2]|0;
   $599 = $i;
   $600 = (2080 + ($599<<2)|0);
   HEAP32[$600>>2] = $598;
   $601 = $solved;
   $602 = ($601|0)!=(0);
   do {
    if ($602) {
     $603 = (_isvarchar(39)|0);
     $604 = ($603|0)!=(0);
     if (!($604)) {
      break;
     }
     $605 = $i;
     $606 = (480 + ($605<<2)|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = (($607) + 8|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (_list_var($609,0)|0);
     $len = $610;
     $611 = $len;
     $612 = ($611|0)>(0);
     do {
      if ($612) {
       $613 = $len;
       $614 = (($613) - 1)|0;
       $615 = (35800 + ($614)|0);
       $616 = HEAP8[$615>>0]|0;
       $617 = $616 << 24 >> 24;
       $618 = ($617|0)==(39);
       if (!($618)) {
        break;
       }
       $619 = $len;
       $620 = (($619) + -1)|0;
       $len = $620;
       $621 = (35800 + ($620)|0);
       HEAP8[$621>>0] = 0;
      }
     } while(0);
     $622 = $i;
     $623 = (480 + ($622<<2)|0);
     $624 = HEAP32[$623>>2]|0;
     $625 = (($624) + 8|0);
     (_parse_var($625,35800)|0);
    }
   } while(0);
  }
  $626 = $i;
  $627 = (_return_result($626)|0);
  $0 = $627;
  $628 = $0;
  STACKTOP = sp;return ($628|0);
 }
 return 0|0;
}
function _rect_to_polar($x,$y,$radiusp,$thetap) {
 $x = +$x;
 $y = +$y;
 $radiusp = $radiusp|0;
 $thetap = $thetap|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $radiusp;
 $3 = $thetap;
 $4 = $0;
 $5 = $0;
 $6 = $4 * $5;
 $7 = $1;
 $8 = $1;
 $9 = $7 * $8;
 $10 = $6 + $9;
 $11 = (+Math_sqrt((+$10)));
 $12 = $2;
 HEAPF64[$12>>3] = $11;
 $13 = $1;
 $14 = $0;
 $15 = (+Math_atan2((+$13),(+$14)));
 $16 = $3;
 HEAPF64[$16>>3] = $15;
 STACKTOP = sp;return;
}
function _roots_cmd($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0;
 var $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $buf = 0, $c = 0, $c2 = 0, $k = 0.0, $radius = 0, $radius_root = 0.0, $root = 0.0, $theta = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 192|0;
 $vararg_buffer23 = sp + 184|0;
 $vararg_buffer20 = sp + 176|0;
 $vararg_buffer14 = sp + 144|0;
 $vararg_buffer9 = sp + 120|0;
 $vararg_buffer1 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 196|0;
 $c = sp + 56|0;
 $c2 = sp + 40|0;
 $radius = sp + 16|0;
 $theta = sp + 8|0;
 $buf = sp + 208|0;
 HEAP32[$1>>2] = $cp;
 $radius_root = 0.0;
 L1: while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)==(0);
  if ($5) {
   (_my_strlcpy(35984,794056,80)|0);
   $6 = (_get_string($buf,4096)|0);
   HEAP32[$1>>2] = $6;
   $7 = ($6|0)==(0|0);
   if ($7) {
    label = 4;
    break;
   }
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = (+_strtod($8,$1));
  $root = $9;
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = HEAP32[$1>>2]|0;
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = ($16|0)!=(44);
   if ($17) {
    $18 = HEAP32[$1>>2]|0;
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = (_isspace($20)|0);
    $22 = ($21|0)!=(0);
    if (!($22)) {
     label = 17;
     break;
    }
   }
  }
  do {
   if (0) {
    $23 = $root;
    $24 = $23;
    $25 = (___FLOAT_BITS966($24)|0);
    $26 = $25 & 2147483647;
    $27 = ($26>>>0)<(2139095040);
    if (!($27)) {
     label = 17;
     break L1;
    }
   } else {
    if (1) {
     $28 = $root;
     $29 = (___DOUBLE_BITS967($28)|0);
     $30 = tempRet0;
     $31 = $30 & 2147483647;
     $32 = ($31>>>0)<(2146435072);
     $33 = ($31|0)==(2146435072);
     $34 = ($29>>>0)<(0);
     $35 = $33 & $34;
     $36 = $32 | $35;
     if ($36) {
      break;
     } else {
      label = 17;
      break L1;
     }
    } else {
     $37 = $root;
     $38 = (___fpclassifyl((+$37))|0);
     $39 = ($38|0)>(1);
     if ($39) {
      break;
     } else {
      label = 17;
      break L1;
     }
    }
   }
  } while(0);
  $40 = $root;
  $41 = $40 < 0.0;
  if ($41) {
   label = 17;
   break;
  }
  $42 = $root;
  $43 = $42 > 1.0E+4;
  if ($43) {
   label = 17;
   break;
  }
  $44 = $root;
  $45 = (+_fmod((+$44),1.0));
  $46 = $45 != 0.0;
  if ($46) {
   label = 17;
   break;
  }
  $47 = HEAP32[$1>>2]|0;
  $48 = (_skip_comma_space($47)|0);
  HEAP32[$1>>2] = $48;
  $49 = HEAP32[$1>>2]|0;
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = ($51|0)==(0);
  if ($52) {
   (_my_strlcpy(35984,794184,80)|0);
   $53 = (_get_string($buf,4096)|0);
   HEAP32[$1>>2] = $53;
   $54 = ($53|0)==(0|0);
   if ($54) {
    label = 20;
    break;
   }
  }
  $55 = HEAP32[$1>>2]|0;
  $56 = (+_strtod($55,$1));
  HEAPF64[$c>>3] = $56;
  $57 = HEAP32[$1>>2]|0;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58 << 24 >> 24;
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = HEAP32[$1>>2]|0;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62 << 24 >> 24;
   $64 = ($63|0)!=(44);
   if ($64) {
    $65 = HEAP32[$1>>2]|0;
    $66 = HEAP8[$65>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = (_isspace($67)|0);
    $69 = ($68|0)!=(0);
    if (!($69)) {
     label = 25;
     break;
    }
   }
  }
  $70 = HEAP32[$1>>2]|0;
  $71 = (_skip_comma_space($70)|0);
  HEAP32[$1>>2] = $71;
  $72 = HEAP32[$1>>2]|0;
  $73 = HEAP8[$72>>0]|0;
  $74 = $73 << 24 >> 24;
  $75 = ($74|0)==(0);
  if ($75) {
   (_my_strlcpy(35984,794232,80)|0);
   $76 = (_get_string($buf,4096)|0);
   HEAP32[$1>>2] = $76;
   $77 = ($76|0)==(0|0);
   if ($77) {
    label = 28;
    break;
   }
  }
  $78 = HEAP32[$1>>2]|0;
  $79 = (+_strtod($78,$1));
  $80 = (($c) + 8|0);
  HEAPF64[$80>>3] = $79;
  $81 = HEAP32[$1>>2]|0;
  $82 = HEAP8[$81>>0]|0;
  $83 = ($82<<24>>24)!=(0);
  if ($83) {
   label = 31;
   break;
  }
  $84 = +HEAPF64[$c>>3];
  $85 = $84 == 0.0;
  if ($85) {
   $86 = (($c) + 8|0);
   $87 = +HEAPF64[$86>>3];
   $88 = $87 == 0.0;
   if ($88) {
    label = 34;
    break;
   }
  }
  $90 = (___errno_location()|0);
  HEAP32[$90>>2] = 0;
  $91 = +HEAPF64[$c>>3];
  $92 = (($c) + 8|0);
  $93 = +HEAPF64[$92>>3];
  _rect_to_polar($91,$93,$radius,$theta);
  $94 = $root;
  $95 = $94 != 0.0;
  if ($95) {
   $96 = +HEAPF64[$radius>>3];
   $97 = $root;
   $98 = 1.0 / $97;
   $99 = (+Math_pow((+$96),(+$98)));
   $radius_root = $99;
  }
  _check_err();
  $100 = HEAP32[41008>>2]|0;
  $101 = HEAP32[16>>2]|0;
  $102 = +HEAPF64[$radius>>3];
  $103 = HEAP32[16>>2]|0;
  $104 = +HEAPF64[$theta>>3];
  $105 = HEAP32[16>>2]|0;
  $106 = +HEAPF64[$theta>>3];
  $107 = $106 * 180.0;
  $108 = $107 / 3.1415926535897931;
  HEAP32[$vararg_buffer1>>2] = $101;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$102;HEAP32[$vararg_ptr4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr4+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr5 = (($vararg_buffer1) + 12|0);
  HEAP32[$vararg_ptr5>>2] = $103;
  $vararg_ptr6 = (($vararg_buffer1) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$104;HEAP32[$vararg_ptr6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr6+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr7 = (($vararg_buffer1) + 24|0);
  HEAP32[$vararg_ptr7>>2] = $105;
  $vararg_ptr8 = (($vararg_buffer1) + 28|0);
  HEAPF64[tempDoublePtr>>3]=$108;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($100|0),(794264|0),($vararg_buffer1|0))|0);
  $109 = $root;
  $110 = $109 != 0.0;
  if ($110) {
   $111 = (($c) + 8|0);
   $112 = +HEAPF64[$111>>3];
   $113 = $112 == 0.0;
   if ($113) {
    $114 = HEAP32[41008>>2]|0;
    $115 = $root;
    $116 = +HEAPF64[$c>>3];
    $117 = $root;
    HEAPF64[tempDoublePtr>>3]=$115;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $vararg_ptr12 = (($vararg_buffer9) + 8|0);
    HEAPF64[tempDoublePtr>>3]=$116;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $vararg_ptr13 = (($vararg_buffer9) + 16|0);
    HEAPF64[tempDoublePtr>>3]=$117;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_fprintf(($114|0),(794344|0),($vararg_buffer9|0))|0);
   } else {
    $118 = HEAP32[41008>>2]|0;
    $119 = $root;
    $120 = +HEAPF64[$c>>3];
    $121 = (($c) + 8|0);
    $122 = +HEAPF64[$121>>3];
    $123 = $root;
    HEAPF64[tempDoublePtr>>3]=$119;HEAP32[$vararg_buffer14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer14+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $vararg_ptr17 = (($vararg_buffer14) + 8|0);
    HEAPF64[tempDoublePtr>>3]=$120;HEAP32[$vararg_ptr17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr17+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $vararg_ptr18 = (($vararg_buffer14) + 16|0);
    HEAPF64[tempDoublePtr>>3]=$122;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $vararg_ptr19 = (($vararg_buffer14) + 24|0);
    HEAPF64[tempDoublePtr>>3]=$123;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_fprintf(($118|0),(794392|0),($vararg_buffer14|0))|0);
   }
   $k = 0.0;
   while(1) {
    $124 = $k;
    $125 = $root;
    $126 = $124 < $125;
    if (!($126)) {
     break;
    }
    $127 = $radius_root;
    $128 = +HEAPF64[$theta>>3];
    $129 = $k;
    $130 = 2.0 * $129;
    $131 = $130 * 3.1415926535897931;
    $132 = $128 + $131;
    $133 = $root;
    $134 = $132 / $133;
    $135 = (+Math_cos((+$134)));
    $136 = $127 * $135;
    HEAPF64[$c2>>3] = $136;
    $137 = $radius_root;
    $138 = +HEAPF64[$theta>>3];
    $139 = $k;
    $140 = 2.0 * $139;
    $141 = $140 * 3.1415926535897931;
    $142 = $138 + $141;
    $143 = $root;
    $144 = $142 / $143;
    $145 = (+Math_sin((+$144)));
    $146 = $137 * $145;
    $147 = (($c2) + 8|0);
    HEAPF64[$147>>3] = $146;
    (_complex_fixup($c2)|0);
    $148 = +HEAPF64[$c2>>3];
    $149 = $148 != 0.0;
    if ($149) {
     label = 45;
    } else {
     $150 = (($c2) + 8|0);
     $151 = +HEAPF64[$150>>3];
     $152 = $151 == 0.0;
     if ($152) {
      label = 45;
     }
    }
    if ((label|0) == 45) {
     label = 0;
     $153 = HEAP32[41008>>2]|0;
     $154 = +HEAPF64[$c2>>3];
     HEAPF64[tempDoublePtr>>3]=$154;HEAP32[$vararg_buffer20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer20+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_fprintf(($153|0),(794448|0),($vararg_buffer20|0))|0);
    }
    $155 = (($c2) + 8|0);
    $156 = +HEAPF64[$155>>3];
    $157 = $156 != 0.0;
    if ($157) {
     $158 = HEAP32[41008>>2]|0;
     $159 = (($c2) + 8|0);
     $160 = +HEAPF64[$159>>3];
     HEAPF64[tempDoublePtr>>3]=$160;HEAP32[$vararg_buffer23>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer23+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_fprintf(($158|0),(794456|0),($vararg_buffer23|0))|0);
    }
    $161 = HEAP32[41008>>2]|0;
    (_fprintf(($161|0),(794472|0),($vararg_buffer26|0))|0);
    $162 = $k;
    $163 = $162 + 1.0;
    $k = $163;
   }
  }
  $164 = HEAP32[41296>>2]|0;
  $165 = ($164|0)!=(0);
  if (!($165)) {
   label = 53;
   break;
  }
 }
 if ((label|0) == 4) {
  $0 = 0;
  $166 = $0;
  STACKTOP = sp;return ($166|0);
 }
 else if ((label|0) == 17) {
  _error(794088);
  HEAPF64[tempDoublePtr>>3]=1.0E+4;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((794120|0),($vararg_buffer|0))|0);
  $0 = 0;
  $166 = $0;
  STACKTOP = sp;return ($166|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $166 = $0;
  STACKTOP = sp;return ($166|0);
 }
 else if ((label|0) == 25) {
  _error(794208);
  $0 = 0;
  $166 = $0;
  STACKTOP = sp;return ($166|0);
 }
 else if ((label|0) == 28) {
  $0 = 0;
  $166 = $0;
  STACKTOP = sp;return ($166|0);
 }
 else if ((label|0) == 31) {
  _error(794208);
  $0 = 0;
  $166 = $0;
  STACKTOP = sp;return ($166|0);
 }
 else if ((label|0) == 34) {
  $89 = HEAP32[41296>>2]|0;
  $0 = $89;
  $166 = $0;
  STACKTOP = sp;return ($166|0);
 }
 else if ((label|0) == 53) {
  $0 = 1;
  $166 = $0;
  STACKTOP = sp;return ($166|0);
 }
 return 0|0;
}
function ___FLOAT_BITS966($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS967($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _complex_root_simp($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $c$byval_copy = 0, $i = 0, $j = 0, $len = 0, $level = 0, $modified = 0, $p = 0, $p$byval_copy = 0, $r = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p$byval_copy = sp + 80|0;
 $c$byval_copy = sp + 64|0;
 $c = sp + 48|0;
 $p = sp + 32|0;
 $r = sp + 16|0;
 $2 = sp;
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 L1: while(1) {
  $i = 1;
  L3: while(1) {
   $3 = $i;
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)<($5|0);
   if (!($6)) {
    break L1;
   }
   $7 = $i;
   $8 = $0;
   $9 = (($8) + ($7<<4)|0);
   $10 = (($9) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(8);
   do {
    if ($12) {
    } else {
     $13 = $i;
     $14 = $0;
     $15 = (($14) + ($13<<4)|0);
     $16 = (($15) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     $level = $17;
     $18 = $i;
     $19 = (($18) + 2)|0;
     $j = $19;
     while(1) {
      $20 = $j;
      $21 = $1;
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)<($22|0);
      if ($23) {
       $24 = $j;
       $25 = $0;
       $26 = (($25) + ($24<<4)|0);
       $27 = (($26) + 4|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = $level;
       $30 = ($28|0)>=($29|0);
       $187 = $30;
      } else {
       $187 = 0;
      }
      if (!($187)) {
       break;
      }
      $31 = $j;
      $32 = (($31) + 2)|0;
      $j = $32;
     }
     $33 = $j;
     $34 = $i;
     $35 = (($34) + 1)|0;
     $36 = (($33) - ($35))|0;
     $len = $36;
     $37 = $i;
     $38 = (($37) + 1)|0;
     $39 = $0;
     $40 = (($39) + ($38<<4)|0);
     $41 = $len;
     $42 = (_parse_complex($40,$41,$p)|0);
     $43 = ($42|0)!=(0);
     if (!($43)) {
      break;
     }
     $44 = $i;
     $45 = (($44) - 1)|0;
     $j = $45;
     while(1) {
      $46 = $j;
      $47 = ($46|0)>=(0);
      if ($47) {
       $48 = $j;
       $49 = $0;
       $50 = (($49) + ($48<<4)|0);
       $51 = (($50) + 4|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = $level;
       $54 = ($52|0)>=($53|0);
       $188 = $54;
      } else {
       $188 = 0;
      }
      if (!($188)) {
       break;
      }
      $55 = $j;
      $56 = (($55) + -1)|0;
      $j = $56;
     }
     $57 = $j;
     $58 = (($57) + 1)|0;
     $j = $58;
     $59 = $j;
     $60 = $0;
     $61 = (($60) + ($59<<4)|0);
     $62 = $i;
     $63 = $j;
     $64 = (($62) - ($63))|0;
     $65 = (_parse_complex($61,$64,$c)|0);
     $66 = ($65|0)!=(0);
     if (!($66)) {
      break;
     }
     $67 = (($c) + 8|0);
     $68 = +HEAPF64[$67>>3];
     $69 = $68 == 0.0;
     if (!($69)) {
      break L3;
     }
     $70 = (($p) + 8|0);
     $71 = +HEAPF64[$70>>3];
     $72 = $71 == 0.0;
     if (!($72)) {
      break L3;
     }
    }
   } while(0);
   $182 = $i;
   $183 = (($182) + 2)|0;
   $i = $183;
  }
  $73 = $len;
  $74 = (($73) + 1)|0;
  $75 = $i;
  $76 = (($75) + ($74))|0;
  $i = $76;
  ;HEAP32[$c$byval_copy+0>>2]=HEAP32[$c+0>>2]|0;HEAP32[$c$byval_copy+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$c$byval_copy+8>>2]=HEAP32[$c+8>>2]|0;HEAP32[$c$byval_copy+12>>2]=HEAP32[$c+12>>2]|0;
  ;HEAP32[$p$byval_copy+0>>2]=HEAP32[$p+0>>2]|0;HEAP32[$p$byval_copy+4>>2]=HEAP32[$p+4>>2]|0;HEAP32[$p$byval_copy+8>>2]=HEAP32[$p+8>>2]|0;HEAP32[$p$byval_copy+12>>2]=HEAP32[$p+12>>2]|0;
  _complex_pow($2,$c$byval_copy,$p$byval_copy);
  ;HEAP32[$r+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$r+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$r+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$r+12>>2]=HEAP32[$2+12>>2]|0;
  $77 = $1;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + 5)|0;
  $80 = $i;
  $81 = $j;
  $82 = (($80) - ($81))|0;
  $83 = (($79) - ($82))|0;
  $84 = HEAP32[8>>2]|0;
  $85 = ($83|0)>($84|0);
  if ($85) {
   _error_huge();
  }
  $86 = $j;
  $87 = (($86) + 5)|0;
  $88 = $i;
  $89 = ($87|0)!=($88|0);
  if ($89) {
   $90 = $j;
   $91 = (($90) + 5)|0;
   $92 = $0;
   $93 = (($92) + ($91<<4)|0);
   $94 = $i;
   $95 = $0;
   $96 = (($95) + ($94<<4)|0);
   $97 = $1;
   $98 = HEAP32[$97>>2]|0;
   $99 = $i;
   $100 = (($98) - ($99))|0;
   $101 = $100<<4;
   _memmove(($93|0),($96|0),($101|0))|0;
   $102 = $i;
   $103 = $j;
   $104 = (($102) - ($103))|0;
   $105 = (5 - ($104))|0;
   $106 = $1;
   $107 = HEAP32[$106>>2]|0;
   $108 = (($107) + ($105))|0;
   HEAP32[$106>>2] = $108;
  }
  $109 = $level;
  $110 = $j;
  $111 = $0;
  $112 = (($111) + ($110<<4)|0);
  $113 = (($112) + 4|0);
  HEAP32[$113>>2] = $109;
  $114 = $j;
  $115 = $0;
  $116 = (($115) + ($114<<4)|0);
  HEAP32[$116>>2] = 0;
  $117 = +HEAPF64[$r>>3];
  $118 = $j;
  $119 = $0;
  $120 = (($119) + ($118<<4)|0);
  $121 = (($120) + 8|0);
  HEAPF64[$121>>3] = $117;
  $122 = $j;
  $123 = (($122) + 1)|0;
  $j = $123;
  $124 = $level;
  $125 = $j;
  $126 = $0;
  $127 = (($126) + ($125<<4)|0);
  $128 = (($127) + 4|0);
  HEAP32[$128>>2] = $124;
  $129 = $j;
  $130 = $0;
  $131 = (($130) + ($129<<4)|0);
  HEAP32[$131>>2] = 2;
  $132 = $j;
  $133 = $0;
  $134 = (($133) + ($132<<4)|0);
  $135 = (($134) + 8|0);
  HEAP32[$135>>2] = 1;
  $136 = $j;
  $137 = (($136) + 1)|0;
  $j = $137;
  $138 = $level;
  $139 = (($138) + 1)|0;
  $level = $139;
  $140 = $level;
  $141 = $j;
  $142 = $0;
  $143 = (($142) + ($141<<4)|0);
  $144 = (($143) + 4|0);
  HEAP32[$144>>2] = $140;
  $145 = $j;
  $146 = $0;
  $147 = (($146) + ($145<<4)|0);
  HEAP32[$147>>2] = 0;
  $148 = (($r) + 8|0);
  $149 = +HEAPF64[$148>>3];
  $150 = $j;
  $151 = $0;
  $152 = (($151) + ($150<<4)|0);
  $153 = (($152) + 8|0);
  HEAPF64[$153>>3] = $149;
  $154 = $j;
  $155 = (($154) + 1)|0;
  $j = $155;
  $156 = $level;
  $157 = $j;
  $158 = $0;
  $159 = (($158) + ($157<<4)|0);
  $160 = (($159) + 4|0);
  HEAP32[$160>>2] = $156;
  $161 = $j;
  $162 = $0;
  $163 = (($162) + ($161<<4)|0);
  HEAP32[$163>>2] = 2;
  $164 = $j;
  $165 = $0;
  $166 = (($165) + ($164<<4)|0);
  $167 = (($166) + 8|0);
  HEAP32[$167>>2] = 4;
  $168 = $j;
  $169 = (($168) + 1)|0;
  $j = $169;
  $170 = $level;
  $171 = $j;
  $172 = $0;
  $173 = (($172) + ($171<<4)|0);
  $174 = (($173) + 4|0);
  HEAP32[$174>>2] = $170;
  $175 = $j;
  $176 = $0;
  $177 = (($176) + ($175<<4)|0);
  HEAP32[$177>>2] = 1;
  $178 = $j;
  $179 = $0;
  $180 = (($179) + ($178<<4)|0);
  $181 = (($180) + 8|0);
  HEAP32[$181>>2] = 3;
  $modified = 1;
 }
 $184 = $modified;
 $185 = ($184|0)!=(0);
 if (!($185)) {
  $186 = $modified;
  STACKTOP = sp;return ($186|0);
 }
 $186 = $modified;
 STACKTOP = sp;return ($186|0);
}
function _parse_complex($p1,$n,$cp) {
 $p1 = $p1|0;
 $n = $n|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $imag_cnt = 0, $j = 0, $k = 0, $level = 0, $level2 = 0, $times_cnt = 0, $tmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 16|0;
 $tmp = sp;
 $1 = $p1;
 $2 = $n;
 $3 = $cp;
 $imag_cnt = 0;
 $times_cnt = 0;
 $4 = $1;
 $5 = $2;
 $6 = (_exp_is_numeric($4,$5)|0);
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $0 = 0;
  $288 = $0;
  STACKTOP = sp;return ($288|0);
 }
 $8 = $1;
 $9 = $2;
 $10 = (_get_constant($8,$9,$c)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = (($c) + 8|0);
  HEAPF64[$12>>3] = 0.0;
  $13 = $3;
  ;HEAP32[$13+0>>2]=HEAP32[$c+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$c+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$c+12>>2]|0;
  $0 = 1;
  $288 = $0;
  STACKTOP = sp;return ($288|0);
 }
 $14 = $1;
 $15 = $2;
 $16 = (_found_var($14,$15,3)|0);
 $17 = ($16|0)!=(1);
 if ($17) {
  $0 = 0;
  $288 = $0;
  STACKTOP = sp;return ($288|0);
 }
 $18 = $1;
 $19 = $2;
 $20 = (_min_level($18,$19)|0);
 $level = $20;
 HEAPF64[$c>>3] = 0.0;
 $21 = (($c) + 8|0);
 HEAPF64[$21>>3] = 1.0;
 $22 = $2;
 $23 = (($22) - 1)|0;
 $j = $23;
 while(1) {
  $24 = $j;
  $25 = (($24) - 1)|0;
  $k = $25;
  while(1) {
   $26 = $k;
   $27 = ($26|0)>(0);
   if ($27) {
    $28 = $k;
    $29 = $1;
    $30 = (($29) + ($28<<4)|0);
    $31 = (($30) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $level;
    $34 = ($32|0)>($33|0);
    $289 = $34;
   } else {
    $289 = 0;
   }
   if (!($289)) {
    break;
   }
   $35 = $k;
   $36 = (($35) - 2)|0;
   $k = $36;
  }
  $37 = $k;
  $38 = ($37|0)>(0);
  if (!($38)) {
   label = 23;
   break;
  }
  $39 = $k;
  $40 = $1;
  $41 = (($40) + ($39<<4)|0);
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  if ((($43|0) == 1) | (($43|0) == 2)) {
   $44 = $k;
   $45 = (($44) + 1)|0;
   $46 = $1;
   $47 = (($46) + ($45<<4)|0);
   $48 = $j;
   $49 = $k;
   $50 = (($48) - ($49))|0;
   $51 = (_get_constant($47,$50,$tmp)|0);
   $52 = ($51|0)!=(0);
   if ($52) {
    $53 = $k;
    $54 = $1;
    $55 = (($54) + ($53<<4)|0);
    $56 = (($55) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(2);
    if ($58) {
     $59 = +HEAPF64[$tmp>>3];
     $60 = +HEAPF64[$c>>3];
     $61 = $60 - $59;
     HEAPF64[$c>>3] = $61;
    } else {
     $62 = +HEAPF64[$tmp>>3];
     $63 = +HEAPF64[$c>>3];
     $64 = $63 + $62;
     HEAPF64[$c>>3] = $64;
    }
    $65 = $k;
    $66 = (($65) - 1)|0;
    $j = $66;
   }
  }
  $67 = $j;
  $68 = $k;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
 }
 if ((label|0) == 23) {
 }
 L39: while(1) {
  $70 = $j;
  $71 = ($70|0)>=(0);
  if (!($71)) {
   label = 96;
   break;
  }
  $72 = $j;
  $73 = $1;
  $74 = (($73) + ($72<<4)|0);
  $75 = HEAP32[$74>>2]|0;
  do {
   if ((($75|0) == 2)) {
    $91 = $j;
    $92 = $1;
    $93 = (($92) + ($91<<4)|0);
    $94 = (($93) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $level2 = $95;
    $96 = $j;
    $97 = $1;
    $98 = (($97) + ($96<<4)|0);
    $99 = (($98) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    if ((($100|0) == 2)) {
     label = 84;
     break L39;
    } else if ((($100|0) == 1)) {
     label = 87;
     break L39;
    } else if (!((($100|0) == 5) | (($100|0) == 4))) {
     label = 92;
     break L39;
    }
    $101 = $times_cnt;
    $102 = (($101) + 1)|0;
    $times_cnt = $102;
    $103 = ($102|0)>(1);
    if ($103) {
     label = 37;
     break L39;
    }
    $104 = $level2;
    $105 = $level;
    $106 = (($105) + 1)|0;
    $107 = ($104|0)>($106|0);
    if ($107) {
     label = 40;
     break L39;
    }
    $108 = $j;
    $109 = (($108) + 1)|0;
    $110 = $1;
    $111 = (($110) + ($109<<4)|0);
    $112 = (($111) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $level2;
    $115 = ($113|0)!=($114|0);
    if ($115) {
     label = 40;
     break L39;
    }
    $116 = $j;
    $k = $116;
    while(1) {
     $117 = $k;
     $118 = ($117|0)>(0);
     if ($118) {
      $119 = $k;
      $120 = $1;
      $121 = (($120) + ($119<<4)|0);
      $122 = (($121) + 4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = $level2;
      $125 = ($123|0)==($124|0);
      $290 = $125;
     } else {
      $290 = 0;
     }
     if (!($290)) {
      break;
     }
     $126 = $k;
     $127 = (($126) - 1)|0;
     $128 = $1;
     $129 = (($128) + ($127<<4)|0);
     $130 = (($129) + 4|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $level2;
     $133 = ($131|0)!=($132|0);
     if ($133) {
      label = 46;
      break L39;
     }
     $134 = $k;
     $135 = (($134) + 1)|0;
     $136 = $1;
     $137 = (($136) + ($135<<4)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==(1);
     if ($139) {
      $140 = $k;
      $141 = (($140) + 1)|0;
      $142 = $1;
      $143 = (($142) + ($141<<4)|0);
      $144 = (($143) + 8|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ($145|0)==(3);
      if ($146) {
       $170 = $k;
       $171 = $1;
       $172 = (($171) + ($170<<4)|0);
       $173 = (($172) + 8|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(5);
       if ($175) {
        $176 = (($c) + 8|0);
        $177 = +HEAPF64[$176>>3];
        $178 = -$177;
        $179 = (($c) + 8|0);
        HEAPF64[$179>>3] = $178;
       }
      } else {
       label = 49;
      }
     } else {
      label = 49;
     }
     if ((label|0) == 49) {
      label = 0;
      $147 = $k;
      $148 = (($147) + 1)|0;
      $149 = $1;
      $150 = (($149) + ($148<<4)|0);
      $151 = (($tmp) + 8|0);
      $152 = (_get_constant($150,1,$151)|0);
      $153 = ($152|0)!=(0);
      if (!($153)) {
       label = 54;
       break L39;
      }
      $154 = $k;
      $155 = $1;
      $156 = (($155) + ($154<<4)|0);
      $157 = (($156) + 8|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = ($158|0)==(5);
      if ($159) {
       $160 = (($tmp) + 8|0);
       $161 = +HEAPF64[$160>>3];
       $162 = (($c) + 8|0);
       $163 = +HEAPF64[$162>>3];
       $164 = $163 / $161;
       HEAPF64[$162>>3] = $164;
      } else {
       $165 = (($tmp) + 8|0);
       $166 = +HEAPF64[$165>>3];
       $167 = (($c) + 8|0);
       $168 = +HEAPF64[$167>>3];
       $169 = $168 * $166;
       HEAPF64[$167>>3] = $169;
      }
     }
     $180 = $k;
     $181 = (($180) - 1)|0;
     $182 = $1;
     $183 = (($182) + ($181<<4)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($184|0)==(1);
     if ($185) {
      $186 = $k;
      $187 = (($186) - 1)|0;
      $188 = $1;
      $189 = (($188) + ($187<<4)|0);
      $190 = (($189) + 8|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = ($191|0)==(3);
      if ($192) {
       $193 = $imag_cnt;
       $194 = (($193) + 1)|0;
       $imag_cnt = $194;
       $195 = ($194|0)>(1);
       if ($195) {
        label = 62;
        break L39;
       }
       $196 = $k;
       $197 = (($196) - 2)|0;
       $k = $197;
       $198 = $k;
       $199 = ($198|0)>(0);
       if (!($199)) {
        label = 73;
        break;
       }
       $200 = $k;
       $201 = $1;
       $202 = (($201) + ($200<<4)|0);
       $203 = (($202) + 4|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = $level2;
       $206 = ($204|0)==($205|0);
       if (!($206)) {
        label = 73;
        break;
       }
       $207 = $k;
       $208 = (($207) - 1)|0;
       $209 = $1;
       $210 = (($209) + ($208<<4)|0);
       $211 = (($210) + 4|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = $level2;
       $214 = ($212|0)!=($213|0);
       if ($214) {
        label = 66;
        break L39;
       }
       $215 = $k;
       $216 = (($215) - 1)|0;
       $217 = $1;
       $218 = (($217) + ($216<<4)|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = ($219|0)==(1);
       if ($220) {
        $221 = $k;
        $222 = (($221) - 1)|0;
        $223 = $1;
        $224 = (($223) + ($222<<4)|0);
        $225 = (($224) + 8|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = ($226|0)==(3);
        if ($227) {
         label = 69;
         break L39;
        }
       }
       $228 = $k;
       $229 = $1;
       $230 = (($229) + ($228<<4)|0);
       $231 = (($230) + 8|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = ($232|0)==(5);
       if ($233) {
        $234 = (($c) + 8|0);
        $235 = +HEAPF64[$234>>3];
        $236 = -$235;
        $237 = (($c) + 8|0);
        HEAPF64[$237>>3] = $236;
       }
      }
     }
     $238 = $k;
     $239 = (($238) - 2)|0;
     $k = $239;
    }
    if ((label|0) == 73) {
     label = 0;
    }
    $240 = $k;
    $241 = (($240) + 1)|0;
    $242 = $1;
    $243 = (($242) + ($241<<4)|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = ($244|0)==(1);
    if ($245) {
     $246 = $k;
     $247 = (($246) + 1)|0;
     $248 = $1;
     $249 = (($248) + ($247<<4)|0);
     $250 = (($249) + 8|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = ($251|0)==(3);
     if (!($252)) {
      label = 79;
     }
    } else {
     label = 79;
    }
    if ((label|0) == 79) {
     label = 0;
     $253 = $k;
     $254 = (($253) + 1)|0;
     $255 = $1;
     $256 = (($255) + ($254<<4)|0);
     $257 = (($tmp) + 8|0);
     $258 = (_get_constant($256,1,$257)|0);
     $259 = ($258|0)!=(0);
     if (!($259)) {
      label = 81;
      break L39;
     }
     $260 = (($tmp) + 8|0);
     $261 = +HEAPF64[$260>>3];
     $262 = (($c) + 8|0);
     $263 = +HEAPF64[$262>>3];
     $264 = $263 * $261;
     HEAPF64[$262>>3] = $264;
    }
    $265 = $k;
    $266 = (($265) + 1)|0;
    $j = $266;
   } else if ((($75|0) == 0)) {
    label = 94;
   } else if ((($75|0) == 1)) {
    $76 = $j;
    $77 = $1;
    $78 = (($77) + ($76<<4)|0);
    $79 = (($78) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (_var_is_const($80,0)|0);
    $82 = ($81|0)!=(0);
    if ($82) {
     label = 94;
     break;
    }
    $83 = $j;
    $84 = $1;
    $85 = (($84) + ($83<<4)|0);
    $86 = (($85) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)!=(3);
    if ($88) {
     label = 33;
     break L39;
    }
    $89 = $imag_cnt;
    $90 = (($89) + 1)|0;
    $imag_cnt = $90;
    label = 94;
   } else {
    label = 93;
    break L39;
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
  }
  $283 = $j;
  $284 = (($283) + -1)|0;
  $j = $284;
 }
 switch (label|0) {
  case 33: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 37: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 40: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 46: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 54: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 62: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 66: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 69: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 81: {
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
   break;
  }
  case 84: {
   $267 = $imag_cnt;
   $268 = ($267|0)!=(0);
   if ($268) {
    $269 = (($c) + 8|0);
    $270 = +HEAPF64[$269>>3];
    $271 = -$270;
    $272 = (($c) + 8|0);
    HEAPF64[$272>>3] = $271;
   }
   label = 87;
   break;
  }
  case 92: {
   label = 93;
   break;
  }
  case 96: {
   break;
  }
 }
 if ((label|0) == 93) {
  $0 = 0;
  $288 = $0;
  STACKTOP = sp;return ($288|0);
 }
 do {
  if ((label|0) == 87) {
   $273 = $level;
   $274 = $level2;
   $275 = ($273|0)!=($274|0);
   if ($275) {
    $0 = 0;
    $288 = $0;
    STACKTOP = sp;return ($288|0);
   }
   $276 = $1;
   $277 = $j;
   $278 = (_get_constant($276,$277,$tmp)|0);
   $279 = ($278|0)!=(0);
   if ($279) {
    $280 = +HEAPF64[$tmp>>3];
    $281 = +HEAPF64[$c>>3];
    $282 = $281 + $280;
    HEAPF64[$c>>3] = $282;
    break;
   }
   $0 = 0;
   $288 = $0;
   STACKTOP = sp;return ($288|0);
  }
 } while(0);
 $285 = $imag_cnt;
 $286 = ($285|0)!=(1);
 if ($286) {
  $0 = 0;
  $288 = $0;
  STACKTOP = sp;return ($288|0);
 } else {
  $287 = $3;
  ;HEAP32[$287+0>>2]=HEAP32[$c+0>>2]|0;HEAP32[$287+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$287+8>>2]=HEAP32[$c+8>>2]|0;HEAP32[$287+12>>2]=HEAP32[$c+12>>2]|0;
  $0 = 1;
  $288 = $0;
  STACKTOP = sp;return ($288|0);
 }
 return 0|0;
}
function _approximate_complex_roots($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $rv = 0;
 while(1) {
  $2 = $0;
  $3 = $1;
  _elim_loop($2,$3);
  $4 = $0;
  $5 = $1;
  $6 = (_complex_root_simp($4,$5)|0);
  $7 = ($6|0)!=(0);
  if (!($7)) {
   break;
  }
  $rv = 1;
 }
 $8 = $rv;
 STACKTOP = sp;return ($8|0);
}
function _get_constant($p1,$n,$dp) {
 $p1 = $p1|0;
 $n = $n|0;
 $dp = $dp|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $d1 = 0, $d2 = 0, $i = 0, $j = 0, $level = 0;
 var $prev_approx_flag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d1 = sp + 8|0;
 $d2 = sp;
 $1 = $p1;
 $2 = $n;
 $3 = $dp;
 $4 = $2;
 $5 = ($4|0)==(1);
 do {
  if ($5) {
   $6 = $1;
   $7 = HEAP32[$6>>2]|0;
   do {
    if ((($7|0) == 2)) {
    } else if ((($7|0) == 1)) {
     $12 = $1;
     $13 = (($12) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = $3;
     $16 = (_var_is_const($14,$15)|0);
     $17 = ($16|0)!=(0);
     if (!($17)) {
      break;
     }
     $0 = 1;
     $93 = $0;
     STACKTOP = sp;return ($93|0);
    } else if ((($7|0) == 0)) {
     $8 = $1;
     $9 = (($8) + 8|0);
     $10 = +HEAPF64[$9>>3];
     $11 = $3;
     HEAPF64[$11>>3] = $10;
     $0 = 1;
     $93 = $0;
     STACKTOP = sp;return ($93|0);
    }
   } while(0);
  } else {
   $18 = $2;
   $19 = ($18|0)>=(3);
   if (!($19)) {
    break;
   }
   $20 = $1;
   $21 = (($20) + 16|0);
   $22 = (($21) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $level = $23;
   $24 = $1;
   $25 = (_get_constant($24,1,$d1)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    $0 = 0;
    $93 = $0;
    STACKTOP = sp;return ($93|0);
   }
   $i = 1;
   while(1) {
    $27 = $i;
    $28 = $2;
    $29 = ($27|0)<($28|0);
    if (!($29)) {
     label = 33;
     break;
    }
    $30 = $i;
    $31 = $1;
    $32 = (($31) + ($30<<4)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)!=(2);
    if ($34) {
     label = 16;
     break;
    }
    $35 = $i;
    $36 = $1;
    $37 = (($36) + ($35<<4)|0);
    $38 = (($37) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $level;
    $41 = ($39|0)>($40|0);
    if ($41) {
     label = 16;
     break;
    }
    $42 = $i;
    $43 = $1;
    $44 = (($43) + ($42<<4)|0);
    $45 = (($44) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $level = $46;
    $47 = $i;
    $48 = (($47) + 2)|0;
    $j = $48;
    while(1) {
     $49 = $j;
     $50 = $2;
     $51 = ($49|0)<($50|0);
     if ($51) {
      $52 = $j;
      $53 = $1;
      $54 = (($53) + ($52<<4)|0);
      $55 = (($54) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = $level;
      $58 = ($56|0)>($57|0);
      $94 = $58;
     } else {
      $94 = 0;
     }
     if (!($94)) {
      break;
     }
     $59 = $j;
     $60 = (($59) + 2)|0;
     $j = $60;
    }
    $61 = $i;
    $62 = (($61) + 1)|0;
    $63 = $1;
    $64 = (($63) + ($62<<4)|0);
    $65 = $j;
    $66 = $i;
    $67 = (($66) + 1)|0;
    $68 = (($65) - ($67))|0;
    $69 = (_get_constant($64,$68,$d2)|0);
    $70 = ($69|0)!=(0);
    if (!($70)) {
     label = 24;
     break;
    }
    $71 = HEAP32[41264>>2]|0;
    $prev_approx_flag = $71;
    HEAP32[41264>>2] = 1;
    $72 = $i;
    $73 = $1;
    $74 = (($73) + ($72<<4)|0);
    $75 = (($74) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = +HEAPF64[$d2>>3];
    $78 = (_calc(0,$d1,$76,$77)|0);
    $79 = ($78|0)!=(0);
    if (!($79)) {
     label = 30;
     break;
    }
    $80 = $prev_approx_flag;
    HEAP32[41264>>2] = $80;
    $81 = $i;
    $82 = $1;
    $83 = (($82) + ($81<<4)|0);
    $84 = (($83) + 8|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==(8);
    if ($86) {
     $87 = HEAP32[41256>>2]|0;
     $88 = ($87|0)!=(0);
     if (!($88)) {
      label = 28;
      break;
     }
    }
    HEAP32[41256>>2] = 0;
    $90 = $j;
    $i = $90;
   }
   if ((label|0) == 16) {
    $0 = 0;
    $93 = $0;
    STACKTOP = sp;return ($93|0);
   }
   else if ((label|0) == 24) {
    $0 = 0;
    $93 = $0;
    STACKTOP = sp;return ($93|0);
   }
   else if ((label|0) == 28) {
    $0 = 0;
    $93 = $0;
    STACKTOP = sp;return ($93|0);
   }
   else if ((label|0) == 30) {
    $89 = $prev_approx_flag;
    HEAP32[41264>>2] = $89;
    HEAP32[41256>>2] = 0;
    $0 = 0;
    $93 = $0;
    STACKTOP = sp;return ($93|0);
   }
   else if ((label|0) == 33) {
    $91 = +HEAPF64[$d1>>3];
    $92 = $3;
    HEAPF64[$92>>3] = $91;
    $0 = 1;
    $93 = $0;
    STACKTOP = sp;return ($93|0);
   }
  }
 } while(0);
 $0 = 0;
 $93 = $0;
 STACKTOP = sp;return ($93|0);
}
function _complex_fixup($ap) {
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
 var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ap;
 $2 = $1;
 $3 = +HEAPF64[$2>>3];
 $4 = $3 * 5.0000000000000002E-14;
 $5 = (+Math_abs((+$4)));
 $6 = $1;
 $7 = (($6) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+Math_abs((+$8)));
 $10 = $5 > $9;
 if ($10) {
  $11 = $1;
  $12 = (($11) + 8|0);
  HEAPF64[$12>>3] = 0.0;
  $0 = 1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $15 * 5.0000000000000002E-14;
 $17 = (+Math_abs((+$16)));
 $18 = $1;
 $19 = +HEAPF64[$18>>3];
 $20 = (+Math_abs((+$19)));
 $21 = $17 > $20;
 if ($21) {
  $22 = $1;
  HEAPF64[$22>>3] = 0.0;
  $0 = 1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return 0|0;
}
function _complex_mult($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $r = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $0 = +HEAPF64[$a>>3];
 $1 = +HEAPF64[$b>>3];
 $2 = $0 * $1;
 $3 = (($a) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = (($b) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $4 * $6;
 $8 = $2 - $7;
 HEAPF64[$r>>3] = $8;
 $9 = +HEAPF64[$a>>3];
 $10 = (($b) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $9 * $11;
 $13 = (($a) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = +HEAPF64[$b>>3];
 $16 = $14 * $15;
 $17 = $12 + $16;
 $18 = (($r) + 8|0);
 HEAPF64[$18>>3] = $17;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$r+12>>2]|0;
 STACKTOP = sp;return;
}
function _complex_div($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0, $9 = 0.0, $a$byval_copy = 0, $b$byval_copy = 0, $denom = 0.0, $num = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b$byval_copy = sp + 72|0;
 $a$byval_copy = sp + 56|0;
 $r = sp + 40|0;
 $num = sp + 24|0;
 $0 = sp;
 $1 = (($b) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = -$2;
 $4 = (($b) + 8|0);
 HEAPF64[$4>>3] = $3;
 ;HEAP32[$a$byval_copy+0>>2]=HEAP32[$a+0>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;HEAP32[$a$byval_copy+8>>2]=HEAP32[$a+8>>2]|0;HEAP32[$a$byval_copy+12>>2]=HEAP32[$a+12>>2]|0;
 ;HEAP32[$b$byval_copy+0>>2]=HEAP32[$b+0>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;HEAP32[$b$byval_copy+8>>2]=HEAP32[$b+8>>2]|0;HEAP32[$b$byval_copy+12>>2]=HEAP32[$b+12>>2]|0;
 _complex_mult($0,$a$byval_copy,$b$byval_copy);
 ;HEAP32[$num+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$num+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$num+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$num+12>>2]=HEAP32[$0+12>>2]|0;
 $5 = +HEAPF64[$b>>3];
 $6 = +HEAPF64[$b>>3];
 $7 = $5 * $6;
 $8 = (($b) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (($b) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $9 * $11;
 $13 = $7 + $12;
 $denom = $13;
 $14 = +HEAPF64[$num>>3];
 $15 = $denom;
 $16 = $14 / $15;
 HEAPF64[$r>>3] = $16;
 $17 = (($num) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $denom;
 $20 = $18 / $19;
 $21 = (($r) + 8|0);
 HEAPF64[$21>>3] = $20;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$r+12>>2]|0;
 STACKTOP = sp;return;
}
function _complex_log($agg$result,$a) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $0 = +HEAPF64[$a>>3];
 $1 = +HEAPF64[$a>>3];
 $2 = $0 * $1;
 $3 = (($a) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = (($a) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $4 * $6;
 $8 = $2 + $7;
 $9 = (+Math_log((+$8)));
 $10 = $9 / 2.0;
 HEAPF64[$r>>3] = $10;
 $11 = (($a) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = +HEAPF64[$a>>3];
 $14 = (+Math_atan2((+$12),(+$13)));
 $15 = (($r) + 8|0);
 HEAPF64[$15>>3] = $14;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$r+12>>2]|0;
 STACKTOP = sp;return;
}
function _complex_exp($agg$result,$a) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $m = 0.0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 8|0;
 $0 = +HEAPF64[$a>>3];
 $1 = (+Math_exp((+$0)));
 $m = $1;
 $2 = $m;
 $3 = (($a) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = (+Math_cos((+$4)));
 $6 = $2 * $5;
 HEAPF64[$r>>3] = $6;
 $7 = $m;
 $8 = (($a) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (+Math_sin((+$9)));
 $11 = $7 * $10;
 $12 = (($r) + 8|0);
 HEAPF64[$12>>3] = $11;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$r+12>>2]|0;
 STACKTOP = sp;return;
}
function _complex_pow($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $a$byval_copy = 0, $b$byval_copy = 0, $r = 0, $r$byval_copy = 0, $r$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r$byval_copy1 = sp + 112|0;
 $b$byval_copy = sp + 96|0;
 $r$byval_copy = sp + 80|0;
 $a$byval_copy = sp + 64|0;
 $r = sp + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp;
 ;HEAP32[$a$byval_copy+0>>2]=HEAP32[$a+0>>2]|0;HEAP32[$a$byval_copy+4>>2]=HEAP32[$a+4>>2]|0;HEAP32[$a$byval_copy+8>>2]=HEAP32[$a+8>>2]|0;HEAP32[$a$byval_copy+12>>2]=HEAP32[$a+12>>2]|0;
 _complex_log($0,$a$byval_copy);
 ;HEAP32[$r+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$r+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$r+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$r+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP32[$r$byval_copy+0>>2]=HEAP32[$r+0>>2]|0;HEAP32[$r$byval_copy+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$r$byval_copy+8>>2]=HEAP32[$r+8>>2]|0;HEAP32[$r$byval_copy+12>>2]=HEAP32[$r+12>>2]|0;
 ;HEAP32[$b$byval_copy+0>>2]=HEAP32[$b+0>>2]|0;HEAP32[$b$byval_copy+4>>2]=HEAP32[$b+4>>2]|0;HEAP32[$b$byval_copy+8>>2]=HEAP32[$b+8>>2]|0;HEAP32[$b$byval_copy+12>>2]=HEAP32[$b+12>>2]|0;
 _complex_mult($1,$r$byval_copy,$b$byval_copy);
 ;HEAP32[$r+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$r+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$r+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$r+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$r$byval_copy1+0>>2]=HEAP32[$r+0>>2]|0;HEAP32[$r$byval_copy1+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$r$byval_copy1+8>>2]=HEAP32[$r+8>>2]|0;HEAP32[$r$byval_copy1+12>>2]=HEAP32[$r+12>>2]|0;
 _complex_exp($2,$r$byval_copy1);
 ;HEAP32[$r+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$r+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$r+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$r+12>>2]=HEAP32[$2+12>>2]|0;
 (_complex_fixup($r)|0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$r+12>>2]|0;
 STACKTOP = sp;return;
}
function _reset_attr() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[3792>>2]|0;
 $1 = ($0|0)==(2);
 if ($1) {
  $2 = HEAP32[41008>>2]|0;
  $fp = $2;
 } else {
  $3 = HEAP32[_stdout>>2]|0;
  $fp = $3;
 }
 $4 = HEAP32[392>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  HEAP32[416>>2] = -1;
  STACKTOP = sp;return;
 }
 $6 = HEAP32[416>>2]|0;
 $7 = ($6|0)>=(0);
 if (!($7)) {
  HEAP32[416>>2] = -1;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[3792>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $fp;
  (_fprintf(($10|0),(794480|0),($vararg_buffer|0))|0);
 } else {
  $11 = $fp;
  (_fprintf(($11|0),(794488|0),($vararg_buffer1|0))|0);
 }
 $12 = $fp;
 (_fflush(($12|0))|0);
 HEAP32[416>>2] = -1;
 STACKTOP = sp;return;
}
function _set_color($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $rv = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $color;
 $rv = -1;
 $2 = HEAP32[3792>>2]|0;
 $3 = ($2|0)!=(2);
 if ($3) {
  $4 = HEAP32[41008>>2]|0;
  $5 = HEAP32[_stdout>>2]|0;
  $6 = ($4|0)!=($5|0);
  if ($6) {
   $7 = $rv;
   $0 = $7;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  }
 }
 $8 = HEAP32[392>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[416>>2]|0;
  $11 = $1;
  $12 = ($10|0)==($11|0);
  if ($12) {
   $13 = $rv;
   $0 = $13;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  }
  $14 = HEAP32[3792>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = HEAP32[416>>2]|0;
   $17 = ($16|0)>=(0);
   if ($17) {
    $18 = HEAP32[41008>>2]|0;
    (_fprintf(($18|0),(794480|0),($vararg_buffer|0))|0);
   }
   $19 = HEAP32[400>>2]|0;
   $20 = ($19|0)!=(0);
   if ($20) {
    $21 = HEAP32[41008>>2]|0;
    $22 = $1;
    $23 = (($22|0) % 7)&-1;
    $rv = $23;
    $24 = (794520 + ($23<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $25;
    (_fprintf(($21|0),(794496|0),($vararg_buffer1|0))|0);
   } else {
    $26 = HEAP32[41008>>2]|0;
    $27 = $1;
    $28 = (($27|0) % 7)&-1;
    $rv = $28;
    $29 = (794552 + ($28<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $30;
    (_fprintf(($26|0),(794496|0),($vararg_buffer3|0))|0);
   }
  } else {
   $31 = HEAP32[41008>>2]|0;
   $32 = HEAP32[400>>2]|0;
   $33 = $1;
   $34 = (($33|0) % 6)&-1;
   $rv = $34;
   $35 = (794600 + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $32;
   $vararg_ptr9 = (($vararg_buffer6) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $36;
   (_fprintf(($31|0),(794584|0),($vararg_buffer6|0))|0);
  }
  $37 = $1;
  HEAP32[416>>2] = $37;
 }
 $38 = $rv;
 $0 = $38;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _default_color($set_no_color_flag) {
 $set_no_color_flag = $set_no_color_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $set_no_color_flag;
 $1 = HEAP32[3792>>2]|0;
 $2 = ($1|0)!=(2);
 if ($2) {
  $3 = HEAP32[41008>>2]|0;
  $4 = HEAP32[_stdout>>2]|0;
  $5 = ($3|0)!=($4|0);
  if ($5) {
   STACKTOP = sp;return;
  }
 }
 $6 = HEAP32[392>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP32[416>>2]|0;
  $9 = ($8|0)>=(0);
  if ($9) {
   $10 = HEAP32[3792>>2]|0;
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = HEAP32[41008>>2]|0;
    (_fprintf(($12|0),(794480|0),($vararg_buffer|0))|0);
   } else {
    $13 = HEAP32[41008>>2]|0;
    (_fprintf(($13|0),(794488|0),($vararg_buffer1|0))|0);
   }
  }
 }
 HEAP32[416>>2] = -1;
 $14 = HEAP32[408>>2]|0;
 $15 = ($14|0)>=(0);
 if ($15) {
  $16 = $0;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   $18 = HEAP32[408>>2]|0;
   (_set_color($18)|0);
  }
 }
 $19 = HEAP32[41008>>2]|0;
 (_fflush(($19|0))|0);
 STACKTOP = sp;return;
}
function _display_all_colors() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $i = 0;
 _default_color(1);
 $1 = $i;
 $2 = (_set_color($1)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  _default_color(0);
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 while(1) {
  (_printf((794624|0),($vararg_buffer|0))|0);
  $4 = $i;
  $5 = (($4) + 1)|0;
  $i = $5;
  $6 = $i;
  $7 = (_set_color($6)|0);
  $j = $7;
  $8 = $j;
  $9 = ($8|0)>(0);
  if (!($9)) {
   break;
  }
 }
 _default_color(0);
 $10 = $j;
 $11 = ($10|0)>=(0);
 $12 = $11&1;
 $0 = $12;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _list1_sub($n,$export_flag) {
 $n = $n|0;
 $export_flag = $export_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $n;
 $2 = $export_flag;
 $len = 0;
 $3 = $1;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $5 = $1;
  $6 = HEAP32[464>>2]|0;
  $7 = ($5|0)>=($6|0);
  if (!($7)) {
   $8 = $1;
   $9 = (2080 + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)<=(0);
   if (!($11)) {
    $12 = $2;
    $13 = ($12|0)==(0);
    if ($13) {
     label = 7;
    } else {
     $14 = $2;
     $15 = ($14|0)==(4);
     if ($15) {
      label = 7;
     }
    }
    if ((label|0) == 7) {
     $16 = HEAP32[41232>>2]|0;
     $17 = ($16|0)!=(0);
     if (!($17)) {
      $18 = HEAP32[41008>>2]|0;
      $19 = $1;
      $20 = (($19) + 1)|0;
      HEAP32[$vararg_buffer>>2] = $20;
      $21 = (_fprintf(($18|0),(794632|0),($vararg_buffer|0))|0);
      $22 = $len;
      $23 = (($22) + ($21))|0;
      $len = $23;
     }
    }
    $24 = $1;
    $25 = (480 + ($24<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $1;
    $28 = (2080 + ($27<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $2;
    $31 = (_list_proc($26,$29,$30)|0);
    $32 = $len;
    $33 = (($32) + ($31))|0;
    $len = $33;
    $34 = $1;
    $35 = (2880 + ($34<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)!=(0);
    if ($37) {
     $38 = HEAP32[41008>>2]|0;
     $39 = (_fprintf(($38|0),(794640|0),($vararg_buffer1|0))|0);
     $40 = $len;
     $41 = (($40) + ($39))|0;
     $len = $41;
     $42 = $1;
     $43 = (1280 + ($42<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $1;
     $46 = (2880 + ($45<<2)|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $2;
     $49 = (_list_proc($44,$47,$48)|0);
     $50 = $len;
     $51 = (($50) + ($49))|0;
     $len = $51;
    }
    $52 = $2;
    $53 = ($52|0)==(1);
    if ($53) {
     $54 = HEAP32[41008>>2]|0;
     $55 = (_fprintf(($54|0),(794648|0),($vararg_buffer3|0))|0);
     $56 = $len;
     $57 = (($56) + ($55))|0;
     $len = $57;
    }
    $58 = HEAP32[41008>>2]|0;
    (_fprintf(($58|0),(794656|0),($vararg_buffer5|0))|0);
    $59 = $len;
    $0 = $59;
    $60 = $0;
    STACKTOP = sp;return ($60|0);
   }
  }
 }
 $0 = 0;
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function _list_proc($p1,$n,$export_flag) {
 $p1 = $p1|0;
 $n = $n|0;
 $export_flag = $export_flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $n;
 $2 = $export_flag;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_list_string_sub($3,$4,1,0,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _list_sub($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $1;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $11 = $1;
    (_make_fractions_and_group($11)|0);
    $12 = HEAP32[3768>>2]|0;
    $13 = ($12|0)!=(0);
    if ($13) {
     $14 = $1;
     (_factor_int_equation($14)|0);
    }
    $15 = HEAP32[32>>2]|0;
    $16 = ($15|0)!=(0);
    if ($16) {
     $17 = $1;
     $18 = (_flist_equation($17)|0);
     $0 = $18;
     $21 = $0;
     STACKTOP = sp;return ($21|0);
    } else {
     $19 = $1;
     $20 = (_list1_sub($19,0)|0);
     $0 = $20;
     $21 = $0;
     STACKTOP = sp;return ($21|0);
    }
   }
  }
 }
 $0 = 0;
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _flist_equation($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $high = 0, $len = 0, $len2 = 0, $len3 = 0;
 var $low = 0, $max2_line = 0, $max_line = 0, $min2_line = 0, $min_line = 0, $pos = 0, $sind = 0, $use_screen_columns = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 128|0;
 $high = sp + 92|0;
 $low = sp + 88|0;
 $max_line = sp + 84|0;
 $min_line = sp + 80|0;
 $max2_line = sp + 76|0;
 $min2_line = sp + 72|0;
 $1 = $n;
 HEAP32[$high>>2] = 0;
 HEAP32[$low>>2] = 0;
 HEAP32[$max_line>>2] = 0;
 HEAP32[$min_line>>2] = 0;
 HEAP32[$max2_line>>2] = 0;
 HEAP32[$min2_line>>2] = 0;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $1;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $use_screen_columns = 1;
    $11 = $1;
    $12 = (($11) + 1)|0;
    HEAP32[$vararg_buffer>>2] = $12;
    $13 = (_snprintf($buf,50,794632,$vararg_buffer)|0);
    $len = $13;
    HEAP32[795152>>2] = 0;
    HEAP32[795160>>2] = 0;
    $14 = $1;
    $15 = (2880 + ($14<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $sind = $16;
    $17 = $1;
    $18 = (480 + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $1;
    $21 = (2080 + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[72>>2]|0;
    $24 = (_flist_sub($19,$22,0,0,$23,0,$max_line,$min_line)|0);
    $25 = $len;
    $26 = (($25) + ($24))|0;
    $len = $26;
    $27 = $1;
    $28 = (2880 + ($27<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)!=(0);
    if ($30) {
     $31 = $len;
     $32 = (($31) + 3)|0;
     $len = $32;
     while(1) {
      $33 = $1;
      $34 = (1280 + ($33<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $sind;
      $37 = HEAP32[72>>2]|0;
      $38 = (_flist_sub($35,$36,0,0,$37,0,$high,$low)|0);
      $len2 = $38;
      $39 = HEAP32[72>>2]|0;
      $40 = ($39|0)!=(0);
      if (!($40)) {
       break;
      }
      $41 = $use_screen_columns;
      $42 = ($41|0)!=(0);
      if (!($42)) {
       break;
      }
      $43 = $len;
      $44 = $len2;
      $45 = (($43) + ($44))|0;
      $46 = HEAP32[72>>2]|0;
      $47 = ($45|0)>=($46|0);
      if (!($47)) {
       break;
      }
      $48 = $sind;
      $49 = ($48|0)>(0);
      if (!($49)) {
       break;
      }
      $50 = $sind;
      $51 = (($50) + -1)|0;
      $sind = $51;
      while(1) {
       $52 = $sind;
       $53 = ($52|0)>(0);
       if (!($53)) {
        label = 20;
        break;
       }
       $54 = $sind;
       $55 = $1;
       $56 = (1280 + ($55<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($57) + ($54<<4)|0);
       $59 = (($58) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(1);
       if ($61) {
        $62 = $sind;
        $63 = $1;
        $64 = (1280 + ($63<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (($65) + ($62<<4)|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($67|0)==(2);
        if ($68) {
         $69 = $sind;
         $70 = $1;
         $71 = (1280 + ($70<<2)|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (($72) + ($69<<4)|0);
         $74 = (($73) + 8|0);
         $75 = HEAP32[$74>>2]|0;
         if ((($75|0) == 6) | (($75|0) == 2) | (($75|0) == 1)) {
          label = 16;
          break;
         }
        }
       }
       $76 = $sind;
       $77 = (($76) + -1)|0;
       $sind = $77;
      }
      if ((label|0) == 16) {
       label = 0;
       continue;
      }
      else if ((label|0) == 20) {
       label = 0;
       continue;
      }
     }
     $78 = HEAP32[$high>>2]|0;
     $79 = HEAP32[$max_line>>2]|0;
     $80 = ($78|0)>($79|0);
     if ($80) {
      $81 = HEAP32[$high>>2]|0;
      HEAP32[$max_line>>2] = $81;
     }
     $82 = HEAP32[$low>>2]|0;
     $83 = HEAP32[$min_line>>2]|0;
     $84 = ($82|0)<($83|0);
     if ($84) {
      $85 = HEAP32[$low>>2]|0;
      HEAP32[$min_line>>2] = $85;
     }
     $86 = $sind;
     $87 = $1;
     $88 = (1280 + ($87<<2)|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (($89) + ($86<<4)|0);
     $91 = $1;
     $92 = (2880 + ($91<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $sind;
     $95 = (($93) - ($94))|0;
     $96 = HEAP32[72>>2]|0;
     $97 = (_flist_sub($90,$95,0,0,$96,0,$max2_line,$min2_line)|0);
     $len3 = $97;
    } else {
     $len2 = 0;
     $len3 = 0;
    }
    $98 = $len;
    $99 = $len2;
    $100 = (($98) + ($99))|0;
    $101 = $len3;
    $102 = ($100|0)>($101|0);
    if ($102) {
     $103 = $len;
     $104 = $len2;
     $105 = (($103) + ($104))|0;
     $107 = $105;
    } else {
     $106 = $len3;
     $107 = $106;
    }
    $width = $107;
    $108 = HEAP32[72>>2]|0;
    $109 = ($108|0)!=(0);
    if ($109) {
     $110 = $use_screen_columns;
     $111 = ($110|0)!=(0);
     if ($111) {
      $112 = $width;
      $113 = HEAP32[72>>2]|0;
      $114 = ($112|0)>=($113|0);
      if ($114) {
       $115 = $1;
       $116 = (_list1_sub($115,0)|0);
       $width = $116;
       $117 = HEAP32[41008>>2]|0;
       (_fprintf(($117|0),(794656|0),($vararg_buffer1|0))|0);
       $118 = $width;
       $0 = $118;
       $194 = $0;
       STACKTOP = sp;return ($194|0);
      }
     }
    }
    $119 = HEAP32[41008>>2]|0;
    (_fprintf(($119|0),(794656|0),($vararg_buffer3|0))|0);
    $120 = HEAP32[$max_line>>2]|0;
    HEAP32[795152>>2] = $120;
    while(1) {
     $121 = HEAP32[795152>>2]|0;
     $122 = HEAP32[$min_line>>2]|0;
     $123 = ($121|0)>=($122|0);
     if (!($123)) {
      break;
     }
     HEAP32[795160>>2] = 0;
     $pos = 0;
     $124 = HEAP32[795152>>2]|0;
     $125 = ($124|0)==(0);
     if ($125) {
      $126 = HEAP32[41008>>2]|0;
      HEAP32[$vararg_buffer5>>2] = $buf;
      $127 = (_fprintf(($126|0),(794920|0),($vararg_buffer5|0))|0);
      $128 = HEAP32[795160>>2]|0;
      $129 = (($128) + ($127))|0;
      HEAP32[795160>>2] = $129;
     }
     $130 = (_strlen(($buf|0))|0);
     $131 = $pos;
     $132 = (($131) + ($130))|0;
     $pos = $132;
     $133 = $1;
     $134 = (480 + ($133<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $1;
     $137 = (2080 + ($136<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = HEAP32[72>>2]|0;
     $140 = $pos;
     $141 = (_flist_sub($135,$138,1,0,$139,$140,$high,$low)|0);
     $142 = $pos;
     $143 = (($142) + ($141))|0;
     $pos = $143;
     $144 = $1;
     $145 = (2880 + ($144<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)!=(0);
     if ($147) {
      $148 = HEAP32[795152>>2]|0;
      $149 = ($148|0)==(0);
      if ($149) {
       $150 = HEAP32[41008>>2]|0;
       HEAP32[$vararg_buffer8>>2] = 794640;
       $151 = (_fprintf(($150|0),(794920|0),($vararg_buffer8|0))|0);
       $152 = HEAP32[795160>>2]|0;
       $153 = (($152) + ($151))|0;
       HEAP32[795160>>2] = $153;
      }
      $154 = $pos;
      $155 = (($154) + 3)|0;
      $pos = $155;
      $156 = $1;
      $157 = (1280 + ($156<<2)|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $sind;
      $160 = HEAP32[72>>2]|0;
      $161 = $pos;
      $162 = (_flist_sub($158,$159,1,0,$160,$161,$high,$low)|0);
      $163 = $pos;
      $164 = (($163) + ($162))|0;
      $pos = $164;
     }
     $165 = HEAP32[41008>>2]|0;
     (_fprintf(($165|0),(794656|0),($vararg_buffer11|0))|0);
     $166 = HEAP32[795152>>2]|0;
     $167 = (($166) + -1)|0;
     HEAP32[795152>>2] = $167;
    }
    $168 = $sind;
    $169 = $1;
    $170 = (2880 + ($169<<2)|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($168|0)<($171|0);
    if ($172) {
     $173 = HEAP32[41008>>2]|0;
     (_fprintf(($173|0),(794656|0),($vararg_buffer13|0))|0);
     $174 = HEAP32[$max2_line>>2]|0;
     HEAP32[795152>>2] = $174;
     while(1) {
      $175 = HEAP32[795152>>2]|0;
      $176 = HEAP32[$min2_line>>2]|0;
      $177 = ($175|0)>=($176|0);
      if (!($177)) {
       break;
      }
      HEAP32[795160>>2] = 0;
      $178 = $sind;
      $179 = $1;
      $180 = (1280 + ($179<<2)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (($181) + ($178<<4)|0);
      $183 = $1;
      $184 = (2880 + ($183<<2)|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = $sind;
      $187 = (($185) - ($186))|0;
      $188 = HEAP32[72>>2]|0;
      (_flist_sub($182,$187,1,0,$188,0,$high,$low)|0);
      $189 = HEAP32[41008>>2]|0;
      (_fprintf(($189|0),(794656|0),($vararg_buffer15|0))|0);
      $190 = HEAP32[795152>>2]|0;
      $191 = (($190) + -1)|0;
      HEAP32[795152>>2] = $191;
     }
    }
    $192 = HEAP32[41008>>2]|0;
    (_fprintf(($192|0),(794656|0),($vararg_buffer17|0))|0);
    $193 = $width;
    $0 = $193;
    $194 = $0;
    STACKTOP = sp;return ($194|0);
   }
  }
 }
 $0 = 0;
 $194 = $0;
 STACKTOP = sp;return ($194|0);
}
function _var_name($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $cp = 0;
 $1 = $0;
 $2 = (Math_abs(($1|0))|0);
 $3 = $2 & 16383;
 $4 = (($3) - 65)|0;
 $l = $4;
 $5 = $l;
 $6 = ($5|0)>=(0);
 if ($6) {
  $7 = $l;
  $8 = ($7|0)<(8000);
  if ($8) {
   $9 = $l;
   $10 = (3800 + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $cp = $11;
  }
 }
 $12 = $cp;
 STACKTOP = sp;return ($12|0);
}
function _list_var($v,$lang_code) {
 $v = $v|0;
 $lang_code = $lang_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $from_memory = 0, $j = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $v;
 $2 = $lang_code;
 $from_memory = 0;
 $cp = 0;
 HEAP8[35800>>0] = 0;
 $3 = $1;
 $4 = (Math_abs(($3|0))|0);
 $5 = $4 & 16383;
 switch ($5|0) {
 case 0:  {
  $6 = (_strlen((35800|0))|0);
  $0 = $6;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
  break;
 }
 case 2:  {
  $9 = $2;
  switch ($9|0) {
  case 2:  {
   $cp = 794808;
   break;
  }
  case -1:  {
   $cp = 794784;
   break;
  }
  case 3:  {
   $cp = 794816;
   break;
  }
  case -5:  {
   $cp = 794792;
   break;
  }
  case 1:  {
   $cp = 794800;
   break;
  }
  default: {
   $cp = 794824;
  }
  }
  break;
 }
 case 5:  {
  $cp = 794832;
  break;
 }
 case 4:  {
  $cp = 794664;
  break;
 }
 case 1:  {
  $8 = $2;
  switch ($8|0) {
  case 1:  {
   $cp = 794744;
   break;
  }
  case 2:  {
   $cp = 794752;
   break;
  }
  case -1:  {
   $cp = 794736;
   break;
  }
  case -5:  {
   $cp = 794768;
   break;
  }
  case -3:  {
   $cp = 794720;
   break;
  }
  case 3:  {
   $cp = 794760;
   break;
  }
  default: {
   $cp = 794776;
  }
  }
  break;
 }
 case 3:  {
  $7 = $2;
  switch ($7|0) {
  case -5:  {
   $cp = 794688;
   break;
  }
  case -1:  {
   $cp = 794696;
   break;
  }
  case -3:  {
   $cp = 794672;
   break;
  }
  case 3:  {
   $cp = 794704;
   break;
  }
  case -2: case -4: case 0:  {
   $cp = 794680;
   break;
  }
  default: {
   $cp = 794712;
  }
  }
  break;
 }
 default: {
  $10 = $1;
  $11 = (_var_name($10)|0);
  $cp = $11;
  $from_memory = 1;
 }
 }
 $12 = $cp;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = (Math_abs(($14|0))|0);
  $16 = $15 >> 14;
  $17 = $16 & 63;
  $j = $17;
  $18 = $j;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $cp;
   $21 = $j;
   $22 = (($21) - 1)|0;
   HEAP32[$vararg_buffer>>2] = $20;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $22;
   (_snprintf(35800,180,794840,$vararg_buffer)|0);
  } else {
   $23 = $cp;
   (_my_strlcpy(35800,$23,180)|0);
  }
 } else {
  (_my_strlcpy(35800,794848,180)|0);
 }
 $24 = $from_memory;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = $2;
  if ((($26|0) == -5) | (($26|0) == -4) | (($26|0) == 0)) {
  } else {
   $j = 0;
   while(1) {
    $27 = $j;
    $28 = (35800 + ($27)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)!=(0);
    if ($31) {
     $32 = $j;
     $33 = (35800 + ($32)|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = ($35|0)!=(40);
     $55 = $36;
    } else {
     $55 = 0;
    }
    if (!($55)) {
     break;
    }
    $37 = $j;
    $38 = (35800 + ($37)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = (_strchr(794864,$40)|0);
    $42 = ($41|0)==(0|0);
    if ($42) {
     $43 = $j;
     $44 = (35800 + ($43)|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45 << 24 >> 24;
     $47 = (_isalnum($46)|0);
     $48 = ($47|0)!=(0);
     if (!($48)) {
      $49 = $j;
      $50 = (35800 + ($49)|0);
      HEAP8[$50>>0] = 95;
     }
    }
    $51 = $j;
    $52 = (($51) + 1)|0;
    $j = $52;
   }
  }
 }
 $53 = (_strlen((35800|0))|0);
 $0 = $53;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _list_string_sub($p1,$n,$outflag,$string,$export_flag) {
 $p1 = $p1|0;
 $n = $n|0;
 $outflag = $outflag|0;
 $string = $string|0;
 $export_flag = $export_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf2 = 0, $cflag = 0, $cp = 0, $cur_level = 0, $export_precision = 0, $i = 0, $i1 = 0, $j = 0, $k = 0, $len = 0, $min1 = 0, $power_flag = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer45 = sp + 152|0;
 $vararg_buffer42 = sp + 144|0;
 $vararg_buffer39 = sp + 136|0;
 $vararg_buffer36 = sp + 128|0;
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer30 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 720|0;
 $buf2 = sp + 220|0;
 $0 = $p1;
 $1 = $n;
 $2 = $outflag;
 $3 = $string;
 $4 = $export_flag;
 $len = 0;
 $5 = $2;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $4;
  $8 = ($7|0)==(0);
  if ($8) {
   $382 = 1;
  } else {
   $9 = $4;
   $10 = ($9|0)==(4);
   $382 = $10;
  }
  $12 = $382;
 } else {
  $12 = 0;
 }
 $11 = $12&1;
 $cflag = $11;
 $13 = $cflag;
 $14 = ($13|0)!=(0);
 if ($14) {
  (_set_color(0)|0);
 }
 $15 = $3;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $3;
  HEAP8[$17>>0] = 0;
 }
 $18 = HEAP32[41232>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $export_precision = 20;
 } else {
  $export_precision = 15;
 }
 $20 = $0;
 $21 = $1;
 $22 = (_min_level($20,$21)|0);
 $min1 = $22;
 $cur_level = $22;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $1;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $power_flag = 0;
  $26 = $4;
  $27 = ($26|0)==(0);
  if ($27) {
   $28 = HEAP32[41232>>2]|0;
   $29 = ($28|0)!=(0);
   if (!($29)) {
    $30 = $i;
    $31 = (($30) - 1)|0;
    $j = $31;
    L23: while(1) {
     $32 = $j;
     $33 = $i;
     $34 = (($33) + 1)|0;
     $35 = ($32|0)<=($34|0);
     if (!($35)) {
      break;
     }
     $36 = $j;
     $37 = (($36) - 1)|0;
     $38 = ($37|0)>=(0);
     L26: do {
      if ($38) {
       $39 = $j;
       $40 = (($39) + 1)|0;
       $41 = $1;
       $42 = ($40|0)<($41|0);
       if ($42) {
        $43 = $j;
        $44 = $0;
        $45 = (($44) + ($43<<4)|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($46|0)==(2);
        if ($47) {
         $48 = $j;
         $49 = $0;
         $50 = (($49) + ($48<<4)|0);
         $51 = (($50) + 8|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($52|0)==(8);
         if (!($53)) {
          $54 = $j;
          $55 = $0;
          $56 = (($55) + ($54<<4)|0);
          $57 = (($56) + 8|0);
          $58 = HEAP32[$57>>2]|0;
          $59 = ($58|0)==(9);
          if (!($59)) {
           break;
          }
         }
         $60 = $j;
         $61 = (($60) - 1)|0;
         $62 = $0;
         $63 = (($62) + ($61<<4)|0);
         $64 = (($63) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = $j;
         $67 = $0;
         $68 = (($67) + ($66<<4)|0);
         $69 = (($68) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $71 = ($65|0)==($70|0);
         if ($71) {
          $72 = $j;
          $73 = (($72) + 1)|0;
          $74 = $0;
          $75 = (($74) + ($73<<4)|0);
          $76 = (($75) + 4|0);
          $77 = HEAP32[$76>>2]|0;
          $78 = $j;
          $79 = $0;
          $80 = (($79) + ($78<<4)|0);
          $81 = (($80) + 4|0);
          $82 = HEAP32[$81>>2]|0;
          $83 = ($77|0)==($82|0);
          if ($83) {
           $84 = $j;
           $85 = (($84) + 2)|0;
           $86 = $1;
           $87 = ($85|0)>=($86|0);
           do {
            if (!($87)) {
             $88 = $j;
             $89 = (($88) + 2)|0;
             $90 = $0;
             $91 = (($90) + ($89<<4)|0);
             $92 = (($91) + 4|0);
             $93 = HEAP32[$92>>2]|0;
             $94 = $j;
             $95 = $0;
             $96 = (($95) + ($94<<4)|0);
             $97 = (($96) + 4|0);
             $98 = HEAP32[$97>>2]|0;
             $99 = (($98) - 1)|0;
             $100 = ($93|0)!=($99|0);
             if ($100) {
              break;
             }
             $101 = $j;
             $102 = (($101) + 2)|0;
             $103 = $0;
             $104 = (($103) + ($102<<4)|0);
             $105 = (($104) + 8|0);
             $106 = HEAP32[$105>>2]|0;
             $107 = ($106|0)<(8);
             if (!($107)) {
              break L26;
             }
            }
           } while(0);
           $108 = $j;
           $109 = (($108) - 2)|0;
           $110 = ($109|0)<(0);
           if ($110) {
            label = 31;
            break L23;
           }
           $111 = $j;
           $112 = (($111) - 2)|0;
           $113 = $0;
           $114 = (($113) + ($112<<4)|0);
           $115 = (($114) + 4|0);
           $116 = HEAP32[$115>>2]|0;
           $117 = $j;
           $118 = $0;
           $119 = (($118) + ($117<<4)|0);
           $120 = (($119) + 4|0);
           $121 = HEAP32[$120>>2]|0;
           $122 = (($121) - 1)|0;
           $123 = ($116|0)!=($122|0);
           if ($123) {
            label = 31;
            break L23;
           }
           $124 = $j;
           $125 = (($124) - 2)|0;
           $126 = $0;
           $127 = (($126) + ($125<<4)|0);
           $128 = (($127) + 8|0);
           $129 = HEAP32[$128>>2]|0;
           $130 = ($129|0)<(8);
           if ($130) {
            label = 31;
            break L23;
           }
          }
         }
        }
       }
      }
     } while(0);
     $131 = $j;
     $132 = (($131) + 1)|0;
     $j = $132;
    }
    if ((label|0) == 31) {
     label = 0;
     $power_flag = 1;
    }
   }
  }
  $133 = $cur_level;
  $134 = $i;
  $135 = $0;
  $136 = (($135) + ($134<<4)|0);
  $137 = (($136) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($133) - ($138))|0;
  $j = $139;
  $140 = $power_flag;
  $141 = ($140|0)!=(0);
  if ($141) {
   $142 = $j;
   $143 = (Math_abs(($142|0))|0);
   $144 = (($143) - 1)|0;
   $k = $144;
  } else {
   $145 = $j;
   $146 = (Math_abs(($145|0))|0);
   $k = $146;
  }
  $i1 = 1;
  while(1) {
   $147 = $i1;
   $148 = $k;
   $149 = ($147|0)<=($148|0);
   if (!($149)) {
    break;
   }
   $150 = $j;
   $151 = ($150|0)>(0);
   if ($151) {
    $152 = $cur_level;
    $153 = (($152) + -1)|0;
    $cur_level = $153;
    $154 = $3;
    $155 = ($154|0)!=(0|0);
    if ($155) {
     $156 = $len;
     $157 = $3;
     $158 = (($157) + ($156)|0);
     (_strcpy(($158|0),(794912|0))|0);
    }
    $159 = $2;
    $160 = ($159|0)!=(0);
    if ($160) {
     $161 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer>>2] = 794912;
     (_fprintf(($161|0),(794920|0),($vararg_buffer|0))|0);
    }
    $162 = $len;
    $163 = (($162) + 1)|0;
    $len = $163;
    $164 = $cflag;
    $165 = ($164|0)!=(0);
    if ($165) {
     $166 = $cur_level;
     $167 = $min1;
     $168 = (($166) - ($167))|0;
     (_set_color($168)|0);
    }
   } else {
    $169 = $cur_level;
    $170 = (($169) + 1)|0;
    $cur_level = $170;
    $171 = $cflag;
    $172 = ($171|0)!=(0);
    if ($172) {
     $173 = $cur_level;
     $174 = $min1;
     $175 = (($173) - ($174))|0;
     (_set_color($175)|0);
    }
    $176 = $3;
    $177 = ($176|0)!=(0|0);
    if ($177) {
     $178 = $len;
     $179 = $3;
     $180 = (($179) + ($178)|0);
     (_strcpy(($180|0),(794928|0))|0);
    }
    $181 = $2;
    $182 = ($181|0)!=(0);
    if ($182) {
     $183 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer1>>2] = 794928;
     (_fprintf(($183|0),(794920|0),($vararg_buffer1|0))|0);
    }
    $184 = $len;
    $185 = (($184) + 1)|0;
    $len = $185;
   }
   $186 = $i1;
   $187 = (($186) + 1)|0;
   $i1 = $187;
  }
  $188 = $i;
  $189 = $0;
  $190 = (($189) + ($188<<4)|0);
  $191 = HEAP32[$190>>2]|0;
  L78: do {
   if ((($191|0) == 0)) {
    $192 = $i;
    $193 = $0;
    $194 = (($193) + ($192<<4)|0);
    $195 = (($194) + 8|0);
    $196 = +HEAPF64[$195>>3];
    $197 = $196 == 0.0;
    if ($197) {
     $198 = $i;
     $199 = $0;
     $200 = (($199) + ($198<<4)|0);
     $201 = (($200) + 8|0);
     HEAPF64[$201>>3] = 0.0;
    }
    $202 = $4;
    $203 = ($202|0)==(4);
    if ($203) {
     $204 = $i;
     $205 = $0;
     $206 = (($205) + ($204<<4)|0);
     $207 = (($206) + 8|0);
     $208 = +HEAPF64[$207>>3];
     HEAPF64[tempDoublePtr>>3]=$208;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2];
     (_snprintf($buf,500,794936,$vararg_buffer4)|0);
    } else {
     $209 = $4;
     $210 = ($209|0)==(3);
     if ($210) {
      $211 = $i;
      $212 = $0;
      $213 = (($212) + ($211<<4)|0);
      $214 = (($213) + 8|0);
      $215 = +HEAPF64[$214>>3];
      HEAP32[$vararg_buffer7>>2] = 15;
      $vararg_ptr10 = (($vararg_buffer7) + 4|0);
      HEAPF64[tempDoublePtr>>3]=$215;HEAP32[$vararg_ptr10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr10+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_snprintf($buf,500,794944,$vararg_buffer7)|0);
      _trim_zeros($buf);
     } else {
      $216 = $4;
      $217 = ($216|0)!=(0);
      do {
       if ($217) {
        label = 66;
       } else {
        $218 = HEAP32[41232>>2]|0;
        $219 = ($218|0)!=(0);
        if ($219) {
         label = 66;
        } else {
         $226 = HEAP32[88>>2]|0;
         $227 = ($226|0)>=(0);
         if ($227) {
          $228 = HEAP32[88>>2]|0;
          $229 = $i;
          $230 = $0;
          $231 = (($230) + ($229<<4)|0);
          $232 = (($231) + 8|0);
          $233 = +HEAPF64[$232>>3];
          HEAP32[$vararg_buffer15>>2] = $228;
          $vararg_ptr18 = (($vararg_buffer15) + 4|0);
          HEAPF64[tempDoublePtr>>3]=$233;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
          (_snprintf($buf,500,794960,$vararg_buffer15)|0);
          break;
         }
         $234 = $i;
         $235 = $0;
         $236 = (($235) + ($234<<4)|0);
         $237 = (($236) + 8|0);
         $238 = +HEAPF64[$237>>3];
         $239 = $238 < 0.0;
         do {
          if ($239) {
           $240 = $i;
           $241 = (($240) + 1)|0;
           $242 = $1;
           $243 = ($241|0)<($242|0);
           if (!($243)) {
            label = 74;
            break;
           }
           $244 = $i;
           $245 = (($244) + 1)|0;
           $246 = $0;
           $247 = (($246) + ($245<<4)|0);
           $248 = (($247) + 4|0);
           $249 = HEAP32[$248>>2]|0;
           $250 = $i;
           $251 = $0;
           $252 = (($251) + ($250<<4)|0);
           $253 = (($252) + 4|0);
           $254 = HEAP32[$253>>2]|0;
           $255 = ($249|0)==($254|0);
           if (!($255)) {
            label = 74;
            break;
           }
           $256 = $i;
           $257 = (($256) + 1)|0;
           $258 = $0;
           $259 = (($258) + ($257<<4)|0);
           $260 = (($259) + 8|0);
           $261 = HEAP32[$260>>2]|0;
           $262 = ($261|0)>=(8);
           if (!($262)) {
            label = 74;
            break;
           }
           $263 = HEAP32[16>>2]|0;
           $264 = $i;
           $265 = $0;
           $266 = (($265) + ($264<<4)|0);
           $267 = (($266) + 8|0);
           $268 = +HEAPF64[$267>>3];
           HEAP32[$vararg_buffer19>>2] = $263;
           $vararg_ptr22 = (($vararg_buffer19) + 4|0);
           HEAPF64[tempDoublePtr>>3]=$268;HEAP32[$vararg_ptr22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr22+4>>2]=HEAP32[tempDoublePtr+4>>2];
           (_snprintf($buf,500,794968,$vararg_buffer19)|0);
          } else {
           label = 74;
          }
         } while(0);
         if ((label|0) == 74) {
          label = 0;
          $269 = HEAP32[16>>2]|0;
          $270 = $i;
          $271 = $0;
          $272 = (($271) + ($270<<4)|0);
          $273 = (($272) + 8|0);
          $274 = +HEAPF64[$273>>3];
          HEAP32[$vararg_buffer23>>2] = $269;
          $vararg_ptr26 = (($vararg_buffer23) + 4|0);
          HEAPF64[tempDoublePtr>>3]=$274;HEAP32[$vararg_ptr26>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr26+4>>2]=HEAP32[tempDoublePtr+4>>2];
          (_snprintf($buf,500,794952,$vararg_buffer23)|0);
         }
         $275 = $3;
         $276 = ($275|0)!=(0|0);
         if ($276) {
          $277 = $len;
          $278 = $3;
          $279 = (($278) + ($277)|0);
          (_strcpy(($279|0),($buf|0))|0);
         }
         $280 = $2;
         $281 = ($280|0)!=(0);
         if ($281) {
          $282 = HEAP32[41008>>2]|0;
          HEAP32[$vararg_buffer27>>2] = $buf;
          (_fprintf(($282|0),(794920|0),($vararg_buffer27|0))|0);
         }
         $283 = (_strlen(($buf|0))|0);
         $284 = $len;
         $285 = (($284) + ($283))|0;
         $len = $285;
         break L78;
        }
       }
      } while(0);
      if ((label|0) == 66) {
       label = 0;
       $220 = $export_precision;
       $221 = $i;
       $222 = $0;
       $223 = (($222) + ($221<<4)|0);
       $224 = (($223) + 8|0);
       $225 = +HEAPF64[$224>>3];
       HEAP32[$vararg_buffer11>>2] = $220;
       $vararg_ptr14 = (($vararg_buffer11) + 4|0);
       HEAPF64[tempDoublePtr>>3]=$225;HEAP32[$vararg_ptr14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr14+4>>2]=HEAP32[tempDoublePtr+4>>2];
       (_snprintf($buf,500,794952,$vararg_buffer11)|0);
      }
     }
    }
    $286 = $i;
    $287 = $0;
    $288 = (($287) + ($286<<4)|0);
    $289 = (($288) + 8|0);
    $290 = +HEAPF64[$289>>3];
    $291 = $290 < 0.0;
    if ($291) {
     HEAP32[$vararg_buffer30>>2] = $buf;
     (_snprintf($buf2,500,794976,$vararg_buffer30)|0);
     $292 = $3;
     $293 = ($292|0)!=(0|0);
     if ($293) {
      $294 = $len;
      $295 = $3;
      $296 = (($295) + ($294)|0);
      (_strcpy(($296|0),($buf2|0))|0);
     }
     $297 = $2;
     $298 = ($297|0)!=(0);
     if ($298) {
      $299 = HEAP32[41008>>2]|0;
      HEAP32[$vararg_buffer33>>2] = $buf2;
      (_fprintf(($299|0),(794920|0),($vararg_buffer33|0))|0);
     }
     $300 = (_strlen(($buf2|0))|0);
     $301 = $len;
     $302 = (($301) + ($300))|0;
     $len = $302;
    } else {
     $303 = $3;
     $304 = ($303|0)!=(0|0);
     if ($304) {
      $305 = $len;
      $306 = $3;
      $307 = (($306) + ($305)|0);
      (_strcpy(($307|0),($buf|0))|0);
     }
     $308 = $2;
     $309 = ($308|0)!=(0);
     if ($309) {
      $310 = HEAP32[41008>>2]|0;
      HEAP32[$vararg_buffer36>>2] = $buf;
      (_fprintf(($310|0),(794920|0),($vararg_buffer36|0))|0);
     }
     $311 = (_strlen(($buf|0))|0);
     $312 = $len;
     $313 = (($312) + ($311))|0;
     $len = $313;
    }
   } else if ((($191|0) == 1)) {
    $314 = $i;
    $315 = $0;
    $316 = (($315) + ($314<<4)|0);
    $317 = (($316) + 8|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = $4;
    $320 = (0 - ($319))|0;
    (_list_var($318,$320)|0);
    $321 = $3;
    $322 = ($321|0)!=(0|0);
    if ($322) {
     $323 = $len;
     $324 = $3;
     $325 = (($324) + ($323)|0);
     (_strcpy(($325|0),(35800|0))|0);
    }
    $326 = $2;
    $327 = ($326|0)!=(0);
    if ($327) {
     $328 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer39>>2] = 35800;
     (_fprintf(($328|0),(794920|0),($vararg_buffer39|0))|0);
    }
    $329 = (_strlen((35800|0))|0);
    $330 = $len;
    $331 = (($330) + ($329))|0;
    $len = $331;
   } else if ((($191|0) == 2)) {
    $cp = 794984;
    $332 = $i;
    $333 = $0;
    $334 = (($333) + ($332<<4)|0);
    $335 = (($334) + 8|0);
    $336 = HEAP32[$335>>2]|0;
    switch ($336|0) {
    case 9:  {
     $cp = 795072;
     $341 = $i;
     $342 = (($341) + 1)|0;
     $i = $342;
     break;
    }
    case 1:  {
     $cp = 795008;
     break;
    }
    case 2:  {
     $cp = 795016;
     break;
    }
    case 8:  {
     $337 = HEAP32[3784>>2]|0;
     $338 = ($337|0)!=(0);
     if ($338) {
      label = 109;
     } else {
      $339 = $4;
      $340 = ($339|0)==(3);
      if ($340) {
       label = 109;
      } else {
       $cp = 795064;
      }
     }
     if ((label|0) == 109) {
      label = 0;
      $cp = 795056;
     }
     break;
    }
    case 4:  {
     $cp = 795024;
     break;
    }
    case 5:  {
     $cp = 795032;
     break;
    }
    case 7:  {
     $cp = 795040;
     break;
    }
    case 6:  {
     $cp = 795048;
     break;
    }
    default: {
    }
    }
    $343 = $3;
    $344 = ($343|0)!=(0|0);
    if ($344) {
     $345 = $len;
     $346 = $3;
     $347 = (($346) + ($345)|0);
     $348 = $cp;
     (_strcpy(($347|0),($348|0))|0);
    }
    $349 = $2;
    $350 = ($349|0)!=(0);
    if ($350) {
     $351 = HEAP32[41008>>2]|0;
     $352 = $cp;
     HEAP32[$vararg_buffer42>>2] = $352;
     (_fprintf(($351|0),(794920|0),($vararg_buffer42|0))|0);
    }
    $353 = $cp;
    $354 = (_strlen(($353|0))|0);
    $355 = $len;
    $356 = (($355) + ($354))|0;
    $len = $356;
   }
  } while(0);
  $357 = $i;
  $358 = (($357) + 1)|0;
  $i = $358;
 }
 $359 = $cur_level;
 $360 = $min1;
 $361 = (($359) - ($360))|0;
 $j = $361;
 while(1) {
  $362 = $j;
  $363 = ($362|0)>(0);
  if (!($363)) {
   break;
  }
  $364 = $3;
  $365 = ($364|0)!=(0|0);
  if ($365) {
   $366 = $len;
   $367 = $3;
   $368 = (($367) + ($366)|0);
   (_strcpy(($368|0),(794912|0))|0);
  }
  $369 = $2;
  $370 = ($369|0)!=(0);
  if ($370) {
   $371 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer45>>2] = 794912;
   (_fprintf(($371|0),(794920|0),($vararg_buffer45|0))|0);
  }
  $372 = $len;
  $373 = (($372) + 1)|0;
  $len = $373;
  $374 = $j;
  $375 = (($374) + -1)|0;
  $j = $375;
  $376 = $cflag;
  $377 = ($376|0)!=(0);
  if ($377) {
   $378 = $j;
   (_set_color($378)|0);
  }
 }
 $379 = $cflag;
 $380 = ($379|0)!=(0);
 if (!($380)) {
  $381 = $len;
  STACKTOP = sp;return ($381|0);
 }
 _default_color(0);
 $381 = $len;
 STACKTOP = sp;return ($381|0);
}
function _list_equation($n,$export_flag) {
 $n = $n|0;
 $export_flag = $export_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $cp = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $export_flag;
 $3 = $1;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $5 = $1;
  $6 = HEAP32[464>>2]|0;
  $7 = ($5|0)>=($6|0);
  if (!($7)) {
   $8 = $1;
   $9 = (2080 + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)<=(0);
   if (!($11)) {
    $12 = $1;
    $13 = (480 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $1;
    $16 = (2080 + ($15<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $2;
    $19 = (_list_string($14,$17,0,$18)|0);
    $len = $19;
    $20 = $1;
    $21 = (2880 + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)!=(0);
    if ($23) {
     $24 = $len;
     $25 = (($24) + 3)|0;
     $len = $25;
     $26 = $1;
     $27 = (1280 + ($26<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $1;
     $30 = (2880 + ($29<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $2;
     $33 = (_list_string($28,$31,0,$32)|0);
     $34 = $len;
     $35 = (($34) + ($33))|0;
     $len = $35;
    }
    $36 = $len;
    $37 = (($36) + 2)|0;
    $len = $37;
    $38 = $len;
    $39 = (_malloc($38)|0);
    $cp = $39;
    $40 = $cp;
    $41 = ($40|0)==(0|0);
    if ($41) {
     _error(794872);
     $0 = 0;
     $70 = $0;
     STACKTOP = sp;return ($70|0);
    }
    $42 = $1;
    $43 = (480 + ($42<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $1;
    $46 = (2080 + ($45<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $cp;
    $49 = $2;
    (_list_string($44,$47,$48,$49)|0);
    $50 = $1;
    $51 = (2880 + ($50<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)!=(0);
    if ($53) {
     $54 = $cp;
     (_strcat(($54|0),(794640|0))|0);
     $55 = $1;
     $56 = (1280 + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $1;
     $59 = (2880 + ($58<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = $cp;
     $62 = (_strlen(($61|0))|0);
     $63 = $cp;
     $64 = (($63) + ($62)|0);
     $65 = $2;
     (_list_string($57,$60,$64,$65)|0);
    }
    $66 = $2;
    $67 = ($66|0)==(1);
    if ($67) {
     $68 = $cp;
     (_strcat(($68|0),(794648|0))|0);
    }
    $69 = $cp;
    $0 = $69;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   }
  }
 }
 $0 = 0;
 $70 = $0;
 STACKTOP = sp;return ($70|0);
}
function _list_string($p1,$n,$string,$export_flag) {
 $p1 = $p1|0;
 $n = $n|0;
 $string = $string|0;
 $export_flag = $export_flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $n;
 $2 = $string;
 $3 = $export_flag;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_list_string_sub($4,$5,0,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _trim_zeros($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 $3 = (($2) - 1)|0;
 $j = $3;
 while(1) {
  $4 = $j;
  $5 = ($4|0)>=(0);
  if (!($5)) {
   label = 12;
   break;
  }
  $6 = $j;
  $7 = $0;
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(48);
  if ($11) {
  } else {
   $12 = $j;
   $13 = $0;
   $14 = (($13) + ($12)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = ($16|0)==(46);
   if (!($17)) {
    break;
   }
   $18 = $j;
   $19 = (($18) + 1)|0;
   $20 = $0;
   $21 = (($20) + ($19)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)!=(0);
   if ($23) {
    $24 = $j;
    $25 = (($24) + 2)|0;
    $26 = $0;
    $27 = (($26) + ($25)|0);
    HEAP8[$27>>0] = 0;
   }
  }
  $28 = $j;
  $29 = (($28) + -1)|0;
  $j = $29;
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _int_expr($p1,$n) {
 $p1 = $p1|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $n;
 $rv = 1;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 15;
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  if ((($9|0) == 0)) {
   $10 = $i;
   $11 = $1;
   $12 = (($11) + ($10<<4)|0);
   $13 = (($12) + 8|0);
   $14 = +HEAPF64[$13>>3];
   $15 = (+_fmod((+$14),1.0));
   $16 = $15 != 0.0;
   if ($16) {
    label = 5;
    break;
   }
  } else if ((($9|0) == 2)) {
   $23 = $i;
   $24 = $1;
   $25 = (($24) + ($23<<4)|0);
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(5);
   if ($28) {
    $rv = -1;
   }
  } else if ((($9|0) == 1)) {
   $17 = $i;
   $18 = $1;
   $19 = (($18) + ($17<<4)|0);
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)<(3);
   if ($22) {
    label = 8;
    break;
   }
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 15) {
  $31 = $rv;
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return 0|0;
}
function _list_code_equation($en,$language,$int_flag) {
 $en = $en|0;
 $language = $language|0;
 $int_flag = $int_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $en;
 $2 = $language;
 $3 = $int_flag;
 $len = 0;
 $4 = $1;
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = $1;
  $7 = HEAP32[464>>2]|0;
  $8 = ($6|0)>=($7|0);
  if (!($8)) {
   $9 = $1;
   $10 = (2080 + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)<=(0);
   if (!($12)) {
    $13 = $1;
    $14 = (480 + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $1;
    $17 = (2080 + ($16<<2)|0);
    $18 = $2;
    $19 = $3;
    $20 = (_list_code($15,$17,1,0,$18,$19)|0);
    $21 = $len;
    $22 = (($21) + ($20))|0;
    $len = $22;
    $23 = $1;
    $24 = (2880 + ($23<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0);
    if ($26) {
     $27 = HEAP32[41008>>2]|0;
     $28 = (_fprintf(($27|0),(794640|0),($vararg_buffer|0))|0);
     $29 = $len;
     $30 = (($29) + ($28))|0;
     $len = $30;
     $31 = $1;
     $32 = (1280 + ($31<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $1;
     $35 = (2880 + ($34<<2)|0);
     $36 = $2;
     $37 = $3;
     $38 = (_list_code($33,$35,1,0,$36,$37)|0);
     $39 = $len;
     $40 = (($39) + ($38))|0;
     $len = $40;
    }
    $41 = $2;
    if ((($41|0) == 2) | (($41|0) == 1)) {
     $42 = HEAP32[41008>>2]|0;
     $43 = (_fprintf(($42|0),(794648|0),($vararg_buffer1|0))|0);
     $44 = $len;
     $45 = (($44) + ($43))|0;
     $len = $45;
    } else {
    }
    $46 = HEAP32[41008>>2]|0;
    (_fprintf(($46|0),(794656|0),($vararg_buffer3|0))|0);
    $47 = $len;
    $0 = $47;
    $48 = $0;
    STACKTOP = sp;return ($48|0);
   }
  }
 }
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _list_code($equation,$np,$outflag,$string,$language,$int_flag) {
 $equation = $equation|0;
 $np = $np|0;
 $outflag = $outflag|0;
 $string = $string|0;
 $language = $language|0;
 $int_flag = $int_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf2 = 0, $cp = 0, $cur_level = 0, $i = 0, $i1 = 0, $i2 = 0, $j = 0, $k = 0, $len = 0, $min1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 676|0;
 $buf2 = sp + 176|0;
 $0 = $equation;
 $1 = $np;
 $2 = $outflag;
 $3 = $string;
 $4 = $language;
 $5 = $int_flag;
 $len = 0;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  HEAP8[$8>>0] = 0;
 }
 $9 = $0;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_min_level($9,$11)|0);
 $min1 = $12;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(1);
 if ($15) {
  $16 = $min1;
  $17 = (($16) + -1)|0;
  $min1 = $17;
 }
 $18 = $min1;
 $cur_level = $18;
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = $1;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $cur_level;
  $24 = $i;
  $25 = $0;
  $26 = (($25) + ($24<<4)|0);
  $27 = (($26) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($23) - ($28))|0;
  $j = $29;
  $30 = $j;
  $31 = (Math_abs(($30|0))|0);
  $k = $31;
  $i1 = 1;
  while(1) {
   $32 = $i1;
   $33 = $k;
   $34 = ($32|0)<=($33|0);
   if (!($34)) {
    break;
   }
   $35 = $j;
   $36 = ($35|0)>(0);
   if ($36) {
    $37 = $cur_level;
    $38 = (($37) + -1)|0;
    $cur_level = $38;
    $39 = $3;
    $40 = ($39|0)!=(0|0);
    if ($40) {
     $41 = $len;
     $42 = $3;
     $43 = (($42) + ($41)|0);
     (_strcpy(($43|0),(794912|0))|0);
    }
    $44 = $2;
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer>>2] = 794912;
     (_fprintf(($46|0),(794920|0),($vararg_buffer|0))|0);
    }
    $47 = $len;
    $48 = (($47) + 1)|0;
    $len = $48;
   } else {
    $49 = $cur_level;
    $50 = (($49) + 1)|0;
    $cur_level = $50;
    $51 = $i;
    $52 = (($51) + 1)|0;
    $i2 = $52;
    while(1) {
     $53 = $i2;
     $54 = $1;
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)<($55|0);
     if ($56) {
      $57 = $i2;
      $58 = $0;
      $59 = (($58) + ($57<<4)|0);
      $60 = (($59) + 4|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = $cur_level;
      $63 = ($61|0)>=($62|0);
      $304 = $63;
     } else {
      $304 = 0;
     }
     if (!($304)) {
      break;
     }
     $64 = $i2;
     $65 = $0;
     $66 = (($65) + ($64<<4)|0);
     $67 = (($66) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $cur_level;
     $70 = ($68|0)==($69|0);
     if ($70) {
      label = 20;
      break;
     }
     $150 = $i2;
     $151 = (($150) + 2)|0;
     $i2 = $151;
    }
    if ((label|0) == 20) {
     label = 0;
     $71 = $i2;
     $72 = $0;
     $73 = (($72) + ($71<<4)|0);
     $74 = (($73) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     if ((($75|0) == 9)) {
      $140 = $3;
      $141 = ($140|0)!=(0|0);
      if ($141) {
       $142 = $len;
       $143 = $3;
       $144 = (($143) + ($142)|0);
       (_strcpy(($144|0),(795104|0))|0);
      }
      $145 = $2;
      $146 = ($145|0)!=(0);
      if ($146) {
       $147 = HEAP32[41008>>2]|0;
       HEAP32[$vararg_buffer7>>2] = 795104;
       (_fprintf(($147|0),(794920|0),($vararg_buffer7|0))|0);
      }
      $148 = $len;
      $149 = (($148) + 9)|0;
      $len = $149;
     } else if ((($75|0) == 8)) {
      $76 = $i2;
      $77 = (($76) - 1)|0;
      $78 = $0;
      $79 = (($78) + ($77<<4)|0);
      $80 = (($79) + 4|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $cur_level;
      $83 = ($81|0)==($82|0);
      if ($83) {
       $84 = $i2;
       $85 = (($84) + 1)|0;
       $86 = $0;
       $87 = (($86) + ($85<<4)|0);
       $88 = (($87) + 4|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = $cur_level;
       $91 = ($89|0)==($90|0);
       if ($91) {
        $92 = $i2;
        $93 = (($92) + 1)|0;
        $94 = $0;
        $95 = (($94) + ($93<<4)|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($96|0)==(0);
        if ($97) {
         $98 = $i2;
         $99 = (($98) + 1)|0;
         $100 = $0;
         $101 = (($100) + ($99<<4)|0);
         $102 = (($101) + 8|0);
         $103 = +HEAPF64[$102>>3];
         $104 = $103 == 2.0;
         if ($104) {
          $105 = $i2;
          $106 = $0;
          $107 = (($106) + ($105<<4)|0);
          $108 = (($107) + 8|0);
          HEAP32[$108>>2] = 4;
          $109 = $i2;
          $110 = (($109) + 1)|0;
          $111 = $0;
          $112 = (($111) + ($110<<4)|0);
          $113 = $i2;
          $114 = (($113) - 1)|0;
          $115 = $0;
          $116 = (($115) + ($114<<4)|0);
          ;HEAP32[$112+0>>2]=HEAP32[$116+0>>2]|0;HEAP32[$112+4>>2]=HEAP32[$116+4>>2]|0;HEAP32[$112+8>>2]=HEAP32[$116+8>>2]|0;HEAP32[$112+12>>2]=HEAP32[$116+12>>2]|0;
         } else {
          label = 26;
         }
        } else {
         label = 26;
        }
       } else {
        label = 26;
       }
      } else {
       label = 26;
      }
      if ((label|0) == 26) {
       label = 0;
       $117 = $5;
       $118 = ($117|0)!=(0);
       if (!($118)) {
        $119 = $4;
        if ((($119|0) == 1)) {
         $120 = $3;
         $121 = ($120|0)!=(0|0);
         if ($121) {
          $122 = $len;
          $123 = $3;
          $124 = (($123) + ($122)|0);
          (_strcpy(($124|0),(795080|0))|0);
         }
         $125 = $2;
         $126 = ($125|0)!=(0);
         if ($126) {
          $127 = HEAP32[41008>>2]|0;
          HEAP32[$vararg_buffer1>>2] = 795080;
          (_fprintf(($127|0),(794920|0),($vararg_buffer1|0))|0);
         }
         $128 = $len;
         $129 = (($128) + 3)|0;
         $len = $129;
        } else if ((($119|0) == 2)) {
         $130 = $3;
         $131 = ($130|0)!=(0|0);
         if ($131) {
          $132 = $len;
          $133 = $3;
          $134 = (($133) + ($132)|0);
          (_strcpy(($134|0),(795088|0))|0);
         }
         $135 = $2;
         $136 = ($135|0)!=(0);
         if ($136) {
          $137 = HEAP32[41008>>2]|0;
          HEAP32[$vararg_buffer4>>2] = 795088;
          (_fprintf(($137|0),(794920|0),($vararg_buffer4|0))|0);
         }
         $138 = $len;
         $139 = (($138) + 8)|0;
         $len = $139;
        } else {
        }
       }
      }
     }
    }
    $152 = $3;
    $153 = ($152|0)!=(0|0);
    if ($153) {
     $154 = $len;
     $155 = $3;
     $156 = (($155) + ($154)|0);
     (_strcpy(($156|0),(794928|0))|0);
    }
    $157 = $2;
    $158 = ($157|0)!=(0);
    if ($158) {
     $159 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer10>>2] = 794928;
     (_fprintf(($159|0),(794920|0),($vararg_buffer10|0))|0);
    }
    $160 = $len;
    $161 = (($160) + 1)|0;
    $len = $161;
   }
   $162 = $i1;
   $163 = (($162) + 1)|0;
   $i1 = $163;
  }
  $164 = $i;
  $165 = $0;
  $166 = (($165) + ($164<<4)|0);
  $167 = HEAP32[$166>>2]|0;
  if ((($167|0) == 2)) {
   $cp = 794984;
   $257 = $i;
   $258 = $0;
   $259 = (($258) + ($257<<4)|0);
   $260 = (($259) + 8|0);
   $261 = HEAP32[$260>>2]|0;
   L82: do {
    switch ($261|0) {
    case 5:  {
     label = 97;
     break;
    }
    case 6:  {
     $cp = 795048;
     break;
    }
    case 7:  {
     $262 = $4;
     $263 = ($262|0)==(3);
     if ($263) {
      $cp = 795040;
      break L82;
     } else {
      label = 97;
      break L82;
     }
     break;
    }
    case 9:  {
     $cp = 795144;
     $268 = $i;
     $269 = (($268) + 1)|0;
     $i = $269;
     break;
    }
    case 8:  {
     $264 = $5;
     $265 = ($264|0)!=(0);
     if ($265) {
      label = 101;
     } else {
      $266 = $4;
      $267 = ($266|0)==(3);
      if ($267) {
       label = 101;
      } else {
       $cp = 795136;
      }
     }
     if ((label|0) == 101) {
      label = 0;
      $cp = 795056;
     }
     break;
    }
    case 1:  {
     $cp = 795008;
     break;
    }
    case 2:  {
     $cp = 795016;
     break;
    }
    case 4:  {
     $cp = 795024;
     break;
    }
    default: {
    }
    }
   } while(0);
   if ((label|0) == 97) {
    label = 0;
    $cp = 795032;
   }
   $270 = $3;
   $271 = ($270|0)!=(0|0);
   if ($271) {
    $272 = $len;
    $273 = $3;
    $274 = (($273) + ($272)|0);
    $275 = $cp;
    (_strcpy(($274|0),($275|0))|0);
   }
   $276 = $2;
   $277 = ($276|0)!=(0);
   if ($277) {
    $278 = HEAP32[41008>>2]|0;
    $279 = $cp;
    HEAP32[$vararg_buffer35>>2] = $279;
    (_fprintf(($278|0),(794920|0),($vararg_buffer35|0))|0);
   }
   $280 = $cp;
   $281 = (_strlen(($280|0))|0);
   $282 = $len;
   $283 = (($282) + ($281))|0;
   $len = $283;
  } else if ((($167|0) == 0)) {
   $168 = $i;
   $169 = $0;
   $170 = (($169) + ($168<<4)|0);
   $171 = (($170) + 8|0);
   $172 = +HEAPF64[$171>>3];
   $173 = $172 == 0.0;
   if ($173) {
    $174 = $i;
    $175 = $0;
    $176 = (($175) + ($174<<4)|0);
    $177 = (($176) + 8|0);
    HEAPF64[$177>>3] = 0.0;
   }
   $178 = $5;
   $179 = ($178|0)!=(0);
   if ($179) {
    $180 = $i;
    $181 = $0;
    $182 = (($181) + ($180<<4)|0);
    $183 = (($182) + 8|0);
    $184 = +HEAPF64[$183>>3];
    HEAPF64[tempDoublePtr>>3]=$184;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_snprintf($buf,500,795120,$vararg_buffer13)|0);
   } else {
    $185 = $i;
    $186 = $0;
    $187 = (($186) + ($185<<4)|0);
    $188 = (($187) + 8|0);
    $189 = +HEAPF64[$188>>3];
    HEAP32[$vararg_buffer16>>2] = 15;
    $vararg_ptr19 = (($vararg_buffer16) + 4|0);
    HEAPF64[tempDoublePtr>>3]=$189;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_snprintf($buf,500,794944,$vararg_buffer16)|0);
    _trim_zeros($buf);
   }
   $190 = $i;
   $191 = $0;
   $192 = (($191) + ($190<<4)|0);
   $193 = (($192) + 8|0);
   $194 = +HEAPF64[$193>>3];
   $195 = $194 < 0.0;
   if ($195) {
    HEAP32[$vararg_buffer20>>2] = $buf;
    (_snprintf($buf2,500,794976,$vararg_buffer20)|0);
    $196 = $3;
    $197 = ($196|0)!=(0|0);
    if ($197) {
     $198 = $len;
     $199 = $3;
     $200 = (($199) + ($198)|0);
     (_strcpy(($200|0),($buf2|0))|0);
    }
    $201 = $2;
    $202 = ($201|0)!=(0);
    if ($202) {
     $203 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer23>>2] = $buf2;
     (_fprintf(($203|0),(794920|0),($vararg_buffer23|0))|0);
    }
    $204 = (_strlen(($buf2|0))|0);
    $205 = $len;
    $206 = (($205) + ($204))|0;
    $len = $206;
   } else {
    $207 = $3;
    $208 = ($207|0)!=(0|0);
    if ($208) {
     $209 = $len;
     $210 = $3;
     $211 = (($210) + ($209)|0);
     (_strcpy(($211|0),($buf|0))|0);
    }
    $212 = $2;
    $213 = ($212|0)!=(0);
    if ($213) {
     $214 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer26>>2] = $buf;
     (_fprintf(($214|0),(794920|0),($vararg_buffer26|0))|0);
    }
    $215 = (_strlen(($buf|0))|0);
    $216 = $len;
    $217 = (($216) + ($215))|0;
    $len = $217;
   }
  } else if ((($167|0) == 1)) {
   $218 = $5;
   $219 = ($218|0)!=(0);
   do {
    if ($219) {
     $220 = $4;
     $221 = ($220|0)==(1);
     if (!($221)) {
      $222 = $4;
      $223 = ($222|0)==(2);
      if (!($223)) {
       label = 84;
       break;
      }
     }
     $224 = $i;
     $225 = $0;
     $226 = (($225) + ($224<<4)|0);
     $227 = (($226) + 8|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = ($228|0)==(3);
     if ($229) {
      $230 = $3;
      $231 = ($230|0)!=(0|0);
      if ($231) {
       $232 = $len;
       $233 = $3;
       $234 = (($233) + ($232)|0);
       (_strcpy(($234|0),(795128|0))|0);
      }
      $235 = $2;
      $236 = ($235|0)!=(0);
      if ($236) {
       $237 = HEAP32[41008>>2]|0;
       HEAP32[$vararg_buffer29>>2] = 795128;
       (_fprintf(($237|0),(794920|0),($vararg_buffer29|0))|0);
      }
      $238 = $len;
      $239 = (($238) + 2)|0;
      $len = $239;
     } else {
      label = 84;
     }
    } else {
     label = 84;
    }
   } while(0);
   if ((label|0) == 84) {
    label = 0;
    $240 = $i;
    $241 = $0;
    $242 = (($241) + ($240<<4)|0);
    $243 = (($242) + 8|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $4;
    (_list_var($244,$245)|0);
    $246 = $3;
    $247 = ($246|0)!=(0|0);
    if ($247) {
     $248 = $len;
     $249 = $3;
     $250 = (($249) + ($248)|0);
     (_strcpy(($250|0),(35800|0))|0);
    }
    $251 = $2;
    $252 = ($251|0)!=(0);
    if ($252) {
     $253 = HEAP32[41008>>2]|0;
     HEAP32[$vararg_buffer32>>2] = 35800;
     (_fprintf(($253|0),(794920|0),($vararg_buffer32|0))|0);
    }
    $254 = (_strlen((35800|0))|0);
    $255 = $len;
    $256 = (($255) + ($254))|0;
    $len = $256;
   }
  }
  $284 = $i;
  $285 = (($284) + 1)|0;
  $i = $285;
 }
 $286 = $cur_level;
 $287 = $min1;
 $288 = (($286) - ($287))|0;
 $j = $288;
 while(1) {
  $289 = $j;
  $290 = ($289|0)>(0);
  if (!($290)) {
   break;
  }
  $291 = $3;
  $292 = ($291|0)!=(0|0);
  if ($292) {
   $293 = $len;
   $294 = $3;
   $295 = (($294) + ($293)|0);
   (_strcpy(($295|0),(794912|0))|0);
  }
  $296 = $2;
  $297 = ($296|0)!=(0);
  if ($297) {
   $298 = HEAP32[41008>>2]|0;
   HEAP32[$vararg_buffer38>>2] = 794912;
   (_fprintf(($298|0),(794920|0),($vararg_buffer38|0))|0);
  }
  $299 = $len;
  $300 = (($299) + 1)|0;
  $len = $300;
  $301 = $j;
  $302 = (($301) + -1)|0;
  $j = $302;
 }
 $303 = $len;
 STACKTOP = sp;return ($303|0);
}
function _string_code_equation($en,$language,$int_flag) {
 $en = $en|0;
 $language = $language|0;
 $int_flag = $int_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $cp = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $en;
 $2 = $language;
 $3 = $int_flag;
 $4 = $1;
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = $1;
  $7 = HEAP32[464>>2]|0;
  $8 = ($6|0)>=($7|0);
  if (!($8)) {
   $9 = $1;
   $10 = (2080 + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)<=(0);
   if (!($12)) {
    $13 = $1;
    $14 = (480 + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $1;
    $17 = (2080 + ($16<<2)|0);
    $18 = $2;
    $19 = $3;
    $20 = (_list_code($15,$17,0,0,$18,$19)|0);
    $len = $20;
    $21 = $1;
    $22 = (2880 + ($21<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)!=(0);
    if ($24) {
     $25 = $len;
     $26 = (($25) + 3)|0;
     $len = $26;
     $27 = $1;
     $28 = (1280 + ($27<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $1;
     $31 = (2880 + ($30<<2)|0);
     $32 = $2;
     $33 = $3;
     $34 = (_list_code($29,$31,0,0,$32,$33)|0);
     $35 = $len;
     $36 = (($35) + ($34))|0;
     $len = $36;
    }
    $37 = $len;
    $38 = (($37) + 2)|0;
    $len = $38;
    $39 = $len;
    $40 = (_malloc($39)|0);
    $cp = $40;
    $41 = $cp;
    $42 = ($41|0)==(0|0);
    if ($42) {
     _error(794872);
     $0 = 0;
     $70 = $0;
     STACKTOP = sp;return ($70|0);
    }
    $43 = $1;
    $44 = (480 + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $1;
    $47 = (2080 + ($46<<2)|0);
    $48 = $cp;
    $49 = $2;
    $50 = $3;
    (_list_code($45,$47,0,$48,$49,$50)|0);
    $51 = $1;
    $52 = (2880 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)!=(0);
    if ($54) {
     $55 = $cp;
     (_strcat(($55|0),(794640|0))|0);
     $56 = $1;
     $57 = (1280 + ($56<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $1;
     $60 = (2880 + ($59<<2)|0);
     $61 = $cp;
     $62 = (_strlen(($61|0))|0);
     $63 = $cp;
     $64 = (($63) + ($62)|0);
     $65 = $2;
     $66 = $3;
     (_list_code($58,$60,0,$64,$65,$66)|0);
    }
    $67 = $2;
    if ((($67|0) == 2) | (($67|0) == 1)) {
     $68 = $cp;
     (_strcat(($68|0),(794648|0))|0);
    } else {
    }
    $69 = $cp;
    $0 = $69;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   }
  }
 }
 $0 = 0;
 $70 = $0;
 STACKTOP = sp;return ($70|0);
}
function _flist_equation_string($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf_len = 0, $cp = 0, $cur_len = 0, $high = 0, $i = 0, $len = 0, $low = 0, $max_line = 0, $min_line = 0, $pos = 0;
 var $screen_line = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $high = sp + 20|0;
 $low = sp + 16|0;
 $max_line = sp + 12|0;
 $min_line = sp + 8|0;
 $1 = $n;
 HEAP32[$high>>2] = 0;
 HEAP32[$low>>2] = 0;
 HEAP32[$max_line>>2] = 0;
 HEAP32[$min_line>>2] = 0;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $1;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $11 = (_malloc_vscreen()|0);
    $12 = ($11|0)!=(0);
    if (!($12)) {
     $0 = 0;
     $149 = $0;
     STACKTOP = sp;return ($149|0);
    }
    $i = 0;
    while(1) {
     $13 = $i;
     $14 = ($13|0)<(24);
     if (!($14)) {
      break;
     }
     $15 = $i;
     $16 = (41344 + ($15<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     HEAP8[$17>>0] = 0;
     $18 = $i;
     $19 = (($18) + 1)|0;
     $i = $19;
    }
    HEAP32[795152>>2] = 0;
    HEAP32[795160>>2] = 0;
    $20 = $1;
    $21 = (480 + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $1;
    $24 = (2080 + ($23<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[41440>>2]|0;
    $27 = (_flist_sub($22,$25,0,0,$26,0,$max_line,$min_line)|0);
    $len = $27;
    $28 = $1;
    $29 = (2880 + ($28<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)!=(0);
    if ($31) {
     $32 = $len;
     $33 = (($32) + 3)|0;
     $len = $33;
     $34 = $1;
     $35 = (1280 + ($34<<2)|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $1;
     $38 = (2880 + ($37<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[41440>>2]|0;
     $41 = (_flist_sub($36,$39,0,0,$40,0,$high,$low)|0);
     $42 = $len;
     $43 = (($42) + ($41))|0;
     $len = $43;
     $44 = HEAP32[$high>>2]|0;
     $45 = HEAP32[$max_line>>2]|0;
     $46 = ($44|0)>($45|0);
     if ($46) {
      $47 = HEAP32[$high>>2]|0;
      HEAP32[$max_line>>2] = $47;
     }
     $48 = HEAP32[$low>>2]|0;
     $49 = HEAP32[$min_line>>2]|0;
     $50 = ($48|0)<($49|0);
     if ($50) {
      $51 = HEAP32[$low>>2]|0;
      HEAP32[$min_line>>2] = $51;
     }
    }
    $52 = HEAP32[$max_line>>2]|0;
    $53 = HEAP32[$min_line>>2]|0;
    $54 = (($52) - ($53))|0;
    $55 = ($54|0)>=(24);
    if ($55) {
     $0 = 0;
     $149 = $0;
     STACKTOP = sp;return ($149|0);
    }
    $56 = HEAP32[$max_line>>2]|0;
    HEAP32[795152>>2] = $56;
    $screen_line = 0;
    while(1) {
     $57 = HEAP32[795152>>2]|0;
     $58 = HEAP32[$min_line>>2]|0;
     $59 = ($57|0)>=($58|0);
     if (!($59)) {
      break;
     }
     HEAP32[795160>>2] = 0;
     $pos = 0;
     $60 = $1;
     $61 = (480 + ($60<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $1;
     $64 = (2080 + ($63<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $screen_line;
     $67 = (41344 + ($66<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = HEAP32[41440>>2]|0;
     $70 = $pos;
     $71 = (_flist_sub($62,$65,1,$68,$69,$70,$high,$low)|0);
     $72 = $pos;
     $73 = (($72) + ($71))|0;
     $pos = $73;
     $74 = $1;
     $75 = (2880 + ($74<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)!=(0);
     if ($77) {
      $78 = HEAP32[795152>>2]|0;
      $79 = ($78|0)==(0);
      if ($79) {
       $80 = HEAP32[795160>>2]|0;
       $81 = (($80) + 3)|0;
       HEAP32[795160>>2] = $81;
       $82 = $screen_line;
       $83 = (41344 + ($82<<2)|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (_strlen(($84|0))|0);
       $cur_len = $85;
       $86 = HEAP32[41440>>2]|0;
       $87 = $cur_len;
       $88 = (($86) - ($87))|0;
       $89 = ($88|0)>(0);
       if ($89) {
        $90 = $cur_len;
        $91 = $screen_line;
        $92 = (41344 + ($91<<2)|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = (($93) + ($90)|0);
        $95 = HEAP32[41440>>2]|0;
        $96 = $cur_len;
        $97 = (($95) - ($96))|0;
        (_my_strlcpy($94,794640,$97)|0);
       }
      }
      $98 = $pos;
      $99 = (($98) + 3)|0;
      $pos = $99;
      $100 = $1;
      $101 = (1280 + ($100<<2)|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = $1;
      $104 = (2880 + ($103<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $screen_line;
      $107 = (41344 + ($106<<2)|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = HEAP32[41440>>2]|0;
      $110 = $pos;
      $111 = (_flist_sub($102,$105,1,$108,$109,$110,$high,$low)|0);
      $112 = $pos;
      $113 = (($112) + ($111))|0;
      $pos = $113;
     }
     $114 = HEAP32[795152>>2]|0;
     $115 = (($114) + -1)|0;
     HEAP32[795152>>2] = $115;
     $116 = $screen_line;
     $117 = (($116) + 1)|0;
     $screen_line = $117;
    }
    $118 = $screen_line;
    $119 = ($118|0)<=(0);
    if ($119) {
     $0 = 0;
     $149 = $0;
     STACKTOP = sp;return ($149|0);
    }
    $i = 0;
    $buf_len = 1;
    while(1) {
     $120 = $i;
     $121 = $screen_line;
     $122 = ($120|0)<($121|0);
     if (!($122)) {
      break;
     }
     $123 = $i;
     $124 = (41344 + ($123<<2)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (_strlen(($125|0))|0);
     $127 = $buf_len;
     $128 = (($127) + ($126))|0;
     $buf_len = $128;
     $129 = $buf_len;
     $130 = (($129) + 1)|0;
     $buf_len = $130;
     $131 = $i;
     $132 = (($131) + 1)|0;
     $i = $132;
    }
    $133 = $buf_len;
    $134 = (_malloc($133)|0);
    $cp = $134;
    $135 = $cp;
    $136 = ($135|0)==(0|0);
    if ($136) {
     _error(794872);
     $0 = 0;
     $149 = $0;
     STACKTOP = sp;return ($149|0);
    }
    $137 = $cp;
    HEAP8[$137>>0] = 0;
    $i = 0;
    while(1) {
     $138 = $i;
     $139 = $screen_line;
     $140 = ($138|0)<($139|0);
     if (!($140)) {
      break;
     }
     $141 = $cp;
     $142 = $i;
     $143 = (41344 + ($142<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     (_strcat(($141|0),($144|0))|0);
     $145 = $cp;
     (_strcat(($145|0),(794656|0))|0);
     $146 = $i;
     $147 = (($146) + 1)|0;
     $i = $147;
    }
    $148 = $cp;
    $0 = $148;
    $149 = $0;
    STACKTOP = sp;return ($149|0);
   }
  }
 }
 $0 = 0;
 $149 = $0;
 STACKTOP = sp;return ($149|0);
}
function _flist_sub($p1,$n,$out_flag,$string,$sbuffer_size,$pos,$highp,$lowp) {
 $p1 = $p1|0;
 $n = $n|0;
 $out_flag = $out_flag|0;
 $string = $string|0;
 $sbuffer_size = $sbuffer_size|0;
 $pos = $pos|0;
 $highp = $highp|0;
 $lowp = $lowp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $n;
 $2 = $out_flag;
 $3 = $string;
 $4 = $sbuffer_size;
 $5 = $pos;
 $6 = $highp;
 $7 = $lowp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = (_flist_recurse($8,$9,$10,$11,$12,0,$13,1,$14,$15)|0);
 $rv = $16;
 $17 = $2;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $3;
  $20 = ($19|0)==(0|0);
  if ($20) {
   _default_color(0);
  }
 }
 $21 = $rv;
 STACKTOP = sp;return ($21|0);
}
function _flist_recurse($p1,$n,$out_flag,$string,$sbuffer_size,$line,$pos,$cur_level,$highp,$lowp) {
 $p1 = $p1|0;
 $n = $n|0;
 $out_flag = $out_flag|0;
 $string = $string|0;
 $sbuffer_size = $sbuffer_size|0;
 $line = $line|0;
 $pos = $pos|0;
 $cur_level = $cur_level|0;
 $highp = $highp|0;
 $lowp = $lowp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0.0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0.0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $cflag = 0, $cp = 0;
 var $current_len = 0, $div_loc = 0, $high = 0, $html_out = 0, $i = 0, $i1 = 0, $ii = 0, $j = 0, $k = 0, $l1 = 0, $l2 = 0, $len = 0, $len1 = 0, $len2 = 0, $len_div = 0, $level = 0, $low = 0, $oflag = 0, $power_flag = 0, $start_level = 0;
 var $stop_at = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer53 = sp + 176|0;
 $vararg_buffer50 = sp + 168|0;
 $vararg_buffer47 = sp + 160|0;
 $vararg_buffer44 = sp + 152|0;
 $vararg_buffer41 = sp + 144|0;
 $vararg_buffer38 = sp + 136|0;
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer31 = sp + 112|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $high = sp + 188|0;
 $low = sp + 184|0;
 $buf = sp + 316|0;
 $1 = $p1;
 $2 = $n;
 $3 = $out_flag;
 $4 = $string;
 $5 = $sbuffer_size;
 $6 = $line;
 $7 = $pos;
 $8 = $cur_level;
 $9 = $highp;
 $10 = $lowp;
 $len = 0;
 $current_len = 0;
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $4;
  $14 = (_strlen(($13|0))|0);
  $current_len = $14;
 }
 $15 = $8;
 $start_level = $15;
 $16 = $6;
 $17 = $9;
 HEAP32[$17>>2] = $16;
 $18 = $6;
 $19 = $10;
 HEAP32[$19>>2] = $18;
 $20 = $2;
 $21 = ($20|0)<=(0);
 if ($21) {
  $0 = 0;
  $915 = $0;
  STACKTOP = sp;return ($915|0);
 }
 $22 = $3;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $6;
  $25 = HEAP32[795152>>2]|0;
  $26 = ($24|0)==($25|0);
  $28 = $26;
 } else {
  $28 = 0;
 }
 $27 = $28&1;
 $oflag = $27;
 $29 = $oflag;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $4;
  $32 = ($31|0)==(0|0);
  $34 = $32;
 } else {
  $34 = 0;
 }
 $33 = $34&1;
 $cflag = $33;
 $35 = HEAP32[3792>>2]|0;
 $36 = ($35|0)==(2);
 if ($36) {
  $43 = 1;
 } else {
  $37 = HEAP32[3792>>2]|0;
  $38 = ($37|0)!=(0);
  if ($38) {
   $39 = HEAP32[41008>>2]|0;
   $40 = HEAP32[_stdout>>2]|0;
   $41 = ($39|0)==($40|0);
   $916 = $41;
  } else {
   $916 = 0;
  }
  $43 = $916;
 }
 $42 = $43&1;
 $html_out = $42;
 $44 = $oflag;
 $45 = ($44|0)!=(0);
 if ($45) {
  while(1) {
   $46 = HEAP32[795160>>2]|0;
   $47 = $7;
   $48 = ($46|0)<($47|0);
   if (!($48)) {
    break;
   }
   $49 = $4;
   $50 = ($49|0)!=(0|0);
   if ($50) {
    $51 = $5;
    $52 = $current_len;
    $53 = (($51) - ($52))|0;
    $54 = ($53|0)>(0);
    if ($54) {
     $55 = $current_len;
     $56 = $4;
     $57 = (($56) + ($55)|0);
     $58 = $5;
     $59 = $current_len;
     $60 = (($58) - ($59))|0;
     (_my_strlcpy($57,795168,$60)|0);
    }
   } else {
    $61 = HEAP32[41008>>2]|0;
    HEAP32[$vararg_buffer>>2] = 795168;
    (_fprintf(($61|0),(794920|0),($vararg_buffer|0))|0);
   }
   $62 = $current_len;
   $63 = (($62) + 1)|0;
   $current_len = $63;
   $64 = HEAP32[795160>>2]|0;
   $65 = (($64) + 1)|0;
   HEAP32[795160>>2] = $65;
  }
 }
 $ii = 0;
 L35: while(1) {
  $66 = $2;
  $stop_at = $66;
  $div_loc = -1;
  $67 = $ii;
  $i = $67;
  while(1) {
   $68 = $i;
   $69 = $2;
   $70 = ($68|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = $i;
   $72 = $1;
   $73 = (($72) + ($71<<4)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(2);
   if ($75) {
    $76 = $i;
    $77 = $1;
    $78 = (($77) + ($76<<4)|0);
    $79 = (($78) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)==(5);
    if ($81) {
     $82 = $i;
     $83 = $1;
     $84 = (($83) + ($82<<4)|0);
     $85 = (($84) + 4|0);
     $86 = HEAP32[$85>>2]|0;
     $level = $86;
     $87 = $i;
     $88 = (($87) - 2)|0;
     $j = $88;
     while(1) {
      $89 = $j;
      $90 = ($89|0)>(0);
      if (!($90)) {
       break;
      }
      $91 = $j;
      $92 = $1;
      $93 = (($92) + ($91<<4)|0);
      $94 = (($93) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $level;
      $97 = ($95|0)<($96|0);
      if ($97) {
       label = 32;
       break;
      }
      $98 = $j;
      $99 = (($98) - 2)|0;
      $j = $99;
     }
     if ((label|0) == 32) {
      label = 0;
     }
     $100 = $j;
     $101 = (($100) + 1)|0;
     $j = $101;
     $102 = $div_loc;
     $103 = ($102|0)<(0);
     if ($103) {
      $104 = $i;
      $div_loc = $104;
      $105 = $j;
      $stop_at = $105;
     } else {
      $106 = $j;
      $107 = $stop_at;
      $108 = ($106|0)<($107|0);
      if ($108) {
       $109 = $i;
       $div_loc = $109;
       $110 = $j;
       $stop_at = $110;
      } else {
       $111 = $j;
       $112 = $stop_at;
       $113 = ($111|0)==($112|0);
       if ($113) {
        $114 = $level;
        $115 = $div_loc;
        $116 = $1;
        $117 = (($116) + ($115<<4)|0);
        $118 = (($117) + 4|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = ($114|0)<($119|0);
        if ($120) {
         $121 = $i;
         $div_loc = $121;
        }
       }
      }
     }
    }
   }
   $122 = $i;
   $123 = (($122) + 1)|0;
   $i = $123;
  }
  $124 = $ii;
  $i = $124;
  while(1) {
   $125 = $i;
   $126 = $2;
   $127 = ($125|0)<($126|0);
   if (!($127)) {
    break L35;
   }
   $power_flag = 0;
   $128 = $i;
   $129 = $stop_at;
   $130 = ($128|0)==($129|0);
   if ($130) {
    $131 = $8;
    $132 = $div_loc;
    $133 = $1;
    $134 = (($133) + ($132<<4)|0);
    $135 = (($134) + 4|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($131) - ($136))|0;
    $j = $137;
    $138 = $j;
    $139 = (Math_abs(($138|0))|0);
    $140 = (($139) - 1)|0;
    $k = $140;
   } else {
    $141 = $i;
    $142 = (($141) - 1)|0;
    $j = $142;
    L73: while(1) {
     $143 = $j;
     $144 = $i;
     $145 = (($144) + 1)|0;
     $146 = ($143|0)<=($145|0);
     if (!($146)) {
      break;
     }
     $147 = $j;
     $148 = (($147) - 1)|0;
     $149 = $ii;
     $150 = ($148|0)>=($149|0);
     L76: do {
      if ($150) {
       $151 = $j;
       $152 = (($151) + 1)|0;
       $153 = $2;
       $154 = ($152|0)<($153|0);
       if ($154) {
        $155 = $j;
        $156 = $1;
        $157 = (($156) + ($155<<4)|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = ($158|0)==(2);
        if ($159) {
         $160 = $j;
         $161 = $1;
         $162 = (($161) + ($160<<4)|0);
         $163 = (($162) + 8|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = ($164|0)==(8);
         if (!($165)) {
          $166 = $j;
          $167 = $1;
          $168 = (($167) + ($166<<4)|0);
          $169 = (($168) + 8|0);
          $170 = HEAP32[$169>>2]|0;
          $171 = ($170|0)==(9);
          if (!($171)) {
           break;
          }
         }
         $172 = $j;
         $173 = (($172) - 1)|0;
         $174 = $1;
         $175 = (($174) + ($173<<4)|0);
         $176 = (($175) + 4|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = $j;
         $179 = $1;
         $180 = (($179) + ($178<<4)|0);
         $181 = (($180) + 4|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = ($177|0)==($182|0);
         if ($183) {
          $184 = $j;
          $185 = (($184) + 1)|0;
          $186 = $1;
          $187 = (($186) + ($185<<4)|0);
          $188 = (($187) + 4|0);
          $189 = HEAP32[$188>>2]|0;
          $190 = $j;
          $191 = $1;
          $192 = (($191) + ($190<<4)|0);
          $193 = (($192) + 4|0);
          $194 = HEAP32[$193>>2]|0;
          $195 = ($189|0)==($194|0);
          if ($195) {
           $196 = $j;
           $197 = (($196) + 2)|0;
           $198 = $2;
           $199 = ($197|0)>=($198|0);
           do {
            if (!($199)) {
             $200 = $j;
             $201 = (($200) + 2)|0;
             $202 = $1;
             $203 = (($202) + ($201<<4)|0);
             $204 = (($203) + 4|0);
             $205 = HEAP32[$204>>2]|0;
             $206 = $j;
             $207 = $1;
             $208 = (($207) + ($206<<4)|0);
             $209 = (($208) + 4|0);
             $210 = HEAP32[$209>>2]|0;
             $211 = (($210) - 1)|0;
             $212 = ($205|0)!=($211|0);
             if ($212) {
              break;
             }
             $213 = $j;
             $214 = (($213) + 2)|0;
             $215 = $1;
             $216 = (($215) + ($214<<4)|0);
             $217 = (($216) + 8|0);
             $218 = HEAP32[$217>>2]|0;
             $219 = ($218|0)<(8);
             if (!($219)) {
              break L76;
             }
            }
           } while(0);
           $220 = $j;
           $221 = (($220) - 2)|0;
           $222 = $ii;
           $223 = ($221|0)<($222|0);
           if ($223) {
            label = 67;
            break L73;
           }
           $224 = $j;
           $225 = (($224) - 2)|0;
           $226 = $1;
           $227 = (($226) + ($225<<4)|0);
           $228 = (($227) + 4|0);
           $229 = HEAP32[$228>>2]|0;
           $230 = $j;
           $231 = $1;
           $232 = (($231) + ($230<<4)|0);
           $233 = (($232) + 4|0);
           $234 = HEAP32[$233>>2]|0;
           $235 = (($234) - 1)|0;
           $236 = ($229|0)!=($235|0);
           if ($236) {
            label = 67;
            break L73;
           }
           $237 = $j;
           $238 = (($237) - 2)|0;
           $239 = $1;
           $240 = (($239) + ($238<<4)|0);
           $241 = (($240) + 8|0);
           $242 = HEAP32[$241>>2]|0;
           $243 = ($242|0)<(8);
           if ($243) {
            label = 67;
            break L73;
           }
          }
         }
        }
       }
      }
     } while(0);
     $244 = $j;
     $245 = (($244) + 1)|0;
     $j = $245;
    }
    if ((label|0) == 67) {
     label = 0;
     $power_flag = 1;
    }
    $246 = $8;
    $247 = $i;
    $248 = $1;
    $249 = (($248) + ($247<<4)|0);
    $250 = (($249) + 4|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = (($246) - ($251))|0;
    $j = $252;
    $253 = $power_flag;
    $254 = ($253|0)!=(0);
    if ($254) {
     $255 = $j;
     $256 = (Math_abs(($255|0))|0);
     $257 = (($256) - 1)|0;
     $k = $257;
    } else {
     $258 = $j;
     $259 = (Math_abs(($258|0))|0);
     $k = $259;
    }
   }
   $260 = $k;
   $261 = ($260|0)<(1);
   if ($261) {
    $262 = $cflag;
    $263 = ($262|0)!=(0);
    if ($263) {
     $264 = $8;
     $265 = (($264) - 1)|0;
     (_set_color($265)|0);
    }
   }
   $i1 = 1;
   while(1) {
    $266 = $i1;
    $267 = $k;
    $268 = ($266|0)<=($267|0);
    if (!($268)) {
     break;
    }
    $269 = $j;
    $270 = ($269|0)>(0);
    if ($270) {
     $271 = $8;
     $272 = (($271) + -1)|0;
     $8 = $272;
     $273 = $len;
     $274 = (($273) + 1)|0;
     $len = $274;
     $275 = $oflag;
     $276 = ($275|0)!=(0);
     if ($276) {
      $277 = $4;
      $278 = ($277|0)!=(0|0);
      if ($278) {
       $279 = $5;
       $280 = $current_len;
       $281 = (($279) - ($280))|0;
       $282 = ($281|0)>(0);
       if ($282) {
        $283 = $current_len;
        $284 = $4;
        $285 = (($284) + ($283)|0);
        $286 = $5;
        $287 = $current_len;
        $288 = (($286) - ($287))|0;
        (_my_strlcpy($285,794912,$288)|0);
       }
      } else {
       $289 = HEAP32[41008>>2]|0;
       HEAP32[$vararg_buffer1>>2] = 794912;
       (_fprintf(($289|0),(794920|0),($vararg_buffer1|0))|0);
      }
      $290 = $current_len;
      $291 = (($290) + 1)|0;
      $current_len = $291;
      $292 = $cflag;
      $293 = ($292|0)!=(0);
      if ($293) {
       $294 = $8;
       $295 = (($294) - 1)|0;
       (_set_color($295)|0);
      }
     }
    } else {
     $296 = $8;
     $297 = (($296) + 1)|0;
     $8 = $297;
     $298 = $len;
     $299 = (($298) + 1)|0;
     $len = $299;
     $300 = $oflag;
     $301 = ($300|0)!=(0);
     if ($301) {
      $302 = $cflag;
      $303 = ($302|0)!=(0);
      if ($303) {
       $304 = $8;
       $305 = (($304) - 1)|0;
       (_set_color($305)|0);
      }
      $306 = $4;
      $307 = ($306|0)!=(0|0);
      if ($307) {
       $308 = $5;
       $309 = $current_len;
       $310 = (($308) - ($309))|0;
       $311 = ($310|0)>(0);
       if ($311) {
        $312 = $current_len;
        $313 = $4;
        $314 = (($313) + ($312)|0);
        $315 = $5;
        $316 = $current_len;
        $317 = (($315) - ($316))|0;
        (_my_strlcpy($314,794928,$317)|0);
       }
      } else {
       $318 = HEAP32[41008>>2]|0;
       HEAP32[$vararg_buffer4>>2] = 794928;
       (_fprintf(($318|0),(794920|0),($vararg_buffer4|0))|0);
      }
      $319 = $current_len;
      $320 = (($319) + 1)|0;
      $current_len = $320;
     }
    }
    $321 = $i1;
    $322 = (($321) + 1)|0;
    $i1 = $322;
   }
   $323 = $i;
   $324 = $stop_at;
   $325 = ($323|0)==($324|0);
   if ($325) {
    break;
   }
   $516 = $i;
   $517 = $1;
   $518 = (($517) + ($516<<4)|0);
   $519 = HEAP32[$518>>2]|0;
   if ((($519|0) == 0)) {
    $520 = $i;
    $521 = $1;
    $522 = (($521) + ($520<<4)|0);
    $523 = (($522) + 8|0);
    $524 = +HEAPF64[$523>>3];
    $525 = $524 == 0.0;
    if ($525) {
     $526 = $i;
     $527 = $1;
     $528 = (($527) + ($526<<4)|0);
     $529 = (($528) + 8|0);
     HEAPF64[$529>>3] = 0.0;
    }
    $530 = $html_out;
    $531 = ($530|0)!=(0);
    L149: do {
     if ($531) {
      do {
       if (0) {
        $532 = $i;
        $533 = $1;
        $534 = (($533) + ($532<<4)|0);
        $535 = (($534) + 8|0);
        $536 = +HEAPF64[$535>>3];
        $537 = $536;
        $538 = (___FLOAT_BITS1097($537)|0);
        $539 = $538 & 2147483647;
        $540 = ($539|0)==(2139095040);
        if (!($540)) {
         label = 162;
         break L149;
        }
       } else {
        if (1) {
         $541 = $i;
         $542 = $1;
         $543 = (($542) + ($541<<4)|0);
         $544 = (($543) + 8|0);
         $545 = +HEAPF64[$544>>3];
         $546 = (___DOUBLE_BITS1098($545)|0);
         $547 = tempRet0;
         $548 = $547 & 2147483647;
         $549 = ($546|0)==(0);
         $550 = ($548|0)==(2146435072);
         $551 = $549 & $550;
         if ($551) {
          break;
         } else {
          label = 162;
          break L149;
         }
        } else {
         $552 = $i;
         $553 = $1;
         $554 = (($553) + ($552<<4)|0);
         $555 = (($554) + 8|0);
         $556 = +HEAPF64[$555>>3];
         $557 = (___fpclassifyl((+$556))|0);
         $558 = ($557|0)==(1);
         if ($558) {
          break;
         } else {
          label = 162;
          break L149;
         }
        }
       }
      } while(0);
      $559 = $i;
      $560 = $1;
      $561 = (($560) + ($559<<4)|0);
      $562 = (($561) + 8|0);
      $563 = +HEAPF64[$562>>3];
      $564 = $563 < 0.0;
      if ($564) {
       (_snprintf($buf,500,795192,$vararg_buffer13)|0);
       $565 = $len;
       $566 = (($565) + 4)|0;
       $len = $566;
      } else {
       (_snprintf($buf,500,795208,$vararg_buffer15)|0);
       $567 = $len;
       $568 = (($567) + 1)|0;
       $len = $568;
      }
     } else {
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     label = 0;
     $569 = $i;
     $570 = $1;
     $571 = (($570) + ($569<<4)|0);
     $572 = (($571) + 8|0);
     $573 = +HEAPF64[$572>>3];
     $574 = $573 == -1.0;
     do {
      if ($574) {
       $575 = $i;
       $576 = ($575|0)==(0);
       if (!($576)) {
        $577 = $i;
        $578 = (($577) - 1)|0;
        $579 = $1;
        $580 = (($579) + ($578<<4)|0);
        $581 = (($580) + 4|0);
        $582 = HEAP32[$581>>2]|0;
        $583 = $i;
        $584 = $1;
        $585 = (($584) + ($583<<4)|0);
        $586 = (($585) + 4|0);
        $587 = HEAP32[$586>>2]|0;
        $588 = ($582|0)<($587|0);
        if (!($588)) {
         label = 169;
         break;
        }
       }
       $589 = $i;
       $590 = (($589) + 1)|0;
       $591 = $2;
       $592 = ($590|0)<($591|0);
       if ($592) {
        $593 = $i;
        $594 = $1;
        $595 = (($594) + ($593<<4)|0);
        $596 = (($595) + 4|0);
        $597 = HEAP32[$596>>2]|0;
        $598 = $i;
        $599 = (($598) + 1)|0;
        $600 = $1;
        $601 = (($600) + ($599<<4)|0);
        $602 = (($601) + 4|0);
        $603 = HEAP32[$602>>2]|0;
        $604 = ($597|0)==($603|0);
        if (!($604)) {
         label = 169;
         break;
        }
        $605 = $i;
        $606 = (($605) + 1)|0;
        $607 = $1;
        $608 = (($607) + ($606<<4)|0);
        $609 = (($608) + 8|0);
        $610 = HEAP32[$609>>2]|0;
        $611 = ($610|0)==(4);
        if (!($611)) {
         label = 169;
         break;
        }
        $612 = $i;
        $613 = (($612) + 1)|0;
        $i = $613;
        $614 = (_snprintf($buf,500,795184,$vararg_buffer17)|0);
        $615 = $len;
        $616 = (($615) + ($614))|0;
        $len = $616;
       } else {
        label = 169;
       }
      } else {
       label = 169;
      }
     } while(0);
     if ((label|0) == 169) {
      label = 0;
      $617 = HEAP32[88>>2]|0;
      $618 = ($617|0)>=(0);
      if ($618) {
       $619 = $i;
       $620 = $1;
       $621 = (($620) + ($619<<4)|0);
       $622 = (($621) + 8|0);
       $623 = +HEAPF64[$622>>3];
       $624 = $623 < 0.0;
       if ($624) {
        $625 = HEAP32[88>>2]|0;
        $626 = $i;
        $627 = $1;
        $628 = (($627) + ($626<<4)|0);
        $629 = (($628) + 8|0);
        $630 = +HEAPF64[$629>>3];
        HEAP32[$vararg_buffer19>>2] = $625;
        $vararg_ptr22 = (($vararg_buffer19) + 4|0);
        HEAPF64[tempDoublePtr>>3]=$630;HEAP32[$vararg_ptr22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr22+4>>2]=HEAP32[tempDoublePtr+4>>2];
        $631 = (_snprintf($buf,500,795216,$vararg_buffer19)|0);
        $632 = $len;
        $633 = (($632) + ($631))|0;
        $len = $633;
       } else {
        $634 = HEAP32[88>>2]|0;
        $635 = $i;
        $636 = $1;
        $637 = (($636) + ($635<<4)|0);
        $638 = (($637) + 8|0);
        $639 = +HEAPF64[$638>>3];
        HEAP32[$vararg_buffer23>>2] = $634;
        $vararg_ptr26 = (($vararg_buffer23) + 4|0);
        HEAPF64[tempDoublePtr>>3]=$639;HEAP32[$vararg_ptr26>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr26+4>>2]=HEAP32[tempDoublePtr+4>>2];
        $640 = (_snprintf($buf,500,794960,$vararg_buffer23)|0);
        $641 = $len;
        $642 = (($641) + ($640))|0;
        $len = $642;
       }
      } else {
       $643 = $i;
       $644 = $1;
       $645 = (($644) + ($643<<4)|0);
       $646 = (($645) + 8|0);
       $647 = +HEAPF64[$646>>3];
       $648 = $647 < 0.0;
       do {
        if ($648) {
         $649 = $i;
         $650 = (($649) + 1)|0;
         $651 = $2;
         $652 = ($650|0)<($651|0);
         if (!($652)) {
          label = 179;
          break;
         }
         $653 = $i;
         $654 = (($653) + 1)|0;
         $655 = $1;
         $656 = (($655) + ($654<<4)|0);
         $657 = (($656) + 4|0);
         $658 = HEAP32[$657>>2]|0;
         $659 = $i;
         $660 = $1;
         $661 = (($660) + ($659<<4)|0);
         $662 = (($661) + 4|0);
         $663 = HEAP32[$662>>2]|0;
         $664 = ($658|0)==($663|0);
         if (!($664)) {
          label = 179;
          break;
         }
         $665 = $i;
         $666 = (($665) + 1)|0;
         $667 = $1;
         $668 = (($667) + ($666<<4)|0);
         $669 = (($668) + 8|0);
         $670 = HEAP32[$669>>2]|0;
         $671 = ($670|0)>=(8);
         if (!($671)) {
          label = 179;
          break;
         }
         $672 = HEAP32[16>>2]|0;
         $673 = $i;
         $674 = $1;
         $675 = (($674) + ($673<<4)|0);
         $676 = (($675) + 8|0);
         $677 = +HEAPF64[$676>>3];
         HEAP32[$vararg_buffer27>>2] = $672;
         $vararg_ptr30 = (($vararg_buffer27) + 4|0);
         HEAPF64[tempDoublePtr>>3]=$677;HEAP32[$vararg_ptr30>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr30+4>>2]=HEAP32[tempDoublePtr+4>>2];
         $678 = (_snprintf($buf,500,794968,$vararg_buffer27)|0);
         $679 = $len;
         $680 = (($679) + ($678))|0;
         $len = $680;
        } else {
         label = 179;
        }
       } while(0);
       if ((label|0) == 179) {
        label = 0;
        $681 = HEAP32[16>>2]|0;
        $682 = $i;
        $683 = $1;
        $684 = (($683) + ($682<<4)|0);
        $685 = (($684) + 8|0);
        $686 = +HEAPF64[$685>>3];
        HEAP32[$vararg_buffer31>>2] = $681;
        $vararg_ptr34 = (($vararg_buffer31) + 4|0);
        HEAPF64[tempDoublePtr>>3]=$686;HEAP32[$vararg_ptr34>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr34+4>>2]=HEAP32[tempDoublePtr+4>>2];
        $687 = (_snprintf($buf,500,794952,$vararg_buffer31)|0);
        $688 = $len;
        $689 = (($688) + ($687))|0;
        $len = $689;
       }
      }
     }
    }
    $690 = $oflag;
    $691 = ($690|0)!=(0);
    if ($691) {
     $692 = $4;
     $693 = ($692|0)!=(0|0);
     if ($693) {
      $694 = $5;
      $695 = $current_len;
      $696 = (($694) - ($695))|0;
      $697 = ($696|0)>(0);
      if ($697) {
       $698 = $current_len;
       $699 = $4;
       $700 = (($699) + ($698)|0);
       $701 = $5;
       $702 = $current_len;
       $703 = (($701) - ($702))|0;
       (_my_strlcpy($700,$buf,$703)|0);
      }
     } else {
      $704 = HEAP32[41008>>2]|0;
      HEAP32[$vararg_buffer35>>2] = $buf;
      (_fprintf(($704|0),(794920|0),($vararg_buffer35|0))|0);
     }
     $705 = (_strlen(($buf|0))|0);
     $706 = $current_len;
     $707 = (($706) + ($705))|0;
     $current_len = $707;
    }
   } else if ((($519|0) == 1)) {
    $708 = $html_out;
    $709 = ($708|0)!=(0);
    if ($709) {
     $710 = $i;
     $711 = $1;
     $712 = (($711) + ($710<<4)|0);
     $713 = (($712) + 8|0);
     $714 = HEAP32[$713>>2]|0;
     $715 = ($714|0)==(2);
     if ($715) {
      $716 = $len;
      $717 = (($716) + 1)|0;
      $len = $717;
      $718 = $oflag;
      $719 = ($718|0)!=(0);
      if ($719) {
       $720 = $4;
       $721 = ($720|0)!=(0|0);
       if ($721) {
        $722 = $5;
        $723 = $current_len;
        $724 = (($722) - ($723))|0;
        $725 = ($724|0)>(0);
        if ($725) {
         $726 = $current_len;
         $727 = $4;
         $728 = (($727) + ($726)|0);
         $729 = $5;
         $730 = $current_len;
         $731 = (($729) - ($730))|0;
         (_my_strlcpy($728,795224,$731)|0);
        }
       } else {
        $732 = HEAP32[41008>>2]|0;
        HEAP32[$vararg_buffer38>>2] = 795224;
        (_fprintf(($732|0),(794920|0),($vararg_buffer38|0))|0);
       }
       $733 = $current_len;
       $734 = (($733) + 4)|0;
       $current_len = $734;
      }
     } else {
      label = 201;
     }
    } else {
     label = 201;
    }
    if ((label|0) == 201) {
     label = 0;
     $735 = $html_out;
     $736 = ($735|0)!=(0);
     if ($736) {
      $737 = $i;
      $738 = $1;
      $739 = (($738) + ($737<<4)|0);
      $740 = (($739) + 8|0);
      $741 = HEAP32[$740>>2]|0;
      $742 = ($741|0)==(1);
      if ($742) {
       $743 = $len;
       $744 = (($743) + 1)|0;
       $len = $744;
       $745 = $oflag;
       $746 = ($745|0)!=(0);
       if ($746) {
        $747 = $4;
        $748 = ($747|0)!=(0|0);
        if ($748) {
         $749 = $5;
         $750 = $current_len;
         $751 = (($749) - ($750))|0;
         $752 = ($751|0)>(0);
         if ($752) {
          $753 = $current_len;
          $754 = $4;
          $755 = (($754) + ($753)|0);
          $756 = $5;
          $757 = $current_len;
          $758 = (($756) - ($757))|0;
          (_my_strlcpy($755,795232,$758)|0);
         }
        } else {
         $759 = HEAP32[41008>>2]|0;
         HEAP32[$vararg_buffer41>>2] = 795232;
         (_fprintf(($759|0),(794920|0),($vararg_buffer41|0))|0);
        }
        $760 = $current_len;
        $761 = (($760) + 7)|0;
        $current_len = $761;
       }
      } else {
       label = 211;
      }
     } else {
      label = 211;
     }
     if ((label|0) == 211) {
      label = 0;
      $762 = $html_out;
      $763 = ($762|0)!=(0);
      if ($763) {
       $764 = $i;
       $765 = $1;
       $766 = (($765) + ($764<<4)|0);
       $767 = (($766) + 8|0);
       $768 = HEAP32[$767>>2]|0;
       $769 = ($768|0)==(3);
       if ($769) {
        $770 = $len;
        $771 = (($770) + 1)|0;
        $len = $771;
        $772 = $oflag;
        $773 = ($772|0)!=(0);
        if ($773) {
         $774 = $4;
         $775 = ($774|0)!=(0|0);
         if ($775) {
          $776 = $5;
          $777 = $current_len;
          $778 = (($776) - ($777))|0;
          $779 = ($778|0)>(0);
          if ($779) {
           $780 = $current_len;
           $781 = $4;
           $782 = (($781) + ($780)|0);
           $783 = $5;
           $784 = $current_len;
           $785 = (($783) - ($784))|0;
           (_my_strlcpy($782,795240,$785)|0);
          }
         } else {
          $786 = HEAP32[41008>>2]|0;
          HEAP32[$vararg_buffer44>>2] = 795240;
          (_fprintf(($786|0),(794920|0),($vararg_buffer44|0))|0);
         }
         $787 = $current_len;
         $788 = (($787) + 7)|0;
         $current_len = $788;
        }
       } else {
        label = 221;
       }
      } else {
       label = 221;
      }
      if ((label|0) == 221) {
       label = 0;
       $789 = $i;
       $790 = $1;
       $791 = (($790) + ($789<<4)|0);
       $792 = (($791) + 8|0);
       $793 = HEAP32[$792>>2]|0;
       $794 = (_list_var($793,0)|0);
       $795 = $len;
       $796 = (($795) + ($794))|0;
       $len = $796;
       $797 = $oflag;
       $798 = ($797|0)!=(0);
       if ($798) {
        $799 = $4;
        $800 = ($799|0)!=(0|0);
        if ($800) {
         $801 = $5;
         $802 = $current_len;
         $803 = (($801) - ($802))|0;
         $804 = ($803|0)>(0);
         if ($804) {
          $805 = $current_len;
          $806 = $4;
          $807 = (($806) + ($805)|0);
          $808 = $5;
          $809 = $current_len;
          $810 = (($808) - ($809))|0;
          (_my_strlcpy($807,35800,$810)|0);
         }
        } else {
         $811 = HEAP32[41008>>2]|0;
         HEAP32[$vararg_buffer47>>2] = 35800;
         (_fprintf(($811|0),(794920|0),($vararg_buffer47|0))|0);
        }
        $812 = (_strlen((35800|0))|0);
        $813 = $current_len;
        $814 = (($813) + ($812))|0;
        $current_len = $814;
       }
      }
     }
    }
   } else if ((($519|0) == 2)) {
    $815 = $i;
    $816 = $1;
    $817 = (($816) + ($815<<4)|0);
    $818 = (($817) + 8|0);
    $819 = HEAP32[$818>>2]|0;
    switch ($819|0) {
    case 1:  {
     $cp = 795008;
     $820 = $len;
     $821 = (($820) + 3)|0;
     $len = $821;
     break;
    }
    case 2:  {
     $822 = $html_out;
     $823 = ($822|0)!=(0);
     if ($823) {
      $cp = 795248;
     } else {
      $cp = 795016;
     }
     $824 = $len;
     $825 = (($824) + 3)|0;
     $len = $825;
     break;
    }
    case 9:  {
     $cp = 795072;
     $844 = $len;
     $845 = (($844) + 1)|0;
     $len = $845;
     $846 = $i;
     $847 = (($846) + 1)|0;
     $i = $847;
     break;
    }
    case 4:  {
     $826 = $html_out;
     $827 = ($826|0)!=(0);
     if ($827) {
      $cp = 795264;
     } else {
      $cp = 795024;
     }
     $828 = $len;
     $829 = (($828) + 1)|0;
     $len = $829;
     break;
    }
    case 5:  {
     $cp = 795032;
     $830 = $len;
     $831 = (($830) + 1)|0;
     $len = $831;
     break;
    }
    case 7:  {
     $cp = 795040;
     $832 = $len;
     $833 = (($832) + 2)|0;
     $len = $833;
     break;
    }
    case 6:  {
     $cp = 795048;
     $834 = $cp;
     $835 = (_strlen(($834|0))|0);
     $836 = $len;
     $837 = (($836) + ($835))|0;
     $len = $837;
     break;
    }
    case 8:  {
     $838 = HEAP32[3784>>2]|0;
     $839 = ($838|0)!=(0);
     if ($839) {
      $cp = 795056;
      $840 = $len;
      $841 = (($840) + 2)|0;
      $len = $841;
     } else {
      $cp = 795064;
      $842 = $len;
      $843 = (($842) + 1)|0;
      $len = $843;
     }
     break;
    }
    default: {
     $cp = 794984;
     $848 = $cp;
     $849 = (_strlen(($848|0))|0);
     $850 = $len;
     $851 = (($850) + ($849))|0;
     $len = $851;
    }
    }
    $852 = $oflag;
    $853 = ($852|0)!=(0);
    if ($853) {
     $854 = $4;
     $855 = ($854|0)!=(0|0);
     if ($855) {
      $856 = $5;
      $857 = $current_len;
      $858 = (($856) - ($857))|0;
      $859 = ($858|0)>(0);
      if ($859) {
       $860 = $current_len;
       $861 = $4;
       $862 = (($861) + ($860)|0);
       $863 = $cp;
       $864 = $5;
       $865 = $current_len;
       $866 = (($864) - ($865))|0;
       (_my_strlcpy($862,$863,$866)|0);
      }
     } else {
      $867 = HEAP32[41008>>2]|0;
      $868 = $cp;
      HEAP32[$vararg_buffer50>>2] = $868;
      (_fprintf(($867|0),(794920|0),($vararg_buffer50|0))|0);
     }
     $869 = $cp;
     $870 = (_strlen(($869|0))|0);
     $871 = $current_len;
     $872 = (($871) + ($870))|0;
     $current_len = $872;
    }
   }
   $873 = $i;
   $874 = (($873) + 1)|0;
   $i = $874;
  }
  $326 = $div_loc;
  $327 = $1;
  $328 = (($327) + ($326<<4)|0);
  $329 = (($328) + 4|0);
  $330 = HEAP32[$329>>2]|0;
  $level = $330;
  $331 = $stop_at;
  $332 = $1;
  $333 = (($332) + ($331<<4)|0);
  $334 = $div_loc;
  $335 = $stop_at;
  $336 = (($334) - ($335))|0;
  $337 = $4;
  $338 = $5;
  $339 = $6;
  $340 = (($339) + 1)|0;
  $341 = $7;
  $342 = $len;
  $343 = (($341) + ($342))|0;
  $344 = $level;
  $345 = (_flist_recurse($333,$336,0,$337,$338,$340,$343,$344,$high,$low)|0);
  $len1 = $345;
  $346 = $6;
  $347 = (($346) + 1)|0;
  $348 = $347<<1;
  $349 = HEAP32[$low>>2]|0;
  $350 = (($348) - ($349))|0;
  $l1 = $350;
  $351 = $div_loc;
  $352 = (($351) + 2)|0;
  $j = $352;
  while(1) {
   $353 = $j;
   $354 = $2;
   $355 = ($353|0)<($354|0);
   if (!($355)) {
    break;
   }
   $356 = $j;
   $357 = $1;
   $358 = (($357) + ($356<<4)|0);
   $359 = (($358) + 4|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = $level;
   $362 = ($360|0)<=($361|0);
   if ($362) {
    label = 107;
    break;
   }
   $363 = $j;
   $364 = (($363) + 2)|0;
   $j = $364;
  }
  if ((label|0) == 107) {
   label = 0;
  }
  $365 = $div_loc;
  $366 = (($365) + 1)|0;
  $367 = $1;
  $368 = (($367) + ($366<<4)|0);
  $369 = $j;
  $370 = $div_loc;
  $371 = (($370) + 1)|0;
  $372 = (($369) - ($371))|0;
  $373 = $4;
  $374 = $5;
  $375 = $6;
  $376 = (($375) - 1)|0;
  $377 = $7;
  $378 = $len;
  $379 = (($377) + ($378))|0;
  $380 = $level;
  $381 = (_flist_recurse($368,$372,0,$373,$374,$376,$379,$380,$high,$low)|0);
  $len2 = $381;
  $382 = $6;
  $383 = (($382) - 1)|0;
  $384 = $383<<1;
  $385 = HEAP32[$high>>2]|0;
  $386 = (($384) - ($385))|0;
  $l2 = $386;
  $387 = $j;
  $ii = $387;
  $388 = $len1;
  $389 = $len2;
  $390 = ($388|0)>($389|0);
  if ($390) {
   $391 = $len1;
   $393 = $391;
  } else {
   $392 = $len2;
   $393 = $392;
  }
  $len_div = $393;
  $j = 0;
  $394 = $len1;
  $395 = $len_div;
  $396 = ($394|0)<($395|0);
  if ($396) {
   $397 = $len_div;
   $398 = $len1;
   $399 = (($397) - ($398))|0;
   $400 = (($399|0) / 2)&-1;
   $j = $400;
  }
  $401 = $stop_at;
  $402 = $1;
  $403 = (($402) + ($401<<4)|0);
  $404 = $div_loc;
  $405 = $stop_at;
  $406 = (($404) - ($405))|0;
  $407 = $3;
  $408 = $4;
  $409 = $5;
  $410 = $l1;
  $411 = $7;
  $412 = $len;
  $413 = (($411) + ($412))|0;
  $414 = $j;
  $415 = (($413) + ($414))|0;
  $416 = $level;
  (_flist_recurse($403,$406,$407,$408,$409,$410,$415,$416,$high,$low)|0);
  $417 = HEAP32[$high>>2]|0;
  $418 = $9;
  $419 = HEAP32[$418>>2]|0;
  $420 = ($417|0)>($419|0);
  if ($420) {
   $421 = HEAP32[$high>>2]|0;
   $422 = $9;
   HEAP32[$422>>2] = $421;
  }
  $423 = HEAP32[$low>>2]|0;
  $424 = $10;
  $425 = HEAP32[$424>>2]|0;
  $426 = ($423|0)<($425|0);
  if ($426) {
   $427 = HEAP32[$low>>2]|0;
   $428 = $10;
   HEAP32[$428>>2] = $427;
  }
  $429 = $oflag;
  $430 = ($429|0)!=(0);
  if ($430) {
   $431 = $cflag;
   $432 = ($431|0)!=(0);
   if ($432) {
    $433 = $level;
    $434 = (($433) - 1)|0;
    (_set_color($434)|0);
   }
   $j = 0;
   while(1) {
    $435 = $j;
    $436 = $len_div;
    $437 = ($435|0)<($436|0);
    if (!($437)) {
     break;
    }
    $438 = $html_out;
    $439 = ($438|0)!=(0);
    if ($439) {
     $440 = $4;
     $441 = ($440|0)!=(0|0);
     if ($441) {
      $442 = $5;
      $443 = $current_len;
      $444 = (($442) - ($443))|0;
      $445 = ($444|0)>(0);
      if ($445) {
       $446 = $current_len;
       $447 = $4;
       $448 = (($447) + ($446)|0);
       $449 = $5;
       $450 = $current_len;
       $451 = (($449) - ($450))|0;
       (_my_strlcpy($448,795176,$451)|0);
      }
     } else {
      $452 = HEAP32[41008>>2]|0;
      HEAP32[$vararg_buffer7>>2] = 795176;
      (_fprintf(($452|0),(794920|0),($vararg_buffer7|0))|0);
     }
     $453 = $current_len;
     $454 = (($453) + 7)|0;
     $current_len = $454;
    } else {
     $455 = $4;
     $456 = ($455|0)!=(0|0);
     if ($456) {
      $457 = $5;
      $458 = $current_len;
      $459 = (($457) - ($458))|0;
      $460 = ($459|0)>(0);
      if ($460) {
       $461 = $current_len;
       $462 = $4;
       $463 = (($462) + ($461)|0);
       $464 = $5;
       $465 = $current_len;
       $466 = (($464) - ($465))|0;
       (_my_strlcpy($463,795184,$466)|0);
      }
     } else {
      $467 = HEAP32[41008>>2]|0;
      HEAP32[$vararg_buffer10>>2] = 795184;
      (_fprintf(($467|0),(794920|0),($vararg_buffer10|0))|0);
     }
     $468 = $current_len;
     $469 = (($468) + 1)|0;
     $current_len = $469;
    }
    $470 = $j;
    $471 = (($470) + 1)|0;
    $j = $471;
   }
   $472 = $cflag;
   $473 = ($472|0)!=(0);
   if ($473) {
    $474 = $8;
    $475 = (($474) - 1)|0;
    (_set_color($475)|0);
   }
  }
  $j = 0;
  $476 = $len2;
  $477 = $len_div;
  $478 = ($476|0)<($477|0);
  if ($478) {
   $479 = $len_div;
   $480 = $len2;
   $481 = (($479) - ($480))|0;
   $482 = (($481|0) / 2)&-1;
   $j = $482;
  }
  $483 = $div_loc;
  $484 = (($483) + 1)|0;
  $485 = $1;
  $486 = (($485) + ($484<<4)|0);
  $487 = $ii;
  $488 = $div_loc;
  $489 = (($488) + 1)|0;
  $490 = (($487) - ($489))|0;
  $491 = $3;
  $492 = $4;
  $493 = $5;
  $494 = $l2;
  $495 = $7;
  $496 = $len;
  $497 = (($495) + ($496))|0;
  $498 = $j;
  $499 = (($497) + ($498))|0;
  $500 = $level;
  (_flist_recurse($486,$490,$491,$492,$493,$494,$499,$500,$high,$low)|0);
  $501 = HEAP32[$high>>2]|0;
  $502 = $9;
  $503 = HEAP32[$502>>2]|0;
  $504 = ($501|0)>($503|0);
  if ($504) {
   $505 = HEAP32[$high>>2]|0;
   $506 = $9;
   HEAP32[$506>>2] = $505;
  }
  $507 = HEAP32[$low>>2]|0;
  $508 = $10;
  $509 = HEAP32[$508>>2]|0;
  $510 = ($507|0)<($509|0);
  if ($510) {
   $511 = HEAP32[$low>>2]|0;
   $512 = $10;
   HEAP32[$512>>2] = $511;
  }
  $513 = $len_div;
  $514 = $len;
  $515 = (($514) + ($513))|0;
  $len = $515;
 }
 $875 = $8;
 $876 = $start_level;
 $877 = (($875) - ($876))|0;
 $j = $877;
 while(1) {
  $878 = $j;
  $879 = ($878|0)>(0);
  if (!($879)) {
   break;
  }
  $880 = $8;
  $881 = (($880) + -1)|0;
  $8 = $881;
  $882 = $len;
  $883 = (($882) + 1)|0;
  $len = $883;
  $884 = $j;
  $885 = (($884) + -1)|0;
  $j = $885;
  $886 = $oflag;
  $887 = ($886|0)!=(0);
  if ($887) {
   $888 = $4;
   $889 = ($888|0)!=(0|0);
   if ($889) {
    $890 = $5;
    $891 = $current_len;
    $892 = (($890) - ($891))|0;
    $893 = ($892|0)>(0);
    if ($893) {
     $894 = $current_len;
     $895 = $4;
     $896 = (($895) + ($894)|0);
     $897 = $5;
     $898 = $current_len;
     $899 = (($897) - ($898))|0;
     (_my_strlcpy($896,794912,$899)|0);
    }
   } else {
    $900 = HEAP32[41008>>2]|0;
    HEAP32[$vararg_buffer53>>2] = 794912;
    (_fprintf(($900|0),(794920|0),($vararg_buffer53|0))|0);
   }
   $901 = $current_len;
   $902 = (($901) + 1)|0;
   $current_len = $902;
   $903 = $j;
   $904 = ($903|0)>(0);
   if ($904) {
    $905 = $cflag;
    $906 = ($905|0)!=(0);
    if ($906) {
     $907 = $8;
     $908 = (($907) - 1)|0;
     (_set_color($908)|0);
    }
   }
  }
 }
 $909 = $oflag;
 $910 = ($909|0)!=(0);
 if ($910) {
  $911 = $len;
  $912 = HEAP32[795160>>2]|0;
  $913 = (($912) + ($911))|0;
  HEAP32[795160>>2] = $913;
 }
 $914 = $len;
 $0 = $914;
 $915 = $0;
 STACKTOP = sp;return ($915|0);
}
function ___FLOAT_BITS1097($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS1098($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _gcd($d1,$d2) {
 $d1 = +$d1;
 $d2 = +$d2;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $9 = 0, $count = 0, $divisor = 0.0, $larger = 0.0, $lower_limit = 0.0, $remainder1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $d1;
 $2 = $d2;
 do {
  if (0) {
   $3 = $1;
   $4 = $3;
   $5 = (___FLOAT_BITS1099($4)|0);
   $6 = $5 & 2147483647;
   $7 = ($6>>>0)<(2139095040);
   if ($7) {
    label = 6;
   }
  } else {
   if (1) {
    $8 = $1;
    $9 = (___DOUBLE_BITS1100($8)|0);
    $10 = tempRet0;
    $11 = $10 & 2147483647;
    $12 = ($11>>>0)<(2146435072);
    $13 = ($11|0)==(2146435072);
    $14 = ($9>>>0)<(0);
    $15 = $13 & $14;
    $16 = $12 | $15;
    if ($16) {
     label = 6;
     break;
    } else {
     break;
    }
   } else {
    $17 = $1;
    $18 = (___fpclassifyl((+$17))|0);
    $19 = ($18|0)>(1);
    if ($19) {
     label = 6;
     break;
    } else {
     break;
    }
   }
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   do {
    if (0) {
     $20 = $2;
     $21 = $20;
     $22 = (___FLOAT_BITS1099($21)|0);
     $23 = $22 & 2147483647;
     $24 = ($23>>>0)<(2139095040);
     if (!($24)) {
      break L7;
     }
    } else {
     if (1) {
      $25 = $2;
      $26 = (___DOUBLE_BITS1100($25)|0);
      $27 = tempRet0;
      $28 = $27 & 2147483647;
      $29 = ($28>>>0)<(2146435072);
      $30 = ($28|0)==(2146435072);
      $31 = ($26>>>0)<(0);
      $32 = $30 & $31;
      $33 = $29 | $32;
      if ($33) {
       break;
      } else {
       break L7;
      }
     } else {
      $34 = $2;
      $35 = (___fpclassifyl((+$34))|0);
      $36 = ($35|0)>(1);
      if ($36) {
       break;
      } else {
       break L7;
      }
     }
    }
   } while(0);
   $37 = $1;
   $38 = (+Math_abs((+$37)));
   $1 = $38;
   $39 = $2;
   $40 = (+Math_abs((+$39)));
   $2 = $40;
   $41 = $1;
   $42 = $41 == 0.0;
   if ($42) {
    $43 = $2;
    $0 = $43;
    $88 = $0;
    STACKTOP = sp;return (+$88);
   }
   $44 = $2;
   $45 = $44 == 0.0;
   if ($45) {
    $46 = $1;
    $0 = $46;
    $88 = $0;
    STACKTOP = sp;return (+$88);
   }
   $47 = $1;
   $48 = $2;
   $49 = $47 > $48;
   if ($49) {
    $50 = $1;
    $larger = $50;
    $51 = $2;
    $divisor = $51;
   } else {
    $52 = $2;
    $larger = $52;
    $53 = $1;
    $divisor = $53;
   }
   $54 = $larger;
   $55 = +HEAPF64[432>>3];
   $56 = $54 * $55;
   $lower_limit = $56;
   $57 = $divisor;
   $58 = $lower_limit;
   $59 = $57 <= $58;
   if (!($59)) {
    $60 = $larger;
    $61 = $60 >= 1.0E+15;
    if (!($61)) {
     $count = 1;
     while(1) {
      $62 = $count;
      $63 = ($62|0)<(50);
      if (!($63)) {
       label = 32;
       break;
      }
      $64 = $larger;
      $65 = $divisor;
      $66 = (+_fmod((+$64),(+$65)));
      $67 = (+Math_abs((+$66)));
      $remainder1 = $67;
      $68 = $remainder1;
      $69 = $lower_limit;
      $70 = $68 <= $69;
      if ($70) {
       break;
      }
      $71 = $divisor;
      $72 = $remainder1;
      $73 = $71 - $72;
      $74 = (+Math_abs((+$73)));
      $75 = $lower_limit;
      $76 = $74 <= $75;
      if ($76) {
       break;
      }
      $84 = $divisor;
      $larger = $84;
      $85 = $remainder1;
      $divisor = $85;
      $86 = $count;
      $87 = (($86) + 1)|0;
      $count = $87;
     }
     if ((label|0) == 32) {
      $0 = 0.0;
      $88 = $0;
      STACKTOP = sp;return (+$88);
     }
     $77 = $remainder1;
     $78 = $77 != 0.0;
     if ($78) {
      $79 = $divisor;
      $80 = $lower_limit;
      $81 = 100.0 * $80;
      $82 = $79 <= $81;
      if ($82) {
       $0 = 0.0;
       $88 = $0;
       STACKTOP = sp;return (+$88);
      }
     }
     $83 = $divisor;
     $0 = $83;
     $88 = $0;
     STACKTOP = sp;return (+$88);
    }
   }
   $0 = 0.0;
   $88 = $0;
   STACKTOP = sp;return (+$88);
  }
 } while(0);
 $0 = 0.0;
 $88 = $0;
 STACKTOP = sp;return (+$88);
}
function ___FLOAT_BITS1099($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS1100($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _gcd_verified($d1,$d2) {
 $d1 = +$d1;
 $d2 = +$d2;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $d3 = 0.0, $d4 = 0.0, $divisor = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $d1;
 $2 = $d2;
 $3 = $1;
 $4 = $2;
 $5 = (+_gcd($3,$4));
 $divisor = $5;
 $6 = $divisor;
 $7 = $6 != 0.0;
 do {
  if ($7) {
   $8 = $1;
   $9 = $divisor;
   $10 = $8 / $9;
   $d3 = $10;
   $11 = $2;
   $12 = $divisor;
   $13 = $11 / $12;
   $d4 = $13;
   $14 = $d3;
   $15 = (+_fmod((+$14),1.0));
   $16 = $15 != 0.0;
   if (!($16)) {
    $17 = $d4;
    $18 = (+_fmod((+$17),1.0));
    $19 = $18 != 0.0;
    if (!($19)) {
     $20 = $d3;
     $21 = $d4;
     $22 = (+_gcd($20,$21));
     $23 = $22 != 1.0;
     if (!($23)) {
      break;
     }
     $0 = 0.0;
     $25 = $0;
     STACKTOP = sp;return (+$25);
    }
   }
   $0 = 0.0;
   $25 = $0;
   STACKTOP = sp;return (+$25);
  }
 } while(0);
 $24 = $divisor;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return (+$25);
}
function _my_round($d1) {
 $d1 = +$d1;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAPF64[$0>>3] = $d1;
 $1 = +HEAPF64[$0>>3];
 $2 = $1 >= 0.0;
 if ($2) {
  $3 = +HEAPF64[$0>>3];
  $4 = $3 + 0.5;
  (+_modf((+$4),($0|0)));
 } else {
  $5 = +HEAPF64[$0>>3];
  $6 = $5 - 0.5;
  (+_modf((+$6),($0|0)));
 }
 $7 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$7);
}
function _f_to_fraction($d,$numeratorp,$denominatorp) {
 $d = +$d;
 $numeratorp = $numeratorp|0;
 $denominatorp = $denominatorp|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0;
 var $denominator = 0.0, $divisor = 0.0, $k3 = 0.0, $k4 = 0.0, $numerator = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $d;
 $2 = $numeratorp;
 $3 = $denominatorp;
 $4 = $1;
 $5 = $2;
 HEAPF64[$5>>3] = $4;
 $6 = $3;
 HEAPF64[$6>>3] = 1.0;
 do {
  if (0) {
   $7 = $1;
   $8 = $7;
   $9 = (___FLOAT_BITS1099($8)|0);
   $10 = $9 & 2147483647;
   $11 = ($10>>>0)<(2139095040);
   if (!($11)) {
    label = 6;
   }
  } else {
   if (1) {
    $12 = $1;
    $13 = (___DOUBLE_BITS1100($12)|0);
    $14 = tempRet0;
    $15 = $14 & 2147483647;
    $16 = ($15>>>0)<(2146435072);
    $17 = ($15|0)==(2146435072);
    $18 = ($13>>>0)<(0);
    $19 = $17 & $18;
    $20 = $16 | $19;
    if ($20) {
     break;
    } else {
     label = 6;
     break;
    }
   } else {
    $21 = $1;
    $22 = (___fpclassifyl((+$21))|0);
    $23 = ($22|0)>(1);
    if ($23) {
     break;
    } else {
     label = 6;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $0 = 0;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 $24 = $1;
 $25 = (+_fmod((+$24),1.0));
 $26 = $25 == 0.0;
 if ($26) {
  $0 = 1;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 $27 = $1;
 $28 = (+Math_abs((+$27)));
 $29 = $28 >= 1.0E+15;
 if ($29) {
  $0 = 0;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 $30 = $1;
 $31 = (+Math_abs((+$30)));
 $32 = +HEAPF64[424>>3];
 $33 = $31 * $32;
 $k3 = $33;
 $34 = $k3;
 $35 = $34 >= 0.5;
 if ($35) {
  $0 = 0;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 $36 = $1;
 $37 = (+_my_round($36));
 $k4 = $37;
 $38 = $k4;
 $39 = $38 != 0.0;
 if ($39) {
  $40 = $k4;
  $41 = $1;
  $42 = $40 - $41;
  $43 = (+Math_abs((+$42)));
  $44 = $k3;
  $45 = $43 <= $44;
  if ($45) {
   $46 = $k4;
   $47 = $2;
   HEAPF64[$47>>3] = $46;
   $0 = 1;
   $99 = $0;
   STACKTOP = sp;return ($99|0);
  }
 }
 $48 = $1;
 $49 = (+_gcd(1.0,$48));
 $divisor = $49;
 $50 = +HEAPF64[432>>3];
 $51 = $49 > $50;
 if (!($51)) {
  $0 = 0;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 $52 = $1;
 $53 = $divisor;
 $54 = $52 / $53;
 $55 = (+_my_round($54));
 $numerator = $55;
 $56 = $divisor;
 $57 = 1.0 / $56;
 $58 = (+_my_round($57));
 $denominator = $58;
 $59 = $numerator;
 $60 = (+Math_abs((+$59)));
 $61 = $60 >= 1.0E+12;
 if ($61) {
  $0 = 0;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 $62 = $denominator;
 $63 = $62 >= 1.0E+12;
 if (!($63)) {
  $64 = $denominator;
  $65 = $64 < 2.0;
  if (!($65)) {
   $66 = $numerator;
   $67 = $denominator;
   $68 = (+_gcd($66,$67));
   $divisor = $68;
   $69 = $divisor;
   $70 = $69 > 1.0;
   if ($70) {
    $71 = $divisor;
    $72 = $numerator;
    $73 = $72 / $71;
    $numerator = $73;
    $74 = $divisor;
    $75 = $denominator;
    $76 = $75 / $74;
    $denominator = $76;
   }
   $77 = $numerator;
   $78 = $denominator;
   $79 = $77 / $78;
   $k3 = $79;
   $80 = $k3;
   $81 = $1;
   $82 = $80 - $81;
   $83 = (+Math_abs((+$82)));
   $84 = +HEAPF64[424>>3];
   $85 = $k3;
   $86 = (+Math_abs((+$85)));
   $87 = $84 * $86;
   $88 = $83 > $87;
   if ($88) {
    $0 = 0;
    $99 = $0;
    STACKTOP = sp;return ($99|0);
   }
   $89 = $numerator;
   $90 = (+_fmod((+$89),1.0));
   $91 = $90 != 0.0;
   if (!($91)) {
    $92 = $denominator;
    $93 = (+_fmod((+$92),1.0));
    $94 = $93 != 0.0;
    if (!($94)) {
     $95 = $numerator;
     $96 = $2;
     HEAPF64[$96>>3] = $95;
     $97 = $denominator;
     $98 = $3;
     HEAPF64[$98>>3] = $97;
     $0 = 1;
     $99 = $0;
     STACKTOP = sp;return ($99|0);
    }
   }
   $0 = 0;
   $99 = $0;
   STACKTOP = sp;return ($99|0);
  }
 }
 $0 = 0;
 $99 = $0;
 STACKTOP = sp;return ($99|0);
}
function _make_fractions($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = HEAP32[40>>2]|0;
 if ((($3|0) == 2)) {
  $4 = $1;
  $5 = $2;
  $6 = (_make_mixed_fractions($4,$5)|0);
  $0 = $6;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $7 = $1;
  $8 = $2;
  $9 = (_make_simple_fractions($7,$8)|0);
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return 0|0;
}
function _make_mixed_fractions($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0.0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $denominator = 0;
 var $i = 0, $inc_level = 0, $j = 0, $k = 0, $level = 0, $modified = 0, $numerator = 0, $quotient1 = 0, $remainder1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numerator = sp + 24|0;
 $denominator = sp + 16|0;
 $quotient1 = sp + 8|0;
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    $11 = $i;
    $12 = $0;
    $13 = (($12) + ($11<<4)|0);
    $14 = (($13) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $level = $15;
    $16 = $i;
    $17 = ($16|0)>(0);
    if ($17) {
     $18 = $i;
     $19 = (($18) - 1)|0;
     $20 = $0;
     $21 = (($20) + ($19<<4)|0);
     $22 = (($21) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $level;
     $25 = ($23|0)==($24|0);
     if ($25) {
      $26 = $i;
      $27 = (($26) - 1)|0;
      $28 = $0;
      $29 = (($28) + ($27<<4)|0);
      $30 = (($29) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(5);
      if ($32) {
       break;
      }
     }
    }
    $33 = $i;
    $34 = $0;
    $35 = (($34) + ($33<<4)|0);
    $36 = (($35) + 8|0);
    $37 = +HEAPF64[$36>>3];
    $38 = (_f_to_fraction($37,$numerator,$denominator)|0);
    $39 = ($38|0)!=(0);
    if (!($39)) {
     break;
    }
    $40 = +HEAPF64[$denominator>>3];
    $41 = $40 == 1.0;
    if ($41) {
     $42 = +HEAPF64[$numerator>>3];
     $43 = $i;
     $44 = $0;
     $45 = (($44) + ($43<<4)|0);
     $46 = (($45) + 8|0);
     HEAPF64[$46>>3] = $42;
     break;
    }
    $modified = 1;
    $47 = +HEAPF64[$numerator>>3];
    $48 = (+Math_abs((+$47)));
    $49 = +HEAPF64[$denominator>>3];
    $50 = $48 > $49;
    if ($50) {
     $51 = +HEAPF64[$numerator>>3];
     $52 = (+Math_abs((+$51)));
     $53 = +HEAPF64[$denominator>>3];
     $54 = $52 / $53;
     $55 = (+_modf((+$54),($quotient1|0)));
     $remainder1 = $55;
     $56 = $remainder1;
     $57 = +HEAPF64[$denominator>>3];
     $58 = $56 * $57;
     $59 = (+_my_round($58));
     $remainder1 = $59;
     $60 = +HEAPF64[$numerator>>3];
     $61 = $60 < 0.0;
     if ($61) {
      $62 = $1;
      $63 = HEAP32[$62>>2]|0;
      $64 = (($63) + 6)|0;
      $65 = HEAP32[8>>2]|0;
      $66 = ($64|0)>($65|0);
      if ($66) {
       _error_huge();
      }
      $67 = $i;
      $68 = (($67) + 7)|0;
      $69 = $0;
      $70 = (($69) + ($68<<4)|0);
      $71 = $i;
      $72 = (($71) + 1)|0;
      $73 = $0;
      $74 = (($73) + ($72<<4)|0);
      $75 = $1;
      $76 = HEAP32[$75>>2]|0;
      $77 = $i;
      $78 = (($77) + 1)|0;
      $79 = (($76) - ($78))|0;
      $80 = $79<<4;
      _memmove(($70|0),($74|0),($80|0))|0;
      $81 = $1;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + 6)|0;
      HEAP32[$81>>2] = $83;
      $84 = $level;
      $85 = (($84) + 1)|0;
      $86 = $i;
      $87 = $0;
      $88 = (($87) + ($86<<4)|0);
      $89 = (($88) + 4|0);
      HEAP32[$89>>2] = $85;
      $90 = $i;
      $91 = $0;
      $92 = (($91) + ($90<<4)|0);
      $93 = (($92) + 8|0);
      HEAPF64[$93>>3] = -1.0;
      $94 = $i;
      $95 = (($94) + 1)|0;
      $i = $95;
      $96 = $level;
      $97 = (($96) + 1)|0;
      $98 = $i;
      $99 = $0;
      $100 = (($99) + ($98<<4)|0);
      $101 = (($100) + 4|0);
      HEAP32[$101>>2] = $97;
      $102 = $i;
      $103 = $0;
      $104 = (($103) + ($102<<4)|0);
      HEAP32[$104>>2] = 2;
      $105 = $i;
      $106 = $0;
      $107 = (($106) + ($105<<4)|0);
      $108 = (($107) + 8|0);
      HEAP32[$108>>2] = 4;
      $109 = $i;
      $110 = (($109) + 1)|0;
      $i = $110;
      $111 = $level;
      $112 = (($111) + 2)|0;
      $113 = $i;
      $114 = $0;
      $115 = (($114) + ($113<<4)|0);
      $116 = (($115) + 4|0);
      HEAP32[$116>>2] = $112;
      $117 = $i;
      $118 = $0;
      $119 = (($118) + ($117<<4)|0);
      HEAP32[$119>>2] = 0;
      $120 = +HEAPF64[$quotient1>>3];
      $121 = $i;
      $122 = $0;
      $123 = (($122) + ($121<<4)|0);
      $124 = (($123) + 8|0);
      HEAPF64[$124>>3] = $120;
      $125 = $i;
      $126 = (($125) + 1)|0;
      $i = $126;
      $127 = $level;
      $128 = (($127) + 2)|0;
      $129 = $i;
      $130 = $0;
      $131 = (($130) + ($129<<4)|0);
      $132 = (($131) + 4|0);
      HEAP32[$132>>2] = $128;
      $133 = $i;
      $134 = $0;
      $135 = (($134) + ($133<<4)|0);
      HEAP32[$135>>2] = 2;
      $136 = $i;
      $137 = $0;
      $138 = (($137) + ($136<<4)|0);
      $139 = (($138) + 8|0);
      HEAP32[$139>>2] = 1;
      $140 = $i;
      $141 = (($140) + 1)|0;
      $i = $141;
      $142 = $level;
      $143 = (($142) + 3)|0;
      $144 = $i;
      $145 = $0;
      $146 = (($145) + ($144<<4)|0);
      $147 = (($146) + 4|0);
      HEAP32[$147>>2] = $143;
      $148 = $i;
      $149 = $0;
      $150 = (($149) + ($148<<4)|0);
      HEAP32[$150>>2] = 0;
      $151 = $remainder1;
      $152 = $i;
      $153 = $0;
      $154 = (($153) + ($152<<4)|0);
      $155 = (($154) + 8|0);
      HEAPF64[$155>>3] = $151;
      $156 = $i;
      $157 = (($156) + 1)|0;
      $i = $157;
      $158 = $level;
      $159 = (($158) + 3)|0;
      $160 = $i;
      $161 = $0;
      $162 = (($161) + ($160<<4)|0);
      $163 = (($162) + 4|0);
      HEAP32[$163>>2] = $159;
      $164 = $i;
      $165 = $0;
      $166 = (($165) + ($164<<4)|0);
      HEAP32[$166>>2] = 2;
      $167 = $i;
      $168 = $0;
      $169 = (($168) + ($167<<4)|0);
      $170 = (($169) + 8|0);
      HEAP32[$170>>2] = 5;
      $171 = $i;
      $172 = (($171) + 1)|0;
      $i = $172;
      $173 = $level;
      $174 = (($173) + 3)|0;
      $175 = $i;
      $176 = $0;
      $177 = (($176) + ($175<<4)|0);
      $178 = (($177) + 4|0);
      HEAP32[$178>>2] = $174;
      $179 = $i;
      $180 = $0;
      $181 = (($180) + ($179<<4)|0);
      HEAP32[$181>>2] = 0;
      $182 = +HEAPF64[$denominator>>3];
      $183 = $i;
      $184 = $0;
      $185 = (($184) + ($183<<4)|0);
      $186 = (($185) + 8|0);
      HEAPF64[$186>>3] = $182;
     } else {
      $187 = $1;
      $188 = HEAP32[$187>>2]|0;
      $189 = (($188) + 4)|0;
      $190 = HEAP32[8>>2]|0;
      $191 = ($189|0)>($190|0);
      if ($191) {
       _error_huge();
      }
      $192 = $i;
      $193 = (($192) + 5)|0;
      $194 = $0;
      $195 = (($194) + ($193<<4)|0);
      $196 = $i;
      $197 = (($196) + 1)|0;
      $198 = $0;
      $199 = (($198) + ($197<<4)|0);
      $200 = $1;
      $201 = HEAP32[$200>>2]|0;
      $202 = $i;
      $203 = (($202) + 1)|0;
      $204 = (($201) - ($203))|0;
      $205 = $204<<4;
      _memmove(($195|0),($199|0),($205|0))|0;
      $206 = $1;
      $207 = HEAP32[$206>>2]|0;
      $208 = (($207) + 4)|0;
      HEAP32[$206>>2] = $208;
      $209 = $level;
      $210 = (($209) + 1)|0;
      $211 = $i;
      $212 = $0;
      $213 = (($212) + ($211<<4)|0);
      $214 = (($213) + 4|0);
      HEAP32[$214>>2] = $210;
      $215 = +HEAPF64[$quotient1>>3];
      $216 = $i;
      $217 = $0;
      $218 = (($217) + ($216<<4)|0);
      $219 = (($218) + 8|0);
      HEAPF64[$219>>3] = $215;
      $220 = $i;
      $221 = (($220) + 1)|0;
      $i = $221;
      $222 = $level;
      $223 = (($222) + 1)|0;
      $224 = $i;
      $225 = $0;
      $226 = (($225) + ($224<<4)|0);
      $227 = (($226) + 4|0);
      HEAP32[$227>>2] = $223;
      $228 = $i;
      $229 = $0;
      $230 = (($229) + ($228<<4)|0);
      HEAP32[$230>>2] = 2;
      $231 = $i;
      $232 = $0;
      $233 = (($232) + ($231<<4)|0);
      $234 = (($233) + 8|0);
      HEAP32[$234>>2] = 1;
      $235 = $i;
      $236 = (($235) + 1)|0;
      $i = $236;
      $237 = $level;
      $238 = (($237) + 2)|0;
      $239 = $i;
      $240 = $0;
      $241 = (($240) + ($239<<4)|0);
      $242 = (($241) + 4|0);
      HEAP32[$242>>2] = $238;
      $243 = $i;
      $244 = $0;
      $245 = (($244) + ($243<<4)|0);
      HEAP32[$245>>2] = 0;
      $246 = $remainder1;
      $247 = $i;
      $248 = $0;
      $249 = (($248) + ($247<<4)|0);
      $250 = (($249) + 8|0);
      HEAPF64[$250>>3] = $246;
      $251 = $i;
      $252 = (($251) + 1)|0;
      $i = $252;
      $253 = $level;
      $254 = (($253) + 2)|0;
      $255 = $i;
      $256 = $0;
      $257 = (($256) + ($255<<4)|0);
      $258 = (($257) + 4|0);
      HEAP32[$258>>2] = $254;
      $259 = $i;
      $260 = $0;
      $261 = (($260) + ($259<<4)|0);
      HEAP32[$261>>2] = 2;
      $262 = $i;
      $263 = $0;
      $264 = (($263) + ($262<<4)|0);
      $265 = (($264) + 8|0);
      HEAP32[$265>>2] = 5;
      $266 = $i;
      $267 = (($266) + 1)|0;
      $i = $267;
      $268 = $level;
      $269 = (($268) + 2)|0;
      $270 = $i;
      $271 = $0;
      $272 = (($271) + ($270<<4)|0);
      $273 = (($272) + 4|0);
      HEAP32[$273>>2] = $269;
      $274 = $i;
      $275 = $0;
      $276 = (($275) + ($274<<4)|0);
      HEAP32[$276>>2] = 0;
      $277 = +HEAPF64[$denominator>>3];
      $278 = $i;
      $279 = $0;
      $280 = (($279) + ($278<<4)|0);
      $281 = (($280) + 8|0);
      HEAPF64[$281>>3] = $277;
     }
    } else {
     $282 = $1;
     $283 = HEAP32[$282>>2]|0;
     $284 = (($283) + 2)|0;
     $285 = HEAP32[8>>2]|0;
     $286 = ($284|0)>($285|0);
     if ($286) {
      _error_huge();
     }
     $287 = $1;
     $288 = HEAP32[$287>>2]|0;
     $289 = ($288|0)>(1);
     $290 = $289&1;
     $inc_level = $290;
     $291 = $i;
     $292 = (($291) + 1)|0;
     $293 = $1;
     $294 = HEAP32[$293>>2]|0;
     $295 = ($292|0)<($294|0);
     if ($295) {
      $296 = $i;
      $297 = (($296) + 1)|0;
      $298 = $0;
      $299 = (($298) + ($297<<4)|0);
      $300 = (($299) + 4|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = $level;
      $303 = ($301|0)==($302|0);
      if ($303) {
       $304 = $i;
       $305 = (($304) + 1)|0;
       $306 = $0;
       $307 = (($306) + ($305<<4)|0);
       $308 = (($307) + 8|0);
       $309 = HEAP32[$308>>2]|0;
       if ((($309|0) == 5)) {
        $inc_level = 0;
       } else if ((($309|0) == 4)) {
        $310 = $i;
        $311 = (($310) + 3)|0;
        $j = $311;
        while(1) {
         $312 = $j;
         $313 = $1;
         $314 = HEAP32[$313>>2]|0;
         $315 = ($312|0)<($314|0);
         if ($315) {
          $316 = $j;
          $317 = $0;
          $318 = (($317) + ($316<<4)|0);
          $319 = (($318) + 4|0);
          $320 = HEAP32[$319>>2]|0;
          $321 = $level;
          $322 = ($320|0)>=($321|0);
          $478 = $322;
         } else {
          $478 = 0;
         }
         if (!($478)) {
          break;
         }
         $323 = $j;
         $324 = $0;
         $325 = (($324) + ($323<<4)|0);
         $326 = (($325) + 4|0);
         $327 = HEAP32[$326>>2]|0;
         $328 = $level;
         $329 = ($327|0)==($328|0);
         if ($329) {
          $330 = $j;
          $331 = $0;
          $332 = (($331) + ($330<<4)|0);
          $333 = (($332) + 8|0);
          $334 = HEAP32[$333>>2]|0;
          $335 = ($334|0)==(5);
          if ($335) {
           label = 32;
           break;
          }
         }
         $336 = $j;
         $337 = (($336) + 2)|0;
         $j = $337;
        }
        if ((label|0) == 32) {
         label = 0;
        }
        $338 = +HEAPF64[$numerator>>3];
        $339 = $338 == 1.0;
        if ($339) {
         $340 = $i;
         $341 = $0;
         $342 = (($341) + ($340<<4)|0);
         $343 = $i;
         $344 = (($343) + 2)|0;
         $345 = $0;
         $346 = (($345) + ($344<<4)|0);
         $347 = $j;
         $348 = $i;
         $349 = (($348) + 2)|0;
         $350 = (($347) - ($349))|0;
         $351 = $350<<4;
         _memmove(($342|0),($346|0),($351|0))|0;
         $352 = $j;
         $353 = (($352) - 2)|0;
         $j = $353;
        } else {
         $354 = +HEAPF64[$numerator>>3];
         $355 = $i;
         $356 = $0;
         $357 = (($356) + ($355<<4)|0);
         $358 = (($357) + 8|0);
         HEAPF64[$358>>3] = $354;
         $359 = $j;
         $360 = (($359) + 2)|0;
         $361 = $0;
         $362 = (($361) + ($360<<4)|0);
         $363 = $j;
         $364 = $0;
         $365 = (($364) + ($363<<4)|0);
         $366 = $1;
         $367 = HEAP32[$366>>2]|0;
         $368 = $j;
         $369 = (($367) - ($368))|0;
         $370 = $369<<4;
         _memmove(($362|0),($365|0),($370|0))|0;
         $371 = $1;
         $372 = HEAP32[$371>>2]|0;
         $373 = (($372) + 2)|0;
         HEAP32[$371>>2] = $373;
        }
        $374 = $level;
        $375 = $j;
        $376 = $0;
        $377 = (($376) + ($375<<4)|0);
        $378 = (($377) + 4|0);
        HEAP32[$378>>2] = $374;
        $379 = $j;
        $380 = $0;
        $381 = (($380) + ($379<<4)|0);
        HEAP32[$381>>2] = 2;
        $382 = $j;
        $383 = $0;
        $384 = (($383) + ($382<<4)|0);
        $385 = (($384) + 8|0);
        HEAP32[$385>>2] = 5;
        $386 = $j;
        $387 = (($386) + 1)|0;
        $j = $387;
        $388 = $level;
        $389 = $j;
        $390 = $0;
        $391 = (($390) + ($389<<4)|0);
        $392 = (($391) + 4|0);
        HEAP32[$392>>2] = $388;
        $393 = $j;
        $394 = $0;
        $395 = (($394) + ($393<<4)|0);
        HEAP32[$395>>2] = 0;
        $396 = +HEAPF64[$denominator>>3];
        $397 = $j;
        $398 = $0;
        $399 = (($398) + ($397<<4)|0);
        $400 = (($399) + 8|0);
        HEAPF64[$400>>3] = $396;
        $401 = +HEAPF64[$numerator>>3];
        $402 = $401 == 1.0;
        if ($402) {
         $403 = $i;
         $404 = (($403) - 2)|0;
         $i = $404;
        }
        break;
       }
      }
     }
     $405 = $i;
     $j = $405;
     $406 = $i;
     $407 = (($406) + 3)|0;
     $408 = $0;
     $409 = (($408) + ($407<<4)|0);
     $410 = $i;
     $411 = (($410) + 1)|0;
     $412 = $0;
     $413 = (($412) + ($411<<4)|0);
     $414 = $1;
     $415 = HEAP32[$414>>2]|0;
     $416 = $i;
     $417 = (($416) + 1)|0;
     $418 = (($415) - ($417))|0;
     $419 = $418<<4;
     _memmove(($409|0),($413|0),($419|0))|0;
     $420 = $1;
     $421 = HEAP32[$420>>2]|0;
     $422 = (($421) + 2)|0;
     HEAP32[$420>>2] = $422;
     $423 = +HEAPF64[$numerator>>3];
     $424 = $j;
     $425 = $0;
     $426 = (($425) + ($424<<4)|0);
     $427 = (($426) + 8|0);
     HEAPF64[$427>>3] = $423;
     $428 = $j;
     $429 = (($428) + 1)|0;
     $j = $429;
     $430 = $level;
     $431 = $j;
     $432 = $0;
     $433 = (($432) + ($431<<4)|0);
     $434 = (($433) + 4|0);
     HEAP32[$434>>2] = $430;
     $435 = $j;
     $436 = $0;
     $437 = (($436) + ($435<<4)|0);
     HEAP32[$437>>2] = 2;
     $438 = $j;
     $439 = $0;
     $440 = (($439) + ($438<<4)|0);
     $441 = (($440) + 8|0);
     HEAP32[$441>>2] = 5;
     $442 = $j;
     $443 = (($442) + 1)|0;
     $j = $443;
     $444 = $level;
     $445 = $j;
     $446 = $0;
     $447 = (($446) + ($445<<4)|0);
     $448 = (($447) + 4|0);
     HEAP32[$448>>2] = $444;
     $449 = $j;
     $450 = $0;
     $451 = (($450) + ($449<<4)|0);
     HEAP32[$451>>2] = 0;
     $452 = +HEAPF64[$denominator>>3];
     $453 = $j;
     $454 = $0;
     $455 = (($454) + ($453<<4)|0);
     $456 = (($455) + 8|0);
     HEAPF64[$456>>3] = $452;
     $457 = $inc_level;
     $458 = ($457|0)!=(0);
     if ($458) {
      $459 = $i;
      $k = $459;
      while(1) {
       $460 = $k;
       $461 = $j;
       $462 = ($460|0)<=($461|0);
       if (!($462)) {
        break;
       }
       $463 = $k;
       $464 = $0;
       $465 = (($464) + ($463<<4)|0);
       $466 = (($465) + 4|0);
       $467 = HEAP32[$466>>2]|0;
       $468 = (($467) + 1)|0;
       HEAP32[$466>>2] = $468;
       $469 = $k;
       $470 = (($469) + 1)|0;
       $k = $470;
      }
     }
    }
    label = 51;
   } else {
    label = 51;
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
  }
  $471 = $i;
  $472 = (($471) + 2)|0;
  $i = $472;
 }
 $473 = $modified;
 $474 = ($473|0)!=(0);
 if (!($474)) {
  $477 = $modified;
  STACKTOP = sp;return ($477|0);
 }
 $475 = $0;
 $476 = $1;
 _organize($475,$476);
 $477 = $modified;
 STACKTOP = sp;return ($477|0);
}
function _make_simple_fractions($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $denominator = 0, $i = 0, $inc_level = 0, $j = 0, $k = 0, $level = 0, $modified = 0, $numerator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $numerator = sp + 8|0;
 $denominator = sp;
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    $11 = $i;
    $12 = $0;
    $13 = (($12) + ($11<<4)|0);
    $14 = (($13) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $level = $15;
    $16 = $i;
    $17 = ($16|0)>(0);
    if ($17) {
     $18 = $i;
     $19 = (($18) - 1)|0;
     $20 = $0;
     $21 = (($20) + ($19<<4)|0);
     $22 = (($21) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $level;
     $25 = ($23|0)==($24|0);
     if ($25) {
      $26 = $i;
      $27 = (($26) - 1)|0;
      $28 = $0;
      $29 = (($28) + ($27<<4)|0);
      $30 = (($29) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(5);
      if ($32) {
       break;
      }
     }
    }
    $33 = $i;
    $34 = $0;
    $35 = (($34) + ($33<<4)|0);
    $36 = (($35) + 8|0);
    $37 = +HEAPF64[$36>>3];
    $38 = (_f_to_fraction($37,$numerator,$denominator)|0);
    $39 = ($38|0)!=(0);
    if (!($39)) {
     break;
    }
    $40 = +HEAPF64[$denominator>>3];
    $41 = $40 == 1.0;
    if ($41) {
     $42 = +HEAPF64[$numerator>>3];
     $43 = $i;
     $44 = $0;
     $45 = (($44) + ($43<<4)|0);
     $46 = (($45) + 8|0);
     HEAPF64[$46>>3] = $42;
     break;
    }
    $47 = $1;
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + 2)|0;
    $50 = HEAP32[8>>2]|0;
    $51 = ($49|0)>($50|0);
    if ($51) {
     _error_huge();
    }
    $modified = 1;
    $52 = $1;
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)>(1);
    $55 = $54&1;
    $inc_level = $55;
    $56 = $i;
    $57 = (($56) + 1)|0;
    $58 = $1;
    $59 = HEAP32[$58>>2]|0;
    $60 = ($57|0)<($59|0);
    if ($60) {
     $61 = $i;
     $62 = (($61) + 1)|0;
     $63 = $0;
     $64 = (($63) + ($62<<4)|0);
     $65 = (($64) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $level;
     $68 = ($66|0)==($67|0);
     if ($68) {
      $69 = $i;
      $70 = (($69) + 1)|0;
      $71 = $0;
      $72 = (($71) + ($70<<4)|0);
      $73 = (($72) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      if ((($74|0) == 5)) {
       $inc_level = 0;
      } else if ((($74|0) == 4)) {
       $75 = $i;
       $76 = (($75) + 3)|0;
       $j = $76;
       while(1) {
        $77 = $j;
        $78 = $1;
        $79 = HEAP32[$78>>2]|0;
        $80 = ($77|0)<($79|0);
        if ($80) {
         $81 = $j;
         $82 = $0;
         $83 = (($82) + ($81<<4)|0);
         $84 = (($83) + 4|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = $level;
         $87 = ($85|0)>=($86|0);
         $239 = $87;
        } else {
         $239 = 0;
        }
        if (!($239)) {
         break;
        }
        $88 = $j;
        $89 = $0;
        $90 = (($89) + ($88<<4)|0);
        $91 = (($90) + 4|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = $level;
        $94 = ($92|0)==($93|0);
        if ($94) {
         $95 = $j;
         $96 = $0;
         $97 = (($96) + ($95<<4)|0);
         $98 = (($97) + 8|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = ($99|0)==(5);
         if ($100) {
          label = 23;
          break;
         }
        }
        $101 = $j;
        $102 = (($101) + 2)|0;
        $j = $102;
       }
       if ((label|0) == 23) {
        label = 0;
       }
       $103 = +HEAPF64[$numerator>>3];
       $104 = $103 == 1.0;
       if ($104) {
        $105 = $i;
        $106 = $0;
        $107 = (($106) + ($105<<4)|0);
        $108 = $i;
        $109 = (($108) + 2)|0;
        $110 = $0;
        $111 = (($110) + ($109<<4)|0);
        $112 = $j;
        $113 = $i;
        $114 = (($113) + 2)|0;
        $115 = (($112) - ($114))|0;
        $116 = $115<<4;
        _memmove(($107|0),($111|0),($116|0))|0;
        $117 = $j;
        $118 = (($117) - 2)|0;
        $j = $118;
       } else {
        $119 = +HEAPF64[$numerator>>3];
        $120 = $i;
        $121 = $0;
        $122 = (($121) + ($120<<4)|0);
        $123 = (($122) + 8|0);
        HEAPF64[$123>>3] = $119;
        $124 = $j;
        $125 = (($124) + 2)|0;
        $126 = $0;
        $127 = (($126) + ($125<<4)|0);
        $128 = $j;
        $129 = $0;
        $130 = (($129) + ($128<<4)|0);
        $131 = $1;
        $132 = HEAP32[$131>>2]|0;
        $133 = $j;
        $134 = (($132) - ($133))|0;
        $135 = $134<<4;
        _memmove(($127|0),($130|0),($135|0))|0;
        $136 = $1;
        $137 = HEAP32[$136>>2]|0;
        $138 = (($137) + 2)|0;
        HEAP32[$136>>2] = $138;
       }
       $139 = $level;
       $140 = $j;
       $141 = $0;
       $142 = (($141) + ($140<<4)|0);
       $143 = (($142) + 4|0);
       HEAP32[$143>>2] = $139;
       $144 = $j;
       $145 = $0;
       $146 = (($145) + ($144<<4)|0);
       HEAP32[$146>>2] = 2;
       $147 = $j;
       $148 = $0;
       $149 = (($148) + ($147<<4)|0);
       $150 = (($149) + 8|0);
       HEAP32[$150>>2] = 5;
       $151 = $j;
       $152 = (($151) + 1)|0;
       $j = $152;
       $153 = $level;
       $154 = $j;
       $155 = $0;
       $156 = (($155) + ($154<<4)|0);
       $157 = (($156) + 4|0);
       HEAP32[$157>>2] = $153;
       $158 = $j;
       $159 = $0;
       $160 = (($159) + ($158<<4)|0);
       HEAP32[$160>>2] = 0;
       $161 = +HEAPF64[$denominator>>3];
       $162 = $j;
       $163 = $0;
       $164 = (($163) + ($162<<4)|0);
       $165 = (($164) + 8|0);
       HEAPF64[$165>>3] = $161;
       $166 = +HEAPF64[$numerator>>3];
       $167 = $166 == 1.0;
       if ($167) {
        $168 = $i;
        $169 = (($168) - 2)|0;
        $i = $169;
       }
       break;
      }
     }
    }
    $170 = $i;
    $j = $170;
    $171 = $i;
    $172 = (($171) + 3)|0;
    $173 = $0;
    $174 = (($173) + ($172<<4)|0);
    $175 = $i;
    $176 = (($175) + 1)|0;
    $177 = $0;
    $178 = (($177) + ($176<<4)|0);
    $179 = $1;
    $180 = HEAP32[$179>>2]|0;
    $181 = $i;
    $182 = (($181) + 1)|0;
    $183 = (($180) - ($182))|0;
    $184 = $183<<4;
    _memmove(($174|0),($178|0),($184|0))|0;
    $185 = $1;
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186) + 2)|0;
    HEAP32[$185>>2] = $187;
    $188 = +HEAPF64[$numerator>>3];
    $189 = $j;
    $190 = $0;
    $191 = (($190) + ($189<<4)|0);
    $192 = (($191) + 8|0);
    HEAPF64[$192>>3] = $188;
    $193 = $j;
    $194 = (($193) + 1)|0;
    $j = $194;
    $195 = $level;
    $196 = $j;
    $197 = $0;
    $198 = (($197) + ($196<<4)|0);
    $199 = (($198) + 4|0);
    HEAP32[$199>>2] = $195;
    $200 = $j;
    $201 = $0;
    $202 = (($201) + ($200<<4)|0);
    HEAP32[$202>>2] = 2;
    $203 = $j;
    $204 = $0;
    $205 = (($204) + ($203<<4)|0);
    $206 = (($205) + 8|0);
    HEAP32[$206>>2] = 5;
    $207 = $j;
    $208 = (($207) + 1)|0;
    $j = $208;
    $209 = $level;
    $210 = $j;
    $211 = $0;
    $212 = (($211) + ($210<<4)|0);
    $213 = (($212) + 4|0);
    HEAP32[$213>>2] = $209;
    $214 = $j;
    $215 = $0;
    $216 = (($215) + ($214<<4)|0);
    HEAP32[$216>>2] = 0;
    $217 = +HEAPF64[$denominator>>3];
    $218 = $j;
    $219 = $0;
    $220 = (($219) + ($218<<4)|0);
    $221 = (($220) + 8|0);
    HEAPF64[$221>>3] = $217;
    $222 = $inc_level;
    $223 = ($222|0)!=(0);
    if ($223) {
     $224 = $i;
     $k = $224;
     while(1) {
      $225 = $k;
      $226 = $j;
      $227 = ($225|0)<=($226|0);
      if (!($227)) {
       break;
      }
      $228 = $k;
      $229 = $0;
      $230 = (($229) + ($228<<4)|0);
      $231 = (($230) + 4|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = (($232) + 1)|0;
      HEAP32[$231>>2] = $233;
      $234 = $k;
      $235 = (($234) + 1)|0;
      $k = $235;
     }
    }
    label = 41;
   } else {
    label = 41;
   }
  } while(0);
  if ((label|0) == 41) {
   label = 0;
  }
  $236 = $i;
  $237 = (($236) + 2)|0;
  $i = $237;
 }
 $238 = $modified;
 STACKTOP = sp;return ($238|0);
}
function _factor_one($value) {
 $value = +$value;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $d = 0.0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 HEAP32[40928>>2] = 0;
 $2 = $1;
 HEAPF64[795392>>3] = $2;
 $3 = +HEAPF64[795392>>3];
 $4 = $3 == 0.0;
 L1: do {
  if (!($4)) {
   do {
    if (0) {
     $5 = +HEAPF64[795392>>3];
     $6 = $5;
     $7 = (___FLOAT_BITS1118($6)|0);
     $8 = $7 & 2147483647;
     $9 = ($8>>>0)<(2139095040);
     if (!($9)) {
      break L1;
     }
    } else {
     if (1) {
      $10 = +HEAPF64[795392>>3];
      $11 = (___DOUBLE_BITS1119($10)|0);
      $12 = tempRet0;
      $13 = $12 & 2147483647;
      $14 = ($13>>>0)<(2146435072);
      $15 = ($13|0)==(2146435072);
      $16 = ($11>>>0)<(0);
      $17 = $15 & $16;
      $18 = $14 | $17;
      if ($18) {
       break;
      } else {
       break L1;
      }
     } else {
      $19 = +HEAPF64[795392>>3];
      $20 = (___fpclassifyl((+$19))|0);
      $21 = ($20|0)>(1);
      if ($21) {
       break;
      } else {
       break L1;
      }
     }
    }
   } while(0);
   $22 = +HEAPF64[795392>>3];
   $23 = (+Math_abs((+$22)));
   $24 = $23 >= 1.0E+15;
   if ($24) {
    $0 = 0;
    $61 = $0;
    STACKTOP = sp;return ($61|0);
   }
   $25 = +HEAPF64[795392>>3];
   $26 = (+_fmod((+$25),1.0));
   $27 = $26 != 0.0;
   if ($27) {
    $0 = 0;
    $61 = $0;
    STACKTOP = sp;return ($61|0);
   }
   $28 = +HEAPF64[795392>>3];
   $29 = (+Math_abs((+$28)));
   $30 = (+Math_sqrt((+$29)));
   $31 = 1.0 + $30;
   HEAPF64[795400>>3] = $31;
   _try_factor(2.0);
   _try_factor(3.0);
   _try_factor(5.0);
   _try_factor(7.0);
   $d = 1.0;
   while(1) {
    $32 = $d;
    $33 = +HEAPF64[795400>>3];
    $34 = $32 <= $33;
    if (!($34)) {
     break;
    }
    $i = 0;
    while(1) {
     $35 = $i;
     $36 = ($35|0)<(48);
     if (!($36)) {
      break;
     }
     $37 = $i;
     $38 = (795408 + ($37<<3)|0);
     $39 = +HEAPF64[$38>>3];
     $40 = $d;
     $41 = $40 + $39;
     $d = $41;
     $42 = $d;
     _try_factor($42);
     $43 = $i;
     $44 = (($43) + 1)|0;
     $i = $44;
    }
   }
   $45 = +HEAPF64[795392>>3];
   $46 = $45 != 1.0;
   if ($46) {
    $47 = +HEAPF64[795392>>3];
    $48 = $47 < 0.0;
    if ($48) {
     $49 = +HEAPF64[795392>>3];
     $50 = $49 != -1.0;
     if ($50) {
      $51 = +HEAPF64[795392>>3];
      $52 = (+Math_abs((+$51)));
      _try_factor($52);
     }
    }
    $53 = +HEAPF64[795392>>3];
    _try_factor($53);
   }
   $54 = HEAP32[40928>>2]|0;
   $55 = ($54|0)==(0);
   if ($55) {
    _try_factor(1.0);
   }
   $56 = +HEAPF64[795392>>3];
   $57 = $56 != 1.0;
   if ($57) {
    _error_bug(795792);
   }
   $58 = $1;
   $59 = (+_multiply_out_unique());
   $60 = $58 != $59;
   if ($60) {
    _error_bug(795848);
   }
   $0 = 1;
   $61 = $0;
   STACKTOP = sp;return ($61|0);
  }
 } while(0);
 $0 = 0;
 $61 = $0;
 STACKTOP = sp;return ($61|0);
}
function ___FLOAT_BITS1118($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF32[$__u>>2] = $1;
 $2 = HEAP32[$__u>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function ___DOUBLE_BITS1119($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function _try_factor($arg) {
 $arg = +$arg;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $arg;
 while(1) {
  $1 = +HEAPF64[795392>>3];
  $2 = $0;
  $3 = (+_fmod((+$1),(+$2)));
  $4 = $3 == 0.0;
  if (!($4)) {
   label = 17;
   break;
  }
  $5 = HEAP32[40928>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $7 = HEAP32[40928>>2]|0;
   $8 = (($7) - 1)|0;
   $9 = (40672 + ($8<<2)|0);
   $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
   $11 = ($10|0)>(0);
   if ($11) {
    $12 = HEAP32[40928>>2]|0;
    $13 = (($12) - 1)|0;
    $14 = (40160 + ($13<<3)|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$14+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$14+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$14+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$14+7>>0];$15 = +HEAPF64[tempDoublePtr>>3];
    $16 = $0;
    $17 = $15 == $16;
    if ($17) {
     $18 = HEAP32[40928>>2]|0;
     $19 = (($18) - 1)|0;
     $20 = (40672 + ($19<<2)|0);
     $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
     $22 = (($21) + 1)|0;
     HEAP8[$20>>0]=$22&255;HEAP8[$20+1>>0]=($22>>8)&255;HEAP8[$20+2>>0]=($22>>16)&255;HEAP8[$20+3>>0]=$22>>24;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   while(1) {
    $23 = HEAP32[40928>>2]|0;
    $24 = ($23|0)>(0);
    if ($24) {
     $25 = HEAP32[40928>>2]|0;
     $26 = (($25) - 1)|0;
     $27 = (40672 + ($26<<2)|0);
     $28 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8)|(HEAPU8[$27+2>>0]<<16)|(HEAPU8[$27+3>>0]<<24);
     $29 = ($28|0)<=(0);
     $51 = $29;
    } else {
     $51 = 0;
    }
    if (!($51)) {
     break;
    }
    $30 = HEAP32[40928>>2]|0;
    $31 = (($30) + -1)|0;
    HEAP32[40928>>2] = $31;
   }
   $32 = $0;
   $33 = HEAP32[40928>>2]|0;
   $34 = (40160 + ($33<<3)|0);
   HEAPF64[tempDoublePtr>>3]=$32;HEAP8[$34>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$34+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$34+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$34+3>>0]=HEAP8[tempDoublePtr+3>>0];HEAP8[$34+4>>0]=HEAP8[tempDoublePtr+4>>0];HEAP8[$34+5>>0]=HEAP8[tempDoublePtr+5>>0];HEAP8[$34+6>>0]=HEAP8[tempDoublePtr+6>>0];HEAP8[$34+7>>0]=HEAP8[tempDoublePtr+7>>0];
   $35 = HEAP32[40928>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[40928>>2] = $36;
   $37 = (40672 + ($35<<2)|0);
   HEAP8[$37>>0]=1&255;HEAP8[$37+1>>0]=(1>>8)&255;HEAP8[$37+2>>0]=(1>>16)&255;HEAP8[$37+3>>0]=1>>24;
  }
  $38 = $0;
  $39 = +HEAPF64[795392>>3];
  $40 = $39 / $38;
  HEAPF64[795392>>3] = $40;
  $41 = +HEAPF64[795392>>3];
  $42 = (+Math_abs((+$41)));
  $43 = (+Math_sqrt((+$42)));
  $44 = 1.0 + $43;
  HEAPF64[795400>>3] = $44;
  $45 = +HEAPF64[795392>>3];
  $46 = (+Math_abs((+$45)));
  $47 = $46 <= 1.5;
  if ($47) {
   break;
  }
  $48 = $0;
  $49 = (+Math_abs((+$48)));
  $50 = $49 <= 1.5;
  if ($50) {
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _multiply_out_unique() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0.0, $i = 0;
 var $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = 1.0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[40928>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $j = 0;
  while(1) {
   $3 = $j;
   $4 = $i;
   $5 = (40672 + ($4<<2)|0);
   $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
   $7 = ($3|0)<($6|0);
   if (!($7)) {
    break;
   }
   $8 = $i;
   $9 = (40160 + ($8<<3)|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$9>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$9+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$9+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$9+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$9+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$9+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$9+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$9+7>>0];$10 = +HEAPF64[tempDoublePtr>>3];
   $11 = $d;
   $12 = $11 * $10;
   $d = $12;
   $13 = $j;
   $14 = (($13) + 1)|0;
   $j = $14;
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = $d;
 STACKTOP = sp;return (+$17);
}
function _display_unique() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $value = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $1 = HEAP32[40928>>2]|0;
 $2 = ($1|0)<=(0);
 if ($2) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $3 = (+_multiply_out_unique());
 $value = $3;
 $4 = HEAP32[41008>>2]|0;
 $5 = $value;
 HEAPF64[tempDoublePtr>>3]=$5;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_fprintf(($4|0),(795920|0),($vararg_buffer|0))|0);
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = HEAP32[40928>>2]|0;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = (40672 + ($9<<2)|0);
  $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8)|(HEAPU8[$10+2>>0]<<16)|(HEAPU8[$10+3>>0]<<24);
  $12 = ($11|0)>(0);
  if (!($12)) {
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
   continue;
  }
  $13 = HEAP32[41008>>2]|0;
  $14 = $i;
  $15 = (40160 + ($14<<3)|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$15>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$15+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$15+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$15+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$15+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$15+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$15+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$15+7>>0];$16 = +HEAPF64[tempDoublePtr>>3];
  HEAPF64[tempDoublePtr>>3]=$16;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_fprintf(($13|0),(795928|0),($vararg_buffer1|0))|0);
  $19 = $i;
  $20 = (40672 + ($19<<2)|0);
  $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
  $22 = ($21|0)>(1);
  if ($22) {
   $23 = HEAP32[41008>>2]|0;
   $24 = $i;
   $25 = (40672 + ($24<<2)|0);
   $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8)|(HEAPU8[$25+2>>0]<<16)|(HEAPU8[$25+3>>0]<<24);
   HEAP32[$vararg_buffer4>>2] = $26;
   (_fprintf(($23|0),(795936|0),($vararg_buffer4|0))|0);
  }
  while(1) {
   $27 = $i;
   $28 = (($27) + 1)|0;
   $i = $28;
   $29 = $i;
   $30 = HEAP32[40928>>2]|0;
   $31 = ($29|0)<($30|0);
   if ($31) {
    $32 = $i;
    $33 = (40672 + ($32<<2)|0);
    $34 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8)|(HEAPU8[$33+2>>0]<<16)|(HEAPU8[$33+3>>0]<<24);
    $35 = ($34|0)<=(0);
    $42 = $35;
   } else {
    $42 = 0;
   }
   if (!($42)) {
    break;
   }
  }
  $36 = $i;
  $37 = HEAP32[40928>>2]|0;
  $38 = ($36|0)<($37|0);
  if ($38) {
   $39 = HEAP32[41008>>2]|0;
   (_fprintf(($39|0),(795944|0),($vararg_buffer7|0))|0);
  }
 }
 $40 = HEAP32[41008>>2]|0;
 (_fprintf(($40|0),(795952|0),($vararg_buffer9|0))|0);
 $0 = 1;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _is_prime() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[40928>>2]|0;
 $2 = ($1|0)<=(0);
 do {
  if ($2) {
   $0 = 0;
  } else {
   $3 = (+_multiply_out_unique());
   $value = $3;
   $4 = $value;
   $5 = $4 < 2.0;
   if ($5) {
    $0 = 0;
    break;
   }
   $6 = HEAP32[40928>>2]|0;
   $7 = ($6|0)==(1);
   if ($7) {
    $8 = HEAPU8[40672>>0]|(HEAPU8[40672+1>>0]<<8)|(HEAPU8[40672+2>>0]<<16)|(HEAPU8[40672+3>>0]<<24);
    $9 = ($8|0)==(1);
    if ($9) {
     $0 = 1;
     break;
    }
   }
   $0 = 0;
  }
 } while(0);
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _factor_int($equation,$np) {
 $equation = $equation|0;
 $np = $np|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $level = 0, $modified = 0, $xsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $modified = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    $11 = $i;
    $12 = $0;
    $13 = (($12) + ($11<<4)|0);
    $14 = (($13) + 8|0);
    $15 = +HEAPF64[$14>>3];
    $16 = (_factor_one($15)|0);
    $17 = ($16|0)!=(0);
    if ($17) {
     $18 = HEAP32[40928>>2]|0;
     $19 = ($18|0)>(0);
     if ($19) {
      $20 = HEAP32[40928>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       $22 = HEAPU8[40672>>0]|(HEAPU8[40672+1>>0]<<8)|(HEAPU8[40672+2>>0]<<16)|(HEAPU8[40672+3>>0]<<24);
       $23 = ($22|0)<=(1);
       if ($23) {
        break;
       }
      }
      $24 = $i;
      $25 = $0;
      $26 = (($25) + ($24<<4)|0);
      $27 = (($26) + 4|0);
      $28 = HEAP32[$27>>2]|0;
      $level = $28;
      $29 = HEAP32[40928>>2]|0;
      $30 = ($29|0)>(1);
      if ($30) {
       $31 = $1;
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)>(1);
       if ($33) {
        $34 = $level;
        $35 = (($34) + 1)|0;
        $level = $35;
       }
      }
      $xsize = -2;
      $j = 0;
      while(1) {
       $36 = $j;
       $37 = HEAP32[40928>>2]|0;
       $38 = ($36|0)<($37|0);
       if (!($38)) {
        break;
       }
       $39 = $j;
       $40 = (40672 + ($39<<2)|0);
       $41 = HEAPU8[$40>>0]|(HEAPU8[$40+1>>0]<<8)|(HEAPU8[$40+2>>0]<<16)|(HEAPU8[$40+3>>0]<<24);
       $42 = ($41|0)>(1);
       if ($42) {
        $43 = $xsize;
        $44 = (($43) + 4)|0;
        $xsize = $44;
       } else {
        $45 = $xsize;
        $46 = (($45) + 2)|0;
        $xsize = $46;
       }
       $47 = $j;
       $48 = (($47) + 1)|0;
       $j = $48;
      }
      $49 = $1;
      $50 = HEAP32[$49>>2]|0;
      $51 = $xsize;
      $52 = (($50) + ($51))|0;
      $53 = HEAP32[8>>2]|0;
      $54 = ($52|0)>($53|0);
      if ($54) {
       _error_huge();
      }
      $j = 0;
      while(1) {
       $55 = $j;
       $56 = HEAP32[40928>>2]|0;
       $57 = ($55|0)<($56|0);
       if (!($57)) {
        break;
       }
       $58 = $j;
       $59 = (40672 + ($58<<2)|0);
       $60 = HEAPU8[$59>>0]|(HEAPU8[$59+1>>0]<<8)|(HEAPU8[$59+2>>0]<<16)|(HEAPU8[$59+3>>0]<<24);
       $61 = ($60|0)>(1);
       if ($61) {
        $xsize = 4;
       } else {
        $xsize = 2;
       }
       $62 = $j;
       $63 = ($62|0)==(0);
       if ($63) {
        $64 = $xsize;
        $65 = (($64) - 2)|0;
        $xsize = $65;
       }
       $66 = $xsize;
       $67 = ($66|0)>(0);
       if ($67) {
        $68 = $i;
        $69 = $xsize;
        $70 = (($68) + ($69))|0;
        $71 = $0;
        $72 = (($71) + ($70<<4)|0);
        $73 = $i;
        $74 = $0;
        $75 = (($74) + ($73<<4)|0);
        $76 = $1;
        $77 = HEAP32[$76>>2]|0;
        $78 = $i;
        $79 = (($77) - ($78))|0;
        $80 = $79<<4;
        _memmove(($72|0),($75|0),($80|0))|0;
        $81 = $xsize;
        $82 = $1;
        $83 = HEAP32[$82>>2]|0;
        $84 = (($83) + ($81))|0;
        HEAP32[$82>>2] = $84;
        $85 = $j;
        $86 = ($85|0)>(0);
        if ($86) {
         $87 = $i;
         $88 = (($87) + 1)|0;
         $i = $88;
         $89 = $i;
         $90 = $0;
         $91 = (($90) + ($89<<4)|0);
         HEAP32[$91>>2] = 2;
         $92 = $level;
         $93 = $i;
         $94 = $0;
         $95 = (($94) + ($93<<4)|0);
         $96 = (($95) + 4|0);
         HEAP32[$96>>2] = $92;
         $97 = $i;
         $98 = $0;
         $99 = (($98) + ($97<<4)|0);
         $100 = (($99) + 8|0);
         HEAP32[$100>>2] = 4;
         $101 = $i;
         $102 = (($101) + 1)|0;
         $i = $102;
        }
       }
       $103 = $i;
       $104 = $0;
       $105 = (($104) + ($103<<4)|0);
       HEAP32[$105>>2] = 0;
       $106 = $level;
       $107 = $i;
       $108 = $0;
       $109 = (($108) + ($107<<4)|0);
       $110 = (($109) + 4|0);
       HEAP32[$110>>2] = $106;
       $111 = $j;
       $112 = (40160 + ($111<<3)|0);
       HEAP8[tempDoublePtr>>0]=HEAP8[$112>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$112+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$112+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$112+3>>0];HEAP8[tempDoublePtr+4>>0]=HEAP8[$112+4>>0];HEAP8[tempDoublePtr+5>>0]=HEAP8[$112+5>>0];HEAP8[tempDoublePtr+6>>0]=HEAP8[$112+6>>0];HEAP8[tempDoublePtr+7>>0]=HEAP8[$112+7>>0];$113 = +HEAPF64[tempDoublePtr>>3];
       $114 = $i;
       $115 = $0;
       $116 = (($115) + ($114<<4)|0);
       $117 = (($116) + 8|0);
       HEAPF64[$117>>3] = $113;
       $118 = $j;
       $119 = (40672 + ($118<<2)|0);
       $120 = HEAPU8[$119>>0]|(HEAPU8[$119+1>>0]<<8)|(HEAPU8[$119+2>>0]<<16)|(HEAPU8[$119+3>>0]<<24);
       $121 = ($120|0)>(1);
       if ($121) {
        $122 = $level;
        $123 = (($122) + 1)|0;
        $124 = $i;
        $125 = $0;
        $126 = (($125) + ($124<<4)|0);
        $127 = (($126) + 4|0);
        HEAP32[$127>>2] = $123;
        $128 = $i;
        $129 = (($128) + 1)|0;
        $i = $129;
        $130 = $i;
        $131 = $0;
        $132 = (($131) + ($130<<4)|0);
        HEAP32[$132>>2] = 2;
        $133 = $level;
        $134 = (($133) + 1)|0;
        $135 = $i;
        $136 = $0;
        $137 = (($136) + ($135<<4)|0);
        $138 = (($137) + 4|0);
        HEAP32[$138>>2] = $134;
        $139 = $i;
        $140 = $0;
        $141 = (($140) + ($139<<4)|0);
        $142 = (($141) + 8|0);
        HEAP32[$142>>2] = 8;
        $143 = $i;
        $144 = (($143) + 1)|0;
        $i = $144;
        $145 = $level;
        $146 = (($145) + 1)|0;
        $147 = $i;
        $148 = $0;
        $149 = (($148) + ($147<<4)|0);
        $150 = (($149) + 4|0);
        HEAP32[$150>>2] = $146;
        $151 = $i;
        $152 = $0;
        $153 = (($152) + ($151<<4)|0);
        HEAP32[$153>>2] = 0;
        $154 = $j;
        $155 = (40672 + ($154<<2)|0);
        $156 = HEAPU8[$155>>0]|(HEAPU8[$155+1>>0]<<8)|(HEAPU8[$155+2>>0]<<16)|(HEAPU8[$155+3>>0]<<24);
        $157 = (+($156|0));
        $158 = $i;
        $159 = $0;
        $160 = (($159) + ($158<<4)|0);
        $161 = (($160) + 8|0);
        HEAPF64[$161>>3] = $157;
       }
       $162 = $j;
       $163 = (($162) + 1)|0;
       $j = $163;
      }
      $modified = 1;
      label = 37;
     } else {
      label = 37;
     }
    } else {
     label = 37;
    }
   } else {
    label = 37;
   }
  } while(0);
  if ((label|0) == 37) {
   label = 0;
  }
  $164 = $i;
  $165 = (($164) + 2)|0;
  $i = $165;
 }
 $166 = $modified;
 STACKTOP = sp;return ($166|0);
}
function _factor_int_equation($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $rv = 0;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = HEAP32[464>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $1;
   $8 = (2080 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<=(0);
   if (!($10)) {
    $12 = $1;
    $13 = (480 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $1;
    $16 = (2080 + ($15<<2)|0);
    $17 = (_factor_int($14,$16)|0);
    $18 = ($17|0)!=(0);
    if ($18) {
     $rv = 1;
    }
    $19 = $1;
    $20 = (1280 + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $1;
    $23 = (2880 + ($22<<2)|0);
    $24 = (_factor_int($21,$23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     $rv = 1;
    }
    $26 = $rv;
    $0 = $26;
    $27 = $0;
    STACKTOP = sp;return ($27|0);
   }
  }
 }
 $11 = $rv;
 $0 = $11;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _list_factor($equation,$np,$factor_flag) {
 $equation = $equation|0;
 $np = $np|0;
 $factor_flag = $factor_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $equation;
 $1 = $np;
 $2 = $factor_flag;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  label = 3;
 } else {
  $5 = HEAP32[3768>>2]|0;
  $6 = ($5|0)!=(0);
  if ($6) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $7 = $0;
  $8 = $1;
  (_factor_int($7,$8)|0);
 }
 $9 = $0;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_list_proc($9,$11,0)|0);
 STACKTOP = sp;return ($12|0);
}
function _factor_constants($equation,$np,$level_code) {
 $equation = $equation|0;
 $np = $np|0;
 $level_code = $level_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $level_code;
 $4 = $3;
 $5 = ($4|0)==(3);
 if ($5) {
  $0 = 0;
 } else {
  $6 = $1;
  $7 = $2;
  $8 = $3;
  $9 = (_fc_recurse($6,$7,0,1,$8)|0);
  $0 = $9;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _fc_recurse($equation,$np,$loc,$level,$level_code) {
 $equation = $equation|0;
 $np = $np|0;
 $loc = $loc|0;
 $level = $level|0;
 $level_code = $level_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cogcd = 0.0, $const_count = 0, $d = 0.0, $eloc = 0, $first = 0, $gcd_flag = 0, $i = 0, $improve_readability = 0, $j = 0, $k = 0, $minimum = 0.0;
 var $modified = 0, $neg_flag = 0, $op = 0, $op_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $equation;
 $2 = $np;
 $3 = $loc;
 $4 = $level;
 $5 = $level_code;
 $minimum = 1.0;
 $cogcd = 1.0;
 $first = 1;
 $neg_flag = 1;
 $modified = 0;
 $op_count = 0;
 $const_count = 0;
 $6 = $3;
 $i = $6;
 while(1) {
  $7 = $i;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if ($10) {
   $11 = $i;
   $12 = $1;
   $13 = (($12) + ($11<<4)|0);
   $14 = (($13) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $4;
   $17 = ($15|0)>=($16|0);
   $541 = $17;
  } else {
   $541 = 0;
  }
  if (!($541)) {
   break;
  }
  $18 = $i;
  $19 = $1;
  $20 = (($19) + ($18<<4)|0);
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = ($22|0)>($23|0);
  if (!($24)) {
   $49 = $i;
   $50 = (($49) + 1)|0;
   $i = $50;
   continue;
  }
  $25 = $1;
  $26 = $2;
  $27 = $i;
  $28 = $4;
  $29 = (($28) + 1)|0;
  $30 = $5;
  $31 = (_fc_recurse($25,$26,$27,$29,$30)|0);
  $32 = $modified;
  $33 = $32 | $31;
  $modified = $33;
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
  while(1) {
   $36 = $i;
   $37 = $2;
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)<($38|0);
   if ($39) {
    $40 = $i;
    $41 = $1;
    $42 = (($41) + ($40<<4)|0);
    $43 = (($42) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $4;
    $46 = ($44|0)>($45|0);
    $542 = $46;
   } else {
    $542 = 0;
   }
   if (!($542)) {
    break;
   }
   $47 = $i;
   $48 = (($47) + 2)|0;
   $i = $48;
  }
 }
 $51 = $modified;
 $52 = ($51|0)!=(0);
 if ($52) {
  $0 = 1;
  $540 = $0;
  STACKTOP = sp;return ($540|0);
 }
 $53 = $5;
 $54 = $53 & 3;
 $55 = ($54|0)>(1);
 if ($55) {
  $62 = 1;
 } else {
  $56 = $5;
  $57 = $56 & 3;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $4;
   $60 = ($59|0)==(1);
   $543 = $60;
  } else {
   $543 = 0;
  }
  $62 = $543;
 }
 $61 = $62&1;
 $improve_readability = $61;
 $63 = $improve_readability;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = HEAP32[384>>2]|0;
  $66 = ($65|0)!=(0);
  if ($66) {
   $71 = 1;
  } else {
   label = 22;
  }
 } else {
  label = 22;
 }
 if ((label|0) == 22) {
  $67 = $5;
  $68 = $67 & 4;
  $69 = ($68|0)!=(0);
  $71 = $69;
 }
 $70 = $71&1;
 $gcd_flag = $70;
 $72 = $3;
 $i = $72;
 L34: while(1) {
  $73 = $i;
  $74 = $2;
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)<($75|0);
  if ($76) {
   $77 = $i;
   $78 = $1;
   $79 = (($78) + ($77<<4)|0);
   $80 = (($79) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $4;
   $83 = ($81|0)>=($82|0);
   $544 = $83;
  } else {
   $544 = 0;
  }
  if (!($544)) {
   label = 96;
   break;
  }
  $84 = $i;
  $85 = $1;
  $86 = (($85) + ($84<<4)|0);
  $87 = (($86) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $4;
  $90 = ($88|0)==($89|0);
  if ($90) {
   $91 = $i;
   $92 = $1;
   $93 = (($92) + ($91<<4)|0);
   $94 = HEAP32[$93>>2]|0;
   if ((($94|0) == 2)) {
    $102 = $i;
    $103 = $1;
    $104 = (($103) + ($102<<4)|0);
    $105 = (($104) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    if ((($106|0) == 1)) {
     $neg_flag = 0;
    } else if (!((($106|0) == 2))) {
     label = 33;
     break;
    }
    $107 = $op_count;
    $108 = (($107) + 1)|0;
    $op_count = $108;
    $110 = $i;
    $111 = (($110) + 1)|0;
    $i = $111;
    continue;
   } else if ((($94|0) == 0)) {
    $95 = $const_count;
    $96 = (($95) + 1)|0;
    $const_count = $96;
    $97 = $i;
    $98 = $1;
    $99 = (($98) + ($97<<4)|0);
    $100 = (($99) + 8|0);
    $101 = +HEAPF64[$100>>3];
    $d = $101;
   } else {
    $d = 1.0;
   }
   $112 = $i;
   $113 = $3;
   $114 = ($112|0)==($113|0);
   if ($114) {
    $115 = $d;
    $116 = $115 > 0.0;
    if ($116) {
     $neg_flag = 0;
    }
   }
   $117 = $d;
   $118 = (+Math_abs((+$117)));
   $d = $118;
   $119 = $first;
   $120 = ($119|0)!=(0);
   if ($120) {
    $121 = $d;
    $minimum = $121;
    $122 = $d;
    $cogcd = $122;
    $first = 0;
   } else {
    $123 = $minimum;
    $124 = $d;
    $125 = $123 > $124;
    if ($125) {
     $126 = $d;
     $minimum = $126;
    }
    $127 = $gcd_flag;
    $128 = ($127|0)!=(0);
    if ($128) {
     $129 = $cogcd;
     $130 = $129 != 0.0;
     if ($130) {
      $131 = $d;
      $132 = $cogcd;
      $133 = (+_gcd_verified($131,$132));
      $cogcd = $133;
     }
    }
   }
   $245 = $i;
   $246 = (($245) + 1)|0;
   $i = $246;
   continue;
  }
  $op = 0;
  $134 = $i;
  $135 = (($134) + 1)|0;
  $j = $135;
  while(1) {
   $136 = $j;
   $137 = $2;
   $138 = HEAP32[$137>>2]|0;
   $139 = ($136|0)<($138|0);
   if ($139) {
    $140 = $j;
    $141 = $1;
    $142 = (($141) + ($140<<4)|0);
    $143 = (($142) + 4|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $4;
    $146 = ($144|0)>($145|0);
    $545 = $146;
   } else {
    $545 = 0;
   }
   if (!($545)) {
    break;
   }
   $147 = $j;
   $148 = $1;
   $149 = (($148) + ($147<<4)|0);
   $150 = (($149) + 4|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $4;
   $153 = (($152) + 1)|0;
   $154 = ($151|0)==($153|0);
   if ($154) {
    $155 = $j;
    $156 = $1;
    $157 = (($156) + ($155<<4)|0);
    $158 = (($157) + 8|0);
    $159 = HEAP32[$158>>2]|0;
    $op = $159;
   }
   $160 = $j;
   $161 = (($160) + 2)|0;
   $j = $161;
  }
  $162 = $op;
  $163 = ($162|0)==(4);
  if ($163) {
   label = 58;
  } else {
   $164 = $op;
   $165 = ($164|0)==(5);
   if ($165) {
    label = 58;
   }
  }
  do {
   if ((label|0) == 58) {
    label = 0;
    $166 = $i;
    $k = $166;
    while(1) {
     $167 = $k;
     $168 = $j;
     $169 = ($167|0)<($168|0);
     if (!($169)) {
      break;
     }
     $170 = $k;
     $171 = $1;
     $172 = (($171) + ($170<<4)|0);
     $173 = (($172) + 4|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = $4;
     $176 = (($175) + 1)|0;
     $177 = ($174|0)==($176|0);
     if ($177) {
      $178 = $k;
      $179 = $1;
      $180 = (($179) + ($178<<4)|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)==(0);
      if ($182) {
       $183 = $i;
       $184 = $j;
       $185 = ($183|0)==($184|0);
       if ($185) {
        label = 63;
        break L34;
       }
       $187 = $k;
       $188 = $i;
       $189 = ($187|0)>($188|0);
       if ($189) {
        $190 = $k;
        $191 = (($190) - 1)|0;
        $192 = $1;
        $193 = (($192) + ($191<<4)|0);
        $194 = (($193) + 8|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ($195|0)!=(4);
        if ($196) {
         label = 66;
         break L34;
        }
       }
       $198 = $k;
       $199 = $1;
       $200 = (($199) + ($198<<4)|0);
       $201 = (($200) + 8|0);
       $202 = +HEAPF64[$201>>3];
       $d = $202;
       $203 = $i;
       $204 = $3;
       $205 = ($203|0)==($204|0);
       if ($205) {
        $206 = $d;
        $207 = $206 > 0.0;
        if ($207) {
         $neg_flag = 0;
        }
       }
       $208 = $d;
       $209 = (+Math_abs((+$208)));
       $d = $209;
       $210 = $first;
       $211 = ($210|0)!=(0);
       if ($211) {
        $212 = $d;
        $minimum = $212;
        $213 = $d;
        $cogcd = $213;
        $first = 0;
       } else {
        $214 = $minimum;
        $215 = $d;
        $216 = $214 > $215;
        if ($216) {
         $217 = $d;
         $minimum = $217;
        }
        $218 = $gcd_flag;
        $219 = ($218|0)!=(0);
        do {
         if ($219) {
          $220 = $cogcd;
          $221 = $220 != 0.0;
          if (!($221)) {
           break;
          }
          $222 = $d;
          $223 = $cogcd;
          $224 = (+_gcd_verified($222,$223));
          $cogcd = $224;
         }
        } while(0);
       }
       $225 = $j;
       $i = $225;
      }
     }
     $226 = $k;
     $227 = (($226) + 1)|0;
     $k = $227;
    }
    $228 = $i;
    $229 = $j;
    $230 = ($228|0)==($229|0);
    if ($230) {
     continue L34;
    } else {
     break;
    }
   }
  } while(0);
  $231 = $i;
  $232 = $3;
  $233 = ($231|0)==($232|0);
  if ($233) {
   $neg_flag = 0;
  }
  $234 = $first;
  $235 = ($234|0)!=(0);
  if ($235) {
   $minimum = 1.0;
   $cogcd = 1.0;
   $first = 0;
  } else {
   $236 = $minimum;
   $237 = $236 > 1.0;
   if ($237) {
    $minimum = 1.0;
   }
   $238 = $gcd_flag;
   $239 = ($238|0)!=(0);
   if ($239) {
    $240 = $cogcd;
    $241 = $240 != 0.0;
    if ($241) {
     $242 = $cogcd;
     $243 = (+_gcd_verified(1.0,$242));
     $cogcd = $243;
    }
   }
  }
  $244 = $j;
  $i = $244;
 }
 if ((label|0) == 33) {
  $109 = $modified;
  $0 = $109;
  $540 = $0;
  STACKTOP = sp;return ($540|0);
 }
 else if ((label|0) == 63) {
  $186 = $modified;
  $0 = $186;
  $540 = $0;
  STACKTOP = sp;return ($540|0);
 }
 else if ((label|0) == 66) {
  $197 = $modified;
  $0 = $197;
  $540 = $0;
  STACKTOP = sp;return ($540|0);
 }
 else if ((label|0) == 96) {
  $247 = $i;
  $eloc = $247;
  $248 = $gcd_flag;
  $249 = ($248|0)!=(0);
  if ($249) {
   $250 = $cogcd;
   $251 = $250 != 0.0;
   if ($251) {
    $252 = $cogcd;
    $minimum = $252;
   }
  }
  $253 = $first;
  $254 = ($253|0)!=(0);
  do {
   if (!($254)) {
    $255 = $op_count;
    $256 = ($255|0)==(0);
    if (!($256)) {
     $257 = $const_count;
     $258 = ($257|0)>(1);
     if (!($258)) {
      $259 = $neg_flag;
      $260 = ($259|0)!=(0);
      if (!($260)) {
       $261 = $minimum;
       $262 = $261 == 1.0;
       if ($262) {
        break;
       }
      }
      $264 = $minimum;
      $265 = $264 == 0.0;
      L142: do {
       if (!($265)) {
        do {
         if (0) {
          $266 = $minimum;
          $267 = $266;
          $268 = (___FLOAT_BITS1118($267)|0);
          $269 = $268 & 2147483647;
          $270 = ($269>>>0)<(2139095040);
          if (!($270)) {
           break L142;
          }
         } else {
          if (1) {
           $271 = $minimum;
           $272 = (___DOUBLE_BITS1119($271)|0);
           $273 = tempRet0;
           $274 = $273 & 2147483647;
           $275 = ($274>>>0)<(2146435072);
           $276 = ($274|0)==(2146435072);
           $277 = ($272>>>0)<(0);
           $278 = $276 & $277;
           $279 = $275 | $278;
           if ($279) {
            break;
           } else {
            break L142;
           }
          } else {
           $280 = $minimum;
           $281 = (___fpclassifyl((+$280))|0);
           $282 = ($281|0)>(1);
           if ($282) {
            break;
           } else {
            break L142;
           }
          }
         }
        } while(0);
        $284 = $improve_readability;
        $285 = ($284|0)!=(0);
        if ($285) {
         $286 = $3;
         $i = $286;
         while(1) {
          $287 = $i;
          $288 = $eloc;
          $289 = ($287|0)<($288|0);
          if (!($289)) {
           break;
          }
          $d = 1.0;
          $290 = $i;
          $291 = $1;
          $292 = (($291) + ($290<<4)|0);
          $293 = HEAP32[$292>>2]|0;
          $294 = ($293|0)==(0);
          if ($294) {
           $295 = $i;
           $296 = $1;
           $297 = (($296) + ($295<<4)|0);
           $298 = (($297) + 4|0);
           $299 = HEAP32[$298>>2]|0;
           $300 = $4;
           $301 = ($299|0)==($300|0);
           do {
            if ($301) {
             label = 122;
            } else {
             $302 = $i;
             $303 = (($302) + 1)|0;
             $304 = $eloc;
             $305 = ($303|0)<($304|0);
             if (!($305)) {
              break;
             }
             $306 = $i;
             $307 = $1;
             $308 = (($307) + ($306<<4)|0);
             $309 = (($308) + 4|0);
             $310 = HEAP32[$309>>2]|0;
             $311 = $4;
             $312 = (($311) + 1)|0;
             $313 = ($310|0)==($312|0);
             if (!($313)) {
              break;
             }
             $314 = $i;
             $315 = (($314) + 1)|0;
             $316 = $1;
             $317 = (($316) + ($315<<4)|0);
             $318 = (($317) + 4|0);
             $319 = HEAP32[$318>>2]|0;
             $320 = $4;
             $321 = (($320) + 1)|0;
             $322 = ($319|0)==($321|0);
             if (!($322)) {
              break;
             }
             $323 = $i;
             $324 = (($323) + 1)|0;
             $325 = $1;
             $326 = (($325) + ($324<<4)|0);
             $327 = (($326) + 8|0);
             $328 = HEAP32[$327>>2]|0;
             $329 = ($328|0)==(4);
             if ($329) {
              label = 122;
              break;
             }
             $330 = $i;
             $331 = (($330) + 1)|0;
             $332 = $1;
             $333 = (($332) + ($331<<4)|0);
             $334 = (($333) + 8|0);
             $335 = HEAP32[$334>>2]|0;
             $336 = ($335|0)==(5);
             if ($336) {
              label = 122;
             }
            }
           } while(0);
           if ((label|0) == 122) {
            label = 0;
            $337 = $i;
            $338 = $1;
            $339 = (($338) + ($337<<4)|0);
            $340 = (($339) + 8|0);
            $341 = +HEAPF64[$340>>3];
            $d = $341;
           }
          }
          $342 = $minimum;
          $343 = $342 < 1.0;
          if ($343) {
           $344 = $d;
           $345 = (+_fmod((+$344),1.0));
           $346 = $345 == 0.0;
           if ($346) {
            label = 126;
            break;
           }
          }
          $347 = $d;
          $348 = $minimum;
          $349 = (+_fmod((+$347),(+$348)));
          $350 = $349 != 0.0;
          if ($350) {
           label = 128;
           break;
          }
          $351 = $i;
          $352 = (($351) + 1)|0;
          $i = $352;
          while(1) {
           $353 = $i;
           $354 = $2;
           $355 = HEAP32[$354>>2]|0;
           $356 = ($353|0)<($355|0);
           if ($356) {
            $357 = $i;
            $358 = $1;
            $359 = (($358) + ($357<<4)|0);
            $360 = (($359) + 4|0);
            $361 = HEAP32[$360>>2]|0;
            $362 = $4;
            $363 = ($361|0)>($362|0);
            $546 = $363;
           } else {
            $546 = 0;
           }
           if (!($546)) {
            break;
           }
           $364 = $i;
           $365 = (($364) + 2)|0;
           $i = $365;
          }
          $366 = $i;
          $367 = $2;
          $368 = HEAP32[$367>>2]|0;
          $369 = ($366|0)>=($368|0);
          if ($369) {
           label = 137;
           break;
          }
          $370 = $i;
          $371 = $1;
          $372 = (($371) + ($370<<4)|0);
          $373 = (($372) + 4|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = $4;
          $376 = ($374|0)<($375|0);
          if ($376) {
           label = 137;
           break;
          }
          $377 = $i;
          $378 = (($377) + 1)|0;
          $i = $378;
         }
         if ((label|0) == 126) {
          $minimum = 1.0;
         }
         else if ((label|0) == 128) {
          $minimum = 1.0;
         }
         else if ((label|0) == 137) {
         }
        }
        $379 = $neg_flag;
        $380 = ($379|0)!=(0);
        if ($380) {
         $381 = $minimum;
         $382 = -$381;
         $minimum = $382;
        }
        $383 = $minimum;
        $384 = $383 == 1.0;
        if ($384) {
         $385 = $modified;
         $0 = $385;
         $540 = $0;
         STACKTOP = sp;return ($540|0);
        }
        $386 = $2;
        $387 = HEAP32[$386>>2]|0;
        $388 = $op_count;
        $389 = (($388) + 2)|0;
        $390 = $389<<1;
        $391 = (($387) + ($390))|0;
        $392 = HEAP32[8>>2]|0;
        $393 = ($391|0)>($392|0);
        if ($393) {
         _error_huge();
        }
        $394 = $3;
        $i = $394;
        while(1) {
         $395 = $i;
         $396 = $2;
         $397 = HEAP32[$396>>2]|0;
         $398 = ($395|0)<($397|0);
         if ($398) {
          $399 = $i;
          $400 = $1;
          $401 = (($400) + ($399<<4)|0);
          $402 = (($401) + 4|0);
          $403 = HEAP32[$402>>2]|0;
          $404 = $4;
          $405 = ($403|0)>=($404|0);
          $547 = $405;
         } else {
          $547 = 0;
         }
         if (!($547)) {
          break;
         }
         $406 = $i;
         $407 = $1;
         $408 = (($407) + ($406<<4)|0);
         $409 = HEAP32[$408>>2]|0;
         $410 = ($409|0)!=(2);
         if ($410) {
          $411 = $i;
          $j = $411;
          while(1) {
           $412 = $j;
           $413 = $1;
           $414 = (($413) + ($412<<4)|0);
           $415 = (($414) + 4|0);
           $416 = HEAP32[$415>>2]|0;
           $417 = (($416) + 1)|0;
           HEAP32[$415>>2] = $417;
           $418 = $j;
           $419 = (($418) + 1)|0;
           $j = $419;
           $420 = $j;
           $421 = $2;
           $422 = HEAP32[$421>>2]|0;
           $423 = ($420|0)>=($422|0);
           if ($423) {
            break;
           }
           $424 = $j;
           $425 = $1;
           $426 = (($425) + ($424<<4)|0);
           $427 = (($426) + 4|0);
           $428 = HEAP32[$427>>2]|0;
           $429 = $4;
           $430 = ($428|0)<=($429|0);
           if ($430) {
            break;
           }
          }
          $431 = $j;
          $432 = (($431) + 2)|0;
          $433 = $1;
          $434 = (($433) + ($432<<4)|0);
          $435 = $j;
          $436 = $1;
          $437 = (($436) + ($435<<4)|0);
          $438 = $2;
          $439 = HEAP32[$438>>2]|0;
          $440 = $j;
          $441 = (($439) - ($440))|0;
          $442 = $441<<4;
          _memmove(($434|0),($437|0),($442|0))|0;
          $443 = $2;
          $444 = HEAP32[$443>>2]|0;
          $445 = (($444) + 2)|0;
          HEAP32[$443>>2] = $445;
          $446 = $4;
          $447 = (($446) + 1)|0;
          $448 = $j;
          $449 = $1;
          $450 = (($449) + ($448<<4)|0);
          $451 = (($450) + 4|0);
          HEAP32[$451>>2] = $447;
          $452 = $j;
          $453 = $1;
          $454 = (($453) + ($452<<4)|0);
          HEAP32[$454>>2] = 2;
          $455 = $j;
          $456 = $1;
          $457 = (($456) + ($455<<4)|0);
          $458 = (($457) + 8|0);
          HEAP32[$458>>2] = 5;
          $459 = $j;
          $460 = (($459) + 1)|0;
          $j = $460;
          $461 = $4;
          $462 = (($461) + 1)|0;
          $463 = $j;
          $464 = $1;
          $465 = (($464) + ($463<<4)|0);
          $466 = (($465) + 4|0);
          HEAP32[$466>>2] = $462;
          $467 = $j;
          $468 = $1;
          $469 = (($468) + ($467<<4)|0);
          HEAP32[$469>>2] = 0;
          $470 = $minimum;
          $471 = $j;
          $472 = $1;
          $473 = (($472) + ($471<<4)|0);
          $474 = (($473) + 8|0);
          HEAPF64[$474>>3] = $470;
          $475 = $j;
          $i = $475;
         }
         $476 = $i;
         $477 = (($476) + 1)|0;
         $i = $477;
        }
        $478 = $3;
        $i = $478;
        while(1) {
         $479 = $i;
         $480 = $2;
         $481 = HEAP32[$480>>2]|0;
         $482 = ($479|0)<($481|0);
         if ($482) {
          $483 = $i;
          $484 = $1;
          $485 = (($484) + ($483<<4)|0);
          $486 = (($485) + 4|0);
          $487 = HEAP32[$486>>2]|0;
          $488 = $4;
          $489 = ($487|0)>=($488|0);
          $548 = $489;
         } else {
          $548 = 0;
         }
         if (!($548)) {
          break;
         }
         $490 = $i;
         $491 = $1;
         $492 = (($491) + ($490<<4)|0);
         $493 = (($492) + 4|0);
         $494 = HEAP32[$493>>2]|0;
         $495 = (($494) + 1)|0;
         HEAP32[$493>>2] = $495;
         $496 = $i;
         $497 = (($496) + 1)|0;
         $i = $497;
        }
        $498 = $i;
        $499 = (($498) + 2)|0;
        $500 = $1;
        $501 = (($500) + ($499<<4)|0);
        $502 = $i;
        $503 = $1;
        $504 = (($503) + ($502<<4)|0);
        $505 = $2;
        $506 = HEAP32[$505>>2]|0;
        $507 = $i;
        $508 = (($506) - ($507))|0;
        $509 = $508<<4;
        _memmove(($501|0),($504|0),($509|0))|0;
        $510 = $2;
        $511 = HEAP32[$510>>2]|0;
        $512 = (($511) + 2)|0;
        HEAP32[$510>>2] = $512;
        $513 = $4;
        $514 = $i;
        $515 = $1;
        $516 = (($515) + ($514<<4)|0);
        $517 = (($516) + 4|0);
        HEAP32[$517>>2] = $513;
        $518 = $i;
        $519 = $1;
        $520 = (($519) + ($518<<4)|0);
        HEAP32[$520>>2] = 2;
        $521 = $i;
        $522 = $1;
        $523 = (($522) + ($521<<4)|0);
        $524 = (($523) + 8|0);
        HEAP32[$524>>2] = 4;
        $525 = $i;
        $526 = (($525) + 1)|0;
        $i = $526;
        $527 = $4;
        $528 = $i;
        $529 = $1;
        $530 = (($529) + ($528<<4)|0);
        $531 = (($530) + 4|0);
        HEAP32[$531>>2] = $527;
        $532 = $i;
        $533 = $1;
        $534 = (($533) + ($532<<4)|0);
        HEAP32[$534>>2] = 0;
        $535 = $minimum;
        $536 = $i;
        $537 = $1;
        $538 = (($537) + ($536<<4)|0);
        $539 = (($538) + 8|0);
        HEAPF64[$539>>3] = $535;
        $0 = 1;
        $540 = $0;
        STACKTOP = sp;return ($540|0);
       }
      } while(0);
      $283 = $modified;
      $0 = $283;
      $540 = $0;
      STACKTOP = sp;return ($540|0);
     }
    }
   }
  } while(0);
  $263 = $modified;
  $0 = $263;
  $540 = $0;
  STACKTOP = sp;return ($540|0);
 }
 return 0|0;
}
function _matho_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _init_gvars();
 $1 = HEAP32[_stdout>>2]|0;
 HEAP32[41000>>2] = $1;
 $2 = HEAP32[41000>>2]|0;
 HEAP32[41008>>2] = $2;
 $3 = (_init_mem()|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  (_signal(8,(100|0))|0);
  $0 = 1;
  $5 = $0;
  STACKTOP = sp;return ($5|0);
 } else {
  $0 = 0;
  $5 = $0;
  STACKTOP = sp;return ($5|0);
 }
 return 0|0;
}
function _fphandler($sig) {
 $sig = $sig|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sig;
 STACKTOP = sp;return;
}
function _matho_clear() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _clear_all();
 STACKTOP = sp;return;
}
function _matho_process($input,$outputp) {
 $input = $input|0;
 $outputp = $outputp|0;
 var $$0 = 0, $$0$phi = 0, $$035 = 0, $$reg2mem33$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $0 = ($outputp|0)!=(0|0);
 if ($0) {
  HEAP32[$outputp>>2] = 0;
 }
 HEAP32[41320>>2] = 0;
 HEAP32[456>>2] = -1;
 HEAP32[41328>>2] = 0;
 HEAP32[41336>>2] = 0;
 $1 = ($input|0)==(0|0);
 if ($1) {
  $$035 = 0;
  STACKTOP = sp;return ($$035|0);
 }
 __THREW__ = 0;
 $2 = (invoke_ii(101,($input|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 if ((($3|0) != 0) & ((threwValue|0) != 0)) { $4 = _testSetjmp(HEAP32[$3>>2]|0, _setjmpTable)|0; if (($4|0) == 0) { _longjmp($3|0, threwValue|0); } tempRet0 = threwValue; } else { $4 = -1; };
 $5 = tempRet0;
 if ((($4|0) == 1)) {
  $$0 = $input;$$reg2mem33$0 = $5;
 } else {
  _saveSetjmp(41032,1,_setjmpTable|0)|0;
  __THREW__ = 0;
  $6 = __THREW__; __THREW__ = 0;
  if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = threwValue; } else { $7 = -1; };
  $8 = tempRet0;
  if ((($7|0) == 1)) {
   $$0 = $2;$$reg2mem33$0 = $8;
  } else {
   $$0 = $2;$$reg2mem33$0 = 0;
  }
 }
 while(1) {
  $9 = ($$reg2mem33$0|0)!=(0);
  if ($9) {
   __THREW__ = 0;
   invoke_v(41);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   if ((($11|0) == 1)) {
    $$0$phi = $$0;$$reg2mem33$0 = $12;$$0 = $$0$phi;
    continue;
   }
   $13 = ($$reg2mem33$0|0)==(14);
   if ($13) {
    __THREW__ = 0;
    invoke_vi(39,(795960|0));
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = threwValue; } else { $15 = -1; };
    $16 = tempRet0;
    if ((($15|0) == 1)) {
     $$0$phi = $$0;$$reg2mem33$0 = $16;$$0 = $$0$phi;
     continue;
    }
   }
   $17 = ($outputp|0)!=(0|0);
   if ($17) {
    $18 = HEAP32[41328>>2]|0;
    $19 = ($18|0)!=(0|0);
    if ($19) {
     $20 = HEAP32[41328>>2]|0;
     HEAP32[$outputp>>2] = $20;
    } else {
     HEAP32[$outputp>>2] = 795984;
    }
   }
   __THREW__ = 0;
   invoke_v(50);
   $21 = __THREW__; __THREW__ = 0;
   if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = threwValue; } else { $22 = -1; };
   $23 = tempRet0;
   if ((($22|0) == 1)) {
    $$0$phi = $$0;$$reg2mem33$0 = $23;$$0 = $$0$phi;
    continue;
   }
   __THREW__ = 0;
   invoke_vi(102,($$0|0));
   $24 = __THREW__; __THREW__ = 0;
   if ((($24|0) != 0) & ((threwValue|0) != 0)) { $25 = _testSetjmp(HEAP32[$24>>2]|0, _setjmpTable)|0; if (($25|0) == 0) { _longjmp($24|0, threwValue|0); } tempRet0 = threwValue; } else { $25 = -1; };
   $26 = tempRet0;
   if ((($25|0) == 1)) {
    $$0$phi = $$0;$$reg2mem33$0 = $26;$$0 = $$0$phi;
    continue;
   } else {
    label = 20;
    break;
   }
  }
  __THREW__ = 0;
  invoke_vi(103,($$0|0));
  $27 = __THREW__; __THREW__ = 0;
  if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = threwValue; } else { $28 = -1; };
  $29 = tempRet0;
  if ((($28|0) == 1)) {
   $$0$phi = $$0;$$reg2mem33$0 = $29;$$0 = $$0$phi;
   continue;
  }
  __THREW__ = 0;
  $30 = (invoke_ii(104,($$0|0))|0);
  $31 = __THREW__; __THREW__ = 0;
  if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } tempRet0 = threwValue; } else { $32 = -1; };
  $33 = tempRet0;
  if ((($32|0) == 1)) {
   $$0$phi = $$0;$$reg2mem33$0 = $33;$$0 = $$0$phi;
   continue;
  }
  $34 = ($30|0)!=(0);
  if ($34) {
   $35 = ($outputp|0)!=(0|0);
   if ($35) {
    $36 = HEAP32[41320>>2]|0;
    HEAP32[$outputp>>2] = $36;
   } else {
    $37 = HEAP32[41320>>2]|0;
    $38 = ($37|0)!=(0|0);
    if ($38) {
     $39 = HEAP32[41320>>2]|0;
     __THREW__ = 0;
     invoke_vi(102,($39|0));
     $40 = __THREW__; __THREW__ = 0;
     if ((($40|0) != 0) & ((threwValue|0) != 0)) { $41 = _testSetjmp(HEAP32[$40>>2]|0, _setjmpTable)|0; if (($41|0) == 0) { _longjmp($40|0, threwValue|0); } tempRet0 = threwValue; } else { $41 = -1; };
     $42 = tempRet0;
     if ((($41|0) == 1)) {
      $$0$phi = $$0;$$reg2mem33$0 = $42;$$0 = $$0$phi;
      continue;
     }
     HEAP32[41320>>2] = 0;
    }
   }
  } else {
   $43 = ($outputp|0)!=(0|0);
   if ($43) {
    $44 = HEAP32[41328>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     $46 = HEAP32[41328>>2]|0;
     HEAP32[$outputp>>2] = $46;
    } else {
     HEAP32[$outputp>>2] = 796016;
    }
   }
   __THREW__ = 0;
   invoke_v(50);
   $47 = __THREW__; __THREW__ = 0;
   if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = threwValue; } else { $48 = -1; };
   $49 = tempRet0;
   if ((($48|0) == 1)) {
    $$0$phi = $$0;$$reg2mem33$0 = $49;$$0 = $$0$phi;
    continue;
   }
  }
  __THREW__ = 0;
  invoke_vi(102,($$0|0));
  $50 = __THREW__; __THREW__ = 0;
  if ((($50|0) != 0) & ((threwValue|0) != 0)) { $51 = _testSetjmp(HEAP32[$50>>2]|0, _setjmpTable)|0; if (($51|0) == 0) { _longjmp($50|0, threwValue|0); } tempRet0 = threwValue; } else { $51 = -1; };
  $52 = tempRet0;
  if ((($51|0) == 1)) {
   $$0$phi = $$0;$$reg2mem33$0 = $52;$$0 = $$0$phi;
  } else {
   label = 39;
   break;
  }
 }
 if ((label|0) == 20) {
  HEAP32[440>>2] = 0;
  $$035 = 0;
  STACKTOP = sp;return ($$035|0);
 }
 else if ((label|0) == 39) {
  $$035 = $30;
  STACKTOP = sp;return ($$035|0);
 }
 return 0|0;
}
function _matho_parse($input,$outputp) {
 $input = $input|0;
 $outputp = $outputp|0;
 var $$0 = 0, $$0$phi = 0, $$039 = 0, $$reg2mem37$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $0 = ($outputp|0)!=(0|0);
 if ($0) {
  HEAP32[$outputp>>2] = 0;
 }
 HEAP32[41320>>2] = 0;
 HEAP32[456>>2] = -1;
 HEAP32[41328>>2] = 0;
 HEAP32[41336>>2] = 0;
 $1 = ($input|0)==(0|0);
 if ($1) {
  $$039 = 0;
  STACKTOP = sp;return ($$039|0);
 }
 __THREW__ = 0;
 $2 = (invoke_ii(101,($input|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 if ((($3|0) != 0) & ((threwValue|0) != 0)) { $4 = _testSetjmp(HEAP32[$3>>2]|0, _setjmpTable)|0; if (($4|0) == 0) { _longjmp($3|0, threwValue|0); } tempRet0 = threwValue; } else { $4 = -1; };
 $5 = tempRet0;
 if ((($4|0) == 1)) {
  $$0 = $input;$$reg2mem37$0 = $5;
 } else {
  _saveSetjmp(41032,1,_setjmpTable|0)|0;
  __THREW__ = 0;
  $6 = __THREW__; __THREW__ = 0;
  if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = threwValue; } else { $7 = -1; };
  $8 = tempRet0;
  if ((($7|0) == 1)) {
   $$0 = $2;$$reg2mem37$0 = $8;
  } else {
   $$0 = $2;$$reg2mem37$0 = 0;
  }
 }
 while(1) {
  $9 = ($$reg2mem37$0|0)!=(0);
  if ($9) {
   __THREW__ = 0;
   invoke_v(41);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   if ((($11|0) == 1)) {
    $$0$phi = $$0;$$reg2mem37$0 = $12;$$0 = $$0$phi;
    continue;
   }
   $13 = ($$reg2mem37$0|0)==(14);
   if ($13) {
    __THREW__ = 0;
    invoke_vi(39,(795960|0));
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = threwValue; } else { $15 = -1; };
    $16 = tempRet0;
    if ((($15|0) == 1)) {
     $$0$phi = $$0;$$reg2mem37$0 = $16;$$0 = $$0$phi;
     continue;
    }
   }
   $17 = ($outputp|0)!=(0|0);
   if ($17) {
    $18 = HEAP32[41328>>2]|0;
    $19 = ($18|0)!=(0|0);
    if ($19) {
     $20 = HEAP32[41328>>2]|0;
     HEAP32[$outputp>>2] = $20;
    } else {
     HEAP32[$outputp>>2] = 795984;
    }
   }
   __THREW__ = 0;
   invoke_v(50);
   $21 = __THREW__; __THREW__ = 0;
   if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = threwValue; } else { $22 = -1; };
   $23 = tempRet0;
   if ((($22|0) == 1)) {
    $$0$phi = $$0;$$reg2mem37$0 = $23;$$0 = $$0$phi;
    continue;
   }
   __THREW__ = 0;
   invoke_vi(102,($$0|0));
   $24 = __THREW__; __THREW__ = 0;
   if ((($24|0) != 0) & ((threwValue|0) != 0)) { $25 = _testSetjmp(HEAP32[$24>>2]|0, _setjmpTable)|0; if (($25|0) == 0) { _longjmp($24|0, threwValue|0); } tempRet0 = threwValue; } else { $25 = -1; };
   $26 = tempRet0;
   if ((($25|0) == 1)) {
    $$0$phi = $$0;$$reg2mem37$0 = $26;$$0 = $$0$phi;
    continue;
   } else {
    label = 20;
    break;
   }
  }
  __THREW__ = 0;
  invoke_vi(103,($$0|0));
  $27 = __THREW__; __THREW__ = 0;
  if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = threwValue; } else { $28 = -1; };
  $29 = tempRet0;
  if ((($28|0) == 1)) {
   $$0$phi = $$0;$$reg2mem37$0 = $29;$$0 = $$0$phi;
   continue;
  }
  __THREW__ = 0;
  $30 = (invoke_i(105)|0);
  $31 = __THREW__; __THREW__ = 0;
  if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } tempRet0 = threwValue; } else { $32 = -1; };
  $33 = tempRet0;
  if ((($32|0) == 1)) {
   $$0$phi = $$0;$$reg2mem37$0 = $33;$$0 = $$0$phi;
   continue;
  }
  __THREW__ = 0;
  $34 = (invoke_iii(106,($30|0),($$0|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = threwValue; } else { $36 = -1; };
  $37 = tempRet0;
  if ((($36|0) == 1)) {
   $$0$phi = $$0;$$reg2mem37$0 = $37;$$0 = $$0$phi;
   continue;
  }
  $38 = ($34|0)!=(0);
  if ($38) {
   $39 = ($outputp|0)!=(0|0);
   if ($39) {
    $40 = HEAP32[41320>>2]|0;
    HEAP32[$outputp>>2] = $40;
   } else {
    $41 = HEAP32[41320>>2]|0;
    $42 = ($41|0)!=(0|0);
    if ($42) {
     $43 = HEAP32[41320>>2]|0;
     __THREW__ = 0;
     invoke_vi(102,($43|0));
     $44 = __THREW__; __THREW__ = 0;
     if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = threwValue; } else { $45 = -1; };
     $46 = tempRet0;
     if ((($45|0) == 1)) {
      $$0$phi = $$0;$$reg2mem37$0 = $46;$$0 = $$0$phi;
      continue;
     }
     HEAP32[41320>>2] = 0;
    }
   }
  } else {
   $47 = ($outputp|0)!=(0|0);
   if ($47) {
    $48 = HEAP32[41328>>2]|0;
    $49 = ($48|0)!=(0|0);
    if ($49) {
     $50 = HEAP32[41328>>2]|0;
     HEAP32[$outputp>>2] = $50;
    } else {
     HEAP32[$outputp>>2] = 796016;
    }
   }
   __THREW__ = 0;
   invoke_v(50);
   $51 = __THREW__; __THREW__ = 0;
   if ((($51|0) != 0) & ((threwValue|0) != 0)) { $52 = _testSetjmp(HEAP32[$51>>2]|0, _setjmpTable)|0; if (($52|0) == 0) { _longjmp($51|0, threwValue|0); } tempRet0 = threwValue; } else { $52 = -1; };
   $53 = tempRet0;
   if ((($52|0) == 1)) {
    $$0$phi = $$0;$$reg2mem37$0 = $53;$$0 = $$0$phi;
    continue;
   }
  }
  __THREW__ = 0;
  invoke_vi(102,($$0|0));
  $54 = __THREW__; __THREW__ = 0;
  if ((($54|0) != 0) & ((threwValue|0) != 0)) { $55 = _testSetjmp(HEAP32[$54>>2]|0, _setjmpTable)|0; if (($55|0) == 0) { _longjmp($54|0, threwValue|0); } tempRet0 = threwValue; } else { $55 = -1; };
  $56 = tempRet0;
  if ((($55|0) == 1)) {
   $$0$phi = $$0;$$reg2mem37$0 = $56;$$0 = $$0$phi;
  } else {
   label = 40;
   break;
  }
 }
 if ((label|0) == 20) {
  $$039 = 0;
  STACKTOP = sp;return ($$039|0);
 }
 else if ((label|0) == 40) {
  $$039 = $34;
  STACKTOP = sp;return ($$039|0);
 }
 return 0|0;
}
function _init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $output = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $output = sp;
 (_matho_init()|0);
 (_matho_process(797624,$output)|0);
 $0 = HEAP32[$output>>2]|0;
 _free($0);
 $i = 0;
 HEAP32[797648>>2] = 0;
 while(1) {
  $1 = $i;
  $2 = (797272 + (($1*12)|0)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   break;
  }
  $5 = $i;
  $6 = (797272 + (($5*12)|0)|0);
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[797648>>2]|0;
  $10 = ($8|0)>($9|0);
  if ($10) {
   $11 = $i;
   $12 = (797272 + (($11*12)|0)|0);
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[797648>>2] = $14;
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = $i;
 HEAP32[797656>>2] = $17;
 STACKTOP = sp;return;
}
function _solve_function($input,$seperator) {
 $input = $input|0;
 $seperator = $seperator|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $output = 0, $rv = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $output = sp + 16|0;
 $0 = $input;
 $1 = $seperator;
 $2 = $0;
 $3 = (_matho_process($2,$output)|0);
 $rv = $3;
 $4 = HEAP32[$output>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$output>>2]|0;
  $8 = $1;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $8;
  (_printf((797664|0),($vararg_buffer|0))|0);
 }
 $9 = $rv;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $12 = $rv;
  STACKTOP = sp;return ($12|0);
 }
 $11 = HEAP32[$output>>2]|0;
 _free($11);
 $12 = $rv;
 STACKTOP = sp;return ($12|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $isdigittmp = (($c) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  $3 = $isdigit;
 } else {
  $3 = 1;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function _isascii($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(128);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function ___cos($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.4801587289476729E-5;
 $3 = $2 + -0.001388888888887411;
 $4 = $0 * $3;
 $5 = $4 + 0.041666666666666602;
 $6 = $0 * $5;
 $7 = $1 * $1;
 $8 = $0 * -1.1359647557788195E-11;
 $9 = $8 + 2.0875723212981748E-9;
 $10 = $0 * $9;
 $11 = $10 + -2.7557314351390663E-7;
 $12 = $7 * $11;
 $13 = $6 + $12;
 $14 = $0 * 0.5;
 $15 = 1.0 - $14;
 $16 = 1.0 - $15;
 $17 = $16 - $14;
 $18 = $0 * $13;
 $19 = $x * $y;
 $20 = $18 - $19;
 $21 = $17 + $20;
 $22 = $15 + $21;
 STACKTOP = sp;return (+$22);
}
function ___sin($x,$y,$iy) {
 $x = +$x;
 $y = +$y;
 $iy = $iy|0;
 var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $0 * $0;
 $2 = $0 * 2.7557313707070068E-6;
 $3 = $2 + -1.9841269829857949E-4;
 $4 = $0 * $3;
 $5 = $4 + 0.0083333333333224895;
 $6 = $0 * $1;
 $7 = $0 * 1.5896909952115501E-10;
 $8 = $7 + -2.5050760253406863E-8;
 $9 = $6 * $8;
 $10 = $9 + $5;
 $11 = $0 * $x;
 $12 = ($iy|0)==(0);
 if ($12) {
  $13 = $0 * $10;
  $14 = $13 + -0.16666666666666632;
  $15 = $11 * $14;
  $16 = $15 + $x;
  $$0 = $16;
  STACKTOP = sp;return (+$$0);
 } else {
  $17 = $y * 0.5;
  $18 = $11 * $10;
  $19 = $17 - $18;
  $20 = $0 * $19;
  $21 = $20 - $y;
  $22 = $11 * -0.16666666666666632;
  $23 = $21 - $22;
  $24 = $x - $23;
  $$0 = $24;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _tgamma($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $$0$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0;
 var $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $__x = 0.0, $den$2$i = 0.0, $dy$0 = 0.0;
 var $dy$1 = 0.0, $num$2$i = 0.0, $r$0 = 0.0, $z$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $4 = tempRet0;
 $5 = ($2>>>0)>(2146435071);
 if ($5) {
  $6 = $x + inf;
  $$0 = $6;
  STACKTOP = sp;return (+$$0);
 }
 $7 = ($2>>>0)<(1016070144);
 if ($7) {
  $8 = 1.0 / $x;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = (+Math_floor((+$x)));
 $10 = $9 == $x;
 if ($10) {
  $11 = ($3|0)==(0);
  if (!($11)) {
   $$0 = nan;
   STACKTOP = sp;return (+$$0);
  }
  $12 = !($x <= 23.0);
  if (!($12)) {
   $13 = (~~(($x)));
   $14 = (($13) + -1)|0;
   $15 = (797680 + ($14<<3)|0);
   $16 = +HEAPF64[$15>>3];
   $$0 = $16;
   STACKTOP = sp;return (+$$0);
  }
 }
 $17 = ($2>>>0)>(1080492031);
 $18 = ($3|0)!=(0);
 if ($17) {
  if ($18) {
   $19 = 1.1754943508222875E-38 / $x;
   $20 = $19;
   $__x = $20;
   $21 = $9 * 0.5;
   $22 = $x * 0.5;
   $23 = (+Math_floor((+$22)));
   $24 = $21 == $23;
   $$ = $24 ? 0.0 : -0.0;
   $$0 = $$;
   STACKTOP = sp;return (+$$0);
  } else {
   $25 = $x * 8.9884656743115795E+307;
   $$0 = $25;
   STACKTOP = sp;return (+$$0);
  }
 }
 if ($18) {
  $26 = -$x;
  $28 = $26;
 } else {
  $28 = $x;
 }
 $27 = $28 + 5.5246800407767296;
 $29 = $28 > 5.5246800407767296;
 if ($29) {
  $30 = $27 - $28;
  $31 = $30 + -5.5246800407767296;
  $dy$0 = $31;
 } else {
  $32 = $27 + -5.5246800407767296;
  $33 = $32 - $28;
  $dy$0 = $33;
 }
 $34 = $28 + -0.5;
 $35 = $28 < 8.0;
 if ($35) {
  $87 = $28 * 0.0;
  $88 = $87 + 2.5066282746310002;
  $89 = $87 + 1.0;
  $90 = $28 * $88;
  $91 = $90 + 210.82427775157936;
  $92 = $28 * $89;
  $93 = $92 + 66.0;
  $94 = $28 * $91;
  $95 = $94 + 8071.6720023658163;
  $96 = $28 * $93;
  $97 = $96 + 1925.0;
  $98 = $28 * $95;
  $99 = $98 + 186056.26539522348;
  $100 = $28 * $97;
  $101 = $100 + 32670.0;
  $102 = $28 * $99;
  $103 = $102 + 2876370.6289353725;
  $104 = $28 * $101;
  $105 = $104 + 357423.0;
  $106 = $28 * $103;
  $107 = $106 + 31426415.585400194;
  $108 = $28 * $105;
  $109 = $108 + 2637558.0;
  $110 = $28 * $107;
  $111 = $110 + 248874557.86205417;
  $112 = $28 * $109;
  $113 = $112 + 13339535.0;
  $114 = $28 * $111;
  $115 = $114 + 1439720407.3117216;
  $116 = $28 * $113;
  $117 = $116 + 45995730.0;
  $118 = $28 * $115;
  $119 = $118 + 6039542586.3520279;
  $120 = $28 * $117;
  $121 = $120 + 105258076.0;
  $122 = $28 * $119;
  $123 = $122 + 17921034426.037209;
  $124 = $28 * $121;
  $125 = $124 + 150917976.0;
  $126 = $28 * $123;
  $127 = $126 + 35711959237.355667;
  $128 = $28 * $125;
  $129 = $128 + 120543840.0;
  $130 = $28 * $127;
  $131 = $130 + 42919803642.649101;
  $132 = $28 * $129;
  $133 = $132 + 39916800.0;
  $134 = $28 * $131;
  $135 = $134 + 23531376880.410759;
  $136 = $28 * $133;
  $137 = $136 + 0.0;
  $den$2$i = $137;$num$2$i = $135;
 } else {
  $36 = 0.0 / $28;
  $37 = $36 + 23531376880.410759;
  $38 = $36 + 0.0;
  $39 = $37 / $28;
  $40 = $39 + 42919803642.649101;
  $41 = $38 / $28;
  $42 = $41 + 39916800.0;
  $43 = $40 / $28;
  $44 = $43 + 35711959237.355667;
  $45 = $42 / $28;
  $46 = $45 + 120543840.0;
  $47 = $44 / $28;
  $48 = $47 + 17921034426.037209;
  $49 = $46 / $28;
  $50 = $49 + 150917976.0;
  $51 = $48 / $28;
  $52 = $51 + 6039542586.3520279;
  $53 = $50 / $28;
  $54 = $53 + 105258076.0;
  $55 = $52 / $28;
  $56 = $55 + 1439720407.3117216;
  $57 = $54 / $28;
  $58 = $57 + 45995730.0;
  $59 = $56 / $28;
  $60 = $59 + 248874557.86205417;
  $61 = $58 / $28;
  $62 = $61 + 13339535.0;
  $63 = $60 / $28;
  $64 = $63 + 31426415.585400194;
  $65 = $62 / $28;
  $66 = $65 + 2637558.0;
  $67 = $64 / $28;
  $68 = $67 + 2876370.6289353725;
  $69 = $66 / $28;
  $70 = $69 + 357423.0;
  $71 = $68 / $28;
  $72 = $71 + 186056.26539522348;
  $73 = $70 / $28;
  $74 = $73 + 32670.0;
  $75 = $72 / $28;
  $76 = $75 + 8071.6720023658163;
  $77 = $74 / $28;
  $78 = $77 + 1925.0;
  $79 = $76 / $28;
  $80 = $79 + 210.82427775157936;
  $81 = $78 / $28;
  $82 = $81 + 66.0;
  $83 = $80 / $28;
  $84 = $83 + 2.5066282746310002;
  $85 = $82 / $28;
  $86 = $85 + 1.0;
  $den$2$i = $86;$num$2$i = $84;
 }
 $138 = $num$2$i / $den$2$i;
 $139 = -$27;
 $140 = (+Math_exp((+$139)));
 $141 = $138 * $140;
 $142 = $x < 0.0;
 if ($142) {
  $143 = $28 * 0.5;
  $144 = (+Math_floor((+$143)));
  $145 = $143 - $144;
  $146 = $145 * 2.0;
  $147 = $146 * 4.0;
  $148 = (~~(($147)));
  $149 = (($148) + 1)|0;
  $150 = (($149|0) / 2)&-1;
  $151 = (+($150|0));
  $152 = $151 * 0.5;
  $153 = $146 - $152;
  $154 = $153 * 3.1415926535897931;
  if ((($150|0) == 2)) {
   $157 = -$154;
   $158 = (+___sin($157,0.0,0));
   $$0$i = $158;
  } else if ((($150|0) == 3)) {
   $159 = (+___cos($154,0.0));
   $160 = -$159;
   $$0$i = $160;
  } else if ((($150|0) == 1)) {
   $156 = (+___cos($154,0.0));
   $$0$i = $156;
  } else {
   $155 = (+___sin($154,0.0,0));
   $$0$i = $155;
  }
  $161 = $28 * $$0$i;
  $162 = $141 * $161;
  $163 = -3.1415926535897931 / $162;
  $164 = -$dy$0;
  $165 = -$34;
  $dy$1 = $164;$r$0 = $163;$z$0 = $165;
 } else {
  $dy$1 = $dy$0;$r$0 = $141;$z$0 = $34;
 }
 $166 = $dy$1 * 6.0246800407767296;
 $167 = $166 * $r$0;
 $168 = $167 / $27;
 $169 = $r$0 + $168;
 $170 = $z$0 * 0.5;
 $171 = (+Math_pow((+$27),(+$170)));
 $172 = $169 * $171;
 $173 = $171 * $172;
 $$0 = $173;
 STACKTOP = sp;return (+$$0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$$i = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i50 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$01$i5$i = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$i3469 = 0, $$02$i72 = 0, $$02$us$i = 0, $$02$us$i32 = 0, $$03$i = 0, $$03$i15 = 0, $$66 = 0, $$67 = 0;
 var $$lcssa75 = 0, $$lcssa76 = 0, $$pre = 0, $$pre$i = 0, $$pre$i22 = 0, $$pre$i28 = 0, $$pre$i9 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$077 = 0;
 var $head$1 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $pshift$0$lcssa = 0, $pshift$078 = 0, $pshift$1 = 0, $pshift$2 = 0, $sum = 0, $sum$i = 0, $sum$i17 = 0, $tmp$i = 0, $tmp$i26 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = ($width>>>0)>(256);
  $15 = $14 ? 256 : $width;
  $16 = ($15|0)==($width|0);
  $17 = $11;
  $19 = 1;$61 = 0;$head$077 = $base;$pshift$078 = 1;
  while(1) {
   $18 = $19 & 3;
   $20 = ($18|0)==(3);
   do {
    if ($20) {
     HEAP32[$ar$i>>2] = $head$077;
     $21 = ($pshift$078|0)>(1);
     L13: do {
      if ($21) {
       $$012$i = $pshift$078;$$03$i = $head$077;$27 = $head$077;$i$04$i = 1;
       while(1) {
        $22 = (($$03$i) + ($10)|0);
        $23 = (($$012$i) + -2)|0;
        $24 = (($lp) + ($23<<2)|0);
        $25 = HEAP32[$24>>2]|0;
        $sum$i = (($25) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $26 = (($$03$i) + ($$sum$i)|0);
        $28 = (FUNCTION_TABLE_iii[$cmp & 127]($27,$26)|0);
        $29 = ($28|0)>(-1);
        if ($29) {
         $30 = (FUNCTION_TABLE_iii[$cmp & 127]($27,$22)|0);
         $31 = ($30|0)>(-1);
         if ($31) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $32 = (FUNCTION_TABLE_iii[$cmp & 127]($26,$22)|0);
        $33 = ($32|0)>(-1);
        $34 = (($i$04$i) + 1)|0;
        $35 = (($ar$i) + ($i$04$i<<2)|0);
        if ($33) {
         HEAP32[$35>>2] = $26;
         $36 = (($$012$i) + -1)|0;
         $$0$be$i = $26;$$01$be$i = $36;
        } else {
         HEAP32[$35>>2] = $22;
         $$0$be$i = $22;$$01$be$i = $23;
        }
        $37 = ($$01$be$i|0)>(1);
        if (!($37)) {
         $i$0$lcssa$i = $34;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$27 = $$pre$i;$i$04$i = $34;
       }
       $38 = ($i$0$lcssa$i|0)<(2);
       if (!($38)) {
        $39 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$39>>2] = $tmp$i;
        if (!($13)) {
         $40 = ($i$0$lcssa$i|0)>(0);
         if ($40) {
          $$02$us$i = $width;$53 = $tmp$i;
         } else {
          $41 = HEAP32[$ar$i>>2]|0;
          _memcpy(($tmp$i|0),($41|0),($15|0))|0;
          if ($16) {
           break;
          } else {
           $$02$i72 = $width;$55 = $15;
          }
          while(1) {
           $54 = (($$02$i72) - ($55))|0;
           $56 = ($54>>>0)>(256);
           $57 = $56 ? 256 : $54;
           _memcpy(($tmp$i|0),($41|0),($57|0))|0;
           $58 = ($54|0)==($57|0);
           if ($58) {
            break L13;
           } else {
            $$02$i72 = $54;$55 = $57;
           }
          }
         }
         while(1) {
          $51 = ($$02$us$i>>>0)>(256);
          $43 = $51 ? 256 : $$02$us$i;
          $52 = HEAP32[$ar$i>>2]|0;
          _memcpy(($53|0),($52|0),($43|0))|0;
          $49 = $52;$i$01$us$i = 0;
          while(1) {
           $45 = (($ar$i) + ($i$01$us$i<<2)|0);
           $46 = (($i$01$us$i) + 1)|0;
           $47 = (($ar$i) + ($46<<2)|0);
           $48 = HEAP32[$47>>2]|0;
           _memcpy(($49|0),($48|0),($43|0))|0;
           $50 = (($49) + ($43)|0);
           HEAP32[$45>>2] = $50;
           $exitcond$i = ($46|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $49 = $48;$i$01$us$i = $46;
           }
          }
          $42 = ($$02$us$i|0)==($43|0);
          if ($42) {
           break L13;
          }
          $44 = (($$02$us$i) - ($43))|0;
          $$pre$i9 = HEAP32[$39>>2]|0;
          $$02$us$i = $44;$53 = $$pre$i9;
         }
        }
       }
      }
     } while(0);
     $59 = $19 >>> 2;
     $60 = $61 << 30;
     $62 = $59 | $60;
     $63 = $61 >>> 2;
     $64 = (($pshift$078) + 2)|0;
     $122 = $62;$182 = $63;$pshift$1 = $64;
    } else {
     $65 = (($pshift$078) + -1)|0;
     $66 = (($lp) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $head$077;
     $69 = (($17) - ($68))|0;
     $70 = ($67>>>0)<($69>>>0);
     L39: do {
      if ($70) {
       HEAP32[$ar$i>>2] = $head$077;
       $71 = ($pshift$078|0)>(1);
       if ($71) {
        $$012$i16 = $pshift$078;$$03$i15 = $head$077;$77 = $head$077;$i$04$i14 = 1;
        while(1) {
         $72 = (($$03$i15) + ($10)|0);
         $73 = (($$012$i16) + -2)|0;
         $74 = (($lp) + ($73<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $sum$i17 = (($75) + ($width))|0;
         $$sum$i18 = (0 - ($sum$i17))|0;
         $76 = (($$03$i15) + ($$sum$i18)|0);
         $78 = (FUNCTION_TABLE_iii[$cmp & 127]($77,$76)|0);
         $79 = ($78|0)>(-1);
         if ($79) {
          $80 = (FUNCTION_TABLE_iii[$cmp & 127]($77,$72)|0);
          $81 = ($80|0)>(-1);
          if ($81) {
           $i$0$lcssa$i24 = $i$04$i14;
           break;
          }
         }
         $82 = (FUNCTION_TABLE_iii[$cmp & 127]($76,$72)|0);
         $83 = ($82|0)>(-1);
         $84 = (($i$04$i14) + 1)|0;
         $85 = (($ar$i) + ($i$04$i14<<2)|0);
         if ($83) {
          HEAP32[$85>>2] = $76;
          $86 = (($$012$i16) + -1)|0;
          $$0$be$i20 = $76;$$01$be$i19 = $86;
         } else {
          HEAP32[$85>>2] = $72;
          $$0$be$i20 = $72;$$01$be$i19 = $73;
         }
         $87 = ($$01$be$i19|0)>(1);
         if (!($87)) {
          $i$0$lcssa$i24 = $84;
          break;
         }
         $$pre$i22 = HEAP32[$ar$i>>2]|0;
         $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$77 = $$pre$i22;$i$04$i14 = $84;
        }
        $88 = ($i$0$lcssa$i24|0)<(2);
        if (!($88)) {
         $89 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
         HEAP32[$89>>2] = $tmp$i26;
         if (!($13)) {
          $90 = ($i$0$lcssa$i24|0)>(0);
          if ($90) {
           $$02$us$i32 = $width;$103 = $tmp$i26;
          } else {
           $91 = HEAP32[$ar$i>>2]|0;
           _memcpy(($tmp$i26|0),($91|0),($15|0))|0;
           if ($16) {
            break;
           } else {
            $$02$i3469 = $width;$105 = $15;
           }
           while(1) {
            $104 = (($$02$i3469) - ($105))|0;
            $106 = ($104>>>0)>(256);
            $107 = $106 ? 256 : $104;
            _memcpy(($tmp$i26|0),($91|0),($107|0))|0;
            $108 = ($104|0)==($107|0);
            if ($108) {
             break L39;
            } else {
             $$02$i3469 = $104;$105 = $107;
            }
           }
          }
          while(1) {
           $101 = ($$02$us$i32>>>0)>(256);
           $93 = $101 ? 256 : $$02$us$i32;
           $102 = HEAP32[$ar$i>>2]|0;
           _memcpy(($103|0),($102|0),($93|0))|0;
           $99 = $102;$i$01$us$i30 = 0;
           while(1) {
            $95 = (($ar$i) + ($i$01$us$i30<<2)|0);
            $96 = (($i$01$us$i30) + 1)|0;
            $97 = (($ar$i) + ($96<<2)|0);
            $98 = HEAP32[$97>>2]|0;
            _memcpy(($99|0),($98|0),($93|0))|0;
            $100 = (($99) + ($93)|0);
            HEAP32[$95>>2] = $100;
            $exitcond$i31 = ($96|0)==($i$0$lcssa$i24|0);
            if ($exitcond$i31) {
             break;
            } else {
             $99 = $98;$i$01$us$i30 = $96;
            }
           }
           $92 = ($$02$us$i32|0)==($93|0);
           if ($92) {
            break L39;
           }
           $94 = (($$02$us$i32) - ($93))|0;
           $$pre$i28 = HEAP32[$89>>2]|0;
           $$02$us$i32 = $94;$103 = $$pre$i28;
          }
         }
        }
       }
      } else {
       _trinkle($head$077,$width,$cmp,$19,$61,$pshift$078,0,$lp);
      }
     } while(0);
     $109 = ($pshift$078|0)==(1);
     if ($109) {
      $110 = $61 << 1;
      $111 = $19 >>> 31;
      $112 = $111 | $110;
      $113 = $19 << 1;
      $122 = $113;$182 = $112;$pshift$1 = 0;
      break;
     } else {
      $114 = ($65>>>0)>(31);
      $115 = (($pshift$078) + -33)|0;
      $$ = $114 ? 0 : $19;
      $$66 = $114 ? $19 : $61;
      $$67 = $114 ? $115 : $65;
      $116 = $$66 << $$67;
      $117 = (32 - ($$67))|0;
      $118 = $$ >>> $117;
      $119 = $118 | $116;
      $120 = $$ << $$67;
      $122 = $120;$182 = $119;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $121 = $122 | 1;
   $123 = (($head$077) + ($width)|0);
   $124 = ($123>>>0)<($11>>>0);
   if ($124) {
    $19 = $121;$61 = $182;$head$077 = $123;$pshift$078 = $pshift$1;
   } else {
    $$lcssa75 = $182;$$lcssa76 = $121;$head$0$lcssa = $123;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa75 = 0;$$lcssa76 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa76,$$lcssa75,$pshift$0$lcssa,0,$lp);
 $126 = $$lcssa76;$128 = $$lcssa75;$head$1 = $head$0$lcssa;$pshift$2 = $pshift$0$lcssa;
 while(1) {
  $125 = ($pshift$2|0)==(1);
  if ($125) {
   $127 = ($126|0)==(1);
   if ($127) {
    $129 = ($128|0)==(0);
    if ($129) {
     break;
    } else {
     label = 52;
    }
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   $130 = ($pshift$2|0)<(2);
   if (!($130)) {
    $162 = $128 << 2;
    $163 = $126 >>> 30;
    $164 = $163 | $162;
    $165 = (($pshift$2) + -2)|0;
    $166 = $126 << 1;
    $167 = $166 & 2147483646;
    $168 = $163 << 31;
    $169 = $167 | $168;
    $170 = $169 ^ 3;
    $171 = $164 >>> 1;
    $172 = (($lp) + ($165<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $sum = (($173) + ($width))|0;
    $$sum2 = (0 - ($sum))|0;
    $174 = (($head$1) + ($$sum2)|0);
    $175 = (($pshift$2) + -1)|0;
    _trinkle($174,$width,$cmp,$170,$171,$175,1,$lp);
    $176 = $171 << 1;
    $177 = $163 & 1;
    $178 = $176 | $177;
    $179 = $170 << 1;
    $180 = $179 | 1;
    $181 = (($head$1) + ($10)|0);
    _trinkle($181,$width,$cmp,$180,$178,$165,1,$lp);
    $126 = $180;$128 = $178;$head$1 = $181;$pshift$2 = $165;
    continue;
   }
  }
  $131 = (($126) + -1)|0;
  $132 = ($131|0)==(0);
  if ($132) {
   $152 = 32;
   label = 62;
  } else {
   $133 = $131 & 1;
   $134 = ($133|0)==(0);
   if ($134) {
    $$02$i$i = $131;$nTrailingZeros$03$i$i = 0;
    while(1) {
     $135 = (($nTrailingZeros$03$i$i) + 1)|0;
     $136 = $$02$i$i >>> 1;
     $137 = $136 & 1;
     $138 = ($137|0)==(0);
     if ($138) {
      $$02$i$i = $136;$nTrailingZeros$03$i$i = $135;
     } else {
      break;
     }
    }
    $139 = ($135|0)==(0);
    if ($139) {
     label = 57;
    } else {
     $149 = $135;
    }
   } else {
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $140 = ($128|0)==(0);
    if ($140) {
     $$01$i5$i = 32;
    } else {
     $141 = $128 & 1;
     $142 = ($141|0)==(0);
     if ($142) {
      $$02$i3$i = $128;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $143 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $144 = $$02$i3$i >>> 1;
       $145 = $144 & 1;
       $146 = ($145|0)==(0);
       if ($146) {
        $$02$i3$i = $144;$nTrailingZeros$03$i2$i = $143;
       } else {
        $$01$i5$i = $143;
        break;
       }
      }
     } else {
      $$01$i5$i = 0;
     }
    }
    $147 = (($$01$i5$i) + 32)|0;
    $148 = ($$01$i5$i|0)==(0);
    $$$i = $148 ? 0 : $147;
    $149 = $$$i;
   }
   $150 = ($149>>>0)>(31);
   if ($150) {
    $152 = $149;
    label = 62;
   } else {
    $$0$i50 = $149;$154 = $126;$157 = $128;$161 = $149;
   }
  }
  if ((label|0) == 62) {
   label = 0;
   $151 = (($152) + -32)|0;
   $$0$i50 = $151;$154 = $128;$157 = 0;$161 = $152;
  }
  $153 = $154 >>> $$0$i50;
  $155 = (32 - ($$0$i50))|0;
  $156 = $157 << $155;
  $158 = $156 | $153;
  $159 = $157 >>> $$0$i50;
  $160 = (($161) + ($pshift$2))|0;
  $$pre = (($head$1) + ($10)|0);
  $126 = $158;$128 = $159;$head$1 = $$pre;$pshift$2 = $160;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$$i = 0, $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa26 = 0, $$01$be$i = 0, $$01$i5$i = 0, $$01$lcssa = 0, $$01$lcssa28 = 0, $$0110 = 0, $$012 = 0, $$012$i = 0, $$02$i$i = 0, $$02$i146 = 0, $$02$i3 = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$us$i = 0, $$02$us$i12 = 0, $$029 = 0;
 var $$03$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i3 = 0, $$pre$i8 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i11 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0;
 var $i$0$lcssa27 = 0, $i$01$us$i = 0, $i$01$us$i10 = 0, $i$011 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond1 = 0, $or$cond18 = 0, $sum = 0, $sum$i = 0, $tmp$i = 0, $tmp$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i6 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond18 = $1 & $2;
 L1: do {
  if ($or$cond18) {
   $$0$lcssa = $head;$$01$lcssa = $pshift;$$02$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  } else {
   $$0110 = $pshift;$$012 = $head;$$029 = $trusty;$24 = $pp$val;$33 = $pp$1$val;$7 = $head;$i$011 = 1;
   while(1) {
    $3 = (($lp) + ($$0110<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$012) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 127]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$0$lcssa = $$012;$$01$lcssa = $$0110;$$02$lcssa = $$029;$i$0$lcssa = $i$011;
     label = 18;
     break L1;
    }
    $10 = ($$029|0)==(0);
    $11 = ($$0110|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$012) + ($0)|0);
     $13 = (($$0110) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 127]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$012) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 127]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
    }
    $21 = (($i$011) + 1)|0;
    $22 = (($ar) + ($i$011<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($24) + -1)|0;
    $25 = ($23|0)==(0);
    if ($25) {
     $46 = 32;
     label = 15;
    } else {
     $26 = $23 & 1;
     $27 = ($26|0)==(0);
     if ($27) {
      $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $28 = (($nTrailingZeros$03$i$i) + 1)|0;
       $29 = $$02$i$i >>> 1;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
       } else {
        break;
       }
      }
      $32 = ($28|0)==(0);
      if ($32) {
       label = 10;
      } else {
       $43 = $28;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$01$i5$i = 32;
      } else {
       $35 = $33 & 1;
       $36 = ($35|0)==(0);
       if ($36) {
        $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$01$i5$i = $37;
          break;
         }
        }
       } else {
        $$01$i5$i = 0;
       }
      }
      $41 = (($$01$i5$i) + 32)|0;
      $42 = ($$01$i5$i|0)==(0);
      $$$i = $42 ? 0 : $41;
      $43 = $$$i;
     }
     $44 = ($43>>>0)>(31);
     if ($44) {
      $46 = $43;
      label = 15;
     } else {
      $$0$i = $43;$48 = $24;$51 = $33;$55 = $43;
     }
    }
    if ((label|0) == 15) {
     label = 0;
     $45 = (($46) + -32)|0;
     $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
    }
    $47 = $48 >>> $$0$i;
    $49 = (32 - ($$0$i))|0;
    $50 = $51 << $49;
    $52 = $50 | $47;
    $53 = $51 >>> $$0$i;
    $54 = (($55) + ($$0110))|0;
    $56 = ($52|0)==(1);
    $57 = ($53|0)==(0);
    $or$cond1 = $56 & $57;
    if ($or$cond1) {
     $$0$lcssa26 = $6;$$01$lcssa28 = $54;$i$0$lcssa27 = $21;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$0110 = $54;$$012 = $6;$$029 = 0;$24 = $52;$33 = $53;$7 = $$pre;$i$011 = $21;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $58 = ($$02$lcssa|0)==(0);
  if ($58) {
   $$0$lcssa26 = $$0$lcssa;$$01$lcssa28 = $$01$lcssa;$i$0$lcssa27 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $59 = ($i$0$lcssa27|0)<(2);
 L31: do {
  if (!($59)) {
   $60 = (($ar) + ($i$0$lcssa27<<2)|0);
   HEAP32[$60>>2] = $tmp$i6;
   $61 = ($width|0)==(0);
   if (!($61)) {
    $62 = ($i$0$lcssa27|0)>(0);
    if ($62) {
     $$02$us$i12 = $width;$78 = $tmp$i6;
    } else {
     $63 = ($width>>>0)>(256);
     $64 = $63 ? 256 : $width;
     $65 = HEAP32[$ar>>2]|0;
     _memcpy(($tmp$i6|0),($65|0),($64|0))|0;
     $66 = ($64|0)==($width|0);
     if ($66) {
      break;
     } else {
      $$02$i146 = $width;$80 = $64;
     }
     while(1) {
      $79 = (($$02$i146) - ($80))|0;
      $81 = ($79>>>0)>(256);
      $82 = $81 ? 256 : $79;
      _memcpy(($tmp$i6|0),($65|0),($82|0))|0;
      $83 = ($79|0)==($82|0);
      if ($83) {
       break L31;
      } else {
       $$02$i146 = $79;$80 = $82;
      }
     }
    }
    while(1) {
     $76 = ($$02$us$i12>>>0)>(256);
     $68 = $76 ? 256 : $$02$us$i12;
     $77 = HEAP32[$ar>>2]|0;
     _memcpy(($78|0),($77|0),($68|0))|0;
     $74 = $77;$i$01$us$i10 = 0;
     while(1) {
      $70 = (($ar) + ($i$01$us$i10<<2)|0);
      $71 = (($i$01$us$i10) + 1)|0;
      $72 = (($ar) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      _memcpy(($74|0),($73|0),($68|0))|0;
      $75 = (($74) + ($68)|0);
      HEAP32[$70>>2] = $75;
      $exitcond$i11 = ($71|0)==($i$0$lcssa27|0);
      if ($exitcond$i11) {
       break;
      } else {
       $74 = $73;$i$01$us$i10 = $71;
      }
     }
     $67 = ($$02$us$i12|0)==($68|0);
     if ($67) {
      break L31;
     }
     $69 = (($$02$us$i12) - ($68))|0;
     $$pre$i8 = HEAP32[$60>>2]|0;
     $$02$us$i12 = $69;$78 = $$pre$i8;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa26;
 $84 = ($$01$lcssa28|0)>(1);
 L45: do {
  if ($84) {
   $$012$i = $$01$lcssa28;$$03$i = $$0$lcssa26;$90 = $$0$lcssa26;$i$04$i = 1;
   while(1) {
    $85 = (($$03$i) + ($0)|0);
    $86 = (($$012$i) + -2)|0;
    $87 = (($lp) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $sum$i = (($88) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $89 = (($$03$i) + ($$sum$i)|0);
    $91 = (FUNCTION_TABLE_iii[$cmp & 127]($90,$89)|0);
    $92 = ($91|0)>(-1);
    if ($92) {
     $93 = (FUNCTION_TABLE_iii[$cmp & 127]($90,$85)|0);
     $94 = ($93|0)>(-1);
     if ($94) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $95 = (FUNCTION_TABLE_iii[$cmp & 127]($89,$85)|0);
    $96 = ($95|0)>(-1);
    $97 = (($i$04$i) + 1)|0;
    $98 = (($ar$i) + ($i$04$i<<2)|0);
    if ($96) {
     HEAP32[$98>>2] = $89;
     $99 = (($$012$i) + -1)|0;
     $$0$be$i = $89;$$01$be$i = $99;
    } else {
     HEAP32[$98>>2] = $85;
     $$0$be$i = $85;$$01$be$i = $86;
    }
    $100 = ($$01$be$i|0)>(1);
    if (!($100)) {
     $i$0$lcssa$i = $97;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$90 = $$pre$i;$i$04$i = $97;
   }
   $101 = ($i$0$lcssa$i|0)<(2);
   if ($101) {
    $126 = $tmp$i;
   } else {
    $102 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$102>>2] = $tmp$i;
    $103 = ($width|0)==(0);
    if ($103) {
     $126 = $tmp$i;
    } else {
     $104 = ($i$0$lcssa$i|0)>(0);
     if ($104) {
      $$02$us$i = $width;$120 = $tmp$i;
     } else {
      $105 = ($width>>>0)>(256);
      $106 = $105 ? 256 : $width;
      $107 = HEAP32[$ar$i>>2]|0;
      _memcpy(($tmp$i|0),($107|0),($106|0))|0;
      $108 = ($106|0)==($width|0);
      if ($108) {
       $126 = $tmp$i;
       break;
      } else {
       $$02$i3 = $width;$122 = $106;
      }
      while(1) {
       $121 = (($$02$i3) - ($122))|0;
       $123 = ($121>>>0)>(256);
       $124 = $123 ? 256 : $121;
       _memcpy(($tmp$i|0),($107|0),($124|0))|0;
       $125 = ($121|0)==($124|0);
       if ($125) {
        $126 = $tmp$i;
        break L45;
       } else {
        $$02$i3 = $121;$122 = $124;
       }
      }
     }
     while(1) {
      $118 = ($$02$us$i>>>0)>(256);
      $110 = $118 ? 256 : $$02$us$i;
      $119 = HEAP32[$ar$i>>2]|0;
      _memcpy(($120|0),($119|0),($110|0))|0;
      $116 = $119;$i$01$us$i = 0;
      while(1) {
       $112 = (($ar$i) + ($i$01$us$i<<2)|0);
       $113 = (($i$01$us$i) + 1)|0;
       $114 = (($ar$i) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       _memcpy(($116|0),($115|0),($110|0))|0;
       $117 = (($116) + ($110)|0);
       HEAP32[$112>>2] = $117;
       $exitcond$i = ($113|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $116 = $115;$i$01$us$i = $113;
       }
      }
      $109 = ($$02$us$i|0)==($110|0);
      if ($109) {
       $126 = $tmp$i;
       break L45;
      }
      $111 = (($$02$us$i) - ($110))|0;
      $$pre$i3 = HEAP32[$102>>2]|0;
      $$02$us$i = $111;$120 = $$pre$i3;
     }
    }
   }
  } else {
   $126 = $tmp$i;
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $8 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $8;
     break L5;
    } else {
     $$026 = $8;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$025 = 0, $$03$lcssa = 0, $$034 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$025 = $c;$13 = $0;
   while(1) {
    $12 = $13&255;
    $14 = $12 & 31;
    $15 = 1 << $14;
    $16 = $12 >>> 5;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$025) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$025 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$034 = $s;$27 = $10;
     while(1) {
      $26 = $27&255;
      $28 = $26 >>> 5;
      $29 = (($byteset) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $26 & 31;
      $32 = 1 << $31;
      $33 = $30 & $32;
      $34 = ($33|0)==(0);
      $24 = (($$034) + 1|0);
      if (!($34)) {
       $$03$lcssa = $$034;
       break L7;
      }
      $23 = HEAP8[$24>>0]|0;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       $$03$lcssa = $24;
       break;
      } else {
       $$034 = $24;$27 = $23;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 STACKTOP = sp;return ($$0|0);
}
function _strpbrk($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcspn($s,$b)|0);
 $1 = (($s) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ? $1 : 0;
 STACKTOP = sp;return ($4|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[797864>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((797864 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((797864 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[797864>>2] = $22;
     } else {
      $23 = HEAP32[((797864 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((797864 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((797864 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((797864 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[797864>>2] = $74;
      } else {
       $75 = HEAP32[((797864 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((797864 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((797864 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((797864 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[797864>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[797864>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((797864 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((797864 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((797864 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((797864 + 8|0))>>2] = $81;
     HEAP32[((797864 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((797864 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((797864 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((797864 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((797864 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((797864 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((797864 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((797864 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((797864 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((797864 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((797864 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((797864 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((797864 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((797864 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[797864>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[797864>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((797864 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((797864 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((797864 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((797864 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((797864 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((797864 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((797864 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((797864 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((797864 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((797864 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((797864 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((797864 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((797864 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((797864 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((797864 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((797864 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((797864 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((797864 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[797864>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[797864>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((797864 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((797864 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((797864 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((797864 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((797864 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((797864 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L224: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L224;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((797864 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((797864 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((797864 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((797864 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((797864 + 20|0))>>2] = $516;
   HEAP32[((797864 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((797864 + 8|0))>>2] = 0;
   HEAP32[((797864 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((797864 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((797864 + 12|0))>>2] = $530;
  $531 = HEAP32[((797864 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((797864 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[798336>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((798336 + 8|0))>>2] = $540;
    HEAP32[((798336 + 4|0))>>2] = $540;
    HEAP32[((798336 + 12|0))>>2] = -1;
    HEAP32[((798336 + 16|0))>>2] = -1;
    HEAP32[((798336 + 20|0))>>2] = 0;
    HEAP32[((797864 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[798336>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((798336 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((797864 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((797864 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((797864 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((797864 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((797864 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((797864 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((798336 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((797864 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((797864 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((798336 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((797864 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((797864 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((797864 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((797864 + 432|0))>>2] = $633;
  $634 = HEAP32[((797864 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((797864 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((797864 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((797864 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((797864 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((797864 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((797864 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((797864 + 460|0))>>2] = 0;
    $641 = HEAP32[798336>>2]|0;
    HEAP32[((797864 + 36|0))>>2] = $641;
    HEAP32[((797864 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((797864 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((797864 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((797864 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((797864 + 24|0))>>2] = $654;
    HEAP32[((797864 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((798336 + 16|0))>>2]|0;
    HEAP32[((797864 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((797864 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((797864 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((797864 + 24|0))>>2] = $684;
       HEAP32[((797864 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((798336 + 16|0))>>2]|0;
       HEAP32[((797864 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((797864 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((797864 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((797864 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((797864 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((797864 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((797864 + 12|0))>>2] = $732;
        HEAP32[((797864 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((797864 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((797864 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((797864 + 8|0))>>2] = $738;
         HEAP32[((797864 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((797864 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((797864 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[797864>>2]|0;
            $765 = $764 & $763;
            HEAP32[797864>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((797864 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((797864 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((797864 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((797864 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((797864 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((797864 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((797864 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((797864 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((797864 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((797864 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((797864 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[797864>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[797864>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((797864 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((797864 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((797864 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((797864 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((797864 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((797864 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((797864 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((797864 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((797864 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((797864 + 24|0))>>2] = $958;
    HEAP32[((797864 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((798336 + 16|0))>>2]|0;
    HEAP32[((797864 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((797864 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((797864 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((797864 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((797864 + 448|0))+12>>2]|0;
    HEAP32[((797864 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((797864 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((797864 + 460|0))>>2] = 0;
    HEAP32[((797864 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((797864 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[797864>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[797864>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((797864 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((797864 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((797864 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((797864 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((797864 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((797864 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((797864 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((797864 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((797864 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((797864 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((797864 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((797864 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((797864 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((797864 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((797864 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((797864 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[797864>>2]|0;
     $36 = $35 & $34;
     HEAP32[797864>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((797864 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((797864 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((797864 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((797864 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((797864 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((797864 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((797864 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((797864 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((797864 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((797864 + 12|0))>>2] = $122;
   HEAP32[((797864 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((797864 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((797864 + 20|0))>>2] = 0;
   HEAP32[((797864 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((797864 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((797864 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((797864 + 8|0))>>2] = $130;
   HEAP32[((797864 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((797864 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((797864 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[797864>>2]|0;
     $154 = $153 & $152;
     HEAP32[797864>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((797864 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((797864 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((797864 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((797864 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((797864 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((797864 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((797864 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((797864 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((797864 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((797864 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((797864 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((797864 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((797864 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[797864>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[797864>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((797864 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((797864 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((797864 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((797864 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((797864 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((797864 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((797864 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((797864 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((797864 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((797864 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((797864 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((797864 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (798360 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (798360 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$87 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $88 = ($87|0)<(0);
     $89 = $88 << 31 >> 31;
     $90 = $87 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $87;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($87|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$87 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $251 = $283;$254 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $251 = $281;$254 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (798624 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (798360 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (798360 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$151 = 0;$154 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$151 = 0;$154 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $152 = ($151>>>0)>($147>>>0);
    $153 = ($151|0)==($147|0);
    $155 = ($154>>>0)>($146>>>0);
    $156 = $153 & $155;
    $157 = $152 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $154;$285 = $151;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $154;$159 = $151;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (798360 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (798360 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (798360 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $201 = $287;$204 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $202 = ($201>>>0)>($200>>>0);
     $203 = ($201|0)==($200|0);
     $205 = ($204>>>0)>($199>>>0);
     $206 = $203 & $205;
     $207 = $202 | $206;
     if ($207) {
      $$121 = $$122;$284 = $204;$285 = $201;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($204|0),($201|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $204;$285 = $201;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (798360 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $201 = $219;$204 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (798360 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (798360 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $251 = $1;$254 = $0;
  } else {
   $251 = $285;$254 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $252 = ($251>>>0)<($1>>>0);
 $253 = ($251|0)==($1|0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = $253 & $255;
 $257 = $252 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($251>>>0)>($1>>>0);
  $267 = ($251|0)==($1|0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $254 ^ $neg$0;
 $275 = $251 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (798640 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (798656 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $168 = 0;$171 = 0;$211 = 0;$213 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L71: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $153 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $153 = $152;
          }
          $154 = ($153|0)==(48);
          if (!($154)) {
           $168 = 0;$171 = 0;$211 = $155;$213 = $156;$c$2$i = $153;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L71;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $168 = 0;$171 = 0;$211 = 0;$213 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L84: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L84;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $171;$713 = $168;$714 = $171;$715 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L84;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $169 = ($168|0)<(0);
        $170 = ($168|0)==(0);
        $172 = ($171>>>0)<(8);
        $173 = $170 & $172;
        $174 = $169 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($168|0)<(0);
          $178 = ($168|0)==(0);
          $179 = ($171>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($171|0),($168|0),1,0)|0);
        $191 = tempRet0;
        $712 = $211;$713 = $213;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $168 = $715;$171 = $714;$211 = $712;$213 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $168 = $715;$171 = $714;$211 = $712;$213 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $212 = $210 ? $171 : $211;
      $214 = $210 ? $168 : $213;
      $215 = ($168|0)<(0);
      $216 = ($168|0)==(0);
      $217 = ($171>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $171;$222 = $168;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($212|0),($214|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.7976931348623157E+308;
       $265 = $264 * 1.7976931348623157E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.2250738585072014E-308;
       $278 = $277 * 2.2250738585072014E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L173: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L173;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L187: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L187;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$385 = $722;$386 = $724;$388 = $723;$389 = $725;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$385 = $716;$386 = 0;$388 = $717;$389 = 0;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $387 = $384 ? $386 : $385;
     $390 = $384 ? $389 : $388;
     $$388$i = $$3$lcssa$i;$405 = $387;$406 = $390;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $419 = $407;$422 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $419 = $405;$422 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $419 = $405;$422 = $406;
      }
     } else {
      $419 = $405;$422 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $420 = ($419|0)==($421|0);
    $423 = ($422|0)==($424|0);
    $425 = $420 & $423;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($422|0)>($439|0);
    $441 = ($422|0)==($439|0);
    $442 = ($419>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.7976931348623157E+308;
     $448 = $447 * 1.7976931348623157E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($422|0)<($451|0);
    $453 = ($422|0)==($451|0);
    $454 = ($419>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.2250738585072014E-308;
     $460 = $459 * 2.2250738585072014E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($419|0);
      $470 = ($419|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($419|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($419|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($419))|0;
        $482 = (798672 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($419, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($419) + -10)|0;
       $495 = (798672 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($419|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $419;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($419|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (798672 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $419;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $419;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L285: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L285;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L316: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $626 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (798664 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $593 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $594 = ($593|0)<(2);
        if ($594) {
         $i$025$i = $593;
        } else {
         $i$1$i = $593;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L316;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $627 = ($626|0)==($a$5$i|0);
      if (!($627)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $626;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($626) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $626;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $644 = (($687) - ($emin$0$ph))|0;
    $711 = ($644|0)<($bits$0$ph|0);
    if ($711) {
     $645 = ($644|0)<(0);
     $$$i22 = $645 ? 0 : $644;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($644|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $75 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $75 = $74;
    }
    $76 = ($75|0)==(40);
    if ($76) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 127]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 127]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $7 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   } else if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $64 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $64 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $64 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $65 = ($64<<24>>24)==(42);
  do {
   if ($65) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $64 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((798704 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$228 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$228 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($228|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $228;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $307 = $207;$310 = $228;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 799168;
     label = 94;
    } else {
     $$13 = $252 ? 799168 : ((799168 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $307 = $207;$310 = $228;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($228|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($228|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $276 = $271;$278 = $270;$pl$0 = 1;$prefix$0 = 799168;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 799168 : ((799168 + 2|0));
     $276 = $207;$278 = $228;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $276 = $207;$278 = $228;$pl$0 = 1;$prefix$0 = ((799168 + 1|0));
     label = 89;
    }
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 799184 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $228;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($228|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 799192;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((799192 + 1|0)) : ((799192 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((799192 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 799216 : 799224;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 799232 : 799240;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (799248 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (799248 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (799248 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (799248 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$581 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$581 = $$pre$i;
    }
    $582 = ($581|0)<(0);
    $$31$i = $582 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $590 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $591 = ($590|0)>(29);
      $592 = $591 ? 29 : $590;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $590 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L242: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $630 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $630;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $631 = ($630|0)==(0);
          if ($631) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $630;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L242;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(799264,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(799264,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 117:  {
    $276 = $207;$278 = $228;$pl$0 = 0;$prefix$0 = 799168;
    label = 89;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $228;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 799168;$z$2 = $2;
    break;
   }
   default: {
    $1053 = $228;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 799168;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $229 = ($228|0)==(0);
    $230 = $227 & $229;
    if ($230) {
     $307 = $207;$310 = $228;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 799168;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $228;
     while(1) {
      $231 = $232 & 15;
      $233 = (799248 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $307 = $207;$310 = $228;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 799168;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (799168 + ($247)|0);
      $307 = $207;$310 = $228;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $277 = $276;
    $279 = ($278>>>0)>(0);
    $280 = ($278|0)==(0);
    $281 = ($277>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $279 | $282;
    if ($283) {
     $$05$i = $2;$284 = $277;$285 = $278;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $277;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $307 = $276;$310 = $278;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $307 = $276;$310 = $278;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $228;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 799168;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $228;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 799168;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $334 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $335 = ($334>>>0)<($p$4296>>>0);
     if ($335) {
      $i$0168 = $334;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $334;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $308 = $307;
   $309 = ($308|0)==(0);
   $311 = ($310|0)==(0);
   $312 = $309 & $311;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $310;$1054 = $307;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $310;$1054 = $307;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L479: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L479;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L479;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $228;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L531: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L531;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L531;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L531;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L531;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L531;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L531;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L531;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L531;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L531;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L531;
       break;
      }
      default: {
       break L531;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1040 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1041 = ($1040|0)<(10);
   if ($1041) {
    $i$388 = $1040;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=799272+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$0$lcssa = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$04;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      break;
     }
    }
    $13 = (($l$03) + 1|0);
    $14 = (($r$04) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre$pre = HEAP8[$l$03>>0]|0;
   $19 = $$pre$pre;$r$0$lcssa = $r$04;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 STACKTOP = sp;return ($24|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
  STACKTOP = sp;return ($$04|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $21 = 0;$r$0$lcssa = $_r;
  } else {
   $3 = $1&255;
   $$08$in = $n;$7 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $4 = HEAP8[$r$07>>0]|0;
    $5 = ($4<<24>>24)==(0);
    $6 = ($$08|0)==(0);
    $or$cond = $5 | $6;
    if ($or$cond) {
     $21 = $7;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = ($7<<24>>24)==($4<<24>>24);
    if (!($8)) {
     $10 = (_tolower($9)|0);
     $11 = HEAP8[$r$07>>0]|0;
     $12 = $11&255;
     $13 = (_tolower($12)|0);
     $14 = ($10|0)==($13|0);
     if (!($14)) {
      break;
     }
    }
    $15 = (($l$06) + 1|0);
    $16 = (($r$07) + 1|0);
    $17 = HEAP8[$15>>0]|0;
    $18 = $17&255;
    $19 = ($17<<24>>24)==(0);
    if ($19) {
     $21 = 0;$r$0$lcssa = $16;
     break L4;
    } else {
     $$08$in = $$08;$7 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
    }
   }
   $$pre$pre = HEAP8[$l$06>>0]|0;
   $21 = $$pre$pre;$r$0$lcssa = $r$07;
  }
 } while(0);
 $20 = $21&255;
 $22 = (_tolower($20)|0);
 $23 = HEAP8[$r$0$lcssa>>0]|0;
 $24 = $23&255;
 $25 = (_tolower($24)|0);
 $26 = (($22) - ($25))|0;
 $$04 = $26;
 STACKTOP = sp;return ($$04|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$4 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $5 = ($4<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $5;
    if (!($or$cond4)) {
     $11 = $4;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$4 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < 20) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        return 0;
      }
      i = i+1|0;
    }
    _putchar(116);_putchar(111);_putchar(111);_putchar(32);_putchar(109);_putchar(97);_putchar(110);_putchar(121);_putchar(32);_putchar(115);_putchar(101);_putchar(116);_putchar(106);_putchar(109);_putchar(112);_putchar(115);_putchar(32);_putchar(105);_putchar(110);_putchar(32);_putchar(97);_putchar(32);_putchar(102);_putchar(117);_putchar(110);_putchar(99);_putchar(116);_putchar(105);_putchar(111);_putchar(110);_putchar(32);_putchar(99);_putchar(97);_putchar(108);_putchar(108);_putchar(44);_putchar(32);_putchar(98);_putchar(117);_putchar(105);_putchar(108);_putchar(100);_putchar(32);_putchar(119);_putchar(105);_putchar(116);_putchar(104);_putchar(32);_putchar(97);_putchar(32);_putchar(104);_putchar(105);_putchar(103);_putchar(104);_putchar(101);_putchar(114);_putchar(32);_putchar(118);_putchar(97);_putchar(108);_putchar(117);_putchar(101);_putchar(32);_putchar(102);_putchar(111);_putchar(114);_putchar(32);_putchar(77);_putchar(65);_putchar(88);_putchar(95);_putchar(83);_putchar(69);_putchar(84);_putchar(74);_putchar(77);_putchar(80);_putchar(83);_putchar(10);
    abort(0);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _testSetjmp(id, table) {
    id = id|0;
    table = table|0;
    var i = 0, curr = 0;
    while ((i|0) < 20) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viiidiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiidiii[index&127](a1|0,a2|0,a3|0,+a4,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&127]()|0;
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&127](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
  }


  function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    return FUNCTION_TABLE_iiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&127](a1|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&63]();
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
  }


  function dynCall_iiiid(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
    return FUNCTION_TABLE_iiiid[index&127](a1|0,a2|0,a3|0,+a4)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(1);return 0; }
  function b2(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiidiii(2); }
  function b3(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3); }
  function b4() { ; nullFunc_i(4);return 0; }
  function b5(p0) { p0 = p0|0; nullFunc_vi(5); }
  function b6(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(6); }
  function _emscripten_longjmp__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0); }
  function b7(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(7);return 0; }
  function b8(p0) { p0 = p0|0; nullFunc_ii(8);return 0; }
  function _chdir__wrapper(p0) { p0 = p0|0; return _chdir(p0|0)|0; }
  function b9(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0; }
  function _fgets__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fgets(p0|0,p1|0,p2|0)|0; }
  function b10(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(10); }
  function b11() { ; nullFunc_v(11); }
  function b12(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(12);return 0; }
  function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
  function b13(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_iiiid(13);return 0; }
  function b14(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(14);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_find_greatest_power
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_iiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_div_remainder,b1,b1,b1,b1,b1,b1
  ,b1,b1,_poly_in_v,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_viiidiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,_simp_ssub,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_viiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_simpb_side,b3];
  var FUNCTION_TABLE_i = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_next_espace,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_vi = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_error,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_fphandler,b5,_free,_set_error_level,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_vii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_emscripten_longjmp__wrapper,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_uf_repeat,_elim_loop,b6,b6,b6,_uf_neg_help,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,_uf_simp,b6,b6,b6,b6,b6,_uf_simp_no_repeat,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_solve_sub,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_ii = [b8,_approximate_cmd,_clear_cmd,_code_cmd,_compare_cmd,_copy_cmd,_derivative_cmd,_display_cmd,_divide_cmd,_echo_cmd,_eliminate_cmd,_extrema_cmd,_factor_cmd,_for_cmd,_fraction_cmd,_help_cmd,_imaginary_cmd,_integrate_cmd,_laplace_cmd,_limit_cmd,_list_cmd,_nintegrate_cmd,_optimize_cmd,_pause_cmd,_product_cmd,_read_cmd,_real_cmd,_replace_cmd,_roots_cmd
  ,_save_cmd,_set_cmd,_simplify_cmd,_solve_cmd,_sum_cmd,_taylor_cmd,_unfactor_cmd,_variables_cmd,_version_cmd,b8,b8,b8,b8,b8,b8,b8,b8,_skip_param,b8,_make_fractions_and_group,_factor_int_equation,b8,_flist_equation_string,b8,_flist_equation,b8,b8,_display_process,b8,_chdir__wrapper,_output_current_directory,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,___strdup,b8,b8,_process,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_iiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,_sn_write,b9,b9,b9,b9,b9,b9,_strncasecmp,b9,_get_range,b9,b9,b9,b9,b9,b9,b9,_fgets__wrapper,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_super_factor,b9,b9,b9,_poly_factor,b9,b9,b9,b9,_strncmp,b9,b9
  ,b9,b9,b9,_differentiate,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_factorv,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_v = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_clean_up,b11,b11,b11,b11,b11,b11,b11,b11,_free_result_str,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_iii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_printf__wrapper,b12,b12,_strcmp,_strcasecmp,b12,b12,b12,b12,b12,b12,b12,_list_equation,b12,_vcmp,b12,b12,b12,b12
  ,b12,_simpb_vcmp,_make_simple_fractions,b12,_simp_loop,b12,_uf_power,_factor_power,_rationalize,_unsimp_power,_uf_tsimp,_uf_pplus,b12,b12,_mod_simp,_simp_i,_uf_times,b12,b12,_poly_gcd_simp,b12,_factor_imaginary,b12,b12,_simp_constant_power,_integer_root_simp,b12,b12,_vcmp888,b12
  ,b12,_level1_plus_count,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_parse,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12];
  var FUNCTION_TABLE_iiiid = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,_factor_plus,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_iiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_poly_div_sub,b14,b14,b14
  ,b14,b14,b14,b14,_poly_gcd,_save_factors,b14,b14,_integrate_sub,_inv_laplace_sub,_laplace_sub,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14];

  return { _saveSetjmp: _saveSetjmp, _malloc: _malloc, _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _testSetjmp: _testSetjmp, _matho_parse: _matho_parse, _memmove: _memmove, _matho_clear: _matho_clear, _init: _init, _strlen: _strlen, _free_mem: _free_mem, _memset: _memset, _matho_process: _matho_process, _i64Add: _i64Add, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _matho_init: _matho_init, _solve_function: _solve_function, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiidiii: dynCall_viiidiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii, dynCall_iiiid: dynCall_iiiid, dynCall_iiiiii: dynCall_iiiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__matho_parse = asm["_matho_parse"]; asm["_matho_parse"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matho_parse.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__matho_clear = asm["_matho_clear"]; asm["_matho_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matho_clear.apply(null, arguments);
};

var real__init = asm["_init"]; asm["_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__init.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__free_mem = asm["_free_mem"]; asm["_free_mem"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free_mem.apply(null, arguments);
};

var real__matho_process = asm["_matho_process"]; asm["_matho_process"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matho_process.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__matho_init = asm["_matho_init"]; asm["_matho_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matho_init.apply(null, arguments);
};

var real__solve_function = asm["_solve_function"]; asm["_solve_function"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__solve_function.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};

var real__emscripten_replace_memory = asm["_emscripten_replace_memory"]; asm["_emscripten_replace_memory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_replace_memory.apply(null, arguments);
};
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _matho_parse = Module["_matho_parse"] = asm["_matho_parse"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _matho_clear = Module["_matho_clear"] = asm["_matho_clear"];
var _init = Module["_init"] = asm["_init"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free_mem = Module["_free_mem"] = asm["_free_mem"];
var _memset = Module["_memset"] = asm["_memset"];
var _matho_process = Module["_matho_process"] = asm["_matho_process"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _matho_init = Module["_matho_init"] = asm["_matho_init"];
var _solve_function = Module["_solve_function"] = asm["_solve_function"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiidiii = Module["dynCall_viiidiii"] = asm["dynCall_viiidiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiid = Module["dynCall_iiiid"] = asm["dynCall_iiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



